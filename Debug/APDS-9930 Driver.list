
APDS-9930 Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009154  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  080092e8  080092e8  0000a2e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009768  08009768  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009768  08009768  0000a768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009770  08009770  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009770  08009770  0000a770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009774  08009774  0000a774  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009778  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b4  200001d4  0800994c  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000488  0800994c  0000b488  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cac8  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd7  00000000  00000000  00017ccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  00019aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000080b  00000000  00000000  0001a510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c073  00000000  00000000  0001ad1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eecf  00000000  00000000  00036d8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f1d2  00000000  00000000  00045c5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e4e2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f3c  00000000  00000000  000e4e74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e8db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092cc 	.word	0x080092cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080092cc 	.word	0x080092cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000
 8000cf4:	00000000 	.word	0x00000000

08000cf8 <APDS9930_Init>:

/*
 * INITIALIZATION
 */

uint8_t APDS9930_Init (APDS9930_t* device, I2C_HandleTypeDef* i2c_handle) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
	// Set struct parameters
	device->i2c_handle = i2c_handle;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	601a      	str	r2, [r3, #0]

	device->lux = 0.0f;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
	device->prox = 0.0f;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]

	Ch0_data = 0;
 8000d18:	4b79      	ldr	r3, [pc, #484]	@ (8000f00 <APDS9930_Init+0x208>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	801a      	strh	r2, [r3, #0]
	Ch1_data = 0;
 8000d1e:	4b79      	ldr	r3, [pc, #484]	@ (8000f04 <APDS9930_Init+0x20c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	801a      	strh	r2, [r3, #0]

	IAC1 = 0.0f;
 8000d24:	4b78      	ldr	r3, [pc, #480]	@ (8000f08 <APDS9930_Init+0x210>)
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
	IAC2 = 0.0f;
 8000d2c:	4b77      	ldr	r3, [pc, #476]	@ (8000f0c <APDS9930_Init+0x214>)
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]

	IAC = 0.0f;
 8000d34:	4b76      	ldr	r3, [pc, #472]	@ (8000f10 <APDS9930_Init+0x218>)
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
	LPC = 0.0f;
 8000d3c:	4b75      	ldr	r3, [pc, #468]	@ (8000f14 <APDS9930_Init+0x21c>)
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]

	// Store number of transaction errors ( to be returned at the end of the function )
	uint8_t err_num = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;

	// Check ID register (p.23)
	uint8_t reg_data;
	status = APDS9930_ReadRegister (device, APDS9930_REG_ID, &reg_data);
 8000d48:	f107 030d 	add.w	r3, r7, #13
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	2112      	movs	r1, #18
 8000d50:	6878      	ldr	r0, [r7, #4]
 8000d52:	f000 f9e2 	bl	800111a <APDS9930_ReadRegister>
 8000d56:	4603      	mov	r3, r0
 8000d58:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000d5a:	7bbb      	ldrb	r3, [r7, #14]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	bf14      	ite	ne
 8000d60:	2301      	movne	r3, #1
 8000d62:	2300      	moveq	r3, #0
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	461a      	mov	r2, r3
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	73fb      	strb	r3, [r7, #15]

	if (reg_data != APDS9930_ID_1 && reg_data != APDS9930_ID_2)	return 255;
 8000d6e:	7b7b      	ldrb	r3, [r7, #13]
 8000d70:	2b39      	cmp	r3, #57	@ 0x39
 8000d72:	d004      	beq.n	8000d7e <APDS9930_Init+0x86>
 8000d74:	7b7b      	ldrb	r3, [r7, #13]
 8000d76:	2b12      	cmp	r3, #18
 8000d78:	d001      	beq.n	8000d7e <APDS9930_Init+0x86>
 8000d7a:	23ff      	movs	r3, #255	@ 0xff
 8000d7c:	e0b7      	b.n	8000eee <APDS9930_Init+0x1f6>

	// ENABLE : WEN, PEN, AEN, and PON are enabled. FOR THE MOMENT PIEN and AIEN are disaled;
	reg_data = 0x0F;
 8000d7e:	230f      	movs	r3, #15
 8000d80:	737b      	strb	r3, [r7, #13]
	// reg_data = 0x3F;
	status = APDS9930_WriteRegister (device, APDS9930_REG_ENABLE, &reg_data);
 8000d82:	f107 030d 	add.w	r3, r7, #13
 8000d86:	461a      	mov	r2, r3
 8000d88:	2100      	movs	r1, #0
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f000 f9ff 	bl	800118e <APDS9930_WriteRegister>
 8000d90:	4603      	mov	r3, r0
 8000d92:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000d94:	7bbb      	ldrb	r3, [r7, #14]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bf14      	ite	ne
 8000d9a:	2301      	movne	r3, #1
 8000d9c:	2300      	moveq	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	4413      	add	r3, r2
 8000da6:	73fb      	strb	r3, [r7, #15]

	// ALS Timing Register : 1 cycle (2.73ms)
	reg_data = 0xff;
 8000da8:	23ff      	movs	r3, #255	@ 0xff
 8000daa:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_ATIME, &reg_data);
 8000dac:	f107 030d 	add.w	r3, r7, #13
 8000db0:	461a      	mov	r2, r3
 8000db2:	2101      	movs	r1, #1
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f000 f9ea 	bl	800118e <APDS9930_WriteRegister>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf14      	ite	ne
 8000dc4:	2301      	movne	r3, #1
 8000dc6:	2300      	moveq	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	4413      	add	r3, r2
 8000dd0:	73fb      	strb	r3, [r7, #15]

	ALSIT = 2.73 * (float) (256 - reg_data);
 8000dd2:	7b7b      	ldrb	r3, [r7, #13]
 8000dd4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de0:	ee17 0a90 	vmov	r0, s15
 8000de4:	f7ff fbb0 	bl	8000548 <__aeabi_f2d>
 8000de8:	a343      	add	r3, pc, #268	@ (adr r3, 8000ef8 <APDS9930_Init+0x200>)
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	f7ff fc03 	bl	80005f8 <__aeabi_dmul>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4610      	mov	r0, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff fef5 	bl	8000be8 <__aeabi_d2f>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a45      	ldr	r2, [pc, #276]	@ (8000f18 <APDS9930_Init+0x220>)
 8000e02:	6013      	str	r3, [r2, #0]

	// Proximity Time Control Register : 1 cycle (2.73ms)
	reg_data = 0xff;
 8000e04:	23ff      	movs	r3, #255	@ 0xff
 8000e06:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_PTIME, &reg_data);
 8000e08:	f107 030d 	add.w	r3, r7, #13
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	2102      	movs	r1, #2
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f9bc 	bl	800118e <APDS9930_WriteRegister>
 8000e16:	4603      	mov	r3, r0
 8000e18:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	bf14      	ite	ne
 8000e20:	2301      	movne	r3, #1
 8000e22:	2300      	moveq	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	461a      	mov	r2, r3
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	73fb      	strb	r3, [r7, #15]

	// Wait Time Register : 1 cycle (2.73ms)
	reg_data = 0xff;
 8000e2e:	23ff      	movs	r3, #255	@ 0xff
 8000e30:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_WTIME, &reg_data);
 8000e32:	f107 030d 	add.w	r3, r7, #13
 8000e36:	461a      	mov	r2, r3
 8000e38:	2103      	movs	r1, #3
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 f9a7 	bl	800118e <APDS9930_WriteRegister>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf14      	ite	ne
 8000e4a:	2301      	movne	r3, #1
 8000e4c:	2300      	moveq	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	4413      	add	r3, r2
 8000e56:	73fb      	strb	r3, [r7, #15]
	// PROXIMITY INTERRUPT THRESHOLD REGISTERS
	// PERSISTENCE REGISTER
	// NEED TO BE CONFIGURED FOR INTERRUPTS

	// Configuration Register : AGL, WLONG, and PDL are not asserted
	reg_data = 0x00;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_CONFIG, &reg_data);
 8000e5c:	f107 030d 	add.w	r3, r7, #13
 8000e60:	461a      	mov	r2, r3
 8000e62:	210d      	movs	r1, #13
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f992 	bl	800118e <APDS9930_WriteRegister>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bf14      	ite	ne
 8000e74:	2301      	movne	r3, #1
 8000e76:	2300      	moveq	r3, #0
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	4413      	add	r3, r2
 8000e80:	73fb      	strb	r3, [r7, #15]

	AGAIN = Pow (2, reg_data >> 2);
 8000e82:	7b7b      	ldrb	r3, [r7, #13]
 8000e84:	089b      	lsrs	r3, r3, #2
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	4619      	mov	r1, r3
 8000e8a:	2002      	movs	r0, #2
 8000e8c:	f000 f9d5 	bl	800123a <Pow>
 8000e90:	4603      	mov	r3, r0
 8000e92:	461a      	mov	r2, r3
 8000e94:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <APDS9930_Init+0x224>)
 8000e96:	701a      	strb	r2, [r3, #0]

	// Proximity Pulse Count Register : 8 pulses (recommended p.22)
	reg_data = 0x08;
 8000e98:	2308      	movs	r3, #8
 8000e9a:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_PPULSE, &reg_data);
 8000e9c:	f107 030d 	add.w	r3, r7, #13
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	210e      	movs	r1, #14
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f000 f972 	bl	800118e <APDS9930_WriteRegister>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000eae:	7bbb      	ldrb	r3, [r7, #14]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	bf14      	ite	ne
 8000eb4:	2301      	movne	r3, #1
 8000eb6:	2300      	moveq	r3, #0
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	461a      	mov	r2, r3
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	73fb      	strb	r3, [r7, #15]

	// Control Register : 100mA LED strength, Proximity uses Ch1 diode, 1x Proximity gain, 1x ALS gain
	reg_data = 0x20;
 8000ec2:	2320      	movs	r3, #32
 8000ec4:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_CONTROL, &reg_data);
 8000ec6:	f107 030d 	add.w	r3, r7, #13
 8000eca:	461a      	mov	r2, r3
 8000ecc:	210f      	movs	r1, #15
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f000 f95d 	bl	800118e <APDS9930_WriteRegister>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000ed8:	7bbb      	ldrb	r3, [r7, #14]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	bf14      	ite	ne
 8000ede:	2301      	movne	r3, #1
 8000ee0:	2300      	moveq	r3, #0
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	4413      	add	r3, r2
 8000eea:	73fb      	strb	r3, [r7, #15]

	return err_num;
 8000eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	3d70a3d7 	.word	0x3d70a3d7
 8000efc:	4005d70a 	.word	0x4005d70a
 8000f00:	200001f6 	.word	0x200001f6
 8000f04:	200001f8 	.word	0x200001f8
 8000f08:	200001fc 	.word	0x200001fc
 8000f0c:	20000200 	.word	0x20000200
 8000f10:	20000204 	.word	0x20000204
 8000f14:	20000208 	.word	0x20000208
 8000f18:	200001f0 	.word	0x200001f0
 8000f1c:	200001f4 	.word	0x200001f4

08000f20 <APDS9930_ReadLux>:

/*
 * DATA AQUISITION
 */

HAL_StatusTypeDef APDS9930_ReadLux (APDS9930_t* device) {
 8000f20:	b5b0      	push	{r4, r5, r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af02      	add	r7, sp, #8
 8000f26:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[4];
	HAL_StatusTypeDef status;

	status = APDS9930_ReadRegisters (device, APDS9930_REG_Ch0DATAL, raw_data, 4);
 8000f28:	f107 0208 	add.w	r2, r7, #8
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	2114      	movs	r1, #20
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f000 f90d 	bl	8001150 <APDS9930_ReadRegisters>
 8000f36:	4603      	mov	r3, r0
 8000f38:	73fb      	strb	r3, [r7, #15]
	Ch0_data = 256 * raw_data[1] + raw_data[0];
 8000f3a:	7a7b      	ldrb	r3, [r7, #9]
 8000f3c:	021b      	lsls	r3, r3, #8
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	7a3a      	ldrb	r2, [r7, #8]
 8000f42:	4413      	add	r3, r2
 8000f44:	b29a      	uxth	r2, r3
 8000f46:	4b5e      	ldr	r3, [pc, #376]	@ (80010c0 <APDS9930_ReadLux+0x1a0>)
 8000f48:	801a      	strh	r2, [r3, #0]
	Ch1_data = 256 * raw_data[3] + raw_data[2];
 8000f4a:	7afb      	ldrb	r3, [r7, #11]
 8000f4c:	021b      	lsls	r3, r3, #8
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	7aba      	ldrb	r2, [r7, #10]
 8000f52:	4413      	add	r3, r2
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	4b5b      	ldr	r3, [pc, #364]	@ (80010c4 <APDS9930_ReadLux+0x1a4>)
 8000f58:	801a      	strh	r2, [r3, #0]

	IAC1 = (float) Ch0_data - B * (float ) Ch1_data;
 8000f5a:	4b59      	ldr	r3, [pc, #356]	@ (80010c0 <APDS9930_ReadLux+0x1a0>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	ee07 3a90 	vmov	s15, r3
 8000f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f66:	ee17 0a90 	vmov	r0, s15
 8000f6a:	f7ff faed 	bl	8000548 <__aeabi_f2d>
 8000f6e:	4604      	mov	r4, r0
 8000f70:	460d      	mov	r5, r1
 8000f72:	4b54      	ldr	r3, [pc, #336]	@ (80010c4 <APDS9930_ReadLux+0x1a4>)
 8000f74:	881b      	ldrh	r3, [r3, #0]
 8000f76:	ee07 3a90 	vmov	s15, r3
 8000f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f7e:	ee17 0a90 	vmov	r0, s15
 8000f82:	f7ff fae1 	bl	8000548 <__aeabi_f2d>
 8000f86:	a346      	add	r3, pc, #280	@ (adr r3, 80010a0 <APDS9930_ReadLux+0x180>)
 8000f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f8c:	f7ff fb34 	bl	80005f8 <__aeabi_dmul>
 8000f90:	4602      	mov	r2, r0
 8000f92:	460b      	mov	r3, r1
 8000f94:	4620      	mov	r0, r4
 8000f96:	4629      	mov	r1, r5
 8000f98:	f7ff f976 	bl	8000288 <__aeabi_dsub>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4610      	mov	r0, r2
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	f7ff fe20 	bl	8000be8 <__aeabi_d2f>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a47      	ldr	r2, [pc, #284]	@ (80010c8 <APDS9930_ReadLux+0x1a8>)
 8000fac:	6013      	str	r3, [r2, #0]
	IAC2 = C * (float) Ch0_data - D * (float) Ch1_data;
 8000fae:	4b44      	ldr	r3, [pc, #272]	@ (80010c0 <APDS9930_ReadLux+0x1a0>)
 8000fb0:	881b      	ldrh	r3, [r3, #0]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fba:	ee17 0a90 	vmov	r0, s15
 8000fbe:	f7ff fac3 	bl	8000548 <__aeabi_f2d>
 8000fc2:	a339      	add	r3, pc, #228	@ (adr r3, 80010a8 <APDS9930_ReadLux+0x188>)
 8000fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc8:	f7ff fb16 	bl	80005f8 <__aeabi_dmul>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	460b      	mov	r3, r1
 8000fd0:	4614      	mov	r4, r2
 8000fd2:	461d      	mov	r5, r3
 8000fd4:	4b3b      	ldr	r3, [pc, #236]	@ (80010c4 <APDS9930_ReadLux+0x1a4>)
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe0:	ee17 0a90 	vmov	r0, s15
 8000fe4:	f7ff fab0 	bl	8000548 <__aeabi_f2d>
 8000fe8:	a331      	add	r3, pc, #196	@ (adr r3, 80010b0 <APDS9930_ReadLux+0x190>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff fb03 	bl	80005f8 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	4629      	mov	r1, r5
 8000ffa:	f7ff f945 	bl	8000288 <__aeabi_dsub>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	f7ff fdef 	bl	8000be8 <__aeabi_d2f>
 800100a:	4603      	mov	r3, r0
 800100c:	4a2f      	ldr	r2, [pc, #188]	@ (80010cc <APDS9930_ReadLux+0x1ac>)
 800100e:	6013      	str	r3, [r2, #0]

	IAC = Max (2, IAC1, IAC2);
 8001010:	4b2d      	ldr	r3, [pc, #180]	@ (80010c8 <APDS9930_ReadLux+0x1a8>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fa97 	bl	8000548 <__aeabi_f2d>
 800101a:	4604      	mov	r4, r0
 800101c:	460d      	mov	r5, r1
 800101e:	4b2b      	ldr	r3, [pc, #172]	@ (80010cc <APDS9930_ReadLux+0x1ac>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4618      	mov	r0, r3
 8001024:	f7ff fa90 	bl	8000548 <__aeabi_f2d>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	e9cd 2300 	strd	r2, r3, [sp]
 8001030:	4622      	mov	r2, r4
 8001032:	462b      	mov	r3, r5
 8001034:	2002      	movs	r0, #2
 8001036:	f000 f8c5 	bl	80011c4 <Max>
 800103a:	4603      	mov	r3, r0
 800103c:	4a24      	ldr	r2, [pc, #144]	@ (80010d0 <APDS9930_ReadLux+0x1b0>)
 800103e:	6013      	str	r3, [r2, #0]
	LPC = GA * DF / (ALSIT * (float) AGAIN);
 8001040:	4b24      	ldr	r3, [pc, #144]	@ (80010d4 <APDS9930_ReadLux+0x1b4>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	ee07 3a90 	vmov	s15, r3
 8001048:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800104c:	4b22      	ldr	r3, [pc, #136]	@ (80010d8 <APDS9930_ReadLux+0x1b8>)
 800104e:	edd3 7a00 	vldr	s15, [r3]
 8001052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001056:	ee17 0a90 	vmov	r0, s15
 800105a:	f7ff fa75 	bl	8000548 <__aeabi_f2d>
 800105e:	4602      	mov	r2, r0
 8001060:	460b      	mov	r3, r1
 8001062:	a115      	add	r1, pc, #84	@ (adr r1, 80010b8 <APDS9930_ReadLux+0x198>)
 8001064:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001068:	f7ff fbf0 	bl	800084c <__aeabi_ddiv>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fdb8 	bl	8000be8 <__aeabi_d2f>
 8001078:	4603      	mov	r3, r0
 800107a:	4a18      	ldr	r2, [pc, #96]	@ (80010dc <APDS9930_ReadLux+0x1bc>)
 800107c:	6013      	str	r3, [r2, #0]

	device->lux = IAC * LPC;
 800107e:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <APDS9930_ReadLux+0x1b0>)
 8001080:	ed93 7a00 	vldr	s14, [r3]
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <APDS9930_ReadLux+0x1bc>)
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	edc3 7a01 	vstr	s15, [r3, #4]

	return status;
 8001094:	7bfb      	ldrb	r3, [r7, #15]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bdb0      	pop	{r4, r5, r7, pc}
 800109e:	bf00      	nop
 80010a0:	83126e98 	.word	0x83126e98
 80010a4:	3ffdcac0 	.word	0x3ffdcac0
 80010a8:	645a1cac 	.word	0x645a1cac
 80010ac:	3fe7df3b 	.word	0x3fe7df3b
 80010b0:	9db22d0e 	.word	0x9db22d0e
 80010b4:	3ff4a7ef 	.word	0x3ff4a7ef
 80010b8:	47ae147b 	.word	0x47ae147b
 80010bc:	40397ae1 	.word	0x40397ae1
 80010c0:	200001f6 	.word	0x200001f6
 80010c4:	200001f8 	.word	0x200001f8
 80010c8:	200001fc 	.word	0x200001fc
 80010cc:	20000200 	.word	0x20000200
 80010d0:	20000204 	.word	0x20000204
 80010d4:	200001f4 	.word	0x200001f4
 80010d8:	200001f0 	.word	0x200001f0
 80010dc:	20000208 	.word	0x20000208

080010e0 <APDS9930_ReadProximity>:

HAL_StatusTypeDef APDS9930_ReadProximity (APDS9930_t* device) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[2];
	HAL_StatusTypeDef status;

	status = APDS9930_ReadRegisters (device, APDS9930_REG_PDATAL, raw_data, 2);
 80010e8:	f107 020c 	add.w	r2, r7, #12
 80010ec:	2302      	movs	r3, #2
 80010ee:	2118      	movs	r1, #24
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f000 f82d 	bl	8001150 <APDS9930_ReadRegisters>
 80010f6:	4603      	mov	r3, r0
 80010f8:	73fb      	strb	r3, [r7, #15]
	device->prox = 256 * raw_data[1] + raw_data[0];
 80010fa:	7b7b      	ldrb	r3, [r7, #13]
 80010fc:	021b      	lsls	r3, r3, #8
 80010fe:	7b3a      	ldrb	r2, [r7, #12]
 8001100:	4413      	add	r3, r2
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	edc3 7a02 	vstr	s15, [r3, #8]

	return status;
 8001110:	7bfb      	ldrb	r3, [r7, #15]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <APDS9930_ReadRegister>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef APDS9930_ReadRegister (APDS9930_t* device, uint8_t reg, uint8_t* data) {
 800111a:	b580      	push	{r7, lr}
 800111c:	b088      	sub	sp, #32
 800111e:	af04      	add	r7, sp, #16
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	460b      	mov	r3, r1
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Read(device->i2c_handle, APDS9930_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	6818      	ldr	r0, [r3, #0]
 800112c:	7afb      	ldrb	r3, [r7, #11]
 800112e:	b29a      	uxth	r2, r3
 8001130:	f04f 33ff 	mov.w	r3, #4294967295
 8001134:	9302      	str	r3, [sp, #8]
 8001136:	2301      	movs	r3, #1
 8001138:	9301      	str	r3, [sp, #4]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2301      	movs	r3, #1
 8001140:	2172      	movs	r1, #114	@ 0x72
 8001142:	f001 f8d1 	bl	80022e8 <HAL_I2C_Mem_Read>
 8001146:	4603      	mov	r3, r0
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <APDS9930_ReadRegisters>:

HAL_StatusTypeDef APDS9930_ReadRegisters (APDS9930_t* device, uint8_t reg, uint8_t* data, uint8_t length) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b088      	sub	sp, #32
 8001154:	af04      	add	r7, sp, #16
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	461a      	mov	r2, r3
 800115c:	460b      	mov	r3, r1
 800115e:	72fb      	strb	r3, [r7, #11]
 8001160:	4613      	mov	r3, r2
 8001162:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(device->i2c_handle, APDS9930_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	7afb      	ldrb	r3, [r7, #11]
 800116a:	b29a      	uxth	r2, r3
 800116c:	7abb      	ldrb	r3, [r7, #10]
 800116e:	b29b      	uxth	r3, r3
 8001170:	f04f 31ff 	mov.w	r1, #4294967295
 8001174:	9102      	str	r1, [sp, #8]
 8001176:	9301      	str	r3, [sp, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	2301      	movs	r3, #1
 800117e:	2172      	movs	r1, #114	@ 0x72
 8001180:	f001 f8b2 	bl	80022e8 <HAL_I2C_Mem_Read>
 8001184:	4603      	mov	r3, r0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3710      	adds	r7, #16
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}

0800118e <APDS9930_WriteRegister>:

HAL_StatusTypeDef APDS9930_WriteRegister (APDS9930_t* device, uint8_t reg, uint8_t* data) {
 800118e:	b580      	push	{r7, lr}
 8001190:	b088      	sub	sp, #32
 8001192:	af04      	add	r7, sp, #16
 8001194:	60f8      	str	r0, [r7, #12]
 8001196:	460b      	mov	r3, r1
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(device->i2c_handle, APDS9930_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	6818      	ldr	r0, [r3, #0]
 80011a0:	7afb      	ldrb	r3, [r7, #11]
 80011a2:	b29a      	uxth	r2, r3
 80011a4:	f04f 33ff 	mov.w	r3, #4294967295
 80011a8:	9302      	str	r3, [sp, #8]
 80011aa:	2301      	movs	r3, #1
 80011ac:	9301      	str	r3, [sp, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	2301      	movs	r3, #1
 80011b4:	2172      	movs	r1, #114	@ 0x72
 80011b6:	f000 ff83 	bl	80020c0 <HAL_I2C_Mem_Write>
 80011ba:	4603      	mov	r3, r0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3710      	adds	r7, #16
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <Max>:

/*
 * PRIVATE FUNCTIONS
 */

float Max (int num, ...) {
 80011c4:	b40f      	push	{r0, r1, r2, r3}
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
	float max = 0.0f;
 80011cc:	f04f 0300 	mov.w	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
	float temp = 0.0f;
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
	va_list vl;
	va_start (vl, num);
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	603b      	str	r3, [r7, #0]

	for (int i = 0; i < num; i++) {
 80011de:	2300      	movs	r3, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	e01e      	b.n	8001222 <Max+0x5e>
		temp = (float) va_arg (vl, double);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	3307      	adds	r3, #7
 80011e8:	f023 0307 	bic.w	r3, r3, #7
 80011ec:	f103 0208 	add.w	r2, r3, #8
 80011f0:	603a      	str	r2, [r7, #0]
 80011f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f7ff fcf5 	bl	8000be8 <__aeabi_d2f>
 80011fe:	4603      	mov	r3, r0
 8001200:	607b      	str	r3, [r7, #4]
		max = temp > max ? temp : max;
 8001202:	ed97 7a01 	vldr	s14, [r7, #4]
 8001206:	edd7 7a03 	vldr	s15, [r7, #12]
 800120a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	dd01      	ble.n	8001218 <Max+0x54>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	e000      	b.n	800121a <Max+0x56>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < num; i++) {
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	3301      	adds	r3, #1
 8001220:	60bb      	str	r3, [r7, #8]
 8001222:	68ba      	ldr	r2, [r7, #8]
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	429a      	cmp	r2, r3
 8001228:	dbdc      	blt.n	80011e4 <Max+0x20>
	}

	return max;
 800122a:	68fb      	ldr	r3, [r7, #12]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001236:	b004      	add	sp, #16
 8001238:	4770      	bx	lr

0800123a <Pow>:

uint8_t Pow (uint8_t base, uint8_t exp) {
 800123a:	b480      	push	{r7}
 800123c:	b085      	sub	sp, #20
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	460a      	mov	r2, r1
 8001244:	71fb      	strb	r3, [r7, #7]
 8001246:	4613      	mov	r3, r2
 8001248:	71bb      	strb	r3, [r7, #6]
	uint8_t answer = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < exp; i++) {
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	e007      	b.n	8001264 <Pow+0x2a>
		answer *= base;
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	fb12 f303 	smulbb	r3, r2, r3
 800125c:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < exp; i++) {
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	3301      	adds	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
 8001264:	79bb      	ldrb	r3, [r7, #6]
 8001266:	68ba      	ldr	r2, [r7, #8]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbf3      	blt.n	8001254 <Pow+0x1a>
	}

	return answer;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b5b0      	push	{r4, r5, r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001282:	f000 fb51 	bl	8001928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001286:	f000 f83d 	bl	8001304 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800128a:	f000 f8fb 	bl	8001484 <MX_GPIO_Init>
  MX_I2C1_Init();
 800128e:	f000 f889 	bl	80013a4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001292:	f000 f8c7 	bl	8001424 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  APDS9930_Init (&dev, &hi2c1);
 8001296:	4916      	ldr	r1, [pc, #88]	@ (80012f0 <main+0x74>)
 8001298:	4816      	ldr	r0, [pc, #88]	@ (80012f4 <main+0x78>)
 800129a:	f7ff fd2d 	bl	8000cf8 <APDS9930_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_Delay(5);
 800129e:	2005      	movs	r0, #5
 80012a0:	f000 fba8 	bl	80019f4 <HAL_Delay>
	  APDS9930_ReadLux (&dev);
 80012a4:	4813      	ldr	r0, [pc, #76]	@ (80012f4 <main+0x78>)
 80012a6:	f7ff fe3b 	bl	8000f20 <APDS9930_ReadLux>
	  APDS9930_ReadProximity (&dev);
 80012aa:	4812      	ldr	r0, [pc, #72]	@ (80012f4 <main+0x78>)
 80012ac:	f7ff ff18 	bl	80010e0 <APDS9930_ReadProximity>

	  sprintf (message, "lux: %.2f\r\nprox: %.2f\r\n\n", dev.lux, dev.prox);
 80012b0:	4b10      	ldr	r3, [pc, #64]	@ (80012f4 <main+0x78>)
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff f947 	bl	8000548 <__aeabi_f2d>
 80012ba:	4604      	mov	r4, r0
 80012bc:	460d      	mov	r5, r1
 80012be:	4b0d      	ldr	r3, [pc, #52]	@ (80012f4 <main+0x78>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f940 	bl	8000548 <__aeabi_f2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	e9cd 2300 	strd	r2, r3, [sp]
 80012d0:	4622      	mov	r2, r4
 80012d2:	462b      	mov	r3, r5
 80012d4:	4908      	ldr	r1, [pc, #32]	@ (80012f8 <main+0x7c>)
 80012d6:	4809      	ldr	r0, [pc, #36]	@ (80012fc <main+0x80>)
 80012d8:	f004 fbc0 	bl	8005a5c <siprintf>
	  HAL_UART_Transmit (&huart2, (uint8_t *) message, 64, HAL_MAX_DELAY);
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295
 80012e0:	2240      	movs	r2, #64	@ 0x40
 80012e2:	4906      	ldr	r1, [pc, #24]	@ (80012fc <main+0x80>)
 80012e4:	4806      	ldr	r0, [pc, #24]	@ (8001300 <main+0x84>)
 80012e6:	f003 f8b1 	bl	800444c <HAL_UART_Transmit>
	  HAL_Delay(5);
 80012ea:	bf00      	nop
 80012ec:	e7d7      	b.n	800129e <main+0x22>
 80012ee:	bf00      	nop
 80012f0:	2000020c 	.word	0x2000020c
 80012f4:	200002e8 	.word	0x200002e8
 80012f8:	080092e8 	.word	0x080092e8
 80012fc:	200002f4 	.word	0x200002f4
 8001300:	20000260 	.word	0x20000260

08001304 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b09c      	sub	sp, #112	@ 0x70
 8001308:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800130a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800130e:	2228      	movs	r2, #40	@ 0x28
 8001310:	2100      	movs	r1, #0
 8001312:	4618      	mov	r0, r3
 8001314:	f004 fc05 	bl	8005b22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001318:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001328:	463b      	mov	r3, r7
 800132a:	2234      	movs	r2, #52	@ 0x34
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f004 fbf7 	bl	8005b22 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001334:	2302      	movs	r3, #2
 8001336:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133c:	2310      	movs	r3, #16
 800133e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001340:	2300      	movs	r3, #0
 8001342:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001344:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001348:	4618      	mov	r0, r3
 800134a:	f001 fc41 	bl	8002bd0 <HAL_RCC_OscConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001354:	f000 f8e2 	bl	800151c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001358:	230f      	movs	r3, #15
 800135a:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800135c:	2300      	movs	r3, #0
 800135e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800136c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f002 fc6a 	bl	8003c4c <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800137e:	f000 f8cd 	bl	800151c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001382:	2320      	movs	r3, #32
 8001384:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138a:	463b      	mov	r3, r7
 800138c:	4618      	mov	r0, r3
 800138e:	f002 fe7d 	bl	800408c <HAL_RCCEx_PeriphCLKConfig>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001398:	f000 f8c0 	bl	800151c <Error_Handler>
  }
}
 800139c:	bf00      	nop
 800139e:	3770      	adds	r7, #112	@ 0x70
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <MX_I2C1_Init+0x74>)
 80013aa:	4a1c      	ldr	r2, [pc, #112]	@ (800141c <MX_I2C1_Init+0x78>)
 80013ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80013ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001418 <MX_I2C1_Init+0x74>)
 80013b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001420 <MX_I2C1_Init+0x7c>)
 80013b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013b4:	4b18      	ldr	r3, [pc, #96]	@ (8001418 <MX_I2C1_Init+0x74>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ba:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <MX_I2C1_Init+0x74>)
 80013bc:	2201      	movs	r2, #1
 80013be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013c0:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <MX_I2C1_Init+0x74>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80013c6:	4b14      	ldr	r3, [pc, #80]	@ (8001418 <MX_I2C1_Init+0x74>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80013cc:	4b12      	ldr	r3, [pc, #72]	@ (8001418 <MX_I2C1_Init+0x74>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013d2:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <MX_I2C1_Init+0x74>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <MX_I2C1_Init+0x74>)
 80013da:	2200      	movs	r2, #0
 80013dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013de:	480e      	ldr	r0, [pc, #56]	@ (8001418 <MX_I2C1_Init+0x74>)
 80013e0:	f000 fdd3 	bl	8001f8a <HAL_I2C_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80013ea:	f000 f897 	bl	800151c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013ee:	2100      	movs	r1, #0
 80013f0:	4809      	ldr	r0, [pc, #36]	@ (8001418 <MX_I2C1_Init+0x74>)
 80013f2:	f001 fb55 	bl	8002aa0 <HAL_I2CEx_ConfigAnalogFilter>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80013fc:	f000 f88e 	bl	800151c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001400:	2100      	movs	r1, #0
 8001402:	4805      	ldr	r0, [pc, #20]	@ (8001418 <MX_I2C1_Init+0x74>)
 8001404:	f001 fb97 	bl	8002b36 <HAL_I2CEx_ConfigDigitalFilter>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800140e:	f000 f885 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2000020c 	.word	0x2000020c
 800141c:	40005400 	.word	0x40005400
 8001420:	00201d2b 	.word	0x00201d2b

08001424 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001428:	4b14      	ldr	r3, [pc, #80]	@ (800147c <MX_USART2_UART_Init+0x58>)
 800142a:	4a15      	ldr	r2, [pc, #84]	@ (8001480 <MX_USART2_UART_Init+0x5c>)
 800142c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800142e:	4b13      	ldr	r3, [pc, #76]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001430:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8001434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001436:	4b11      	ldr	r3, [pc, #68]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001438:	2200      	movs	r2, #0
 800143a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <MX_USART2_UART_Init+0x58>)
 800143e:	2200      	movs	r2, #0
 8001440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001442:	4b0e      	ldr	r3, [pc, #56]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001448:	4b0c      	ldr	r3, [pc, #48]	@ (800147c <MX_USART2_UART_Init+0x58>)
 800144a:	220c      	movs	r2, #12
 800144c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001454:	4b09      	ldr	r3, [pc, #36]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001456:	2200      	movs	r2, #0
 8001458:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800145a:	4b08      	ldr	r3, [pc, #32]	@ (800147c <MX_USART2_UART_Init+0x58>)
 800145c:	2200      	movs	r2, #0
 800145e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	@ (800147c <MX_USART2_UART_Init+0x58>)
 8001468:	f002 ffa2 	bl	80043b0 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001472:	f000 f853 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000260 	.word	0x20000260
 8001480:	40004400 	.word	0x40004400

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	4b1f      	ldr	r3, [pc, #124]	@ (8001518 <MX_GPIO_Init+0x94>)
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	4a1e      	ldr	r2, [pc, #120]	@ (8001518 <MX_GPIO_Init+0x94>)
 80014a0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80014a4:	6153      	str	r3, [r2, #20]
 80014a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001518 <MX_GPIO_Init+0x94>)
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014ae:	60bb      	str	r3, [r7, #8]
 80014b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <MX_GPIO_Init+0x94>)
 80014b4:	695b      	ldr	r3, [r3, #20]
 80014b6:	4a18      	ldr	r2, [pc, #96]	@ (8001518 <MX_GPIO_Init+0x94>)
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014bc:	6153      	str	r3, [r2, #20]
 80014be:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <MX_GPIO_Init+0x94>)
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <MX_GPIO_Init+0x94>)
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	4a12      	ldr	r2, [pc, #72]	@ (8001518 <MX_GPIO_Init+0x94>)
 80014d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014d4:	6153      	str	r3, [r2, #20]
 80014d6:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <MX_GPIO_Init+0x94>)
 80014d8:	695b      	ldr	r3, [r3, #20]
 80014da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 80014e2:	2301      	movs	r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	4619      	mov	r1, r3
 80014f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014fa:	f000 fbb1 	bl	8001c60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80014fe:	2200      	movs	r2, #0
 8001500:	2100      	movs	r1, #0
 8001502:	2006      	movs	r0, #6
 8001504:	f000 fb75 	bl	8001bf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001508:	2006      	movs	r0, #6
 800150a:	f000 fb8e 	bl	8001c2a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800150e:	bf00      	nop
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001520:	b672      	cpsid	i
}
 8001522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <Error_Handler+0x8>

08001528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800152e:	4b0f      	ldr	r3, [pc, #60]	@ (800156c <HAL_MspInit+0x44>)
 8001530:	699b      	ldr	r3, [r3, #24]
 8001532:	4a0e      	ldr	r2, [pc, #56]	@ (800156c <HAL_MspInit+0x44>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6193      	str	r3, [r2, #24]
 800153a:	4b0c      	ldr	r3, [pc, #48]	@ (800156c <HAL_MspInit+0x44>)
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001546:	4b09      	ldr	r3, [pc, #36]	@ (800156c <HAL_MspInit+0x44>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	4a08      	ldr	r2, [pc, #32]	@ (800156c <HAL_MspInit+0x44>)
 800154c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001550:	61d3      	str	r3, [r2, #28]
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <HAL_MspInit+0x44>)
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000

08001570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	@ 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a26      	ldr	r2, [pc, #152]	@ (8001628 <HAL_I2C_MspInit+0xb8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d145      	bne.n	800161e <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4b26      	ldr	r3, [pc, #152]	@ (800162c <HAL_I2C_MspInit+0xbc>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	4a25      	ldr	r2, [pc, #148]	@ (800162c <HAL_I2C_MspInit+0xbc>)
 8001598:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800159c:	6153      	str	r3, [r2, #20]
 800159e:	4b23      	ldr	r3, [pc, #140]	@ (800162c <HAL_I2C_MspInit+0xbc>)
 80015a0:	695b      	ldr	r3, [r3, #20]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	4b20      	ldr	r3, [pc, #128]	@ (800162c <HAL_I2C_MspInit+0xbc>)
 80015ac:	695b      	ldr	r3, [r3, #20]
 80015ae:	4a1f      	ldr	r2, [pc, #124]	@ (800162c <HAL_I2C_MspInit+0xbc>)
 80015b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015b4:	6153      	str	r3, [r2, #20]
 80015b6:	4b1d      	ldr	r3, [pc, #116]	@ (800162c <HAL_I2C_MspInit+0xbc>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015c8:	2312      	movs	r3, #18
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015cc:	2301      	movs	r3, #1
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015d4:	2304      	movs	r3, #4
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015e2:	f000 fb3d 	bl	8001c60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015e6:	2380      	movs	r3, #128	@ 0x80
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ea:	2312      	movs	r3, #18
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015f6:	2304      	movs	r3, #4
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	480b      	ldr	r0, [pc, #44]	@ (8001630 <HAL_I2C_MspInit+0xc0>)
 8001602:	f000 fb2d 	bl	8001c60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001606:	4b09      	ldr	r3, [pc, #36]	@ (800162c <HAL_I2C_MspInit+0xbc>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	4a08      	ldr	r2, [pc, #32]	@ (800162c <HAL_I2C_MspInit+0xbc>)
 800160c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001610:	61d3      	str	r3, [r2, #28]
 8001612:	4b06      	ldr	r3, [pc, #24]	@ (800162c <HAL_I2C_MspInit+0xbc>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800161e:	bf00      	nop
 8001620:	3728      	adds	r7, #40	@ 0x28
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40005400 	.word	0x40005400
 800162c:	40021000 	.word	0x40021000
 8001630:	48000400 	.word	0x48000400

08001634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b08a      	sub	sp, #40	@ 0x28
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a17      	ldr	r2, [pc, #92]	@ (80016b0 <HAL_UART_MspInit+0x7c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d128      	bne.n	80016a8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001656:	4b17      	ldr	r3, [pc, #92]	@ (80016b4 <HAL_UART_MspInit+0x80>)
 8001658:	69db      	ldr	r3, [r3, #28]
 800165a:	4a16      	ldr	r2, [pc, #88]	@ (80016b4 <HAL_UART_MspInit+0x80>)
 800165c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001660:	61d3      	str	r3, [r2, #28]
 8001662:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <HAL_UART_MspInit+0x80>)
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <HAL_UART_MspInit+0x80>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	4a10      	ldr	r2, [pc, #64]	@ (80016b4 <HAL_UART_MspInit+0x80>)
 8001674:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001678:	6153      	str	r3, [r2, #20]
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <HAL_UART_MspInit+0x80>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001682:	60fb      	str	r3, [r7, #12]
 8001684:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001686:	230c      	movs	r3, #12
 8001688:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001692:	2303      	movs	r3, #3
 8001694:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001696:	2307      	movs	r3, #7
 8001698:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169a:	f107 0314 	add.w	r3, r7, #20
 800169e:	4619      	mov	r1, r3
 80016a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a4:	f000 fadc 	bl	8001c60 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80016a8:	bf00      	nop
 80016aa:	3728      	adds	r7, #40	@ 0x28
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40004400 	.word	0x40004400
 80016b4:	40021000 	.word	0x40021000

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016bc:	bf00      	nop
 80016be:	e7fd      	b.n	80016bc <NMI_Handler+0x4>

080016c0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c4:	bf00      	nop
 80016c6:	e7fd      	b.n	80016c4 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	bf00      	nop
 80016ce:	e7fd      	b.n	80016cc <MemManage_Handler+0x4>

080016d0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d4:	bf00      	nop
 80016d6:	e7fd      	b.n	80016d4 <BusFault_Handler+0x4>

080016d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016dc:	bf00      	nop
 80016de:	e7fd      	b.n	80016dc <UsageFault_Handler+0x4>

080016e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001700:	bf00      	nop
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170e:	f000 f951 	bl	80019b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}

08001716 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 800171a:	2001      	movs	r0, #1
 800171c:	f000 fc12 	bl	8001f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}

08001724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  return 1;
 8001728:	2301      	movs	r3, #1
}
 800172a:	4618      	mov	r0, r3
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <_kill>:

int _kill(int pid, int sig)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800173e:	f004 fa43 	bl	8005bc8 <__errno>
 8001742:	4603      	mov	r3, r0
 8001744:	2216      	movs	r2, #22
 8001746:	601a      	str	r2, [r3, #0]
  return -1;
 8001748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <_exit>:

void _exit (int status)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	6878      	ldr	r0, [r7, #4]
 8001762:	f7ff ffe7 	bl	8001734 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001766:	bf00      	nop
 8001768:	e7fd      	b.n	8001766 <_exit+0x12>

0800176a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800176a:	b580      	push	{r7, lr}
 800176c:	b086      	sub	sp, #24
 800176e:	af00      	add	r7, sp, #0
 8001770:	60f8      	str	r0, [r7, #12]
 8001772:	60b9      	str	r1, [r7, #8]
 8001774:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	e00a      	b.n	8001792 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800177c:	f3af 8000 	nop.w
 8001780:	4601      	mov	r1, r0
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	1c5a      	adds	r2, r3, #1
 8001786:	60ba      	str	r2, [r7, #8]
 8001788:	b2ca      	uxtb	r2, r1
 800178a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3301      	adds	r3, #1
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	dbf0      	blt.n	800177c <_read+0x12>
  }

  return len;
 800179a:	687b      	ldr	r3, [r7, #4]
}
 800179c:	4618      	mov	r0, r3
 800179e:	3718      	adds	r7, #24
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	e009      	b.n	80017ca <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	1c5a      	adds	r2, r3, #1
 80017ba:	60ba      	str	r2, [r7, #8]
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3301      	adds	r3, #1
 80017c8:	617b      	str	r3, [r7, #20]
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	dbf1      	blt.n	80017b6 <_write+0x12>
  }
  return len;
 80017d2:	687b      	ldr	r3, [r7, #4]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_close>:

int _close(int file)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001804:	605a      	str	r2, [r3, #4]
  return 0;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	370c      	adds	r7, #12
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <_isatty>:

int _isatty(int file)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800181c:	2301      	movs	r3, #1
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800182a:	b480      	push	{r7}
 800182c:	b085      	sub	sp, #20
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	3714      	adds	r7, #20
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800184c:	4a14      	ldr	r2, [pc, #80]	@ (80018a0 <_sbrk+0x5c>)
 800184e:	4b15      	ldr	r3, [pc, #84]	@ (80018a4 <_sbrk+0x60>)
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001858:	4b13      	ldr	r3, [pc, #76]	@ (80018a8 <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d102      	bne.n	8001866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <_sbrk+0x64>)
 8001862:	4a12      	ldr	r2, [pc, #72]	@ (80018ac <_sbrk+0x68>)
 8001864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <_sbrk+0x64>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4413      	add	r3, r2
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	429a      	cmp	r2, r3
 8001872:	d207      	bcs.n	8001884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001874:	f004 f9a8 	bl	8005bc8 <__errno>
 8001878:	4603      	mov	r3, r0
 800187a:	220c      	movs	r2, #12
 800187c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800187e:	f04f 33ff 	mov.w	r3, #4294967295
 8001882:	e009      	b.n	8001898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001884:	4b08      	ldr	r3, [pc, #32]	@ (80018a8 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800188a:	4b07      	ldr	r3, [pc, #28]	@ (80018a8 <_sbrk+0x64>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4413      	add	r3, r2
 8001892:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <_sbrk+0x64>)
 8001894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001896:	68fb      	ldr	r3, [r7, #12]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20004000 	.word	0x20004000
 80018a4:	00000400 	.word	0x00000400
 80018a8:	20000334 	.word	0x20000334
 80018ac:	20000488 	.word	0x20000488

080018b0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018b4:	4b06      	ldr	r3, [pc, #24]	@ (80018d0 <SystemInit+0x20>)
 80018b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018ba:	4a05      	ldr	r2, [pc, #20]	@ (80018d0 <SystemInit+0x20>)
 80018bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800190c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80018d8:	f7ff ffea 	bl	80018b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018dc:	480c      	ldr	r0, [pc, #48]	@ (8001910 <LoopForever+0x6>)
  ldr r1, =_edata
 80018de:	490d      	ldr	r1, [pc, #52]	@ (8001914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001918 <LoopForever+0xe>)
  movs r3, #0
 80018e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018e4:	e002      	b.n	80018ec <LoopCopyDataInit>

080018e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ea:	3304      	adds	r3, #4

080018ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018f0:	d3f9      	bcc.n	80018e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018f2:	4a0a      	ldr	r2, [pc, #40]	@ (800191c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001920 <LoopForever+0x16>)
  movs r3, #0
 80018f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f8:	e001      	b.n	80018fe <LoopFillZerobss>

080018fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018fc:	3204      	adds	r2, #4

080018fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001900:	d3fb      	bcc.n	80018fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001902:	f004 f967 	bl	8005bd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001906:	f7ff fcb9 	bl	800127c <main>

0800190a <LoopForever>:

LoopForever:
    b LoopForever
 800190a:	e7fe      	b.n	800190a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800190c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001918:	08009778 	.word	0x08009778
  ldr r2, =_sbss
 800191c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001920:	20000488 	.word	0x20000488

08001924 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC1_IRQHandler>
	...

08001928 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800192c:	4b08      	ldr	r3, [pc, #32]	@ (8001950 <HAL_Init+0x28>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <HAL_Init+0x28>)
 8001932:	f043 0310 	orr.w	r3, r3, #16
 8001936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001938:	2003      	movs	r0, #3
 800193a:	f000 f94f 	bl	8001bdc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800193e:	200f      	movs	r0, #15
 8001940:	f000 f808 	bl	8001954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001944:	f7ff fdf0 	bl	8001528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40022000 	.word	0x40022000

08001954 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b082      	sub	sp, #8
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800195c:	4b12      	ldr	r3, [pc, #72]	@ (80019a8 <HAL_InitTick+0x54>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <HAL_InitTick+0x58>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	4619      	mov	r1, r3
 8001966:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800196a:	fbb3 f3f1 	udiv	r3, r3, r1
 800196e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001972:	4618      	mov	r0, r3
 8001974:	f000 f967 	bl	8001c46 <HAL_SYSTICK_Config>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e00e      	b.n	80019a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2b0f      	cmp	r3, #15
 8001986:	d80a      	bhi.n	800199e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001988:	2200      	movs	r2, #0
 800198a:	6879      	ldr	r1, [r7, #4]
 800198c:	f04f 30ff 	mov.w	r0, #4294967295
 8001990:	f000 f92f 	bl	8001bf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001994:	4a06      	ldr	r2, [pc, #24]	@ (80019b0 <HAL_InitTick+0x5c>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	e000      	b.n	80019a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	20000000 	.word	0x20000000
 80019ac:	20000008 	.word	0x20000008
 80019b0:	20000004 	.word	0x20000004

080019b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <HAL_IncTick+0x20>)
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	461a      	mov	r2, r3
 80019be:	4b06      	ldr	r3, [pc, #24]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4413      	add	r3, r2
 80019c4:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <HAL_IncTick+0x24>)
 80019c6:	6013      	str	r3, [r2, #0]
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	20000008 	.word	0x20000008
 80019d8:	20000338 	.word	0x20000338

080019dc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  return uwTick;  
 80019e0:	4b03      	ldr	r3, [pc, #12]	@ (80019f0 <HAL_GetTick+0x14>)
 80019e2:	681b      	ldr	r3, [r3, #0]
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000338 	.word	0x20000338

080019f4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b084      	sub	sp, #16
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019fc:	f7ff ffee 	bl	80019dc <HAL_GetTick>
 8001a00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0c:	d005      	beq.n	8001a1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001a38 <HAL_Delay+0x44>)
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4413      	add	r3, r2
 8001a18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001a1a:	bf00      	nop
 8001a1c:	f7ff ffde 	bl	80019dc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d8f7      	bhi.n	8001a1c <HAL_Delay+0x28>
  {
  }
}
 8001a2c:	bf00      	nop
 8001a2e:	bf00      	nop
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	20000008 	.word	0x20000008

08001a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a4e:	68db      	ldr	r3, [r3, #12]
 8001a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a52:	68ba      	ldr	r2, [r7, #8]
 8001a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a58:	4013      	ands	r3, r2
 8001a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a6e:	4a04      	ldr	r2, [pc, #16]	@ (8001a80 <__NVIC_SetPriorityGrouping+0x44>)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	60d3      	str	r3, [r2, #12]
}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a88:	4b04      	ldr	r3, [pc, #16]	@ (8001a9c <__NVIC_GetPriorityGrouping+0x18>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	0a1b      	lsrs	r3, r3, #8
 8001a8e:	f003 0307 	and.w	r3, r3, #7
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0b      	blt.n	8001aca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	@ (8001ad8 <__NVIC_EnableIRQ+0x38>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	6039      	str	r1, [r7, #0]
 8001ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db0a      	blt.n	8001b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	b2da      	uxtb	r2, r3
 8001af4:	490c      	ldr	r1, [pc, #48]	@ (8001b28 <__NVIC_SetPriority+0x4c>)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	0112      	lsls	r2, r2, #4
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	440b      	add	r3, r1
 8001b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b04:	e00a      	b.n	8001b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	b2da      	uxtb	r2, r3
 8001b0a:	4908      	ldr	r1, [pc, #32]	@ (8001b2c <__NVIC_SetPriority+0x50>)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	3b04      	subs	r3, #4
 8001b14:	0112      	lsls	r2, r2, #4
 8001b16:	b2d2      	uxtb	r2, r2
 8001b18:	440b      	add	r3, r1
 8001b1a:	761a      	strb	r2, [r3, #24]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000e100 	.word	0xe000e100
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b089      	sub	sp, #36	@ 0x24
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	f1c3 0307 	rsb	r3, r3, #7
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	bf28      	it	cs
 8001b4e:	2304      	movcs	r3, #4
 8001b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	3304      	adds	r3, #4
 8001b56:	2b06      	cmp	r3, #6
 8001b58:	d902      	bls.n	8001b60 <NVIC_EncodePriority+0x30>
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	3b03      	subs	r3, #3
 8001b5e:	e000      	b.n	8001b62 <NVIC_EncodePriority+0x32>
 8001b60:	2300      	movs	r3, #0
 8001b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	f04f 32ff 	mov.w	r2, #4294967295
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6e:	43da      	mvns	r2, r3
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	401a      	ands	r2, r3
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b78:	f04f 31ff 	mov.w	r1, #4294967295
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b82:	43d9      	mvns	r1, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b88:	4313      	orrs	r3, r2
         );
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3724      	adds	r7, #36	@ 0x24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ba8:	d301      	bcc.n	8001bae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001baa:	2301      	movs	r3, #1
 8001bac:	e00f      	b.n	8001bce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bae:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bb6:	210f      	movs	r1, #15
 8001bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bbc:	f7ff ff8e 	bl	8001adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bc6:	4b04      	ldr	r3, [pc, #16]	@ (8001bd8 <SysTick_Config+0x40>)
 8001bc8:	2207      	movs	r2, #7
 8001bca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	e000e010 	.word	0xe000e010

08001bdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff29 	bl	8001a3c <__NVIC_SetPriorityGrouping>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b086      	sub	sp, #24
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	607a      	str	r2, [r7, #4]
 8001bfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c04:	f7ff ff3e 	bl	8001a84 <__NVIC_GetPriorityGrouping>
 8001c08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	6978      	ldr	r0, [r7, #20]
 8001c10:	f7ff ff8e 	bl	8001b30 <NVIC_EncodePriority>
 8001c14:	4602      	mov	r2, r0
 8001c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c1a:	4611      	mov	r1, r2
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f7ff ff5d 	bl	8001adc <__NVIC_SetPriority>
}
 8001c22:	bf00      	nop
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b082      	sub	sp, #8
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff31 	bl	8001aa0 <__NVIC_EnableIRQ>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b082      	sub	sp, #8
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c4e:	6878      	ldr	r0, [r7, #4]
 8001c50:	f7ff ffa2 	bl	8001b98 <SysTick_Config>
 8001c54:	4603      	mov	r3, r0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b087      	sub	sp, #28
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6e:	e14e      	b.n	8001f0e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	2101      	movs	r1, #1
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	f000 8140 	beq.w	8001f08 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d005      	beq.n	8001ca0 <HAL_GPIO_Init+0x40>
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d130      	bne.n	8001d02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001ca6:	697b      	ldr	r3, [r7, #20]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	68da      	ldr	r2, [r3, #12]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	693a      	ldr	r2, [r7, #16]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	091b      	lsrs	r3, r3, #4
 8001cec:	f003 0201 	and.w	r2, r3, #1
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d017      	beq.n	8001d3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	2203      	movs	r2, #3
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	4013      	ands	r3, r2
 8001d24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	689a      	ldr	r2, [r3, #8]
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d123      	bne.n	8001d92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	08da      	lsrs	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3208      	adds	r2, #8
 8001d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f003 0307 	and.w	r3, r3, #7
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	f003 0307 	and.w	r3, r3, #7
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	08da      	lsrs	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3208      	adds	r2, #8
 8001d8c:	6939      	ldr	r1, [r7, #16]
 8001d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	2203      	movs	r2, #3
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	4013      	ands	r3, r2
 8001da8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0203 	and.w	r2, r3, #3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 809a 	beq.w	8001f08 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd4:	4b55      	ldr	r3, [pc, #340]	@ (8001f2c <HAL_GPIO_Init+0x2cc>)
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	4a54      	ldr	r2, [pc, #336]	@ (8001f2c <HAL_GPIO_Init+0x2cc>)
 8001dda:	f043 0301 	orr.w	r3, r3, #1
 8001dde:	6193      	str	r3, [r2, #24]
 8001de0:	4b52      	ldr	r3, [pc, #328]	@ (8001f2c <HAL_GPIO_Init+0x2cc>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	60bb      	str	r3, [r7, #8]
 8001dea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dec:	4a50      	ldr	r2, [pc, #320]	@ (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0303 	and.w	r3, r3, #3
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e16:	d013      	beq.n	8001e40 <HAL_GPIO_Init+0x1e0>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a46      	ldr	r2, [pc, #280]	@ (8001f34 <HAL_GPIO_Init+0x2d4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00d      	beq.n	8001e3c <HAL_GPIO_Init+0x1dc>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a45      	ldr	r2, [pc, #276]	@ (8001f38 <HAL_GPIO_Init+0x2d8>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <HAL_GPIO_Init+0x1d8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a44      	ldr	r2, [pc, #272]	@ (8001f3c <HAL_GPIO_Init+0x2dc>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_GPIO_Init+0x1d4>
 8001e30:	2303      	movs	r3, #3
 8001e32:	e006      	b.n	8001e42 <HAL_GPIO_Init+0x1e2>
 8001e34:	2305      	movs	r3, #5
 8001e36:	e004      	b.n	8001e42 <HAL_GPIO_Init+0x1e2>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	e002      	b.n	8001e42 <HAL_GPIO_Init+0x1e2>
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e000      	b.n	8001e42 <HAL_GPIO_Init+0x1e2>
 8001e40:	2300      	movs	r3, #0
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	f002 0203 	and.w	r2, r2, #3
 8001e48:	0092      	lsls	r2, r2, #2
 8001e4a:	4093      	lsls	r3, r2
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e52:	4937      	ldr	r1, [pc, #220]	@ (8001f30 <HAL_GPIO_Init+0x2d0>)
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	089b      	lsrs	r3, r3, #2
 8001e58:	3302      	adds	r3, #2
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e60:	4b37      	ldr	r3, [pc, #220]	@ (8001f40 <HAL_GPIO_Init+0x2e0>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001e84:	4a2e      	ldr	r2, [pc, #184]	@ (8001f40 <HAL_GPIO_Init+0x2e0>)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8001f40 <HAL_GPIO_Init+0x2e0>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001eae:	4a24      	ldr	r2, [pc, #144]	@ (8001f40 <HAL_GPIO_Init+0x2e0>)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001eb4:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <HAL_GPIO_Init+0x2e0>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d003      	beq.n	8001ed8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001ed8:	4a19      	ldr	r2, [pc, #100]	@ (8001f40 <HAL_GPIO_Init+0x2e0>)
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ede:	4b18      	ldr	r3, [pc, #96]	@ (8001f40 <HAL_GPIO_Init+0x2e0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001f02:	4a0f      	ldr	r2, [pc, #60]	@ (8001f40 <HAL_GPIO_Init+0x2e0>)
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	fa22 f303 	lsr.w	r3, r2, r3
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f47f aea9 	bne.w	8001c70 <HAL_GPIO_Init+0x10>
  }
}
 8001f1e:	bf00      	nop
 8001f20:	bf00      	nop
 8001f22:	371c      	adds	r7, #28
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40010000 	.word	0x40010000
 8001f34:	48000400 	.word	0x48000400
 8001f38:	48000800 	.word	0x48000800
 8001f3c:	48000c00 	.word	0x48000c00
 8001f40:	40010400 	.word	0x40010400

08001f44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f4e:	4b08      	ldr	r3, [pc, #32]	@ (8001f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f50:	695a      	ldr	r2, [r3, #20]
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d006      	beq.n	8001f68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f5a:	4a05      	ldr	r2, [pc, #20]	@ (8001f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f5c:	88fb      	ldrh	r3, [r7, #6]
 8001f5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f60:	88fb      	ldrh	r3, [r7, #6]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 f806 	bl	8001f74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40010400 	.word	0x40010400

08001f74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e08d      	b.n	80020b8 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d106      	bne.n	8001fb6 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff fadd 	bl	8001570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2224      	movs	r2, #36	@ 0x24
 8001fba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0201 	bic.w	r2, r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685a      	ldr	r2, [r3, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fda:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fea:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d107      	bne.n	8002004 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002000:	609a      	str	r2, [r3, #8]
 8002002:	e006      	b.n	8002012 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002010:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	2b02      	cmp	r3, #2
 8002018:	d108      	bne.n	800202c <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	e007      	b.n	800203c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800203a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800204a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800204e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800205e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691a      	ldr	r2, [r3, #16]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69d9      	ldr	r1, [r3, #28]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f042 0201 	orr.w	r2, r2, #1
 8002098:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2220      	movs	r2, #32
 80020a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2200      	movs	r2, #0
 80020b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020b6:	2300      	movs	r3, #0
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3708      	adds	r7, #8
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af02      	add	r7, sp, #8
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	4608      	mov	r0, r1
 80020ca:	4611      	mov	r1, r2
 80020cc:	461a      	mov	r2, r3
 80020ce:	4603      	mov	r3, r0
 80020d0:	817b      	strh	r3, [r7, #10]
 80020d2:	460b      	mov	r3, r1
 80020d4:	813b      	strh	r3, [r7, #8]
 80020d6:	4613      	mov	r3, r2
 80020d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	f040 80f9 	bne.w	80022da <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <HAL_I2C_Mem_Write+0x34>
 80020ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d105      	bne.n	8002100 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80020fa:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0ed      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_I2C_Mem_Write+0x4e>
 800210a:	2302      	movs	r3, #2
 800210c:	e0e6      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	2201      	movs	r2, #1
 8002112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002116:	f7ff fc61 	bl	80019dc <HAL_GetTick>
 800211a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	9300      	str	r3, [sp, #0]
 8002120:	2319      	movs	r3, #25
 8002122:	2201      	movs	r2, #1
 8002124:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 fac3 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e0d1      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2221      	movs	r2, #33	@ 0x21
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2240      	movs	r2, #64	@ 0x40
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	6a3a      	ldr	r2, [r7, #32]
 8002152:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002158:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2200      	movs	r2, #0
 800215e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002160:	88f8      	ldrh	r0, [r7, #6]
 8002162:	893a      	ldrh	r2, [r7, #8]
 8002164:	8979      	ldrh	r1, [r7, #10]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	9301      	str	r3, [sp, #4]
 800216a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800216c:	9300      	str	r3, [sp, #0]
 800216e:	4603      	mov	r3, r0
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f9d3 	bl	800251c <I2C_RequestMemoryWrite>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e0a9      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800218c:	b29b      	uxth	r3, r3
 800218e:	2bff      	cmp	r3, #255	@ 0xff
 8002190:	d90e      	bls.n	80021b0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	22ff      	movs	r2, #255	@ 0xff
 8002196:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800219c:	b2da      	uxtb	r2, r3
 800219e:	8979      	ldrh	r1, [r7, #10]
 80021a0:	2300      	movs	r3, #0
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f000 fc47 	bl	8002a3c <I2C_TransferConfig>
 80021ae:	e00f      	b.n	80021d0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	8979      	ldrh	r1, [r7, #10]
 80021c2:	2300      	movs	r3, #0
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80021ca:	68f8      	ldr	r0, [r7, #12]
 80021cc:	f000 fc36 	bl	8002a3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 fac6 	bl	8002766 <I2C_WaitOnTXISFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e07b      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	781a      	ldrb	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f4:	1c5a      	adds	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fe:	b29b      	uxth	r3, r3
 8002200:	3b01      	subs	r3, #1
 8002202:	b29a      	uxth	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800220c:	3b01      	subs	r3, #1
 800220e:	b29a      	uxth	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002218:	b29b      	uxth	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d034      	beq.n	8002288 <HAL_I2C_Mem_Write+0x1c8>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002222:	2b00      	cmp	r3, #0
 8002224:	d130      	bne.n	8002288 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800222c:	2200      	movs	r2, #0
 800222e:	2180      	movs	r1, #128	@ 0x80
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fa3f 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e04d      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	2bff      	cmp	r3, #255	@ 0xff
 8002248:	d90e      	bls.n	8002268 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	22ff      	movs	r2, #255	@ 0xff
 800224e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002254:	b2da      	uxtb	r2, r3
 8002256:	8979      	ldrh	r1, [r7, #10]
 8002258:	2300      	movs	r3, #0
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 fbeb 	bl	8002a3c <I2C_TransferConfig>
 8002266:	e00f      	b.n	8002288 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800226c:	b29a      	uxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002276:	b2da      	uxtb	r2, r3
 8002278:	8979      	ldrh	r1, [r7, #10]
 800227a:	2300      	movs	r3, #0
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 fbda 	bl	8002a3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d19e      	bne.n	80021d0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 faac 	bl	80027f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e01a      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2220      	movs	r2, #32
 80022ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6859      	ldr	r1, [r3, #4]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	4b0a      	ldr	r3, [pc, #40]	@ (80022e4 <HAL_I2C_Mem_Write+0x224>)
 80022ba:	400b      	ands	r3, r1
 80022bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2220      	movs	r2, #32
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e000      	b.n	80022dc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80022da:	2302      	movs	r3, #2
  }
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3718      	adds	r7, #24
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	fe00e800 	.word	0xfe00e800

080022e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b088      	sub	sp, #32
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	4608      	mov	r0, r1
 80022f2:	4611      	mov	r1, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	817b      	strh	r3, [r7, #10]
 80022fa:	460b      	mov	r3, r1
 80022fc:	813b      	strh	r3, [r7, #8]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002308:	b2db      	uxtb	r3, r3
 800230a:	2b20      	cmp	r3, #32
 800230c:	f040 80fd 	bne.w	800250a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002310:	6a3b      	ldr	r3, [r7, #32]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d002      	beq.n	800231c <HAL_I2C_Mem_Read+0x34>
 8002316:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002318:	2b00      	cmp	r3, #0
 800231a:	d105      	bne.n	8002328 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002322:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0f1      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_I2C_Mem_Read+0x4e>
 8002332:	2302      	movs	r3, #2
 8002334:	e0ea      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800233e:	f7ff fb4d 	bl	80019dc <HAL_GetTick>
 8002342:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	2319      	movs	r3, #25
 800234a:	2201      	movs	r2, #1
 800234c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f000 f9af 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0d5      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2222      	movs	r2, #34	@ 0x22
 8002364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2240      	movs	r2, #64	@ 0x40
 800236c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	2200      	movs	r2, #0
 8002374:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6a3a      	ldr	r2, [r7, #32]
 800237a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002380:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002388:	88f8      	ldrh	r0, [r7, #6]
 800238a:	893a      	ldrh	r2, [r7, #8]
 800238c:	8979      	ldrh	r1, [r7, #10]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	4603      	mov	r3, r0
 8002398:	68f8      	ldr	r0, [r7, #12]
 800239a:	f000 f913 	bl	80025c4 <I2C_RequestMemoryRead>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e0ad      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	2bff      	cmp	r3, #255	@ 0xff
 80023b8:	d90e      	bls.n	80023d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2201      	movs	r2, #1
 80023be:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	8979      	ldrh	r1, [r7, #10]
 80023c8:	4b52      	ldr	r3, [pc, #328]	@ (8002514 <HAL_I2C_Mem_Read+0x22c>)
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fb33 	bl	8002a3c <I2C_TransferConfig>
 80023d6:	e00f      	b.n	80023f8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023dc:	b29a      	uxth	r2, r3
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	8979      	ldrh	r1, [r7, #10]
 80023ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002514 <HAL_I2C_Mem_Read+0x22c>)
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f000 fb22 	bl	8002a3c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fe:	2200      	movs	r2, #0
 8002400:	2104      	movs	r1, #4
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 f956 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e07c      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800242e:	3b01      	subs	r3, #1
 8002430:	b29a      	uxth	r2, r3
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800243a:	b29b      	uxth	r3, r3
 800243c:	3b01      	subs	r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d034      	beq.n	80024b8 <HAL_I2C_Mem_Read+0x1d0>
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002452:	2b00      	cmp	r3, #0
 8002454:	d130      	bne.n	80024b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245c:	2200      	movs	r2, #0
 800245e:	2180      	movs	r1, #128	@ 0x80
 8002460:	68f8      	ldr	r0, [r7, #12]
 8002462:	f000 f927 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e04d      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002474:	b29b      	uxth	r3, r3
 8002476:	2bff      	cmp	r3, #255	@ 0xff
 8002478:	d90e      	bls.n	8002498 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	2201      	movs	r2, #1
 800247e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002484:	b2da      	uxtb	r2, r3
 8002486:	8979      	ldrh	r1, [r7, #10]
 8002488:	2300      	movs	r3, #0
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 fad3 	bl	8002a3c <I2C_TransferConfig>
 8002496:	e00f      	b.n	80024b8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	8979      	ldrh	r1, [r7, #10]
 80024aa:	2300      	movs	r3, #0
 80024ac:	9300      	str	r3, [sp, #0]
 80024ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 fac2 	bl	8002a3c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d19a      	bne.n	80023f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024c6:	68f8      	ldr	r0, [r7, #12]
 80024c8:	f000 f994 	bl	80027f4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e01a      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2220      	movs	r2, #32
 80024dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002518 <HAL_I2C_Mem_Read+0x230>)
 80024ea:	400b      	ands	r3, r1
 80024ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2220      	movs	r2, #32
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e000      	b.n	800250c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800250a:	2302      	movs	r3, #2
  }
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	80002400 	.word	0x80002400
 8002518:	fe00e800 	.word	0xfe00e800

0800251c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af02      	add	r7, sp, #8
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	4608      	mov	r0, r1
 8002526:	4611      	mov	r1, r2
 8002528:	461a      	mov	r2, r3
 800252a:	4603      	mov	r3, r0
 800252c:	817b      	strh	r3, [r7, #10]
 800252e:	460b      	mov	r3, r1
 8002530:	813b      	strh	r3, [r7, #8]
 8002532:	4613      	mov	r3, r2
 8002534:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	8979      	ldrh	r1, [r7, #10]
 800253c:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <I2C_RequestMemoryWrite+0xa4>)
 800253e:	9300      	str	r3, [sp, #0]
 8002540:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 fa79 	bl	8002a3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	69b9      	ldr	r1, [r7, #24]
 800254e:	68f8      	ldr	r0, [r7, #12]
 8002550:	f000 f909 	bl	8002766 <I2C_WaitOnTXISFlagUntilTimeout>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e02c      	b.n	80025b8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	2b01      	cmp	r3, #1
 8002562:	d105      	bne.n	8002570 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002564:	893b      	ldrh	r3, [r7, #8]
 8002566:	b2da      	uxtb	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	629a      	str	r2, [r3, #40]	@ 0x28
 800256e:	e015      	b.n	800259c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002570:	893b      	ldrh	r3, [r7, #8]
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	b29b      	uxth	r3, r3
 8002576:	b2da      	uxtb	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	69b9      	ldr	r1, [r7, #24]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f8ef 	bl	8002766 <I2C_WaitOnTXISFlagUntilTimeout>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e012      	b.n	80025b8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002592:	893b      	ldrh	r3, [r7, #8]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	2200      	movs	r2, #0
 80025a4:	2180      	movs	r1, #128	@ 0x80
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f000 f884 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	80002000 	.word	0x80002000

080025c4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af02      	add	r7, sp, #8
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	4608      	mov	r0, r1
 80025ce:	4611      	mov	r1, r2
 80025d0:	461a      	mov	r2, r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	817b      	strh	r3, [r7, #10]
 80025d6:	460b      	mov	r3, r1
 80025d8:	813b      	strh	r3, [r7, #8]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80025de:	88fb      	ldrh	r3, [r7, #6]
 80025e0:	b2da      	uxtb	r2, r3
 80025e2:	8979      	ldrh	r1, [r7, #10]
 80025e4:	4b20      	ldr	r3, [pc, #128]	@ (8002668 <I2C_RequestMemoryRead+0xa4>)
 80025e6:	9300      	str	r3, [sp, #0]
 80025e8:	2300      	movs	r3, #0
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f000 fa26 	bl	8002a3c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025f0:	69fa      	ldr	r2, [r7, #28]
 80025f2:	69b9      	ldr	r1, [r7, #24]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 f8b6 	bl	8002766 <I2C_WaitOnTXISFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e02c      	b.n	800265e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	2b01      	cmp	r3, #1
 8002608:	d105      	bne.n	8002616 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800260a:	893b      	ldrh	r3, [r7, #8]
 800260c:	b2da      	uxtb	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	629a      	str	r2, [r3, #40]	@ 0x28
 8002614:	e015      	b.n	8002642 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002616:	893b      	ldrh	r3, [r7, #8]
 8002618:	0a1b      	lsrs	r3, r3, #8
 800261a:	b29b      	uxth	r3, r3
 800261c:	b2da      	uxtb	r2, r3
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	69b9      	ldr	r1, [r7, #24]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f89c 	bl	8002766 <I2C_WaitOnTXISFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e012      	b.n	800265e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002638:	893b      	ldrh	r3, [r7, #8]
 800263a:	b2da      	uxtb	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	9300      	str	r3, [sp, #0]
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2200      	movs	r2, #0
 800264a:	2140      	movs	r1, #64	@ 0x40
 800264c:	68f8      	ldr	r0, [r7, #12]
 800264e:	f000 f831 	bl	80026b4 <I2C_WaitOnFlagUntilTimeout>
 8002652:	4603      	mov	r3, r0
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800265c:	2300      	movs	r3, #0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	80002000 	.word	0x80002000

0800266c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	d103      	bne.n	800268a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2200      	movs	r2, #0
 8002688:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d007      	beq.n	80026a8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	619a      	str	r2, [r3, #24]
  }
}
 80026a8:	bf00      	nop
 80026aa:	370c      	adds	r7, #12
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	60b9      	str	r1, [r7, #8]
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	4613      	mov	r3, r2
 80026c2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026c4:	e03b      	b.n	800273e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	6839      	ldr	r1, [r7, #0]
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 f8d6 	bl	800287c <I2C_IsErrorOccurred>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e041      	b.n	800275e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026e0:	d02d      	beq.n	800273e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e2:	f7ff f97b 	bl	80019dc <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d302      	bcc.n	80026f8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d122      	bne.n	800273e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699a      	ldr	r2, [r3, #24]
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	4013      	ands	r3, r2
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	429a      	cmp	r2, r3
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	461a      	mov	r2, r3
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	429a      	cmp	r2, r3
 8002714:	d113      	bne.n	800273e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800271a:	f043 0220 	orr.w	r2, r3, #32
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e00f      	b.n	800275e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699a      	ldr	r2, [r3, #24]
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	4013      	ands	r3, r2
 8002748:	68ba      	ldr	r2, [r7, #8]
 800274a:	429a      	cmp	r2, r3
 800274c:	bf0c      	ite	eq
 800274e:	2301      	moveq	r3, #1
 8002750:	2300      	movne	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	429a      	cmp	r2, r3
 800275a:	d0b4      	beq.n	80026c6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800275c:	2300      	movs	r3, #0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	60f8      	str	r0, [r7, #12]
 800276e:	60b9      	str	r1, [r7, #8]
 8002770:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002772:	e033      	b.n	80027dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	68b9      	ldr	r1, [r7, #8]
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f87f 	bl	800287c <I2C_IsErrorOccurred>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e031      	b.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800278e:	d025      	beq.n	80027dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002790:	f7ff f924 	bl	80019dc <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	68ba      	ldr	r2, [r7, #8]
 800279c:	429a      	cmp	r2, r3
 800279e:	d302      	bcc.n	80027a6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d11a      	bne.n	80027dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b02      	cmp	r3, #2
 80027b2:	d013      	beq.n	80027dc <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b8:	f043 0220 	orr.w	r2, r3, #32
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2220      	movs	r2, #32
 80027c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e007      	b.n	80027ec <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d1c4      	bne.n	8002774 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	60b9      	str	r1, [r7, #8]
 80027fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002800:	e02f      	b.n	8002862 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	68b9      	ldr	r1, [r7, #8]
 8002806:	68f8      	ldr	r0, [r7, #12]
 8002808:	f000 f838 	bl	800287c <I2C_IsErrorOccurred>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e02d      	b.n	8002872 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002816:	f7ff f8e1 	bl	80019dc <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	68ba      	ldr	r2, [r7, #8]
 8002822:	429a      	cmp	r2, r3
 8002824:	d302      	bcc.n	800282c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d11a      	bne.n	8002862 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	f003 0320 	and.w	r3, r3, #32
 8002836:	2b20      	cmp	r3, #32
 8002838:	d013      	beq.n	8002862 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283e:	f043 0220 	orr.w	r2, r3, #32
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e007      	b.n	8002872 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	699b      	ldr	r3, [r3, #24]
 8002868:	f003 0320 	and.w	r3, r3, #32
 800286c:	2b20      	cmp	r3, #32
 800286e:	d1c8      	bne.n	8002802 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002870:	2300      	movs	r3, #0
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b08a      	sub	sp, #40	@ 0x28
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002888:	2300      	movs	r3, #0
 800288a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002896:	2300      	movs	r3, #0
 8002898:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d068      	beq.n	800297a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2210      	movs	r2, #16
 80028ae:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80028b0:	e049      	b.n	8002946 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d045      	beq.n	8002946 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80028ba:	f7ff f88f 	bl	80019dc <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d302      	bcc.n	80028d0 <I2C_IsErrorOccurred+0x54>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d13a      	bne.n	8002946 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028da:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80028e2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028f2:	d121      	bne.n	8002938 <I2C_IsErrorOccurred+0xbc>
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028fa:	d01d      	beq.n	8002938 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	2b20      	cmp	r3, #32
 8002900:	d01a      	beq.n	8002938 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	685a      	ldr	r2, [r3, #4]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002910:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002912:	f7ff f863 	bl	80019dc <HAL_GetTick>
 8002916:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002918:	e00e      	b.n	8002938 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800291a:	f7ff f85f 	bl	80019dc <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b19      	cmp	r3, #25
 8002926:	d907      	bls.n	8002938 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	f043 0320 	orr.w	r3, r3, #32
 800292e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002936:	e006      	b.n	8002946 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b20      	cmp	r3, #32
 8002944:	d1e9      	bne.n	800291a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0320 	and.w	r3, r3, #32
 8002950:	2b20      	cmp	r3, #32
 8002952:	d003      	beq.n	800295c <I2C_IsErrorOccurred+0xe0>
 8002954:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002958:	2b00      	cmp	r3, #0
 800295a:	d0aa      	beq.n	80028b2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800295c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002960:	2b00      	cmp	r3, #0
 8002962:	d103      	bne.n	800296c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2220      	movs	r2, #32
 800296a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	f043 0304 	orr.w	r3, r3, #4
 8002972:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	699b      	ldr	r3, [r3, #24]
 8002980:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00b      	beq.n	80029a4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800298c:	6a3b      	ldr	r3, [r7, #32]
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800299c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00b      	beq.n	80029c6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	f043 0308 	orr.w	r3, r3, #8
 80029b4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00b      	beq.n	80029e8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80029d0:	6a3b      	ldr	r3, [r7, #32]
 80029d2:	f043 0302 	orr.w	r3, r3, #2
 80029d6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80029e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01c      	beq.n	8002a2a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff fe3b 	bl	800266c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b0d      	ldr	r3, [pc, #52]	@ (8002a38 <I2C_IsErrorOccurred+0x1bc>)
 8002a02:	400b      	ands	r3, r1
 8002a04:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2220      	movs	r2, #32
 8002a16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002a2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3728      	adds	r7, #40	@ 0x28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	fe00e800 	.word	0xfe00e800

08002a3c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	607b      	str	r3, [r7, #4]
 8002a46:	460b      	mov	r3, r1
 8002a48:	817b      	strh	r3, [r7, #10]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a4e:	897b      	ldrh	r3, [r7, #10]
 8002a50:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a54:	7a7b      	ldrb	r3, [r7, #9]
 8002a56:	041b      	lsls	r3, r3, #16
 8002a58:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a5c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002a62:	6a3b      	ldr	r3, [r7, #32]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002a6a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	685a      	ldr	r2, [r3, #4]
 8002a72:	6a3b      	ldr	r3, [r7, #32]
 8002a74:	0d5b      	lsrs	r3, r3, #21
 8002a76:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002a7a:	4b08      	ldr	r3, [pc, #32]	@ (8002a9c <I2C_TransferConfig+0x60>)
 8002a7c:	430b      	orrs	r3, r1
 8002a7e:	43db      	mvns	r3, r3
 8002a80:	ea02 0103 	and.w	r1, r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	697a      	ldr	r2, [r7, #20]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	03ff63ff 	.word	0x03ff63ff

08002aa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d138      	bne.n	8002b28 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d101      	bne.n	8002ac4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e032      	b.n	8002b2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2224      	movs	r2, #36	@ 0x24
 8002ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002af2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0201 	orr.w	r2, r2, #1
 8002b12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2220      	movs	r2, #32
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b24:	2300      	movs	r3, #0
 8002b26:	e000      	b.n	8002b2a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b28:	2302      	movs	r3, #2
  }
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	6078      	str	r0, [r7, #4]
 8002b3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d139      	bne.n	8002bc0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b56:	2302      	movs	r3, #2
 8002b58:	e033      	b.n	8002bc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2224      	movs	r2, #36	@ 0x24
 8002b66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 0201 	bic.w	r2, r2, #1
 8002b78:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002b88:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	021b      	lsls	r3, r3, #8
 8002b8e:	68fa      	ldr	r2, [r7, #12]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2220      	movs	r2, #32
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	e000      	b.n	8002bc2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002bc0:	2302      	movs	r3, #2
  }
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bdc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002be0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d102      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	f001 b823 	b.w	8003c3c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bfa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	f000 817d 	beq.w	8002f06 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002c0c:	4bbc      	ldr	r3, [pc, #752]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f003 030c 	and.w	r3, r3, #12
 8002c14:	2b04      	cmp	r3, #4
 8002c16:	d00c      	beq.n	8002c32 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c18:	4bb9      	ldr	r3, [pc, #740]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d15c      	bne.n	8002cde <HAL_RCC_OscConfig+0x10e>
 8002c24:	4bb6      	ldr	r3, [pc, #728]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c30:	d155      	bne.n	8002cde <HAL_RCC_OscConfig+0x10e>
 8002c32:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c36:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c46:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d102      	bne.n	8002c64 <HAL_RCC_OscConfig+0x94>
 8002c5e:	4ba8      	ldr	r3, [pc, #672]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	e015      	b.n	8002c90 <HAL_RCC_OscConfig+0xc0>
 8002c64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c68:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002c70:	fa93 f3a3 	rbit	r3, r3
 8002c74:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002c78:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002c7c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002c80:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002c84:	fa93 f3a3 	rbit	r3, r3
 8002c88:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002c8c:	4b9c      	ldr	r3, [pc, #624]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002c94:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002c98:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002c9c:	fa92 f2a2 	rbit	r2, r2
 8002ca0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002ca4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002ca8:	fab2 f282 	clz	r2, r2
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f042 0220 	orr.w	r2, r2, #32
 8002cb2:	b2d2      	uxtb	r2, r2
 8002cb4:	f002 021f 	and.w	r2, r2, #31
 8002cb8:	2101      	movs	r1, #1
 8002cba:	fa01 f202 	lsl.w	r2, r1, r2
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 811f 	beq.w	8002f04 <HAL_RCC_OscConfig+0x334>
 8002cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f040 8116 	bne.w	8002f04 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	f000 bfaf 	b.w	8003c3c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cee:	d106      	bne.n	8002cfe <HAL_RCC_OscConfig+0x12e>
 8002cf0:	4b83      	ldr	r3, [pc, #524]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a82      	ldr	r2, [pc, #520]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	e036      	b.n	8002d6c <HAL_RCC_OscConfig+0x19c>
 8002cfe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d10c      	bne.n	8002d28 <HAL_RCC_OscConfig+0x158>
 8002d0e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7b      	ldr	r2, [pc, #492]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d18:	6013      	str	r3, [r2, #0]
 8002d1a:	4b79      	ldr	r3, [pc, #484]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a78      	ldr	r2, [pc, #480]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d24:	6013      	str	r3, [r2, #0]
 8002d26:	e021      	b.n	8002d6c <HAL_RCC_OscConfig+0x19c>
 8002d28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d38:	d10c      	bne.n	8002d54 <HAL_RCC_OscConfig+0x184>
 8002d3a:	4b71      	ldr	r3, [pc, #452]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a70      	ldr	r2, [pc, #448]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d40:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b6e      	ldr	r3, [pc, #440]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a6d      	ldr	r2, [pc, #436]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	e00b      	b.n	8002d6c <HAL_RCC_OscConfig+0x19c>
 8002d54:	4b6a      	ldr	r3, [pc, #424]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a69      	ldr	r2, [pc, #420]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b67      	ldr	r3, [pc, #412]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a66      	ldr	r2, [pc, #408]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d66:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d6a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002d6c:	4b64      	ldr	r3, [pc, #400]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d70:	f023 020f 	bic.w	r2, r3, #15
 8002d74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d78:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	495f      	ldr	r1, [pc, #380]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d8a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d059      	beq.n	8002e4a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d96:	f7fe fe21 	bl	80019dc <HAL_GetTick>
 8002d9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da0:	f7fe fe1c 	bl	80019dc <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	2b64      	cmp	r3, #100	@ 0x64
 8002dae:	d902      	bls.n	8002db6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002db0:	2303      	movs	r3, #3
 8002db2:	f000 bf43 	b.w	8003c3c <HAL_RCC_OscConfig+0x106c>
 8002db6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dbe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002dc2:	fa93 f3a3 	rbit	r3, r3
 8002dc6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002dca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dce:	fab3 f383 	clz	r3, r3
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	095b      	lsrs	r3, r3, #5
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d102      	bne.n	8002de8 <HAL_RCC_OscConfig+0x218>
 8002de2:	4b47      	ldr	r3, [pc, #284]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	e015      	b.n	8002e14 <HAL_RCC_OscConfig+0x244>
 8002de8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dec:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002dfc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e00:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002e04:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002e08:	fa93 f3a3 	rbit	r3, r3
 8002e0c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002e10:	4b3b      	ldr	r3, [pc, #236]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e14:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002e18:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002e1c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002e20:	fa92 f2a2 	rbit	r2, r2
 8002e24:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002e28:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002e2c:	fab2 f282 	clz	r2, r2
 8002e30:	b2d2      	uxtb	r2, r2
 8002e32:	f042 0220 	orr.w	r2, r2, #32
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	f002 021f 	and.w	r2, r2, #31
 8002e3c:	2101      	movs	r1, #1
 8002e3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0ab      	beq.n	8002da0 <HAL_RCC_OscConfig+0x1d0>
 8002e48:	e05d      	b.n	8002f06 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fe fdc7 	bl	80019dc <HAL_GetTick>
 8002e4e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e52:	e00a      	b.n	8002e6a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e54:	f7fe fdc2 	bl	80019dc <HAL_GetTick>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	2b64      	cmp	r3, #100	@ 0x64
 8002e62:	d902      	bls.n	8002e6a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	f000 bee9 	b.w	8003c3c <HAL_RCC_OscConfig+0x106c>
 8002e6a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002e6e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002e7e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e82:	fab3 f383 	clz	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	095b      	lsrs	r3, r3, #5
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_RCC_OscConfig+0x2cc>
 8002e96:	4b1a      	ldr	r3, [pc, #104]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	e015      	b.n	8002ec8 <HAL_RCC_OscConfig+0x2f8>
 8002e9c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ea0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002ea8:	fa93 f3a3 	rbit	r3, r3
 8002eac:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002eb0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002eb4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002eb8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002ebc:	fa93 f3a3 	rbit	r3, r3
 8002ec0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8002f00 <HAL_RCC_OscConfig+0x330>)
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ecc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002ed0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002ed4:	fa92 f2a2 	rbit	r2, r2
 8002ed8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002edc:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002ee0:	fab2 f282 	clz	r2, r2
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	f042 0220 	orr.w	r2, r2, #32
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	f002 021f 	and.w	r2, r2, #31
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1ab      	bne.n	8002e54 <HAL_RCC_OscConfig+0x284>
 8002efc:	e003      	b.n	8002f06 <HAL_RCC_OscConfig+0x336>
 8002efe:	bf00      	nop
 8002f00:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 817d 	beq.w	8003216 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002f1c:	4ba6      	ldr	r3, [pc, #664]	@ (80031b8 <HAL_RCC_OscConfig+0x5e8>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 030c 	and.w	r3, r3, #12
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00b      	beq.n	8002f40 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002f28:	4ba3      	ldr	r3, [pc, #652]	@ (80031b8 <HAL_RCC_OscConfig+0x5e8>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f003 030c 	and.w	r3, r3, #12
 8002f30:	2b08      	cmp	r3, #8
 8002f32:	d172      	bne.n	800301a <HAL_RCC_OscConfig+0x44a>
 8002f34:	4ba0      	ldr	r3, [pc, #640]	@ (80031b8 <HAL_RCC_OscConfig+0x5e8>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d16c      	bne.n	800301a <HAL_RCC_OscConfig+0x44a>
 8002f40:	2302      	movs	r3, #2
 8002f42:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002f4a:	fa93 f3a3 	rbit	r3, r3
 8002f4e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002f52:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	095b      	lsrs	r3, r3, #5
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d102      	bne.n	8002f70 <HAL_RCC_OscConfig+0x3a0>
 8002f6a:	4b93      	ldr	r3, [pc, #588]	@ (80031b8 <HAL_RCC_OscConfig+0x5e8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	e013      	b.n	8002f98 <HAL_RCC_OscConfig+0x3c8>
 8002f70:	2302      	movs	r3, #2
 8002f72:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f76:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002f7a:	fa93 f3a3 	rbit	r3, r3
 8002f7e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002f82:	2302      	movs	r3, #2
 8002f84:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002f88:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002f8c:	fa93 f3a3 	rbit	r3, r3
 8002f90:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002f94:	4b88      	ldr	r3, [pc, #544]	@ (80031b8 <HAL_RCC_OscConfig+0x5e8>)
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	2202      	movs	r2, #2
 8002f9a:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002f9e:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002fa2:	fa92 f2a2 	rbit	r2, r2
 8002fa6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002faa:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002fae:	fab2 f282 	clz	r2, r2
 8002fb2:	b2d2      	uxtb	r2, r2
 8002fb4:	f042 0220 	orr.w	r2, r2, #32
 8002fb8:	b2d2      	uxtb	r2, r2
 8002fba:	f002 021f 	and.w	r2, r2, #31
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x410>
 8002fca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d002      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f000 be2e 	b.w	8003c3c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe0:	4b75      	ldr	r3, [pc, #468]	@ (80031b8 <HAL_RCC_OscConfig+0x5e8>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fe8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695b      	ldr	r3, [r3, #20]
 8002ff4:	21f8      	movs	r1, #248	@ 0xf8
 8002ff6:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ffa:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002ffe:	fa91 f1a1 	rbit	r1, r1
 8003002:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003006:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800300a:	fab1 f181 	clz	r1, r1
 800300e:	b2c9      	uxtb	r1, r1
 8003010:	408b      	lsls	r3, r1
 8003012:	4969      	ldr	r1, [pc, #420]	@ (80031b8 <HAL_RCC_OscConfig+0x5e8>)
 8003014:	4313      	orrs	r3, r2
 8003016:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003018:	e0fd      	b.n	8003216 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800301a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800301e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 8088 	beq.w	800313c <HAL_RCC_OscConfig+0x56c>
 800302c:	2301      	movs	r3, #1
 800302e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003032:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003036:	fa93 f3a3 	rbit	r3, r3
 800303a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800303e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800304c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	461a      	mov	r2, r3
 8003054:	2301      	movs	r3, #1
 8003056:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003058:	f7fe fcc0 	bl	80019dc <HAL_GetTick>
 800305c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	e00a      	b.n	8003078 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003062:	f7fe fcbb 	bl	80019dc <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d902      	bls.n	8003078 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	f000 bde2 	b.w	8003c3c <HAL_RCC_OscConfig+0x106c>
 8003078:	2302      	movs	r3, #2
 800307a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800308a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308e:	fab3 f383 	clz	r3, r3
 8003092:	b2db      	uxtb	r3, r3
 8003094:	095b      	lsrs	r3, r3, #5
 8003096:	b2db      	uxtb	r3, r3
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d102      	bne.n	80030a8 <HAL_RCC_OscConfig+0x4d8>
 80030a2:	4b45      	ldr	r3, [pc, #276]	@ (80031b8 <HAL_RCC_OscConfig+0x5e8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	e013      	b.n	80030d0 <HAL_RCC_OscConfig+0x500>
 80030a8:	2302      	movs	r3, #2
 80030aa:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80030b2:	fa93 f3a3 	rbit	r3, r3
 80030b6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80030ba:	2302      	movs	r3, #2
 80030bc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80030c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80030cc:	4b3a      	ldr	r3, [pc, #232]	@ (80031b8 <HAL_RCC_OscConfig+0x5e8>)
 80030ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030d0:	2202      	movs	r2, #2
 80030d2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80030d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80030da:	fa92 f2a2 	rbit	r2, r2
 80030de:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80030e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80030e6:	fab2 f282 	clz	r2, r2
 80030ea:	b2d2      	uxtb	r2, r2
 80030ec:	f042 0220 	orr.w	r2, r2, #32
 80030f0:	b2d2      	uxtb	r2, r2
 80030f2:	f002 021f 	and.w	r2, r2, #31
 80030f6:	2101      	movs	r1, #1
 80030f8:	fa01 f202 	lsl.w	r2, r1, r2
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0af      	beq.n	8003062 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003102:	4b2d      	ldr	r3, [pc, #180]	@ (80031b8 <HAL_RCC_OscConfig+0x5e8>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800310a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800310e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	21f8      	movs	r1, #248	@ 0xf8
 8003118:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003120:	fa91 f1a1 	rbit	r1, r1
 8003124:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003128:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 800312c:	fab1 f181 	clz	r1, r1
 8003130:	b2c9      	uxtb	r1, r1
 8003132:	408b      	lsls	r3, r1
 8003134:	4920      	ldr	r1, [pc, #128]	@ (80031b8 <HAL_RCC_OscConfig+0x5e8>)
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
 800313a:	e06c      	b.n	8003216 <HAL_RCC_OscConfig+0x646>
 800313c:	2301      	movs	r3, #1
 800313e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003142:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003146:	fa93 f3a3 	rbit	r3, r3
 800314a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800314e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003152:	fab3 f383 	clz	r3, r3
 8003156:	b2db      	uxtb	r3, r3
 8003158:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800315c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	461a      	mov	r2, r3
 8003164:	2300      	movs	r3, #0
 8003166:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fe fc38 	bl	80019dc <HAL_GetTick>
 800316c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003170:	e00a      	b.n	8003188 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003172:	f7fe fc33 	bl	80019dc <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800317c:	1ad3      	subs	r3, r2, r3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d902      	bls.n	8003188 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003182:	2303      	movs	r3, #3
 8003184:	f000 bd5a 	b.w	8003c3c <HAL_RCC_OscConfig+0x106c>
 8003188:	2302      	movs	r3, #2
 800318a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800319a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800319e:	fab3 f383 	clz	r3, r3
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	095b      	lsrs	r3, r3, #5
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	f043 0301 	orr.w	r3, r3, #1
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d104      	bne.n	80031bc <HAL_RCC_OscConfig+0x5ec>
 80031b2:	4b01      	ldr	r3, [pc, #4]	@ (80031b8 <HAL_RCC_OscConfig+0x5e8>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	e015      	b.n	80031e4 <HAL_RCC_OscConfig+0x614>
 80031b8:	40021000 	.word	0x40021000
 80031bc:	2302      	movs	r3, #2
 80031be:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80031c6:	fa93 f3a3 	rbit	r3, r3
 80031ca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80031ce:	2302      	movs	r3, #2
 80031d0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80031d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80031e0:	4bc8      	ldr	r3, [pc, #800]	@ (8003504 <HAL_RCC_OscConfig+0x934>)
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	2202      	movs	r2, #2
 80031e6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80031ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80031ee:	fa92 f2a2 	rbit	r2, r2
 80031f2:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80031f6:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80031fa:	fab2 f282 	clz	r2, r2
 80031fe:	b2d2      	uxtb	r2, r2
 8003200:	f042 0220 	orr.w	r2, r2, #32
 8003204:	b2d2      	uxtb	r2, r2
 8003206:	f002 021f 	and.w	r2, r2, #31
 800320a:	2101      	movs	r1, #1
 800320c:	fa01 f202 	lsl.w	r2, r1, r2
 8003210:	4013      	ands	r3, r2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1ad      	bne.n	8003172 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003216:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 8110 	beq.w	800344c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800322c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003230:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d079      	beq.n	8003330 <HAL_RCC_OscConfig+0x760>
 800323c:	2301      	movs	r3, #1
 800323e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800324e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003252:	fab3 f383 	clz	r3, r3
 8003256:	b2db      	uxtb	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	4bab      	ldr	r3, [pc, #684]	@ (8003508 <HAL_RCC_OscConfig+0x938>)
 800325c:	4413      	add	r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	461a      	mov	r2, r3
 8003262:	2301      	movs	r3, #1
 8003264:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003266:	f7fe fbb9 	bl	80019dc <HAL_GetTick>
 800326a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326e:	e00a      	b.n	8003286 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003270:	f7fe fbb4 	bl	80019dc <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d902      	bls.n	8003286 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	f000 bcdb 	b.w	8003c3c <HAL_RCC_OscConfig+0x106c>
 8003286:	2302      	movs	r3, #2
 8003288:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003290:	fa93 f3a3 	rbit	r3, r3
 8003294:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003298:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800329c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80032a0:	2202      	movs	r2, #2
 80032a2:	601a      	str	r2, [r3, #0]
 80032a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	fa93 f2a3 	rbit	r2, r3
 80032b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032c4:	2202      	movs	r2, #2
 80032c6:	601a      	str	r2, [r3, #0]
 80032c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	fa93 f2a3 	rbit	r2, r3
 80032d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032da:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80032de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032e0:	4b88      	ldr	r3, [pc, #544]	@ (8003504 <HAL_RCC_OscConfig+0x934>)
 80032e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80032ec:	2102      	movs	r1, #2
 80032ee:	6019      	str	r1, [r3, #0]
 80032f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032f4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	fa93 f1a3 	rbit	r1, r3
 80032fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003302:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003306:	6019      	str	r1, [r3, #0]
  return result;
 8003308:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800330c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f003 031f 	and.w	r3, r3, #31
 8003322:	2101      	movs	r1, #1
 8003324:	fa01 f303 	lsl.w	r3, r1, r3
 8003328:	4013      	ands	r3, r2
 800332a:	2b00      	cmp	r3, #0
 800332c:	d0a0      	beq.n	8003270 <HAL_RCC_OscConfig+0x6a0>
 800332e:	e08d      	b.n	800344c <HAL_RCC_OscConfig+0x87c>
 8003330:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003334:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003338:	2201      	movs	r2, #1
 800333a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003340:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	fa93 f2a3 	rbit	r2, r3
 800334a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800334e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003352:	601a      	str	r2, [r3, #0]
  return result;
 8003354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003358:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800335c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	461a      	mov	r2, r3
 8003366:	4b68      	ldr	r3, [pc, #416]	@ (8003508 <HAL_RCC_OscConfig+0x938>)
 8003368:	4413      	add	r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	461a      	mov	r2, r3
 800336e:	2300      	movs	r3, #0
 8003370:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003372:	f7fe fb33 	bl	80019dc <HAL_GetTick>
 8003376:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800337a:	e00a      	b.n	8003392 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800337c:	f7fe fb2e 	bl	80019dc <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d902      	bls.n	8003392 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	f000 bc55 	b.w	8003c3c <HAL_RCC_OscConfig+0x106c>
 8003392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003396:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800339a:	2202      	movs	r2, #2
 800339c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	fa93 f2a3 	rbit	r2, r3
 80033ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033b0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80033b4:	601a      	str	r2, [r3, #0]
 80033b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ba:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80033be:	2202      	movs	r2, #2
 80033c0:	601a      	str	r2, [r3, #0]
 80033c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	fa93 f2a3 	rbit	r2, r3
 80033d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033de:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80033e2:	2202      	movs	r2, #2
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	fa93 f2a3 	rbit	r2, r3
 80033f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80033fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033fe:	4b41      	ldr	r3, [pc, #260]	@ (8003504 <HAL_RCC_OscConfig+0x934>)
 8003400:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003406:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800340a:	2102      	movs	r1, #2
 800340c:	6019      	str	r1, [r3, #0]
 800340e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003412:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	fa93 f1a3 	rbit	r1, r3
 800341c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003420:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003424:	6019      	str	r1, [r3, #0]
  return result;
 8003426:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f003 031f 	and.w	r3, r3, #31
 8003440:	2101      	movs	r1, #1
 8003442:	fa01 f303 	lsl.w	r3, r1, r3
 8003446:	4013      	ands	r3, r2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d197      	bne.n	800337c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800344c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003450:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	f000 81a1 	beq.w	80037a4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003462:	2300      	movs	r3, #0
 8003464:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003468:	4b26      	ldr	r3, [pc, #152]	@ (8003504 <HAL_RCC_OscConfig+0x934>)
 800346a:	69db      	ldr	r3, [r3, #28]
 800346c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d116      	bne.n	80034a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003474:	4b23      	ldr	r3, [pc, #140]	@ (8003504 <HAL_RCC_OscConfig+0x934>)
 8003476:	69db      	ldr	r3, [r3, #28]
 8003478:	4a22      	ldr	r2, [pc, #136]	@ (8003504 <HAL_RCC_OscConfig+0x934>)
 800347a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800347e:	61d3      	str	r3, [r2, #28]
 8003480:	4b20      	ldr	r3, [pc, #128]	@ (8003504 <HAL_RCC_OscConfig+0x934>)
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003488:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800348c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003496:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800349a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034a2:	4b1a      	ldr	r3, [pc, #104]	@ (800350c <HAL_RCC_OscConfig+0x93c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d11a      	bne.n	80034e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034ae:	4b17      	ldr	r3, [pc, #92]	@ (800350c <HAL_RCC_OscConfig+0x93c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a16      	ldr	r2, [pc, #88]	@ (800350c <HAL_RCC_OscConfig+0x93c>)
 80034b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034ba:	f7fe fa8f 	bl	80019dc <HAL_GetTick>
 80034be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c2:	e009      	b.n	80034d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c4:	f7fe fa8a 	bl	80019dc <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b64      	cmp	r3, #100	@ 0x64
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e3b1      	b.n	8003c3c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d8:	4b0c      	ldr	r3, [pc, #48]	@ (800350c <HAL_RCC_OscConfig+0x93c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0ef      	beq.n	80034c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d10d      	bne.n	8003510 <HAL_RCC_OscConfig+0x940>
 80034f4:	4b03      	ldr	r3, [pc, #12]	@ (8003504 <HAL_RCC_OscConfig+0x934>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4a02      	ldr	r2, [pc, #8]	@ (8003504 <HAL_RCC_OscConfig+0x934>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6213      	str	r3, [r2, #32]
 8003500:	e03c      	b.n	800357c <HAL_RCC_OscConfig+0x9ac>
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	10908120 	.word	0x10908120
 800350c:	40007000 	.word	0x40007000
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d10c      	bne.n	800353a <HAL_RCC_OscConfig+0x96a>
 8003520:	4bc1      	ldr	r3, [pc, #772]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	4ac0      	ldr	r2, [pc, #768]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 8003526:	f023 0301 	bic.w	r3, r3, #1
 800352a:	6213      	str	r3, [r2, #32]
 800352c:	4bbe      	ldr	r3, [pc, #760]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 800352e:	6a1b      	ldr	r3, [r3, #32]
 8003530:	4abd      	ldr	r2, [pc, #756]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 8003532:	f023 0304 	bic.w	r3, r3, #4
 8003536:	6213      	str	r3, [r2, #32]
 8003538:	e020      	b.n	800357c <HAL_RCC_OscConfig+0x9ac>
 800353a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	2b05      	cmp	r3, #5
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x994>
 800354a:	4bb7      	ldr	r3, [pc, #732]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 800354c:	6a1b      	ldr	r3, [r3, #32]
 800354e:	4ab6      	ldr	r2, [pc, #728]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	6213      	str	r3, [r2, #32]
 8003556:	4bb4      	ldr	r3, [pc, #720]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4ab3      	ldr	r2, [pc, #716]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6213      	str	r3, [r2, #32]
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0x9ac>
 8003564:	4bb0      	ldr	r3, [pc, #704]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 8003566:	6a1b      	ldr	r3, [r3, #32]
 8003568:	4aaf      	ldr	r2, [pc, #700]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6213      	str	r3, [r2, #32]
 8003570:	4bad      	ldr	r3, [pc, #692]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 8003572:	6a1b      	ldr	r3, [r3, #32]
 8003574:	4aac      	ldr	r2, [pc, #688]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 8003576:	f023 0304 	bic.w	r3, r3, #4
 800357a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003580:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 8081 	beq.w	8003690 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800358e:	f7fe fa25 	bl	80019dc <HAL_GetTick>
 8003592:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003596:	e00b      	b.n	80035b0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003598:	f7fe fa20 	bl	80019dc <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e345      	b.n	8003c3c <HAL_RCC_OscConfig+0x106c>
 80035b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80035b8:	2202      	movs	r2, #2
 80035ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	fa93 f2a3 	rbit	r2, r3
 80035ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035ce:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035d8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80035dc:	2202      	movs	r2, #2
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	fa93 f2a3 	rbit	r2, r3
 80035ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80035f6:	601a      	str	r2, [r3, #0]
  return result;
 80035f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fc:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003600:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003602:	fab3 f383 	clz	r3, r3
 8003606:	b2db      	uxtb	r3, r3
 8003608:	095b      	lsrs	r3, r3, #5
 800360a:	b2db      	uxtb	r3, r3
 800360c:	f043 0302 	orr.w	r3, r3, #2
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d102      	bne.n	800361c <HAL_RCC_OscConfig+0xa4c>
 8003616:	4b84      	ldr	r3, [pc, #528]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	e013      	b.n	8003644 <HAL_RCC_OscConfig+0xa74>
 800361c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003620:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003624:	2202      	movs	r2, #2
 8003626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800362c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	fa93 f2a3 	rbit	r2, r3
 8003636:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800363a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800363e:	601a      	str	r2, [r3, #0]
 8003640:	4b79      	ldr	r3, [pc, #484]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 8003642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003644:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003648:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800364c:	2102      	movs	r1, #2
 800364e:	6011      	str	r1, [r2, #0]
 8003650:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003654:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003658:	6812      	ldr	r2, [r2, #0]
 800365a:	fa92 f1a2 	rbit	r1, r2
 800365e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003662:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003666:	6011      	str	r1, [r2, #0]
  return result;
 8003668:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800366c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003670:	6812      	ldr	r2, [r2, #0]
 8003672:	fab2 f282 	clz	r2, r2
 8003676:	b2d2      	uxtb	r2, r2
 8003678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800367c:	b2d2      	uxtb	r2, r2
 800367e:	f002 021f 	and.w	r2, r2, #31
 8003682:	2101      	movs	r1, #1
 8003684:	fa01 f202 	lsl.w	r2, r1, r2
 8003688:	4013      	ands	r3, r2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d084      	beq.n	8003598 <HAL_RCC_OscConfig+0x9c8>
 800368e:	e07f      	b.n	8003790 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003690:	f7fe f9a4 	bl	80019dc <HAL_GetTick>
 8003694:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003698:	e00b      	b.n	80036b2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800369a:	f7fe f99f 	bl	80019dc <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e2c4      	b.n	8003c3c <HAL_RCC_OscConfig+0x106c>
 80036b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80036ba:	2202      	movs	r2, #2
 80036bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fa93 f2a3 	rbit	r2, r3
 80036cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036d0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80036d4:	601a      	str	r2, [r3, #0]
 80036d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036da:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80036de:	2202      	movs	r2, #2
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	fa93 f2a3 	rbit	r2, r3
 80036f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80036f8:	601a      	str	r2, [r3, #0]
  return result;
 80036fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fe:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003702:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003704:	fab3 f383 	clz	r3, r3
 8003708:	b2db      	uxtb	r3, r3
 800370a:	095b      	lsrs	r3, r3, #5
 800370c:	b2db      	uxtb	r3, r3
 800370e:	f043 0302 	orr.w	r3, r3, #2
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b02      	cmp	r3, #2
 8003716:	d102      	bne.n	800371e <HAL_RCC_OscConfig+0xb4e>
 8003718:	4b43      	ldr	r3, [pc, #268]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	e013      	b.n	8003746 <HAL_RCC_OscConfig+0xb76>
 800371e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003722:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003726:	2202      	movs	r2, #2
 8003728:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800372e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	fa93 f2a3 	rbit	r2, r3
 8003738:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800373c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	4b39      	ldr	r3, [pc, #228]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 8003744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003746:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800374a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800374e:	2102      	movs	r1, #2
 8003750:	6011      	str	r1, [r2, #0]
 8003752:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003756:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800375a:	6812      	ldr	r2, [r2, #0]
 800375c:	fa92 f1a2 	rbit	r1, r2
 8003760:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003764:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003768:	6011      	str	r1, [r2, #0]
  return result;
 800376a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800376e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	fab2 f282 	clz	r2, r2
 8003778:	b2d2      	uxtb	r2, r2
 800377a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800377e:	b2d2      	uxtb	r2, r2
 8003780:	f002 021f 	and.w	r2, r2, #31
 8003784:	2101      	movs	r1, #1
 8003786:	fa01 f202 	lsl.w	r2, r1, r2
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d184      	bne.n	800369a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003790:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003794:	2b01      	cmp	r3, #1
 8003796:	d105      	bne.n	80037a4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003798:	4b23      	ldr	r3, [pc, #140]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 800379a:	69db      	ldr	r3, [r3, #28]
 800379c:	4a22      	ldr	r2, [pc, #136]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 800379e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037a2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 8242 	beq.w	8003c3a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b6:	4b1c      	ldr	r3, [pc, #112]	@ (8003828 <HAL_RCC_OscConfig+0xc58>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b08      	cmp	r3, #8
 80037c0:	f000 8213 	beq.w	8003bea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69db      	ldr	r3, [r3, #28]
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	f040 8162 	bne.w	8003a9a <HAL_RCC_OscConfig+0xeca>
 80037d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037da:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80037de:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80037e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	fa93 f2a3 	rbit	r2, r3
 80037f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80037fa:	601a      	str	r2, [r3, #0]
  return result;
 80037fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003800:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003804:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	fab3 f383 	clz	r3, r3
 800380a:	b2db      	uxtb	r3, r3
 800380c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003810:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	461a      	mov	r2, r3
 8003818:	2300      	movs	r3, #0
 800381a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe f8de 	bl	80019dc <HAL_GetTick>
 8003820:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003824:	e00c      	b.n	8003840 <HAL_RCC_OscConfig+0xc70>
 8003826:	bf00      	nop
 8003828:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800382c:	f7fe f8d6 	bl	80019dc <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	2b02      	cmp	r3, #2
 800383a:	d901      	bls.n	8003840 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800383c:	2303      	movs	r3, #3
 800383e:	e1fd      	b.n	8003c3c <HAL_RCC_OscConfig+0x106c>
 8003840:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003844:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003848:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800384c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800384e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003852:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	fa93 f2a3 	rbit	r2, r3
 800385c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003860:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003864:	601a      	str	r2, [r3, #0]
  return result;
 8003866:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800386e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003870:	fab3 f383 	clz	r3, r3
 8003874:	b2db      	uxtb	r3, r3
 8003876:	095b      	lsrs	r3, r3, #5
 8003878:	b2db      	uxtb	r3, r3
 800387a:	f043 0301 	orr.w	r3, r3, #1
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2b01      	cmp	r3, #1
 8003882:	d102      	bne.n	800388a <HAL_RCC_OscConfig+0xcba>
 8003884:	4bb0      	ldr	r3, [pc, #704]	@ (8003b48 <HAL_RCC_OscConfig+0xf78>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	e027      	b.n	80038da <HAL_RCC_OscConfig+0xd0a>
 800388a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800388e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003892:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003896:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003898:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800389c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	fa93 f2a3 	rbit	r2, r3
 80038a6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038aa:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038b4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80038b8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	fa93 f2a3 	rbit	r2, r3
 80038cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	4b9c      	ldr	r3, [pc, #624]	@ (8003b48 <HAL_RCC_OscConfig+0xf78>)
 80038d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038da:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038de:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80038e2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80038e6:	6011      	str	r1, [r2, #0]
 80038e8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038ec:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80038f0:	6812      	ldr	r2, [r2, #0]
 80038f2:	fa92 f1a2 	rbit	r1, r2
 80038f6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80038fa:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80038fe:	6011      	str	r1, [r2, #0]
  return result;
 8003900:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003904:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	fab2 f282 	clz	r2, r2
 800390e:	b2d2      	uxtb	r2, r2
 8003910:	f042 0220 	orr.w	r2, r2, #32
 8003914:	b2d2      	uxtb	r2, r2
 8003916:	f002 021f 	and.w	r2, r2, #31
 800391a:	2101      	movs	r1, #1
 800391c:	fa01 f202 	lsl.w	r2, r1, r2
 8003920:	4013      	ands	r3, r2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d182      	bne.n	800382c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003926:	4b88      	ldr	r3, [pc, #544]	@ (8003b48 <HAL_RCC_OscConfig+0xf78>)
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800392e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003932:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800393a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800393e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	430b      	orrs	r3, r1
 8003948:	497f      	ldr	r1, [pc, #508]	@ (8003b48 <HAL_RCC_OscConfig+0xf78>)
 800394a:	4313      	orrs	r3, r2
 800394c:	604b      	str	r3, [r1, #4]
 800394e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003952:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003956:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800395a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800395c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003960:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	fa93 f2a3 	rbit	r2, r3
 800396a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800396e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003972:	601a      	str	r2, [r3, #0]
  return result;
 8003974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003978:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800397c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
 8003984:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003988:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	461a      	mov	r2, r3
 8003990:	2301      	movs	r3, #1
 8003992:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003994:	f7fe f822 	bl	80019dc <HAL_GetTick>
 8003998:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800399c:	e009      	b.n	80039b2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800399e:	f7fe f81d 	bl	80019dc <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e144      	b.n	8003c3c <HAL_RCC_OscConfig+0x106c>
 80039b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80039ba:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	fa93 f2a3 	rbit	r2, r3
 80039ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80039d6:	601a      	str	r2, [r3, #0]
  return result;
 80039d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039dc:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80039e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80039e2:	fab3 f383 	clz	r3, r3
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	095b      	lsrs	r3, r3, #5
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	f043 0301 	orr.w	r3, r3, #1
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d102      	bne.n	80039fc <HAL_RCC_OscConfig+0xe2c>
 80039f6:	4b54      	ldr	r3, [pc, #336]	@ (8003b48 <HAL_RCC_OscConfig+0xf78>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	e027      	b.n	8003a4c <HAL_RCC_OscConfig+0xe7c>
 80039fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a00:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003a04:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a0e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	fa93 f2a3 	rbit	r2, r3
 8003a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a1c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a26:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003a2a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a34:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	fa93 f2a3 	rbit	r2, r3
 8003a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a42:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	4b3f      	ldr	r3, [pc, #252]	@ (8003b48 <HAL_RCC_OscConfig+0xf78>)
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a50:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003a54:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003a58:	6011      	str	r1, [r2, #0]
 8003a5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a5e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	fa92 f1a2 	rbit	r1, r2
 8003a68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a6c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003a70:	6011      	str	r1, [r2, #0]
  return result;
 8003a72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a76:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003a7a:	6812      	ldr	r2, [r2, #0]
 8003a7c:	fab2 f282 	clz	r2, r2
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	f042 0220 	orr.w	r2, r2, #32
 8003a86:	b2d2      	uxtb	r2, r2
 8003a88:	f002 021f 	and.w	r2, r2, #31
 8003a8c:	2101      	movs	r1, #1
 8003a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d082      	beq.n	800399e <HAL_RCC_OscConfig+0xdce>
 8003a98:	e0cf      	b.n	8003c3a <HAL_RCC_OscConfig+0x106a>
 8003a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9e:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003aa2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003aa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aac:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	fa93 f2a3 	rbit	r2, r3
 8003ab6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aba:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003abe:	601a      	str	r2, [r3, #0]
  return result;
 8003ac0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ac4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003ac8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aca:	fab3 f383 	clz	r3, r3
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ad4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	461a      	mov	r2, r3
 8003adc:	2300      	movs	r3, #0
 8003ade:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae0:	f7fd ff7c 	bl	80019dc <HAL_GetTick>
 8003ae4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ae8:	e009      	b.n	8003afe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aea:	f7fd ff77 	bl	80019dc <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e09e      	b.n	8003c3c <HAL_RCC_OscConfig+0x106c>
 8003afe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b02:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003b06:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b10:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	fa93 f2a3 	rbit	r2, r3
 8003b1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b1e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003b22:	601a      	str	r2, [r3, #0]
  return result;
 8003b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b28:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003b2c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d104      	bne.n	8003b4c <HAL_RCC_OscConfig+0xf7c>
 8003b42:	4b01      	ldr	r3, [pc, #4]	@ (8003b48 <HAL_RCC_OscConfig+0xf78>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	e029      	b.n	8003b9c <HAL_RCC_OscConfig+0xfcc>
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b50:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003b54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b5e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	fa93 f2a3 	rbit	r2, r3
 8003b68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b76:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003b7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b84:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	fa93 f2a3 	rbit	r2, r3
 8003b8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b92:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	4b2b      	ldr	r3, [pc, #172]	@ (8003c48 <HAL_RCC_OscConfig+0x1078>)
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ba0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003ba4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003ba8:	6011      	str	r1, [r2, #0]
 8003baa:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bae:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003bb2:	6812      	ldr	r2, [r2, #0]
 8003bb4:	fa92 f1a2 	rbit	r1, r2
 8003bb8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bbc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003bc0:	6011      	str	r1, [r2, #0]
  return result;
 8003bc2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003bc6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	fab2 f282 	clz	r2, r2
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	f042 0220 	orr.w	r2, r2, #32
 8003bd6:	b2d2      	uxtb	r2, r2
 8003bd8:	f002 021f 	and.w	r2, r2, #31
 8003bdc:	2101      	movs	r1, #1
 8003bde:	fa01 f202 	lsl.w	r2, r1, r2
 8003be2:	4013      	ands	r3, r2
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d180      	bne.n	8003aea <HAL_RCC_OscConfig+0xf1a>
 8003be8:	e027      	b.n	8003c3a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e01e      	b.n	8003c3c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bfe:	4b12      	ldr	r3, [pc, #72]	@ (8003c48 <HAL_RCC_OscConfig+0x1078>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c06:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003c0a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d10b      	bne.n	8003c36 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003c1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003c22:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d001      	beq.n	8003c3a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e000      	b.n	8003c3c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003c3a:	2300      	movs	r3, #0
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40021000 	.word	0x40021000

08003c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b09e      	sub	sp, #120	@ 0x78
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e162      	b.n	8003f2a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c64:	4b90      	ldr	r3, [pc, #576]	@ (8003ea8 <HAL_RCC_ClockConfig+0x25c>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d910      	bls.n	8003c94 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c72:	4b8d      	ldr	r3, [pc, #564]	@ (8003ea8 <HAL_RCC_ClockConfig+0x25c>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 0207 	bic.w	r2, r3, #7
 8003c7a:	498b      	ldr	r1, [pc, #556]	@ (8003ea8 <HAL_RCC_ClockConfig+0x25c>)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b89      	ldr	r3, [pc, #548]	@ (8003ea8 <HAL_RCC_ClockConfig+0x25c>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0307 	and.w	r3, r3, #7
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e14a      	b.n	8003f2a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0302 	and.w	r3, r3, #2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ca0:	4b82      	ldr	r3, [pc, #520]	@ (8003eac <HAL_RCC_ClockConfig+0x260>)
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	497f      	ldr	r1, [pc, #508]	@ (8003eac <HAL_RCC_ClockConfig+0x260>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80dc 	beq.w	8003e78 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d13c      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xf6>
 8003cc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ccc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003cd0:	fa93 f3a3 	rbit	r3, r3
 8003cd4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cd8:	fab3 f383 	clz	r3, r3
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d102      	bne.n	8003cf2 <HAL_RCC_ClockConfig+0xa6>
 8003cec:	4b6f      	ldr	r3, [pc, #444]	@ (8003eac <HAL_RCC_ClockConfig+0x260>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	e00f      	b.n	8003d12 <HAL_RCC_ClockConfig+0xc6>
 8003cf2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003cf6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003cfa:	fa93 f3a3 	rbit	r3, r3
 8003cfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d00:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003d04:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d08:	fa93 f3a3 	rbit	r3, r3
 8003d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d0e:	4b67      	ldr	r3, [pc, #412]	@ (8003eac <HAL_RCC_ClockConfig+0x260>)
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003d16:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d1a:	fa92 f2a2 	rbit	r2, r2
 8003d1e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003d20:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003d22:	fab2 f282 	clz	r2, r2
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	f042 0220 	orr.w	r2, r2, #32
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	f002 021f 	and.w	r2, r2, #31
 8003d32:	2101      	movs	r1, #1
 8003d34:	fa01 f202 	lsl.w	r2, r1, r2
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d17b      	bne.n	8003e36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e0f3      	b.n	8003f2a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d13c      	bne.n	8003dc4 <HAL_RCC_ClockConfig+0x178>
 8003d4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d4e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d52:	fa93 f3a3 	rbit	r3, r3
 8003d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003d58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5a:	fab3 f383 	clz	r3, r3
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	b2db      	uxtb	r3, r3
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d102      	bne.n	8003d74 <HAL_RCC_ClockConfig+0x128>
 8003d6e:	4b4f      	ldr	r3, [pc, #316]	@ (8003eac <HAL_RCC_ClockConfig+0x260>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	e00f      	b.n	8003d94 <HAL_RCC_ClockConfig+0x148>
 8003d74:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d78:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d7c:	fa93 f3a3 	rbit	r3, r3
 8003d80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d86:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d8a:	fa93 f3a3 	rbit	r3, r3
 8003d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d90:	4b46      	ldr	r3, [pc, #280]	@ (8003eac <HAL_RCC_ClockConfig+0x260>)
 8003d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d94:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d98:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003d9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003d9c:	fa92 f2a2 	rbit	r2, r2
 8003da0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003da2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003da4:	fab2 f282 	clz	r2, r2
 8003da8:	b2d2      	uxtb	r2, r2
 8003daa:	f042 0220 	orr.w	r2, r2, #32
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	f002 021f 	and.w	r2, r2, #31
 8003db4:	2101      	movs	r1, #1
 8003db6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dba:	4013      	ands	r3, r2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d13a      	bne.n	8003e36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e0b2      	b.n	8003f2a <HAL_RCC_ClockConfig+0x2de>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dca:	fa93 f3a3 	rbit	r3, r3
 8003dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dd2:	fab3 f383 	clz	r3, r3
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	095b      	lsrs	r3, r3, #5
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	f043 0301 	orr.w	r3, r3, #1
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d102      	bne.n	8003dec <HAL_RCC_ClockConfig+0x1a0>
 8003de6:	4b31      	ldr	r3, [pc, #196]	@ (8003eac <HAL_RCC_ClockConfig+0x260>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	e00d      	b.n	8003e08 <HAL_RCC_ClockConfig+0x1bc>
 8003dec:	2302      	movs	r3, #2
 8003dee:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df2:	fa93 f3a3 	rbit	r3, r3
 8003df6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003df8:	2302      	movs	r3, #2
 8003dfa:	623b      	str	r3, [r7, #32]
 8003dfc:	6a3b      	ldr	r3, [r7, #32]
 8003dfe:	fa93 f3a3 	rbit	r3, r3
 8003e02:	61fb      	str	r3, [r7, #28]
 8003e04:	4b29      	ldr	r3, [pc, #164]	@ (8003eac <HAL_RCC_ClockConfig+0x260>)
 8003e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e08:	2202      	movs	r2, #2
 8003e0a:	61ba      	str	r2, [r7, #24]
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	fa92 f2a2 	rbit	r2, r2
 8003e12:	617a      	str	r2, [r7, #20]
  return result;
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	fab2 f282 	clz	r2, r2
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	f042 0220 	orr.w	r2, r2, #32
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	f002 021f 	and.w	r2, r2, #31
 8003e26:	2101      	movs	r1, #1
 8003e28:	fa01 f202 	lsl.w	r2, r1, r2
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e079      	b.n	8003f2a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e36:	4b1d      	ldr	r3, [pc, #116]	@ (8003eac <HAL_RCC_ClockConfig+0x260>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f023 0203 	bic.w	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	491a      	ldr	r1, [pc, #104]	@ (8003eac <HAL_RCC_ClockConfig+0x260>)
 8003e44:	4313      	orrs	r3, r2
 8003e46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e48:	f7fd fdc8 	bl	80019dc <HAL_GetTick>
 8003e4c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e50:	f7fd fdc4 	bl	80019dc <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d901      	bls.n	8003e66 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e62:	2303      	movs	r3, #3
 8003e64:	e061      	b.n	8003f2a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	4b11      	ldr	r3, [pc, #68]	@ (8003eac <HAL_RCC_ClockConfig+0x260>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f003 020c 	and.w	r2, r3, #12
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d1eb      	bne.n	8003e50 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ea8 <HAL_RCC_ClockConfig+0x25c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	683a      	ldr	r2, [r7, #0]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d214      	bcs.n	8003eb0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e86:	4b08      	ldr	r3, [pc, #32]	@ (8003ea8 <HAL_RCC_ClockConfig+0x25c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f023 0207 	bic.w	r2, r3, #7
 8003e8e:	4906      	ldr	r1, [pc, #24]	@ (8003ea8 <HAL_RCC_ClockConfig+0x25c>)
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	4b04      	ldr	r3, [pc, #16]	@ (8003ea8 <HAL_RCC_ClockConfig+0x25c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0307 	and.w	r3, r3, #7
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e040      	b.n	8003f2a <HAL_RCC_ClockConfig+0x2de>
 8003ea8:	40022000 	.word	0x40022000
 8003eac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d008      	beq.n	8003ece <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8003f34 <HAL_RCC_ClockConfig+0x2e8>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	491a      	ldr	r1, [pc, #104]	@ (8003f34 <HAL_RCC_ClockConfig+0x2e8>)
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d009      	beq.n	8003eee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eda:	4b16      	ldr	r3, [pc, #88]	@ (8003f34 <HAL_RCC_ClockConfig+0x2e8>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	00db      	lsls	r3, r3, #3
 8003ee8:	4912      	ldr	r1, [pc, #72]	@ (8003f34 <HAL_RCC_ClockConfig+0x2e8>)
 8003eea:	4313      	orrs	r3, r2
 8003eec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003eee:	f000 f829 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 8003ef2:	4601      	mov	r1, r0
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	@ (8003f34 <HAL_RCC_ClockConfig+0x2e8>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003efc:	22f0      	movs	r2, #240	@ 0xf0
 8003efe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	fa92 f2a2 	rbit	r2, r2
 8003f06:	60fa      	str	r2, [r7, #12]
  return result;
 8003f08:	68fa      	ldr	r2, [r7, #12]
 8003f0a:	fab2 f282 	clz	r2, r2
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	40d3      	lsrs	r3, r2
 8003f12:	4a09      	ldr	r2, [pc, #36]	@ (8003f38 <HAL_RCC_ClockConfig+0x2ec>)
 8003f14:	5cd3      	ldrb	r3, [r2, r3]
 8003f16:	fa21 f303 	lsr.w	r3, r1, r3
 8003f1a:	4a08      	ldr	r2, [pc, #32]	@ (8003f3c <HAL_RCC_ClockConfig+0x2f0>)
 8003f1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f1e:	4b08      	ldr	r3, [pc, #32]	@ (8003f40 <HAL_RCC_ClockConfig+0x2f4>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7fd fd16 	bl	8001954 <HAL_InitTick>
  
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3778      	adds	r7, #120	@ 0x78
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40021000 	.word	0x40021000
 8003f38:	08009304 	.word	0x08009304
 8003f3c:	20000000 	.word	0x20000000
 8003f40:	20000004 	.word	0x20000004

08003f44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60fb      	str	r3, [r7, #12]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60bb      	str	r3, [r7, #8]
 8003f52:	2300      	movs	r3, #0
 8003f54:	617b      	str	r3, [r7, #20]
 8003f56:	2300      	movs	r3, #0
 8003f58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 030c 	and.w	r3, r3, #12
 8003f6a:	2b04      	cmp	r3, #4
 8003f6c:	d002      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0x30>
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d003      	beq.n	8003f7a <HAL_RCC_GetSysClockFreq+0x36>
 8003f72:	e026      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f74:	4b19      	ldr	r3, [pc, #100]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x98>)
 8003f76:	613b      	str	r3, [r7, #16]
      break;
 8003f78:	e026      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	0c9b      	lsrs	r3, r3, #18
 8003f7e:	f003 030f 	and.w	r3, r3, #15
 8003f82:	4a17      	ldr	r2, [pc, #92]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f84:	5cd3      	ldrb	r3, [r2, r3]
 8003f86:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003f88:	4b13      	ldr	r3, [pc, #76]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	4a14      	ldr	r2, [pc, #80]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f92:	5cd3      	ldrb	r3, [r2, r3]
 8003f94:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d008      	beq.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fa0:	4a0e      	ldr	r2, [pc, #56]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x98>)
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	e004      	b.n	8003fbc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	613b      	str	r3, [r7, #16]
      break;
 8003fc0:	e002      	b.n	8003fc8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fc2:	4b06      	ldr	r3, [pc, #24]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x98>)
 8003fc4:	613b      	str	r3, [r7, #16]
      break;
 8003fc6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc8:	693b      	ldr	r3, [r7, #16]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	371c      	adds	r7, #28
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	007a1200 	.word	0x007a1200
 8003fe0:	0800931c 	.word	0x0800931c
 8003fe4:	0800932c 	.word	0x0800932c
 8003fe8:	003d0900 	.word	0x003d0900

08003fec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff0:	4b03      	ldr	r3, [pc, #12]	@ (8004000 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	20000000 	.word	0x20000000

08004004 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800400a:	f7ff ffef 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 800400e:	4601      	mov	r1, r0
 8004010:	4b0b      	ldr	r3, [pc, #44]	@ (8004040 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004018:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800401c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	fa92 f2a2 	rbit	r2, r2
 8004024:	603a      	str	r2, [r7, #0]
  return result;
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	fab2 f282 	clz	r2, r2
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	40d3      	lsrs	r3, r2
 8004030:	4a04      	ldr	r2, [pc, #16]	@ (8004044 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004032:	5cd3      	ldrb	r3, [r2, r3]
 8004034:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	40021000 	.word	0x40021000
 8004044:	08009314 	.word	0x08009314

08004048 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800404e:	f7ff ffcd 	bl	8003fec <HAL_RCC_GetHCLKFreq>
 8004052:	4601      	mov	r1, r0
 8004054:	4b0b      	ldr	r3, [pc, #44]	@ (8004084 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 800405c:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004060:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	fa92 f2a2 	rbit	r2, r2
 8004068:	603a      	str	r2, [r7, #0]
  return result;
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	fab2 f282 	clz	r2, r2
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	40d3      	lsrs	r3, r2
 8004074:	4a04      	ldr	r2, [pc, #16]	@ (8004088 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004076:	5cd3      	ldrb	r3, [r2, r3]
 8004078:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	08009314 	.word	0x08009314

0800408c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b092      	sub	sp, #72	@ 0x48
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004094:	2300      	movs	r3, #0
 8004096:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800409c:	2300      	movs	r3, #0
 800409e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 80d4 	beq.w	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b0:	4b4e      	ldr	r3, [pc, #312]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10e      	bne.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040bc:	4b4b      	ldr	r3, [pc, #300]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	4a4a      	ldr	r2, [pc, #296]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040c6:	61d3      	str	r3, [r2, #28]
 80040c8:	4b48      	ldr	r3, [pc, #288]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040ca:	69db      	ldr	r3, [r3, #28]
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d4:	2301      	movs	r3, #1
 80040d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040da:	4b45      	ldr	r3, [pc, #276]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d118      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e6:	4b42      	ldr	r3, [pc, #264]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a41      	ldr	r2, [pc, #260]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80040ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040f0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040f2:	f7fd fc73 	bl	80019dc <HAL_GetTick>
 80040f6:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	e008      	b.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040fa:	f7fd fc6f 	bl	80019dc <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b64      	cmp	r3, #100	@ 0x64
 8004106:	d901      	bls.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e14b      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410c:	4b38      	ldr	r3, [pc, #224]	@ (80041f0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004118:	4b34      	ldr	r3, [pc, #208]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004120:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004122:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 8084 	beq.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004132:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004134:	429a      	cmp	r2, r3
 8004136:	d07c      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004138:	4b2c      	ldr	r3, [pc, #176]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800413a:	6a1b      	ldr	r3, [r3, #32]
 800413c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004140:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004142:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004146:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800414a:	fa93 f3a3 	rbit	r3, r3
 800414e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004150:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004152:	fab3 f383 	clz	r3, r3
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	4b26      	ldr	r3, [pc, #152]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800415c:	4413      	add	r3, r2
 800415e:	009b      	lsls	r3, r3, #2
 8004160:	461a      	mov	r2, r3
 8004162:	2301      	movs	r3, #1
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800416a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416e:	fa93 f3a3 	rbit	r3, r3
 8004172:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004176:	fab3 f383 	clz	r3, r3
 800417a:	b2db      	uxtb	r3, r3
 800417c:	461a      	mov	r2, r3
 800417e:	4b1d      	ldr	r3, [pc, #116]	@ (80041f4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004180:	4413      	add	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	461a      	mov	r2, r3
 8004186:	2300      	movs	r3, #0
 8004188:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800418a:	4a18      	ldr	r2, [pc, #96]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800418c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800418e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004190:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004192:	f003 0301 	and.w	r3, r3, #1
 8004196:	2b00      	cmp	r3, #0
 8004198:	d04b      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419a:	f7fd fc1f 	bl	80019dc <HAL_GetTick>
 800419e:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a0:	e00a      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041a2:	f7fd fc1b 	bl	80019dc <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d901      	bls.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e0f5      	b.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80041b8:	2302      	movs	r3, #2
 80041ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041be:	fa93 f3a3 	rbit	r3, r3
 80041c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80041c4:	2302      	movs	r3, #2
 80041c6:	623b      	str	r3, [r7, #32]
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	fa93 f3a3 	rbit	r3, r3
 80041ce:	61fb      	str	r3, [r7, #28]
  return result;
 80041d0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d2:	fab3 f383 	clz	r3, r3
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	095b      	lsrs	r3, r3, #5
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	f043 0302 	orr.w	r3, r3, #2
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d108      	bne.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80041e6:	4b01      	ldr	r3, [pc, #4]	@ (80041ec <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	e00d      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80041ec:	40021000 	.word	0x40021000
 80041f0:	40007000 	.word	0x40007000
 80041f4:	10908100 	.word	0x10908100
 80041f8:	2302      	movs	r3, #2
 80041fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	fa93 f3a3 	rbit	r3, r3
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	4b69      	ldr	r3, [pc, #420]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004208:	2202      	movs	r2, #2
 800420a:	613a      	str	r2, [r7, #16]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	fa92 f2a2 	rbit	r2, r2
 8004212:	60fa      	str	r2, [r7, #12]
  return result;
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	fab2 f282 	clz	r2, r2
 800421a:	b2d2      	uxtb	r2, r2
 800421c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	f002 021f 	and.w	r2, r2, #31
 8004226:	2101      	movs	r1, #1
 8004228:	fa01 f202 	lsl.w	r2, r1, r2
 800422c:	4013      	ands	r3, r2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0b7      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004232:	4b5e      	ldr	r3, [pc, #376]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	495b      	ldr	r1, [pc, #364]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004240:	4313      	orrs	r3, r2
 8004242:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004244:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004248:	2b01      	cmp	r3, #1
 800424a:	d105      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800424c:	4b57      	ldr	r3, [pc, #348]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	4a56      	ldr	r2, [pc, #344]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004252:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004256:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b00      	cmp	r3, #0
 8004262:	d008      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004264:	4b51      	ldr	r3, [pc, #324]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004268:	f023 0203 	bic.w	r2, r3, #3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	494e      	ldr	r1, [pc, #312]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004272:	4313      	orrs	r3, r2
 8004274:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0320 	and.w	r3, r3, #32
 800427e:	2b00      	cmp	r3, #0
 8004280:	d008      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004282:	4b4a      	ldr	r3, [pc, #296]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004286:	f023 0210 	bic.w	r2, r3, #16
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	4947      	ldr	r1, [pc, #284]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004290:	4313      	orrs	r3, r2
 8004292:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d008      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80042a0:	4b42      	ldr	r3, [pc, #264]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ac:	493f      	ldr	r1, [pc, #252]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042be:	4b3b      	ldr	r3, [pc, #236]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	f023 0220 	bic.w	r2, r3, #32
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	691b      	ldr	r3, [r3, #16]
 80042ca:	4938      	ldr	r1, [pc, #224]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d008      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042dc:	4b33      	ldr	r3, [pc, #204]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	4930      	ldr	r1, [pc, #192]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d008      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042fa:	4b2c      	ldr	r3, [pc, #176]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	4929      	ldr	r1, [pc, #164]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004318:	4b24      	ldr	r3, [pc, #144]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800431a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	699b      	ldr	r3, [r3, #24]
 8004324:	4921      	ldr	r1, [pc, #132]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004326:	4313      	orrs	r3, r2
 8004328:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004336:	4b1d      	ldr	r3, [pc, #116]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	491a      	ldr	r1, [pc, #104]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004344:	4313      	orrs	r3, r2
 8004346:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d008      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004354:	4b15      	ldr	r3, [pc, #84]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004358:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004360:	4912      	ldr	r1, [pc, #72]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004362:	4313      	orrs	r3, r2
 8004364:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d008      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004372:	4b0e      	ldr	r3, [pc, #56]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004376:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437e:	490b      	ldr	r1, [pc, #44]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004380:	4313      	orrs	r3, r2
 8004382:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004390:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439c:	4903      	ldr	r1, [pc, #12]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3748      	adds	r7, #72	@ 0x48
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	40021000 	.word	0x40021000

080043b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e040      	b.n	8004444 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d106      	bne.n	80043d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043d2:	6878      	ldr	r0, [r7, #4]
 80043d4:	f7fd f92e 	bl	8001634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2224      	movs	r2, #36	@ 0x24
 80043dc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f022 0201 	bic.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d002      	beq.n	80043fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 f9e8 	bl	80047cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 f8af 	bl	8004560 <UART_SetConfig>
 8004402:	4603      	mov	r3, r0
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e01b      	b.n	8004444 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800441a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800442a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f042 0201 	orr.w	r2, r2, #1
 800443a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 fa67 	bl	8004910 <UART_CheckIdleState>
 8004442:	4603      	mov	r3, r0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	@ 0x28
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	603b      	str	r3, [r7, #0]
 8004458:	4613      	mov	r3, r2
 800445a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004460:	2b20      	cmp	r3, #32
 8004462:	d177      	bne.n	8004554 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <HAL_UART_Transmit+0x24>
 800446a:	88fb      	ldrh	r3, [r7, #6]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e070      	b.n	8004556 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2221      	movs	r2, #33	@ 0x21
 8004480:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004482:	f7fd faab 	bl	80019dc <HAL_GetTick>
 8004486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	88fa      	ldrh	r2, [r7, #6]
 800448c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	88fa      	ldrh	r2, [r7, #6]
 8004494:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a0:	d108      	bne.n	80044b4 <HAL_UART_Transmit+0x68>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d104      	bne.n	80044b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	61bb      	str	r3, [r7, #24]
 80044b2:	e003      	b.n	80044bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044b8:	2300      	movs	r3, #0
 80044ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044bc:	e02f      	b.n	800451e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	9300      	str	r3, [sp, #0]
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	2200      	movs	r2, #0
 80044c6:	2180      	movs	r1, #128	@ 0x80
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 fac9 	bl	8004a60 <UART_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d004      	beq.n	80044de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2220      	movs	r2, #32
 80044d8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e03b      	b.n	8004556 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	881a      	ldrh	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044f0:	b292      	uxth	r2, r2
 80044f2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	3302      	adds	r3, #2
 80044f8:	61bb      	str	r3, [r7, #24]
 80044fa:	e007      	b.n	800450c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	781a      	ldrb	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	3301      	adds	r3, #1
 800450a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1c9      	bne.n	80044be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2200      	movs	r2, #0
 8004532:	2140      	movs	r1, #64	@ 0x40
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fa93 	bl	8004a60 <UART_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d004      	beq.n	800454a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004546:	2303      	movs	r3, #3
 8004548:	e005      	b.n	8004556 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	e000      	b.n	8004556 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004554:	2302      	movs	r3, #2
  }
}
 8004556:	4618      	mov	r0, r3
 8004558:	3720      	adds	r7, #32
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004568:	2300      	movs	r3, #0
 800456a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	431a      	orrs	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	431a      	orrs	r2, r3
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	4b8a      	ldr	r3, [pc, #552]	@ (80047b4 <UART_SetConfig+0x254>)
 800458c:	4013      	ands	r3, r2
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	6812      	ldr	r2, [r2, #0]
 8004592:	6979      	ldr	r1, [r7, #20]
 8004594:	430b      	orrs	r3, r1
 8004596:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	430a      	orrs	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a78      	ldr	r2, [pc, #480]	@ (80047b8 <UART_SetConfig+0x258>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d120      	bne.n	800461e <UART_SetConfig+0xbe>
 80045dc:	4b77      	ldr	r3, [pc, #476]	@ (80047bc <UART_SetConfig+0x25c>)
 80045de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	2b03      	cmp	r3, #3
 80045e6:	d817      	bhi.n	8004618 <UART_SetConfig+0xb8>
 80045e8:	a201      	add	r2, pc, #4	@ (adr r2, 80045f0 <UART_SetConfig+0x90>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004601 	.word	0x08004601
 80045f4:	0800460d 	.word	0x0800460d
 80045f8:	08004613 	.word	0x08004613
 80045fc:	08004607 	.word	0x08004607
 8004600:	2300      	movs	r3, #0
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e01d      	b.n	8004642 <UART_SetConfig+0xe2>
 8004606:	2302      	movs	r3, #2
 8004608:	77fb      	strb	r3, [r7, #31]
 800460a:	e01a      	b.n	8004642 <UART_SetConfig+0xe2>
 800460c:	2304      	movs	r3, #4
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e017      	b.n	8004642 <UART_SetConfig+0xe2>
 8004612:	2308      	movs	r3, #8
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e014      	b.n	8004642 <UART_SetConfig+0xe2>
 8004618:	2310      	movs	r3, #16
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e011      	b.n	8004642 <UART_SetConfig+0xe2>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a67      	ldr	r2, [pc, #412]	@ (80047c0 <UART_SetConfig+0x260>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d102      	bne.n	800462e <UART_SetConfig+0xce>
 8004628:	2300      	movs	r3, #0
 800462a:	77fb      	strb	r3, [r7, #31]
 800462c:	e009      	b.n	8004642 <UART_SetConfig+0xe2>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a64      	ldr	r2, [pc, #400]	@ (80047c4 <UART_SetConfig+0x264>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d102      	bne.n	800463e <UART_SetConfig+0xde>
 8004638:	2300      	movs	r3, #0
 800463a:	77fb      	strb	r3, [r7, #31]
 800463c:	e001      	b.n	8004642 <UART_SetConfig+0xe2>
 800463e:	2310      	movs	r3, #16
 8004640:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69db      	ldr	r3, [r3, #28]
 8004646:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800464a:	d15a      	bne.n	8004702 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 800464c:	7ffb      	ldrb	r3, [r7, #31]
 800464e:	2b08      	cmp	r3, #8
 8004650:	d827      	bhi.n	80046a2 <UART_SetConfig+0x142>
 8004652:	a201      	add	r2, pc, #4	@ (adr r2, 8004658 <UART_SetConfig+0xf8>)
 8004654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004658:	0800467d 	.word	0x0800467d
 800465c:	08004685 	.word	0x08004685
 8004660:	0800468d 	.word	0x0800468d
 8004664:	080046a3 	.word	0x080046a3
 8004668:	08004693 	.word	0x08004693
 800466c:	080046a3 	.word	0x080046a3
 8004670:	080046a3 	.word	0x080046a3
 8004674:	080046a3 	.word	0x080046a3
 8004678:	0800469b 	.word	0x0800469b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800467c:	f7ff fcc2 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 8004680:	61b8      	str	r0, [r7, #24]
        break;
 8004682:	e013      	b.n	80046ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004684:	f7ff fce0 	bl	8004048 <HAL_RCC_GetPCLK2Freq>
 8004688:	61b8      	str	r0, [r7, #24]
        break;
 800468a:	e00f      	b.n	80046ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800468c:	4b4e      	ldr	r3, [pc, #312]	@ (80047c8 <UART_SetConfig+0x268>)
 800468e:	61bb      	str	r3, [r7, #24]
        break;
 8004690:	e00c      	b.n	80046ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004692:	f7ff fc57 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 8004696:	61b8      	str	r0, [r7, #24]
        break;
 8004698:	e008      	b.n	80046ac <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800469a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800469e:	61bb      	str	r3, [r7, #24]
        break;
 80046a0:	e004      	b.n	80046ac <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80046a2:	2300      	movs	r3, #0
 80046a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	77bb      	strb	r3, [r7, #30]
        break;
 80046aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d074      	beq.n	800479c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	005a      	lsls	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	085b      	lsrs	r3, r3, #1
 80046bc:	441a      	add	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b0f      	cmp	r3, #15
 80046cc:	d916      	bls.n	80046fc <UART_SetConfig+0x19c>
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d4:	d212      	bcs.n	80046fc <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	b29b      	uxth	r3, r3
 80046da:	f023 030f 	bic.w	r3, r3, #15
 80046de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	89fb      	ldrh	r3, [r7, #14]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	89fa      	ldrh	r2, [r7, #14]
 80046f8:	60da      	str	r2, [r3, #12]
 80046fa:	e04f      	b.n	800479c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	77bb      	strb	r3, [r7, #30]
 8004700:	e04c      	b.n	800479c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004702:	7ffb      	ldrb	r3, [r7, #31]
 8004704:	2b08      	cmp	r3, #8
 8004706:	d828      	bhi.n	800475a <UART_SetConfig+0x1fa>
 8004708:	a201      	add	r2, pc, #4	@ (adr r2, 8004710 <UART_SetConfig+0x1b0>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	08004735 	.word	0x08004735
 8004714:	0800473d 	.word	0x0800473d
 8004718:	08004745 	.word	0x08004745
 800471c:	0800475b 	.word	0x0800475b
 8004720:	0800474b 	.word	0x0800474b
 8004724:	0800475b 	.word	0x0800475b
 8004728:	0800475b 	.word	0x0800475b
 800472c:	0800475b 	.word	0x0800475b
 8004730:	08004753 	.word	0x08004753
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004734:	f7ff fc66 	bl	8004004 <HAL_RCC_GetPCLK1Freq>
 8004738:	61b8      	str	r0, [r7, #24]
        break;
 800473a:	e013      	b.n	8004764 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800473c:	f7ff fc84 	bl	8004048 <HAL_RCC_GetPCLK2Freq>
 8004740:	61b8      	str	r0, [r7, #24]
        break;
 8004742:	e00f      	b.n	8004764 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004744:	4b20      	ldr	r3, [pc, #128]	@ (80047c8 <UART_SetConfig+0x268>)
 8004746:	61bb      	str	r3, [r7, #24]
        break;
 8004748:	e00c      	b.n	8004764 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800474a:	f7ff fbfb 	bl	8003f44 <HAL_RCC_GetSysClockFreq>
 800474e:	61b8      	str	r0, [r7, #24]
        break;
 8004750:	e008      	b.n	8004764 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004752:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004756:	61bb      	str	r3, [r7, #24]
        break;
 8004758:	e004      	b.n	8004764 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	77bb      	strb	r3, [r7, #30]
        break;
 8004762:	bf00      	nop
    }

    if (pclk != 0U)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d018      	beq.n	800479c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	085a      	lsrs	r2, r3, #1
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	441a      	add	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	fbb2 f3f3 	udiv	r3, r2, r3
 800477c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b0f      	cmp	r3, #15
 8004782:	d909      	bls.n	8004798 <UART_SetConfig+0x238>
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800478a:	d205      	bcs.n	8004798 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	b29a      	uxth	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	60da      	str	r2, [r3, #12]
 8004796:	e001      	b.n	800479c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004798:	2301      	movs	r3, #1
 800479a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80047a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	efff69f3 	.word	0xefff69f3
 80047b8:	40013800 	.word	0x40013800
 80047bc:	40021000 	.word	0x40021000
 80047c0:	40004400 	.word	0x40004400
 80047c4:	40004800 	.word	0x40004800
 80047c8:	007a1200 	.word	0x007a1200

080047cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	f003 0302 	and.w	r3, r3, #2
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800483e:	f003 0304 	and.w	r3, r3, #4
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00a      	beq.n	800485c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	430a      	orrs	r2, r1
 800485a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004860:	f003 0310 	and.w	r3, r3, #16
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004882:	f003 0320 	and.w	r3, r3, #32
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d01a      	beq.n	80048e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80048ca:	d10a      	bne.n	80048e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  }
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b098      	sub	sp, #96	@ 0x60
 8004914:	af02      	add	r7, sp, #8
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004920:	f7fd f85c 	bl	80019dc <HAL_GetTick>
 8004924:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b08      	cmp	r3, #8
 8004932:	d12e      	bne.n	8004992 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004934:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004938:	9300      	str	r3, [sp, #0]
 800493a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800493c:	2200      	movs	r2, #0
 800493e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f000 f88c 	bl	8004a60 <UART_WaitOnFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d021      	beq.n	8004992 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004956:	e853 3f00 	ldrex	r3, [r3]
 800495a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800495c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800495e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004962:	653b      	str	r3, [r7, #80]	@ 0x50
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	461a      	mov	r2, r3
 800496a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800496c:	647b      	str	r3, [r7, #68]	@ 0x44
 800496e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004972:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800497a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e6      	bne.n	800494e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e062      	b.n	8004a58 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b04      	cmp	r3, #4
 800499e:	d149      	bne.n	8004a34 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049a8:	2200      	movs	r2, #0
 80049aa:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f856 	bl	8004a60 <UART_WaitOnFlagUntilTimeout>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d03c      	beq.n	8004a34 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c2:	e853 3f00 	ldrex	r3, [r3]
 80049c6:	623b      	str	r3, [r7, #32]
   return(result);
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	461a      	mov	r2, r3
 80049d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80049d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80049da:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049e0:	e841 2300 	strex	r3, r2, [r1]
 80049e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1e6      	bne.n	80049ba <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3308      	adds	r3, #8
 80049f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0301 	bic.w	r3, r3, #1
 8004a02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3308      	adds	r3, #8
 8004a0a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a0c:	61fa      	str	r2, [r7, #28]
 8004a0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	69b9      	ldr	r1, [r7, #24]
 8004a12:	69fa      	ldr	r2, [r7, #28]
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	617b      	str	r3, [r7, #20]
   return(result);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e5      	bne.n	80049ec <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e011      	b.n	8004a58 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2200      	movs	r2, #0
 8004a52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3758      	adds	r7, #88	@ 0x58
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	603b      	str	r3, [r7, #0]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a70:	e04f      	b.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d04b      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7a:	f7fc ffaf 	bl	80019dc <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d302      	bcc.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e04e      	b.n	8004b32 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d037      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	2b80      	cmp	r3, #128	@ 0x80
 8004aa6:	d034      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	2b40      	cmp	r3, #64	@ 0x40
 8004aac:	d031      	beq.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	f003 0308 	and.w	r3, r3, #8
 8004ab8:	2b08      	cmp	r3, #8
 8004aba:	d110      	bne.n	8004ade <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2208      	movs	r2, #8
 8004ac2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	f000 f838 	bl	8004b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2208      	movs	r2, #8
 8004ace:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e029      	b.n	8004b32 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ae8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004aec:	d111      	bne.n	8004b12 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f81e 	bl	8004b3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2220      	movs	r2, #32
 8004b02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004b0e:	2303      	movs	r3, #3
 8004b10:	e00f      	b.n	8004b32 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	bf0c      	ite	eq
 8004b22:	2301      	moveq	r3, #1
 8004b24:	2300      	movne	r3, #0
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	461a      	mov	r2, r3
 8004b2a:	79fb      	ldrb	r3, [r7, #7]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d0a0      	beq.n	8004a72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b095      	sub	sp, #84	@ 0x54
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b4a:	e853 3f00 	ldrex	r3, [r3]
 8004b4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b60:	643b      	str	r3, [r7, #64]	@ 0x40
 8004b62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b68:	e841 2300 	strex	r3, r2, [r1]
 8004b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d1e6      	bne.n	8004b42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	e853 3f00 	ldrex	r3, [r3]
 8004b82:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	f023 0301 	bic.w	r3, r3, #1
 8004b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3308      	adds	r3, #8
 8004b92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004b9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004b9c:	e841 2300 	strex	r3, r2, [r1]
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1e5      	bne.n	8004b74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d118      	bne.n	8004be2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f023 0310 	bic.w	r3, r3, #16
 8004bc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd2:	6979      	ldr	r1, [r7, #20]
 8004bd4:	69ba      	ldr	r2, [r7, #24]
 8004bd6:	e841 2300 	strex	r3, r2, [r1]
 8004bda:	613b      	str	r3, [r7, #16]
   return(result);
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1e6      	bne.n	8004bb0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2220      	movs	r2, #32
 8004be6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2200      	movs	r2, #0
 8004bee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004bf6:	bf00      	nop
 8004bf8:	3754      	adds	r7, #84	@ 0x54
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <__cvt>:
 8004c02:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c06:	ec57 6b10 	vmov	r6, r7, d0
 8004c0a:	2f00      	cmp	r7, #0
 8004c0c:	460c      	mov	r4, r1
 8004c0e:	4619      	mov	r1, r3
 8004c10:	463b      	mov	r3, r7
 8004c12:	bfbb      	ittet	lt
 8004c14:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004c18:	461f      	movlt	r7, r3
 8004c1a:	2300      	movge	r3, #0
 8004c1c:	232d      	movlt	r3, #45	@ 0x2d
 8004c1e:	700b      	strb	r3, [r1, #0]
 8004c20:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004c22:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004c26:	4691      	mov	r9, r2
 8004c28:	f023 0820 	bic.w	r8, r3, #32
 8004c2c:	bfbc      	itt	lt
 8004c2e:	4632      	movlt	r2, r6
 8004c30:	4616      	movlt	r6, r2
 8004c32:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c36:	d005      	beq.n	8004c44 <__cvt+0x42>
 8004c38:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004c3c:	d100      	bne.n	8004c40 <__cvt+0x3e>
 8004c3e:	3401      	adds	r4, #1
 8004c40:	2102      	movs	r1, #2
 8004c42:	e000      	b.n	8004c46 <__cvt+0x44>
 8004c44:	2103      	movs	r1, #3
 8004c46:	ab03      	add	r3, sp, #12
 8004c48:	9301      	str	r3, [sp, #4]
 8004c4a:	ab02      	add	r3, sp, #8
 8004c4c:	9300      	str	r3, [sp, #0]
 8004c4e:	ec47 6b10 	vmov	d0, r6, r7
 8004c52:	4653      	mov	r3, sl
 8004c54:	4622      	mov	r2, r4
 8004c56:	f001 f873 	bl	8005d40 <_dtoa_r>
 8004c5a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004c5e:	4605      	mov	r5, r0
 8004c60:	d119      	bne.n	8004c96 <__cvt+0x94>
 8004c62:	f019 0f01 	tst.w	r9, #1
 8004c66:	d00e      	beq.n	8004c86 <__cvt+0x84>
 8004c68:	eb00 0904 	add.w	r9, r0, r4
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	2300      	movs	r3, #0
 8004c70:	4630      	mov	r0, r6
 8004c72:	4639      	mov	r1, r7
 8004c74:	f7fb ff28 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c78:	b108      	cbz	r0, 8004c7e <__cvt+0x7c>
 8004c7a:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c7e:	2230      	movs	r2, #48	@ 0x30
 8004c80:	9b03      	ldr	r3, [sp, #12]
 8004c82:	454b      	cmp	r3, r9
 8004c84:	d31e      	bcc.n	8004cc4 <__cvt+0xc2>
 8004c86:	9b03      	ldr	r3, [sp, #12]
 8004c88:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c8a:	1b5b      	subs	r3, r3, r5
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	6013      	str	r3, [r2, #0]
 8004c90:	b004      	add	sp, #16
 8004c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c96:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c9a:	eb00 0904 	add.w	r9, r0, r4
 8004c9e:	d1e5      	bne.n	8004c6c <__cvt+0x6a>
 8004ca0:	7803      	ldrb	r3, [r0, #0]
 8004ca2:	2b30      	cmp	r3, #48	@ 0x30
 8004ca4:	d10a      	bne.n	8004cbc <__cvt+0xba>
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2300      	movs	r3, #0
 8004caa:	4630      	mov	r0, r6
 8004cac:	4639      	mov	r1, r7
 8004cae:	f7fb ff0b 	bl	8000ac8 <__aeabi_dcmpeq>
 8004cb2:	b918      	cbnz	r0, 8004cbc <__cvt+0xba>
 8004cb4:	f1c4 0401 	rsb	r4, r4, #1
 8004cb8:	f8ca 4000 	str.w	r4, [sl]
 8004cbc:	f8da 3000 	ldr.w	r3, [sl]
 8004cc0:	4499      	add	r9, r3
 8004cc2:	e7d3      	b.n	8004c6c <__cvt+0x6a>
 8004cc4:	1c59      	adds	r1, r3, #1
 8004cc6:	9103      	str	r1, [sp, #12]
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e7d9      	b.n	8004c80 <__cvt+0x7e>

08004ccc <__exponent>:
 8004ccc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cce:	2900      	cmp	r1, #0
 8004cd0:	bfba      	itte	lt
 8004cd2:	4249      	neglt	r1, r1
 8004cd4:	232d      	movlt	r3, #45	@ 0x2d
 8004cd6:	232b      	movge	r3, #43	@ 0x2b
 8004cd8:	2909      	cmp	r1, #9
 8004cda:	7002      	strb	r2, [r0, #0]
 8004cdc:	7043      	strb	r3, [r0, #1]
 8004cde:	dd29      	ble.n	8004d34 <__exponent+0x68>
 8004ce0:	f10d 0307 	add.w	r3, sp, #7
 8004ce4:	461d      	mov	r5, r3
 8004ce6:	270a      	movs	r7, #10
 8004ce8:	461a      	mov	r2, r3
 8004cea:	fbb1 f6f7 	udiv	r6, r1, r7
 8004cee:	fb07 1416 	mls	r4, r7, r6, r1
 8004cf2:	3430      	adds	r4, #48	@ 0x30
 8004cf4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004cf8:	460c      	mov	r4, r1
 8004cfa:	2c63      	cmp	r4, #99	@ 0x63
 8004cfc:	f103 33ff 	add.w	r3, r3, #4294967295
 8004d00:	4631      	mov	r1, r6
 8004d02:	dcf1      	bgt.n	8004ce8 <__exponent+0x1c>
 8004d04:	3130      	adds	r1, #48	@ 0x30
 8004d06:	1e94      	subs	r4, r2, #2
 8004d08:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004d0c:	1c41      	adds	r1, r0, #1
 8004d0e:	4623      	mov	r3, r4
 8004d10:	42ab      	cmp	r3, r5
 8004d12:	d30a      	bcc.n	8004d2a <__exponent+0x5e>
 8004d14:	f10d 0309 	add.w	r3, sp, #9
 8004d18:	1a9b      	subs	r3, r3, r2
 8004d1a:	42ac      	cmp	r4, r5
 8004d1c:	bf88      	it	hi
 8004d1e:	2300      	movhi	r3, #0
 8004d20:	3302      	adds	r3, #2
 8004d22:	4403      	add	r3, r0
 8004d24:	1a18      	subs	r0, r3, r0
 8004d26:	b003      	add	sp, #12
 8004d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d2a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004d2e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004d32:	e7ed      	b.n	8004d10 <__exponent+0x44>
 8004d34:	2330      	movs	r3, #48	@ 0x30
 8004d36:	3130      	adds	r1, #48	@ 0x30
 8004d38:	7083      	strb	r3, [r0, #2]
 8004d3a:	70c1      	strb	r1, [r0, #3]
 8004d3c:	1d03      	adds	r3, r0, #4
 8004d3e:	e7f1      	b.n	8004d24 <__exponent+0x58>

08004d40 <_printf_float>:
 8004d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d44:	b08d      	sub	sp, #52	@ 0x34
 8004d46:	460c      	mov	r4, r1
 8004d48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004d4c:	4616      	mov	r6, r2
 8004d4e:	461f      	mov	r7, r3
 8004d50:	4605      	mov	r5, r0
 8004d52:	f000 feef 	bl	8005b34 <_localeconv_r>
 8004d56:	6803      	ldr	r3, [r0, #0]
 8004d58:	9304      	str	r3, [sp, #16]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f7fb fa88 	bl	8000270 <strlen>
 8004d60:	2300      	movs	r3, #0
 8004d62:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d64:	f8d8 3000 	ldr.w	r3, [r8]
 8004d68:	9005      	str	r0, [sp, #20]
 8004d6a:	3307      	adds	r3, #7
 8004d6c:	f023 0307 	bic.w	r3, r3, #7
 8004d70:	f103 0208 	add.w	r2, r3, #8
 8004d74:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d78:	f8d4 b000 	ldr.w	fp, [r4]
 8004d7c:	f8c8 2000 	str.w	r2, [r8]
 8004d80:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d84:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004d88:	9307      	str	r3, [sp, #28]
 8004d8a:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d8e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004d92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d96:	4b9c      	ldr	r3, [pc, #624]	@ (8005008 <_printf_float+0x2c8>)
 8004d98:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9c:	f7fb fec6 	bl	8000b2c <__aeabi_dcmpun>
 8004da0:	bb70      	cbnz	r0, 8004e00 <_printf_float+0xc0>
 8004da2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004da6:	4b98      	ldr	r3, [pc, #608]	@ (8005008 <_printf_float+0x2c8>)
 8004da8:	f04f 32ff 	mov.w	r2, #4294967295
 8004dac:	f7fb fea0 	bl	8000af0 <__aeabi_dcmple>
 8004db0:	bb30      	cbnz	r0, 8004e00 <_printf_float+0xc0>
 8004db2:	2200      	movs	r2, #0
 8004db4:	2300      	movs	r3, #0
 8004db6:	4640      	mov	r0, r8
 8004db8:	4649      	mov	r1, r9
 8004dba:	f7fb fe8f 	bl	8000adc <__aeabi_dcmplt>
 8004dbe:	b110      	cbz	r0, 8004dc6 <_printf_float+0x86>
 8004dc0:	232d      	movs	r3, #45	@ 0x2d
 8004dc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004dc6:	4a91      	ldr	r2, [pc, #580]	@ (800500c <_printf_float+0x2cc>)
 8004dc8:	4b91      	ldr	r3, [pc, #580]	@ (8005010 <_printf_float+0x2d0>)
 8004dca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004dce:	bf94      	ite	ls
 8004dd0:	4690      	movls	r8, r2
 8004dd2:	4698      	movhi	r8, r3
 8004dd4:	2303      	movs	r3, #3
 8004dd6:	6123      	str	r3, [r4, #16]
 8004dd8:	f02b 0304 	bic.w	r3, fp, #4
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	f04f 0900 	mov.w	r9, #0
 8004de2:	9700      	str	r7, [sp, #0]
 8004de4:	4633      	mov	r3, r6
 8004de6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004de8:	4621      	mov	r1, r4
 8004dea:	4628      	mov	r0, r5
 8004dec:	f000 f9d2 	bl	8005194 <_printf_common>
 8004df0:	3001      	adds	r0, #1
 8004df2:	f040 808d 	bne.w	8004f10 <_printf_float+0x1d0>
 8004df6:	f04f 30ff 	mov.w	r0, #4294967295
 8004dfa:	b00d      	add	sp, #52	@ 0x34
 8004dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e00:	4642      	mov	r2, r8
 8004e02:	464b      	mov	r3, r9
 8004e04:	4640      	mov	r0, r8
 8004e06:	4649      	mov	r1, r9
 8004e08:	f7fb fe90 	bl	8000b2c <__aeabi_dcmpun>
 8004e0c:	b140      	cbz	r0, 8004e20 <_printf_float+0xe0>
 8004e0e:	464b      	mov	r3, r9
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bfbc      	itt	lt
 8004e14:	232d      	movlt	r3, #45	@ 0x2d
 8004e16:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004e1a:	4a7e      	ldr	r2, [pc, #504]	@ (8005014 <_printf_float+0x2d4>)
 8004e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8005018 <_printf_float+0x2d8>)
 8004e1e:	e7d4      	b.n	8004dca <_printf_float+0x8a>
 8004e20:	6863      	ldr	r3, [r4, #4]
 8004e22:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004e26:	9206      	str	r2, [sp, #24]
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	d13b      	bne.n	8004ea4 <_printf_float+0x164>
 8004e2c:	2306      	movs	r3, #6
 8004e2e:	6063      	str	r3, [r4, #4]
 8004e30:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004e34:	2300      	movs	r3, #0
 8004e36:	6022      	str	r2, [r4, #0]
 8004e38:	9303      	str	r3, [sp, #12]
 8004e3a:	ab0a      	add	r3, sp, #40	@ 0x28
 8004e3c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004e40:	ab09      	add	r3, sp, #36	@ 0x24
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	6861      	ldr	r1, [r4, #4]
 8004e46:	ec49 8b10 	vmov	d0, r8, r9
 8004e4a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f7ff fed7 	bl	8004c02 <__cvt>
 8004e54:	9b06      	ldr	r3, [sp, #24]
 8004e56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e58:	2b47      	cmp	r3, #71	@ 0x47
 8004e5a:	4680      	mov	r8, r0
 8004e5c:	d129      	bne.n	8004eb2 <_printf_float+0x172>
 8004e5e:	1cc8      	adds	r0, r1, #3
 8004e60:	db02      	blt.n	8004e68 <_printf_float+0x128>
 8004e62:	6863      	ldr	r3, [r4, #4]
 8004e64:	4299      	cmp	r1, r3
 8004e66:	dd41      	ble.n	8004eec <_printf_float+0x1ac>
 8004e68:	f1aa 0a02 	sub.w	sl, sl, #2
 8004e6c:	fa5f fa8a 	uxtb.w	sl, sl
 8004e70:	3901      	subs	r1, #1
 8004e72:	4652      	mov	r2, sl
 8004e74:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e78:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e7a:	f7ff ff27 	bl	8004ccc <__exponent>
 8004e7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e80:	1813      	adds	r3, r2, r0
 8004e82:	2a01      	cmp	r2, #1
 8004e84:	4681      	mov	r9, r0
 8004e86:	6123      	str	r3, [r4, #16]
 8004e88:	dc02      	bgt.n	8004e90 <_printf_float+0x150>
 8004e8a:	6822      	ldr	r2, [r4, #0]
 8004e8c:	07d2      	lsls	r2, r2, #31
 8004e8e:	d501      	bpl.n	8004e94 <_printf_float+0x154>
 8004e90:	3301      	adds	r3, #1
 8004e92:	6123      	str	r3, [r4, #16]
 8004e94:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0a2      	beq.n	8004de2 <_printf_float+0xa2>
 8004e9c:	232d      	movs	r3, #45	@ 0x2d
 8004e9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ea2:	e79e      	b.n	8004de2 <_printf_float+0xa2>
 8004ea4:	9a06      	ldr	r2, [sp, #24]
 8004ea6:	2a47      	cmp	r2, #71	@ 0x47
 8004ea8:	d1c2      	bne.n	8004e30 <_printf_float+0xf0>
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1c0      	bne.n	8004e30 <_printf_float+0xf0>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e7bd      	b.n	8004e2e <_printf_float+0xee>
 8004eb2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004eb6:	d9db      	bls.n	8004e70 <_printf_float+0x130>
 8004eb8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004ebc:	d118      	bne.n	8004ef0 <_printf_float+0x1b0>
 8004ebe:	2900      	cmp	r1, #0
 8004ec0:	6863      	ldr	r3, [r4, #4]
 8004ec2:	dd0b      	ble.n	8004edc <_printf_float+0x19c>
 8004ec4:	6121      	str	r1, [r4, #16]
 8004ec6:	b913      	cbnz	r3, 8004ece <_printf_float+0x18e>
 8004ec8:	6822      	ldr	r2, [r4, #0]
 8004eca:	07d0      	lsls	r0, r2, #31
 8004ecc:	d502      	bpl.n	8004ed4 <_printf_float+0x194>
 8004ece:	3301      	adds	r3, #1
 8004ed0:	440b      	add	r3, r1
 8004ed2:	6123      	str	r3, [r4, #16]
 8004ed4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004ed6:	f04f 0900 	mov.w	r9, #0
 8004eda:	e7db      	b.n	8004e94 <_printf_float+0x154>
 8004edc:	b913      	cbnz	r3, 8004ee4 <_printf_float+0x1a4>
 8004ede:	6822      	ldr	r2, [r4, #0]
 8004ee0:	07d2      	lsls	r2, r2, #31
 8004ee2:	d501      	bpl.n	8004ee8 <_printf_float+0x1a8>
 8004ee4:	3302      	adds	r3, #2
 8004ee6:	e7f4      	b.n	8004ed2 <_printf_float+0x192>
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e7f2      	b.n	8004ed2 <_printf_float+0x192>
 8004eec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004ef0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004ef2:	4299      	cmp	r1, r3
 8004ef4:	db05      	blt.n	8004f02 <_printf_float+0x1c2>
 8004ef6:	6823      	ldr	r3, [r4, #0]
 8004ef8:	6121      	str	r1, [r4, #16]
 8004efa:	07d8      	lsls	r0, r3, #31
 8004efc:	d5ea      	bpl.n	8004ed4 <_printf_float+0x194>
 8004efe:	1c4b      	adds	r3, r1, #1
 8004f00:	e7e7      	b.n	8004ed2 <_printf_float+0x192>
 8004f02:	2900      	cmp	r1, #0
 8004f04:	bfd4      	ite	le
 8004f06:	f1c1 0202 	rsble	r2, r1, #2
 8004f0a:	2201      	movgt	r2, #1
 8004f0c:	4413      	add	r3, r2
 8004f0e:	e7e0      	b.n	8004ed2 <_printf_float+0x192>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	055a      	lsls	r2, r3, #21
 8004f14:	d407      	bmi.n	8004f26 <_printf_float+0x1e6>
 8004f16:	6923      	ldr	r3, [r4, #16]
 8004f18:	4642      	mov	r2, r8
 8004f1a:	4631      	mov	r1, r6
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	47b8      	blx	r7
 8004f20:	3001      	adds	r0, #1
 8004f22:	d12b      	bne.n	8004f7c <_printf_float+0x23c>
 8004f24:	e767      	b.n	8004df6 <_printf_float+0xb6>
 8004f26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004f2a:	f240 80dd 	bls.w	80050e8 <_printf_float+0x3a8>
 8004f2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f32:	2200      	movs	r2, #0
 8004f34:	2300      	movs	r3, #0
 8004f36:	f7fb fdc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8004f3a:	2800      	cmp	r0, #0
 8004f3c:	d033      	beq.n	8004fa6 <_printf_float+0x266>
 8004f3e:	4a37      	ldr	r2, [pc, #220]	@ (800501c <_printf_float+0x2dc>)
 8004f40:	2301      	movs	r3, #1
 8004f42:	4631      	mov	r1, r6
 8004f44:	4628      	mov	r0, r5
 8004f46:	47b8      	blx	r7
 8004f48:	3001      	adds	r0, #1
 8004f4a:	f43f af54 	beq.w	8004df6 <_printf_float+0xb6>
 8004f4e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004f52:	4543      	cmp	r3, r8
 8004f54:	db02      	blt.n	8004f5c <_printf_float+0x21c>
 8004f56:	6823      	ldr	r3, [r4, #0]
 8004f58:	07d8      	lsls	r0, r3, #31
 8004f5a:	d50f      	bpl.n	8004f7c <_printf_float+0x23c>
 8004f5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f60:	4631      	mov	r1, r6
 8004f62:	4628      	mov	r0, r5
 8004f64:	47b8      	blx	r7
 8004f66:	3001      	adds	r0, #1
 8004f68:	f43f af45 	beq.w	8004df6 <_printf_float+0xb6>
 8004f6c:	f04f 0900 	mov.w	r9, #0
 8004f70:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f74:	f104 0a1a 	add.w	sl, r4, #26
 8004f78:	45c8      	cmp	r8, r9
 8004f7a:	dc09      	bgt.n	8004f90 <_printf_float+0x250>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	079b      	lsls	r3, r3, #30
 8004f80:	f100 8103 	bmi.w	800518a <_printf_float+0x44a>
 8004f84:	68e0      	ldr	r0, [r4, #12]
 8004f86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f88:	4298      	cmp	r0, r3
 8004f8a:	bfb8      	it	lt
 8004f8c:	4618      	movlt	r0, r3
 8004f8e:	e734      	b.n	8004dfa <_printf_float+0xba>
 8004f90:	2301      	movs	r3, #1
 8004f92:	4652      	mov	r2, sl
 8004f94:	4631      	mov	r1, r6
 8004f96:	4628      	mov	r0, r5
 8004f98:	47b8      	blx	r7
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	f43f af2b 	beq.w	8004df6 <_printf_float+0xb6>
 8004fa0:	f109 0901 	add.w	r9, r9, #1
 8004fa4:	e7e8      	b.n	8004f78 <_printf_float+0x238>
 8004fa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	dc39      	bgt.n	8005020 <_printf_float+0x2e0>
 8004fac:	4a1b      	ldr	r2, [pc, #108]	@ (800501c <_printf_float+0x2dc>)
 8004fae:	2301      	movs	r3, #1
 8004fb0:	4631      	mov	r1, r6
 8004fb2:	4628      	mov	r0, r5
 8004fb4:	47b8      	blx	r7
 8004fb6:	3001      	adds	r0, #1
 8004fb8:	f43f af1d 	beq.w	8004df6 <_printf_float+0xb6>
 8004fbc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004fc0:	ea59 0303 	orrs.w	r3, r9, r3
 8004fc4:	d102      	bne.n	8004fcc <_printf_float+0x28c>
 8004fc6:	6823      	ldr	r3, [r4, #0]
 8004fc8:	07d9      	lsls	r1, r3, #31
 8004fca:	d5d7      	bpl.n	8004f7c <_printf_float+0x23c>
 8004fcc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fd0:	4631      	mov	r1, r6
 8004fd2:	4628      	mov	r0, r5
 8004fd4:	47b8      	blx	r7
 8004fd6:	3001      	adds	r0, #1
 8004fd8:	f43f af0d 	beq.w	8004df6 <_printf_float+0xb6>
 8004fdc:	f04f 0a00 	mov.w	sl, #0
 8004fe0:	f104 0b1a 	add.w	fp, r4, #26
 8004fe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fe6:	425b      	negs	r3, r3
 8004fe8:	4553      	cmp	r3, sl
 8004fea:	dc01      	bgt.n	8004ff0 <_printf_float+0x2b0>
 8004fec:	464b      	mov	r3, r9
 8004fee:	e793      	b.n	8004f18 <_printf_float+0x1d8>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	465a      	mov	r2, fp
 8004ff4:	4631      	mov	r1, r6
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	47b8      	blx	r7
 8004ffa:	3001      	adds	r0, #1
 8004ffc:	f43f aefb 	beq.w	8004df6 <_printf_float+0xb6>
 8005000:	f10a 0a01 	add.w	sl, sl, #1
 8005004:	e7ee      	b.n	8004fe4 <_printf_float+0x2a4>
 8005006:	bf00      	nop
 8005008:	7fefffff 	.word	0x7fefffff
 800500c:	0800933c 	.word	0x0800933c
 8005010:	08009340 	.word	0x08009340
 8005014:	08009344 	.word	0x08009344
 8005018:	08009348 	.word	0x08009348
 800501c:	0800934c 	.word	0x0800934c
 8005020:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005022:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005026:	4553      	cmp	r3, sl
 8005028:	bfa8      	it	ge
 800502a:	4653      	movge	r3, sl
 800502c:	2b00      	cmp	r3, #0
 800502e:	4699      	mov	r9, r3
 8005030:	dc36      	bgt.n	80050a0 <_printf_float+0x360>
 8005032:	f04f 0b00 	mov.w	fp, #0
 8005036:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800503a:	f104 021a 	add.w	r2, r4, #26
 800503e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005040:	9306      	str	r3, [sp, #24]
 8005042:	eba3 0309 	sub.w	r3, r3, r9
 8005046:	455b      	cmp	r3, fp
 8005048:	dc31      	bgt.n	80050ae <_printf_float+0x36e>
 800504a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800504c:	459a      	cmp	sl, r3
 800504e:	dc3a      	bgt.n	80050c6 <_printf_float+0x386>
 8005050:	6823      	ldr	r3, [r4, #0]
 8005052:	07da      	lsls	r2, r3, #31
 8005054:	d437      	bmi.n	80050c6 <_printf_float+0x386>
 8005056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005058:	ebaa 0903 	sub.w	r9, sl, r3
 800505c:	9b06      	ldr	r3, [sp, #24]
 800505e:	ebaa 0303 	sub.w	r3, sl, r3
 8005062:	4599      	cmp	r9, r3
 8005064:	bfa8      	it	ge
 8005066:	4699      	movge	r9, r3
 8005068:	f1b9 0f00 	cmp.w	r9, #0
 800506c:	dc33      	bgt.n	80050d6 <_printf_float+0x396>
 800506e:	f04f 0800 	mov.w	r8, #0
 8005072:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005076:	f104 0b1a 	add.w	fp, r4, #26
 800507a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800507c:	ebaa 0303 	sub.w	r3, sl, r3
 8005080:	eba3 0309 	sub.w	r3, r3, r9
 8005084:	4543      	cmp	r3, r8
 8005086:	f77f af79 	ble.w	8004f7c <_printf_float+0x23c>
 800508a:	2301      	movs	r3, #1
 800508c:	465a      	mov	r2, fp
 800508e:	4631      	mov	r1, r6
 8005090:	4628      	mov	r0, r5
 8005092:	47b8      	blx	r7
 8005094:	3001      	adds	r0, #1
 8005096:	f43f aeae 	beq.w	8004df6 <_printf_float+0xb6>
 800509a:	f108 0801 	add.w	r8, r8, #1
 800509e:	e7ec      	b.n	800507a <_printf_float+0x33a>
 80050a0:	4642      	mov	r2, r8
 80050a2:	4631      	mov	r1, r6
 80050a4:	4628      	mov	r0, r5
 80050a6:	47b8      	blx	r7
 80050a8:	3001      	adds	r0, #1
 80050aa:	d1c2      	bne.n	8005032 <_printf_float+0x2f2>
 80050ac:	e6a3      	b.n	8004df6 <_printf_float+0xb6>
 80050ae:	2301      	movs	r3, #1
 80050b0:	4631      	mov	r1, r6
 80050b2:	4628      	mov	r0, r5
 80050b4:	9206      	str	r2, [sp, #24]
 80050b6:	47b8      	blx	r7
 80050b8:	3001      	adds	r0, #1
 80050ba:	f43f ae9c 	beq.w	8004df6 <_printf_float+0xb6>
 80050be:	9a06      	ldr	r2, [sp, #24]
 80050c0:	f10b 0b01 	add.w	fp, fp, #1
 80050c4:	e7bb      	b.n	800503e <_printf_float+0x2fe>
 80050c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ca:	4631      	mov	r1, r6
 80050cc:	4628      	mov	r0, r5
 80050ce:	47b8      	blx	r7
 80050d0:	3001      	adds	r0, #1
 80050d2:	d1c0      	bne.n	8005056 <_printf_float+0x316>
 80050d4:	e68f      	b.n	8004df6 <_printf_float+0xb6>
 80050d6:	9a06      	ldr	r2, [sp, #24]
 80050d8:	464b      	mov	r3, r9
 80050da:	4442      	add	r2, r8
 80050dc:	4631      	mov	r1, r6
 80050de:	4628      	mov	r0, r5
 80050e0:	47b8      	blx	r7
 80050e2:	3001      	adds	r0, #1
 80050e4:	d1c3      	bne.n	800506e <_printf_float+0x32e>
 80050e6:	e686      	b.n	8004df6 <_printf_float+0xb6>
 80050e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80050ec:	f1ba 0f01 	cmp.w	sl, #1
 80050f0:	dc01      	bgt.n	80050f6 <_printf_float+0x3b6>
 80050f2:	07db      	lsls	r3, r3, #31
 80050f4:	d536      	bpl.n	8005164 <_printf_float+0x424>
 80050f6:	2301      	movs	r3, #1
 80050f8:	4642      	mov	r2, r8
 80050fa:	4631      	mov	r1, r6
 80050fc:	4628      	mov	r0, r5
 80050fe:	47b8      	blx	r7
 8005100:	3001      	adds	r0, #1
 8005102:	f43f ae78 	beq.w	8004df6 <_printf_float+0xb6>
 8005106:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800510a:	4631      	mov	r1, r6
 800510c:	4628      	mov	r0, r5
 800510e:	47b8      	blx	r7
 8005110:	3001      	adds	r0, #1
 8005112:	f43f ae70 	beq.w	8004df6 <_printf_float+0xb6>
 8005116:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800511a:	2200      	movs	r2, #0
 800511c:	2300      	movs	r3, #0
 800511e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005122:	f7fb fcd1 	bl	8000ac8 <__aeabi_dcmpeq>
 8005126:	b9c0      	cbnz	r0, 800515a <_printf_float+0x41a>
 8005128:	4653      	mov	r3, sl
 800512a:	f108 0201 	add.w	r2, r8, #1
 800512e:	4631      	mov	r1, r6
 8005130:	4628      	mov	r0, r5
 8005132:	47b8      	blx	r7
 8005134:	3001      	adds	r0, #1
 8005136:	d10c      	bne.n	8005152 <_printf_float+0x412>
 8005138:	e65d      	b.n	8004df6 <_printf_float+0xb6>
 800513a:	2301      	movs	r3, #1
 800513c:	465a      	mov	r2, fp
 800513e:	4631      	mov	r1, r6
 8005140:	4628      	mov	r0, r5
 8005142:	47b8      	blx	r7
 8005144:	3001      	adds	r0, #1
 8005146:	f43f ae56 	beq.w	8004df6 <_printf_float+0xb6>
 800514a:	f108 0801 	add.w	r8, r8, #1
 800514e:	45d0      	cmp	r8, sl
 8005150:	dbf3      	blt.n	800513a <_printf_float+0x3fa>
 8005152:	464b      	mov	r3, r9
 8005154:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005158:	e6df      	b.n	8004f1a <_printf_float+0x1da>
 800515a:	f04f 0800 	mov.w	r8, #0
 800515e:	f104 0b1a 	add.w	fp, r4, #26
 8005162:	e7f4      	b.n	800514e <_printf_float+0x40e>
 8005164:	2301      	movs	r3, #1
 8005166:	4642      	mov	r2, r8
 8005168:	e7e1      	b.n	800512e <_printf_float+0x3ee>
 800516a:	2301      	movs	r3, #1
 800516c:	464a      	mov	r2, r9
 800516e:	4631      	mov	r1, r6
 8005170:	4628      	mov	r0, r5
 8005172:	47b8      	blx	r7
 8005174:	3001      	adds	r0, #1
 8005176:	f43f ae3e 	beq.w	8004df6 <_printf_float+0xb6>
 800517a:	f108 0801 	add.w	r8, r8, #1
 800517e:	68e3      	ldr	r3, [r4, #12]
 8005180:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005182:	1a5b      	subs	r3, r3, r1
 8005184:	4543      	cmp	r3, r8
 8005186:	dcf0      	bgt.n	800516a <_printf_float+0x42a>
 8005188:	e6fc      	b.n	8004f84 <_printf_float+0x244>
 800518a:	f04f 0800 	mov.w	r8, #0
 800518e:	f104 0919 	add.w	r9, r4, #25
 8005192:	e7f4      	b.n	800517e <_printf_float+0x43e>

08005194 <_printf_common>:
 8005194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005198:	4616      	mov	r6, r2
 800519a:	4698      	mov	r8, r3
 800519c:	688a      	ldr	r2, [r1, #8]
 800519e:	690b      	ldr	r3, [r1, #16]
 80051a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80051a4:	4293      	cmp	r3, r2
 80051a6:	bfb8      	it	lt
 80051a8:	4613      	movlt	r3, r2
 80051aa:	6033      	str	r3, [r6, #0]
 80051ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80051b0:	4607      	mov	r7, r0
 80051b2:	460c      	mov	r4, r1
 80051b4:	b10a      	cbz	r2, 80051ba <_printf_common+0x26>
 80051b6:	3301      	adds	r3, #1
 80051b8:	6033      	str	r3, [r6, #0]
 80051ba:	6823      	ldr	r3, [r4, #0]
 80051bc:	0699      	lsls	r1, r3, #26
 80051be:	bf42      	ittt	mi
 80051c0:	6833      	ldrmi	r3, [r6, #0]
 80051c2:	3302      	addmi	r3, #2
 80051c4:	6033      	strmi	r3, [r6, #0]
 80051c6:	6825      	ldr	r5, [r4, #0]
 80051c8:	f015 0506 	ands.w	r5, r5, #6
 80051cc:	d106      	bne.n	80051dc <_printf_common+0x48>
 80051ce:	f104 0a19 	add.w	sl, r4, #25
 80051d2:	68e3      	ldr	r3, [r4, #12]
 80051d4:	6832      	ldr	r2, [r6, #0]
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	42ab      	cmp	r3, r5
 80051da:	dc26      	bgt.n	800522a <_printf_common+0x96>
 80051dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80051e0:	6822      	ldr	r2, [r4, #0]
 80051e2:	3b00      	subs	r3, #0
 80051e4:	bf18      	it	ne
 80051e6:	2301      	movne	r3, #1
 80051e8:	0692      	lsls	r2, r2, #26
 80051ea:	d42b      	bmi.n	8005244 <_printf_common+0xb0>
 80051ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051f0:	4641      	mov	r1, r8
 80051f2:	4638      	mov	r0, r7
 80051f4:	47c8      	blx	r9
 80051f6:	3001      	adds	r0, #1
 80051f8:	d01e      	beq.n	8005238 <_printf_common+0xa4>
 80051fa:	6823      	ldr	r3, [r4, #0]
 80051fc:	6922      	ldr	r2, [r4, #16]
 80051fe:	f003 0306 	and.w	r3, r3, #6
 8005202:	2b04      	cmp	r3, #4
 8005204:	bf02      	ittt	eq
 8005206:	68e5      	ldreq	r5, [r4, #12]
 8005208:	6833      	ldreq	r3, [r6, #0]
 800520a:	1aed      	subeq	r5, r5, r3
 800520c:	68a3      	ldr	r3, [r4, #8]
 800520e:	bf0c      	ite	eq
 8005210:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005214:	2500      	movne	r5, #0
 8005216:	4293      	cmp	r3, r2
 8005218:	bfc4      	itt	gt
 800521a:	1a9b      	subgt	r3, r3, r2
 800521c:	18ed      	addgt	r5, r5, r3
 800521e:	2600      	movs	r6, #0
 8005220:	341a      	adds	r4, #26
 8005222:	42b5      	cmp	r5, r6
 8005224:	d11a      	bne.n	800525c <_printf_common+0xc8>
 8005226:	2000      	movs	r0, #0
 8005228:	e008      	b.n	800523c <_printf_common+0xa8>
 800522a:	2301      	movs	r3, #1
 800522c:	4652      	mov	r2, sl
 800522e:	4641      	mov	r1, r8
 8005230:	4638      	mov	r0, r7
 8005232:	47c8      	blx	r9
 8005234:	3001      	adds	r0, #1
 8005236:	d103      	bne.n	8005240 <_printf_common+0xac>
 8005238:	f04f 30ff 	mov.w	r0, #4294967295
 800523c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005240:	3501      	adds	r5, #1
 8005242:	e7c6      	b.n	80051d2 <_printf_common+0x3e>
 8005244:	18e1      	adds	r1, r4, r3
 8005246:	1c5a      	adds	r2, r3, #1
 8005248:	2030      	movs	r0, #48	@ 0x30
 800524a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800524e:	4422      	add	r2, r4
 8005250:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005254:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005258:	3302      	adds	r3, #2
 800525a:	e7c7      	b.n	80051ec <_printf_common+0x58>
 800525c:	2301      	movs	r3, #1
 800525e:	4622      	mov	r2, r4
 8005260:	4641      	mov	r1, r8
 8005262:	4638      	mov	r0, r7
 8005264:	47c8      	blx	r9
 8005266:	3001      	adds	r0, #1
 8005268:	d0e6      	beq.n	8005238 <_printf_common+0xa4>
 800526a:	3601      	adds	r6, #1
 800526c:	e7d9      	b.n	8005222 <_printf_common+0x8e>
	...

08005270 <_printf_i>:
 8005270:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005274:	7e0f      	ldrb	r7, [r1, #24]
 8005276:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005278:	2f78      	cmp	r7, #120	@ 0x78
 800527a:	4691      	mov	r9, r2
 800527c:	4680      	mov	r8, r0
 800527e:	460c      	mov	r4, r1
 8005280:	469a      	mov	sl, r3
 8005282:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005286:	d807      	bhi.n	8005298 <_printf_i+0x28>
 8005288:	2f62      	cmp	r7, #98	@ 0x62
 800528a:	d80a      	bhi.n	80052a2 <_printf_i+0x32>
 800528c:	2f00      	cmp	r7, #0
 800528e:	f000 80d2 	beq.w	8005436 <_printf_i+0x1c6>
 8005292:	2f58      	cmp	r7, #88	@ 0x58
 8005294:	f000 80b9 	beq.w	800540a <_printf_i+0x19a>
 8005298:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800529c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80052a0:	e03a      	b.n	8005318 <_printf_i+0xa8>
 80052a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80052a6:	2b15      	cmp	r3, #21
 80052a8:	d8f6      	bhi.n	8005298 <_printf_i+0x28>
 80052aa:	a101      	add	r1, pc, #4	@ (adr r1, 80052b0 <_printf_i+0x40>)
 80052ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052b0:	08005309 	.word	0x08005309
 80052b4:	0800531d 	.word	0x0800531d
 80052b8:	08005299 	.word	0x08005299
 80052bc:	08005299 	.word	0x08005299
 80052c0:	08005299 	.word	0x08005299
 80052c4:	08005299 	.word	0x08005299
 80052c8:	0800531d 	.word	0x0800531d
 80052cc:	08005299 	.word	0x08005299
 80052d0:	08005299 	.word	0x08005299
 80052d4:	08005299 	.word	0x08005299
 80052d8:	08005299 	.word	0x08005299
 80052dc:	0800541d 	.word	0x0800541d
 80052e0:	08005347 	.word	0x08005347
 80052e4:	080053d7 	.word	0x080053d7
 80052e8:	08005299 	.word	0x08005299
 80052ec:	08005299 	.word	0x08005299
 80052f0:	0800543f 	.word	0x0800543f
 80052f4:	08005299 	.word	0x08005299
 80052f8:	08005347 	.word	0x08005347
 80052fc:	08005299 	.word	0x08005299
 8005300:	08005299 	.word	0x08005299
 8005304:	080053df 	.word	0x080053df
 8005308:	6833      	ldr	r3, [r6, #0]
 800530a:	1d1a      	adds	r2, r3, #4
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	6032      	str	r2, [r6, #0]
 8005310:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005314:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005318:	2301      	movs	r3, #1
 800531a:	e09d      	b.n	8005458 <_printf_i+0x1e8>
 800531c:	6833      	ldr	r3, [r6, #0]
 800531e:	6820      	ldr	r0, [r4, #0]
 8005320:	1d19      	adds	r1, r3, #4
 8005322:	6031      	str	r1, [r6, #0]
 8005324:	0606      	lsls	r6, r0, #24
 8005326:	d501      	bpl.n	800532c <_printf_i+0xbc>
 8005328:	681d      	ldr	r5, [r3, #0]
 800532a:	e003      	b.n	8005334 <_printf_i+0xc4>
 800532c:	0645      	lsls	r5, r0, #25
 800532e:	d5fb      	bpl.n	8005328 <_printf_i+0xb8>
 8005330:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005334:	2d00      	cmp	r5, #0
 8005336:	da03      	bge.n	8005340 <_printf_i+0xd0>
 8005338:	232d      	movs	r3, #45	@ 0x2d
 800533a:	426d      	negs	r5, r5
 800533c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005340:	4859      	ldr	r0, [pc, #356]	@ (80054a8 <_printf_i+0x238>)
 8005342:	230a      	movs	r3, #10
 8005344:	e011      	b.n	800536a <_printf_i+0xfa>
 8005346:	6821      	ldr	r1, [r4, #0]
 8005348:	6833      	ldr	r3, [r6, #0]
 800534a:	0608      	lsls	r0, r1, #24
 800534c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005350:	d402      	bmi.n	8005358 <_printf_i+0xe8>
 8005352:	0649      	lsls	r1, r1, #25
 8005354:	bf48      	it	mi
 8005356:	b2ad      	uxthmi	r5, r5
 8005358:	2f6f      	cmp	r7, #111	@ 0x6f
 800535a:	4853      	ldr	r0, [pc, #332]	@ (80054a8 <_printf_i+0x238>)
 800535c:	6033      	str	r3, [r6, #0]
 800535e:	bf14      	ite	ne
 8005360:	230a      	movne	r3, #10
 8005362:	2308      	moveq	r3, #8
 8005364:	2100      	movs	r1, #0
 8005366:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800536a:	6866      	ldr	r6, [r4, #4]
 800536c:	60a6      	str	r6, [r4, #8]
 800536e:	2e00      	cmp	r6, #0
 8005370:	bfa2      	ittt	ge
 8005372:	6821      	ldrge	r1, [r4, #0]
 8005374:	f021 0104 	bicge.w	r1, r1, #4
 8005378:	6021      	strge	r1, [r4, #0]
 800537a:	b90d      	cbnz	r5, 8005380 <_printf_i+0x110>
 800537c:	2e00      	cmp	r6, #0
 800537e:	d04b      	beq.n	8005418 <_printf_i+0x1a8>
 8005380:	4616      	mov	r6, r2
 8005382:	fbb5 f1f3 	udiv	r1, r5, r3
 8005386:	fb03 5711 	mls	r7, r3, r1, r5
 800538a:	5dc7      	ldrb	r7, [r0, r7]
 800538c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005390:	462f      	mov	r7, r5
 8005392:	42bb      	cmp	r3, r7
 8005394:	460d      	mov	r5, r1
 8005396:	d9f4      	bls.n	8005382 <_printf_i+0x112>
 8005398:	2b08      	cmp	r3, #8
 800539a:	d10b      	bne.n	80053b4 <_printf_i+0x144>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	07df      	lsls	r7, r3, #31
 80053a0:	d508      	bpl.n	80053b4 <_printf_i+0x144>
 80053a2:	6923      	ldr	r3, [r4, #16]
 80053a4:	6861      	ldr	r1, [r4, #4]
 80053a6:	4299      	cmp	r1, r3
 80053a8:	bfde      	ittt	le
 80053aa:	2330      	movle	r3, #48	@ 0x30
 80053ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80053b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80053b4:	1b92      	subs	r2, r2, r6
 80053b6:	6122      	str	r2, [r4, #16]
 80053b8:	f8cd a000 	str.w	sl, [sp]
 80053bc:	464b      	mov	r3, r9
 80053be:	aa03      	add	r2, sp, #12
 80053c0:	4621      	mov	r1, r4
 80053c2:	4640      	mov	r0, r8
 80053c4:	f7ff fee6 	bl	8005194 <_printf_common>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d14a      	bne.n	8005462 <_printf_i+0x1f2>
 80053cc:	f04f 30ff 	mov.w	r0, #4294967295
 80053d0:	b004      	add	sp, #16
 80053d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	f043 0320 	orr.w	r3, r3, #32
 80053dc:	6023      	str	r3, [r4, #0]
 80053de:	4833      	ldr	r0, [pc, #204]	@ (80054ac <_printf_i+0x23c>)
 80053e0:	2778      	movs	r7, #120	@ 0x78
 80053e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80053e6:	6823      	ldr	r3, [r4, #0]
 80053e8:	6831      	ldr	r1, [r6, #0]
 80053ea:	061f      	lsls	r7, r3, #24
 80053ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80053f0:	d402      	bmi.n	80053f8 <_printf_i+0x188>
 80053f2:	065f      	lsls	r7, r3, #25
 80053f4:	bf48      	it	mi
 80053f6:	b2ad      	uxthmi	r5, r5
 80053f8:	6031      	str	r1, [r6, #0]
 80053fa:	07d9      	lsls	r1, r3, #31
 80053fc:	bf44      	itt	mi
 80053fe:	f043 0320 	orrmi.w	r3, r3, #32
 8005402:	6023      	strmi	r3, [r4, #0]
 8005404:	b11d      	cbz	r5, 800540e <_printf_i+0x19e>
 8005406:	2310      	movs	r3, #16
 8005408:	e7ac      	b.n	8005364 <_printf_i+0xf4>
 800540a:	4827      	ldr	r0, [pc, #156]	@ (80054a8 <_printf_i+0x238>)
 800540c:	e7e9      	b.n	80053e2 <_printf_i+0x172>
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	f023 0320 	bic.w	r3, r3, #32
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	e7f6      	b.n	8005406 <_printf_i+0x196>
 8005418:	4616      	mov	r6, r2
 800541a:	e7bd      	b.n	8005398 <_printf_i+0x128>
 800541c:	6833      	ldr	r3, [r6, #0]
 800541e:	6825      	ldr	r5, [r4, #0]
 8005420:	6961      	ldr	r1, [r4, #20]
 8005422:	1d18      	adds	r0, r3, #4
 8005424:	6030      	str	r0, [r6, #0]
 8005426:	062e      	lsls	r6, r5, #24
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	d501      	bpl.n	8005430 <_printf_i+0x1c0>
 800542c:	6019      	str	r1, [r3, #0]
 800542e:	e002      	b.n	8005436 <_printf_i+0x1c6>
 8005430:	0668      	lsls	r0, r5, #25
 8005432:	d5fb      	bpl.n	800542c <_printf_i+0x1bc>
 8005434:	8019      	strh	r1, [r3, #0]
 8005436:	2300      	movs	r3, #0
 8005438:	6123      	str	r3, [r4, #16]
 800543a:	4616      	mov	r6, r2
 800543c:	e7bc      	b.n	80053b8 <_printf_i+0x148>
 800543e:	6833      	ldr	r3, [r6, #0]
 8005440:	1d1a      	adds	r2, r3, #4
 8005442:	6032      	str	r2, [r6, #0]
 8005444:	681e      	ldr	r6, [r3, #0]
 8005446:	6862      	ldr	r2, [r4, #4]
 8005448:	2100      	movs	r1, #0
 800544a:	4630      	mov	r0, r6
 800544c:	f7fa fec0 	bl	80001d0 <memchr>
 8005450:	b108      	cbz	r0, 8005456 <_printf_i+0x1e6>
 8005452:	1b80      	subs	r0, r0, r6
 8005454:	6060      	str	r0, [r4, #4]
 8005456:	6863      	ldr	r3, [r4, #4]
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	2300      	movs	r3, #0
 800545c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005460:	e7aa      	b.n	80053b8 <_printf_i+0x148>
 8005462:	6923      	ldr	r3, [r4, #16]
 8005464:	4632      	mov	r2, r6
 8005466:	4649      	mov	r1, r9
 8005468:	4640      	mov	r0, r8
 800546a:	47d0      	blx	sl
 800546c:	3001      	adds	r0, #1
 800546e:	d0ad      	beq.n	80053cc <_printf_i+0x15c>
 8005470:	6823      	ldr	r3, [r4, #0]
 8005472:	079b      	lsls	r3, r3, #30
 8005474:	d413      	bmi.n	800549e <_printf_i+0x22e>
 8005476:	68e0      	ldr	r0, [r4, #12]
 8005478:	9b03      	ldr	r3, [sp, #12]
 800547a:	4298      	cmp	r0, r3
 800547c:	bfb8      	it	lt
 800547e:	4618      	movlt	r0, r3
 8005480:	e7a6      	b.n	80053d0 <_printf_i+0x160>
 8005482:	2301      	movs	r3, #1
 8005484:	4632      	mov	r2, r6
 8005486:	4649      	mov	r1, r9
 8005488:	4640      	mov	r0, r8
 800548a:	47d0      	blx	sl
 800548c:	3001      	adds	r0, #1
 800548e:	d09d      	beq.n	80053cc <_printf_i+0x15c>
 8005490:	3501      	adds	r5, #1
 8005492:	68e3      	ldr	r3, [r4, #12]
 8005494:	9903      	ldr	r1, [sp, #12]
 8005496:	1a5b      	subs	r3, r3, r1
 8005498:	42ab      	cmp	r3, r5
 800549a:	dcf2      	bgt.n	8005482 <_printf_i+0x212>
 800549c:	e7eb      	b.n	8005476 <_printf_i+0x206>
 800549e:	2500      	movs	r5, #0
 80054a0:	f104 0619 	add.w	r6, r4, #25
 80054a4:	e7f5      	b.n	8005492 <_printf_i+0x222>
 80054a6:	bf00      	nop
 80054a8:	0800934e 	.word	0x0800934e
 80054ac:	0800935f 	.word	0x0800935f

080054b0 <_scanf_float>:
 80054b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b4:	b087      	sub	sp, #28
 80054b6:	4617      	mov	r7, r2
 80054b8:	9303      	str	r3, [sp, #12]
 80054ba:	688b      	ldr	r3, [r1, #8]
 80054bc:	1e5a      	subs	r2, r3, #1
 80054be:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80054c2:	bf81      	itttt	hi
 80054c4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80054c8:	eb03 0b05 	addhi.w	fp, r3, r5
 80054cc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80054d0:	608b      	strhi	r3, [r1, #8]
 80054d2:	680b      	ldr	r3, [r1, #0]
 80054d4:	460a      	mov	r2, r1
 80054d6:	f04f 0500 	mov.w	r5, #0
 80054da:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80054de:	f842 3b1c 	str.w	r3, [r2], #28
 80054e2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80054e6:	4680      	mov	r8, r0
 80054e8:	460c      	mov	r4, r1
 80054ea:	bf98      	it	ls
 80054ec:	f04f 0b00 	movls.w	fp, #0
 80054f0:	9201      	str	r2, [sp, #4]
 80054f2:	4616      	mov	r6, r2
 80054f4:	46aa      	mov	sl, r5
 80054f6:	46a9      	mov	r9, r5
 80054f8:	9502      	str	r5, [sp, #8]
 80054fa:	68a2      	ldr	r2, [r4, #8]
 80054fc:	b152      	cbz	r2, 8005514 <_scanf_float+0x64>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b4e      	cmp	r3, #78	@ 0x4e
 8005504:	d864      	bhi.n	80055d0 <_scanf_float+0x120>
 8005506:	2b40      	cmp	r3, #64	@ 0x40
 8005508:	d83c      	bhi.n	8005584 <_scanf_float+0xd4>
 800550a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800550e:	b2c8      	uxtb	r0, r1
 8005510:	280e      	cmp	r0, #14
 8005512:	d93a      	bls.n	800558a <_scanf_float+0xda>
 8005514:	f1b9 0f00 	cmp.w	r9, #0
 8005518:	d003      	beq.n	8005522 <_scanf_float+0x72>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005526:	f1ba 0f01 	cmp.w	sl, #1
 800552a:	f200 8117 	bhi.w	800575c <_scanf_float+0x2ac>
 800552e:	9b01      	ldr	r3, [sp, #4]
 8005530:	429e      	cmp	r6, r3
 8005532:	f200 8108 	bhi.w	8005746 <_scanf_float+0x296>
 8005536:	2001      	movs	r0, #1
 8005538:	b007      	add	sp, #28
 800553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005542:	2a0d      	cmp	r2, #13
 8005544:	d8e6      	bhi.n	8005514 <_scanf_float+0x64>
 8005546:	a101      	add	r1, pc, #4	@ (adr r1, 800554c <_scanf_float+0x9c>)
 8005548:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800554c:	08005693 	.word	0x08005693
 8005550:	08005515 	.word	0x08005515
 8005554:	08005515 	.word	0x08005515
 8005558:	08005515 	.word	0x08005515
 800555c:	080056f3 	.word	0x080056f3
 8005560:	080056cb 	.word	0x080056cb
 8005564:	08005515 	.word	0x08005515
 8005568:	08005515 	.word	0x08005515
 800556c:	080056a1 	.word	0x080056a1
 8005570:	08005515 	.word	0x08005515
 8005574:	08005515 	.word	0x08005515
 8005578:	08005515 	.word	0x08005515
 800557c:	08005515 	.word	0x08005515
 8005580:	08005659 	.word	0x08005659
 8005584:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005588:	e7db      	b.n	8005542 <_scanf_float+0x92>
 800558a:	290e      	cmp	r1, #14
 800558c:	d8c2      	bhi.n	8005514 <_scanf_float+0x64>
 800558e:	a001      	add	r0, pc, #4	@ (adr r0, 8005594 <_scanf_float+0xe4>)
 8005590:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005594:	08005649 	.word	0x08005649
 8005598:	08005515 	.word	0x08005515
 800559c:	08005649 	.word	0x08005649
 80055a0:	080056df 	.word	0x080056df
 80055a4:	08005515 	.word	0x08005515
 80055a8:	080055f1 	.word	0x080055f1
 80055ac:	0800562f 	.word	0x0800562f
 80055b0:	0800562f 	.word	0x0800562f
 80055b4:	0800562f 	.word	0x0800562f
 80055b8:	0800562f 	.word	0x0800562f
 80055bc:	0800562f 	.word	0x0800562f
 80055c0:	0800562f 	.word	0x0800562f
 80055c4:	0800562f 	.word	0x0800562f
 80055c8:	0800562f 	.word	0x0800562f
 80055cc:	0800562f 	.word	0x0800562f
 80055d0:	2b6e      	cmp	r3, #110	@ 0x6e
 80055d2:	d809      	bhi.n	80055e8 <_scanf_float+0x138>
 80055d4:	2b60      	cmp	r3, #96	@ 0x60
 80055d6:	d8b2      	bhi.n	800553e <_scanf_float+0x8e>
 80055d8:	2b54      	cmp	r3, #84	@ 0x54
 80055da:	d07b      	beq.n	80056d4 <_scanf_float+0x224>
 80055dc:	2b59      	cmp	r3, #89	@ 0x59
 80055de:	d199      	bne.n	8005514 <_scanf_float+0x64>
 80055e0:	2d07      	cmp	r5, #7
 80055e2:	d197      	bne.n	8005514 <_scanf_float+0x64>
 80055e4:	2508      	movs	r5, #8
 80055e6:	e02c      	b.n	8005642 <_scanf_float+0x192>
 80055e8:	2b74      	cmp	r3, #116	@ 0x74
 80055ea:	d073      	beq.n	80056d4 <_scanf_float+0x224>
 80055ec:	2b79      	cmp	r3, #121	@ 0x79
 80055ee:	e7f6      	b.n	80055de <_scanf_float+0x12e>
 80055f0:	6821      	ldr	r1, [r4, #0]
 80055f2:	05c8      	lsls	r0, r1, #23
 80055f4:	d51b      	bpl.n	800562e <_scanf_float+0x17e>
 80055f6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80055fa:	6021      	str	r1, [r4, #0]
 80055fc:	f109 0901 	add.w	r9, r9, #1
 8005600:	f1bb 0f00 	cmp.w	fp, #0
 8005604:	d003      	beq.n	800560e <_scanf_float+0x15e>
 8005606:	3201      	adds	r2, #1
 8005608:	f10b 3bff 	add.w	fp, fp, #4294967295
 800560c:	60a2      	str	r2, [r4, #8]
 800560e:	68a3      	ldr	r3, [r4, #8]
 8005610:	3b01      	subs	r3, #1
 8005612:	60a3      	str	r3, [r4, #8]
 8005614:	6923      	ldr	r3, [r4, #16]
 8005616:	3301      	adds	r3, #1
 8005618:	6123      	str	r3, [r4, #16]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3b01      	subs	r3, #1
 800561e:	2b00      	cmp	r3, #0
 8005620:	607b      	str	r3, [r7, #4]
 8005622:	f340 8087 	ble.w	8005734 <_scanf_float+0x284>
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	3301      	adds	r3, #1
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	e765      	b.n	80054fa <_scanf_float+0x4a>
 800562e:	eb1a 0105 	adds.w	r1, sl, r5
 8005632:	f47f af6f 	bne.w	8005514 <_scanf_float+0x64>
 8005636:	6822      	ldr	r2, [r4, #0]
 8005638:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800563c:	6022      	str	r2, [r4, #0]
 800563e:	460d      	mov	r5, r1
 8005640:	468a      	mov	sl, r1
 8005642:	f806 3b01 	strb.w	r3, [r6], #1
 8005646:	e7e2      	b.n	800560e <_scanf_float+0x15e>
 8005648:	6822      	ldr	r2, [r4, #0]
 800564a:	0610      	lsls	r0, r2, #24
 800564c:	f57f af62 	bpl.w	8005514 <_scanf_float+0x64>
 8005650:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005654:	6022      	str	r2, [r4, #0]
 8005656:	e7f4      	b.n	8005642 <_scanf_float+0x192>
 8005658:	f1ba 0f00 	cmp.w	sl, #0
 800565c:	d10e      	bne.n	800567c <_scanf_float+0x1cc>
 800565e:	f1b9 0f00 	cmp.w	r9, #0
 8005662:	d10e      	bne.n	8005682 <_scanf_float+0x1d2>
 8005664:	6822      	ldr	r2, [r4, #0]
 8005666:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800566a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800566e:	d108      	bne.n	8005682 <_scanf_float+0x1d2>
 8005670:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005674:	6022      	str	r2, [r4, #0]
 8005676:	f04f 0a01 	mov.w	sl, #1
 800567a:	e7e2      	b.n	8005642 <_scanf_float+0x192>
 800567c:	f1ba 0f02 	cmp.w	sl, #2
 8005680:	d055      	beq.n	800572e <_scanf_float+0x27e>
 8005682:	2d01      	cmp	r5, #1
 8005684:	d002      	beq.n	800568c <_scanf_float+0x1dc>
 8005686:	2d04      	cmp	r5, #4
 8005688:	f47f af44 	bne.w	8005514 <_scanf_float+0x64>
 800568c:	3501      	adds	r5, #1
 800568e:	b2ed      	uxtb	r5, r5
 8005690:	e7d7      	b.n	8005642 <_scanf_float+0x192>
 8005692:	f1ba 0f01 	cmp.w	sl, #1
 8005696:	f47f af3d 	bne.w	8005514 <_scanf_float+0x64>
 800569a:	f04f 0a02 	mov.w	sl, #2
 800569e:	e7d0      	b.n	8005642 <_scanf_float+0x192>
 80056a0:	b97d      	cbnz	r5, 80056c2 <_scanf_float+0x212>
 80056a2:	f1b9 0f00 	cmp.w	r9, #0
 80056a6:	f47f af38 	bne.w	800551a <_scanf_float+0x6a>
 80056aa:	6822      	ldr	r2, [r4, #0]
 80056ac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80056b0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80056b4:	f040 8108 	bne.w	80058c8 <_scanf_float+0x418>
 80056b8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80056bc:	6022      	str	r2, [r4, #0]
 80056be:	2501      	movs	r5, #1
 80056c0:	e7bf      	b.n	8005642 <_scanf_float+0x192>
 80056c2:	2d03      	cmp	r5, #3
 80056c4:	d0e2      	beq.n	800568c <_scanf_float+0x1dc>
 80056c6:	2d05      	cmp	r5, #5
 80056c8:	e7de      	b.n	8005688 <_scanf_float+0x1d8>
 80056ca:	2d02      	cmp	r5, #2
 80056cc:	f47f af22 	bne.w	8005514 <_scanf_float+0x64>
 80056d0:	2503      	movs	r5, #3
 80056d2:	e7b6      	b.n	8005642 <_scanf_float+0x192>
 80056d4:	2d06      	cmp	r5, #6
 80056d6:	f47f af1d 	bne.w	8005514 <_scanf_float+0x64>
 80056da:	2507      	movs	r5, #7
 80056dc:	e7b1      	b.n	8005642 <_scanf_float+0x192>
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	0591      	lsls	r1, r2, #22
 80056e2:	f57f af17 	bpl.w	8005514 <_scanf_float+0x64>
 80056e6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80056ea:	6022      	str	r2, [r4, #0]
 80056ec:	f8cd 9008 	str.w	r9, [sp, #8]
 80056f0:	e7a7      	b.n	8005642 <_scanf_float+0x192>
 80056f2:	6822      	ldr	r2, [r4, #0]
 80056f4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80056f8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80056fc:	d006      	beq.n	800570c <_scanf_float+0x25c>
 80056fe:	0550      	lsls	r0, r2, #21
 8005700:	f57f af08 	bpl.w	8005514 <_scanf_float+0x64>
 8005704:	f1b9 0f00 	cmp.w	r9, #0
 8005708:	f000 80de 	beq.w	80058c8 <_scanf_float+0x418>
 800570c:	0591      	lsls	r1, r2, #22
 800570e:	bf58      	it	pl
 8005710:	9902      	ldrpl	r1, [sp, #8]
 8005712:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005716:	bf58      	it	pl
 8005718:	eba9 0101 	subpl.w	r1, r9, r1
 800571c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005720:	bf58      	it	pl
 8005722:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005726:	6022      	str	r2, [r4, #0]
 8005728:	f04f 0900 	mov.w	r9, #0
 800572c:	e789      	b.n	8005642 <_scanf_float+0x192>
 800572e:	f04f 0a03 	mov.w	sl, #3
 8005732:	e786      	b.n	8005642 <_scanf_float+0x192>
 8005734:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005738:	4639      	mov	r1, r7
 800573a:	4640      	mov	r0, r8
 800573c:	4798      	blx	r3
 800573e:	2800      	cmp	r0, #0
 8005740:	f43f aedb 	beq.w	80054fa <_scanf_float+0x4a>
 8005744:	e6e6      	b.n	8005514 <_scanf_float+0x64>
 8005746:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800574a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800574e:	463a      	mov	r2, r7
 8005750:	4640      	mov	r0, r8
 8005752:	4798      	blx	r3
 8005754:	6923      	ldr	r3, [r4, #16]
 8005756:	3b01      	subs	r3, #1
 8005758:	6123      	str	r3, [r4, #16]
 800575a:	e6e8      	b.n	800552e <_scanf_float+0x7e>
 800575c:	1e6b      	subs	r3, r5, #1
 800575e:	2b06      	cmp	r3, #6
 8005760:	d824      	bhi.n	80057ac <_scanf_float+0x2fc>
 8005762:	2d02      	cmp	r5, #2
 8005764:	d836      	bhi.n	80057d4 <_scanf_float+0x324>
 8005766:	9b01      	ldr	r3, [sp, #4]
 8005768:	429e      	cmp	r6, r3
 800576a:	f67f aee4 	bls.w	8005536 <_scanf_float+0x86>
 800576e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005772:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005776:	463a      	mov	r2, r7
 8005778:	4640      	mov	r0, r8
 800577a:	4798      	blx	r3
 800577c:	6923      	ldr	r3, [r4, #16]
 800577e:	3b01      	subs	r3, #1
 8005780:	6123      	str	r3, [r4, #16]
 8005782:	e7f0      	b.n	8005766 <_scanf_float+0x2b6>
 8005784:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005788:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800578c:	463a      	mov	r2, r7
 800578e:	4640      	mov	r0, r8
 8005790:	4798      	blx	r3
 8005792:	6923      	ldr	r3, [r4, #16]
 8005794:	3b01      	subs	r3, #1
 8005796:	6123      	str	r3, [r4, #16]
 8005798:	f10a 3aff 	add.w	sl, sl, #4294967295
 800579c:	fa5f fa8a 	uxtb.w	sl, sl
 80057a0:	f1ba 0f02 	cmp.w	sl, #2
 80057a4:	d1ee      	bne.n	8005784 <_scanf_float+0x2d4>
 80057a6:	3d03      	subs	r5, #3
 80057a8:	b2ed      	uxtb	r5, r5
 80057aa:	1b76      	subs	r6, r6, r5
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	05da      	lsls	r2, r3, #23
 80057b0:	d530      	bpl.n	8005814 <_scanf_float+0x364>
 80057b2:	055b      	lsls	r3, r3, #21
 80057b4:	d511      	bpl.n	80057da <_scanf_float+0x32a>
 80057b6:	9b01      	ldr	r3, [sp, #4]
 80057b8:	429e      	cmp	r6, r3
 80057ba:	f67f aebc 	bls.w	8005536 <_scanf_float+0x86>
 80057be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057c6:	463a      	mov	r2, r7
 80057c8:	4640      	mov	r0, r8
 80057ca:	4798      	blx	r3
 80057cc:	6923      	ldr	r3, [r4, #16]
 80057ce:	3b01      	subs	r3, #1
 80057d0:	6123      	str	r3, [r4, #16]
 80057d2:	e7f0      	b.n	80057b6 <_scanf_float+0x306>
 80057d4:	46aa      	mov	sl, r5
 80057d6:	46b3      	mov	fp, r6
 80057d8:	e7de      	b.n	8005798 <_scanf_float+0x2e8>
 80057da:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80057de:	6923      	ldr	r3, [r4, #16]
 80057e0:	2965      	cmp	r1, #101	@ 0x65
 80057e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80057e6:	f106 35ff 	add.w	r5, r6, #4294967295
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	d00c      	beq.n	8005808 <_scanf_float+0x358>
 80057ee:	2945      	cmp	r1, #69	@ 0x45
 80057f0:	d00a      	beq.n	8005808 <_scanf_float+0x358>
 80057f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057f6:	463a      	mov	r2, r7
 80057f8:	4640      	mov	r0, r8
 80057fa:	4798      	blx	r3
 80057fc:	6923      	ldr	r3, [r4, #16]
 80057fe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005802:	3b01      	subs	r3, #1
 8005804:	1eb5      	subs	r5, r6, #2
 8005806:	6123      	str	r3, [r4, #16]
 8005808:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800580c:	463a      	mov	r2, r7
 800580e:	4640      	mov	r0, r8
 8005810:	4798      	blx	r3
 8005812:	462e      	mov	r6, r5
 8005814:	6822      	ldr	r2, [r4, #0]
 8005816:	f012 0210 	ands.w	r2, r2, #16
 800581a:	d001      	beq.n	8005820 <_scanf_float+0x370>
 800581c:	2000      	movs	r0, #0
 800581e:	e68b      	b.n	8005538 <_scanf_float+0x88>
 8005820:	7032      	strb	r2, [r6, #0]
 8005822:	6823      	ldr	r3, [r4, #0]
 8005824:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005828:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800582c:	d11c      	bne.n	8005868 <_scanf_float+0x3b8>
 800582e:	9b02      	ldr	r3, [sp, #8]
 8005830:	454b      	cmp	r3, r9
 8005832:	eba3 0209 	sub.w	r2, r3, r9
 8005836:	d123      	bne.n	8005880 <_scanf_float+0x3d0>
 8005838:	9901      	ldr	r1, [sp, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	4640      	mov	r0, r8
 800583e:	f002 fbf7 	bl	8008030 <_strtod_r>
 8005842:	9b03      	ldr	r3, [sp, #12]
 8005844:	6821      	ldr	r1, [r4, #0]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f011 0f02 	tst.w	r1, #2
 800584c:	ec57 6b10 	vmov	r6, r7, d0
 8005850:	f103 0204 	add.w	r2, r3, #4
 8005854:	d01f      	beq.n	8005896 <_scanf_float+0x3e6>
 8005856:	9903      	ldr	r1, [sp, #12]
 8005858:	600a      	str	r2, [r1, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	e9c3 6700 	strd	r6, r7, [r3]
 8005860:	68e3      	ldr	r3, [r4, #12]
 8005862:	3301      	adds	r3, #1
 8005864:	60e3      	str	r3, [r4, #12]
 8005866:	e7d9      	b.n	800581c <_scanf_float+0x36c>
 8005868:	9b04      	ldr	r3, [sp, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0e4      	beq.n	8005838 <_scanf_float+0x388>
 800586e:	9905      	ldr	r1, [sp, #20]
 8005870:	230a      	movs	r3, #10
 8005872:	3101      	adds	r1, #1
 8005874:	4640      	mov	r0, r8
 8005876:	f002 fc5b 	bl	8008130 <_strtol_r>
 800587a:	9b04      	ldr	r3, [sp, #16]
 800587c:	9e05      	ldr	r6, [sp, #20]
 800587e:	1ac2      	subs	r2, r0, r3
 8005880:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005884:	429e      	cmp	r6, r3
 8005886:	bf28      	it	cs
 8005888:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800588c:	4910      	ldr	r1, [pc, #64]	@ (80058d0 <_scanf_float+0x420>)
 800588e:	4630      	mov	r0, r6
 8005890:	f000 f8e4 	bl	8005a5c <siprintf>
 8005894:	e7d0      	b.n	8005838 <_scanf_float+0x388>
 8005896:	f011 0f04 	tst.w	r1, #4
 800589a:	9903      	ldr	r1, [sp, #12]
 800589c:	600a      	str	r2, [r1, #0]
 800589e:	d1dc      	bne.n	800585a <_scanf_float+0x3aa>
 80058a0:	681d      	ldr	r5, [r3, #0]
 80058a2:	4632      	mov	r2, r6
 80058a4:	463b      	mov	r3, r7
 80058a6:	4630      	mov	r0, r6
 80058a8:	4639      	mov	r1, r7
 80058aa:	f7fb f93f 	bl	8000b2c <__aeabi_dcmpun>
 80058ae:	b128      	cbz	r0, 80058bc <_scanf_float+0x40c>
 80058b0:	4808      	ldr	r0, [pc, #32]	@ (80058d4 <_scanf_float+0x424>)
 80058b2:	f000 f9b7 	bl	8005c24 <nanf>
 80058b6:	ed85 0a00 	vstr	s0, [r5]
 80058ba:	e7d1      	b.n	8005860 <_scanf_float+0x3b0>
 80058bc:	4630      	mov	r0, r6
 80058be:	4639      	mov	r1, r7
 80058c0:	f7fb f992 	bl	8000be8 <__aeabi_d2f>
 80058c4:	6028      	str	r0, [r5, #0]
 80058c6:	e7cb      	b.n	8005860 <_scanf_float+0x3b0>
 80058c8:	f04f 0900 	mov.w	r9, #0
 80058cc:	e629      	b.n	8005522 <_scanf_float+0x72>
 80058ce:	bf00      	nop
 80058d0:	08009370 	.word	0x08009370
 80058d4:	08009705 	.word	0x08009705

080058d8 <std>:
 80058d8:	2300      	movs	r3, #0
 80058da:	b510      	push	{r4, lr}
 80058dc:	4604      	mov	r4, r0
 80058de:	e9c0 3300 	strd	r3, r3, [r0]
 80058e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80058e6:	6083      	str	r3, [r0, #8]
 80058e8:	8181      	strh	r1, [r0, #12]
 80058ea:	6643      	str	r3, [r0, #100]	@ 0x64
 80058ec:	81c2      	strh	r2, [r0, #14]
 80058ee:	6183      	str	r3, [r0, #24]
 80058f0:	4619      	mov	r1, r3
 80058f2:	2208      	movs	r2, #8
 80058f4:	305c      	adds	r0, #92	@ 0x5c
 80058f6:	f000 f914 	bl	8005b22 <memset>
 80058fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005930 <std+0x58>)
 80058fc:	6263      	str	r3, [r4, #36]	@ 0x24
 80058fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005934 <std+0x5c>)
 8005900:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005902:	4b0d      	ldr	r3, [pc, #52]	@ (8005938 <std+0x60>)
 8005904:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005906:	4b0d      	ldr	r3, [pc, #52]	@ (800593c <std+0x64>)
 8005908:	6323      	str	r3, [r4, #48]	@ 0x30
 800590a:	4b0d      	ldr	r3, [pc, #52]	@ (8005940 <std+0x68>)
 800590c:	6224      	str	r4, [r4, #32]
 800590e:	429c      	cmp	r4, r3
 8005910:	d006      	beq.n	8005920 <std+0x48>
 8005912:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005916:	4294      	cmp	r4, r2
 8005918:	d002      	beq.n	8005920 <std+0x48>
 800591a:	33d0      	adds	r3, #208	@ 0xd0
 800591c:	429c      	cmp	r4, r3
 800591e:	d105      	bne.n	800592c <std+0x54>
 8005920:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005928:	f000 b978 	b.w	8005c1c <__retarget_lock_init_recursive>
 800592c:	bd10      	pop	{r4, pc}
 800592e:	bf00      	nop
 8005930:	08005a9d 	.word	0x08005a9d
 8005934:	08005abf 	.word	0x08005abf
 8005938:	08005af7 	.word	0x08005af7
 800593c:	08005b1b 	.word	0x08005b1b
 8005940:	2000033c 	.word	0x2000033c

08005944 <stdio_exit_handler>:
 8005944:	4a02      	ldr	r2, [pc, #8]	@ (8005950 <stdio_exit_handler+0xc>)
 8005946:	4903      	ldr	r1, [pc, #12]	@ (8005954 <stdio_exit_handler+0x10>)
 8005948:	4803      	ldr	r0, [pc, #12]	@ (8005958 <stdio_exit_handler+0x14>)
 800594a:	f000 b869 	b.w	8005a20 <_fwalk_sglue>
 800594e:	bf00      	nop
 8005950:	2000000c 	.word	0x2000000c
 8005954:	080084ed 	.word	0x080084ed
 8005958:	2000001c 	.word	0x2000001c

0800595c <cleanup_stdio>:
 800595c:	6841      	ldr	r1, [r0, #4]
 800595e:	4b0c      	ldr	r3, [pc, #48]	@ (8005990 <cleanup_stdio+0x34>)
 8005960:	4299      	cmp	r1, r3
 8005962:	b510      	push	{r4, lr}
 8005964:	4604      	mov	r4, r0
 8005966:	d001      	beq.n	800596c <cleanup_stdio+0x10>
 8005968:	f002 fdc0 	bl	80084ec <_fflush_r>
 800596c:	68a1      	ldr	r1, [r4, #8]
 800596e:	4b09      	ldr	r3, [pc, #36]	@ (8005994 <cleanup_stdio+0x38>)
 8005970:	4299      	cmp	r1, r3
 8005972:	d002      	beq.n	800597a <cleanup_stdio+0x1e>
 8005974:	4620      	mov	r0, r4
 8005976:	f002 fdb9 	bl	80084ec <_fflush_r>
 800597a:	68e1      	ldr	r1, [r4, #12]
 800597c:	4b06      	ldr	r3, [pc, #24]	@ (8005998 <cleanup_stdio+0x3c>)
 800597e:	4299      	cmp	r1, r3
 8005980:	d004      	beq.n	800598c <cleanup_stdio+0x30>
 8005982:	4620      	mov	r0, r4
 8005984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005988:	f002 bdb0 	b.w	80084ec <_fflush_r>
 800598c:	bd10      	pop	{r4, pc}
 800598e:	bf00      	nop
 8005990:	2000033c 	.word	0x2000033c
 8005994:	200003a4 	.word	0x200003a4
 8005998:	2000040c 	.word	0x2000040c

0800599c <global_stdio_init.part.0>:
 800599c:	b510      	push	{r4, lr}
 800599e:	4b0b      	ldr	r3, [pc, #44]	@ (80059cc <global_stdio_init.part.0+0x30>)
 80059a0:	4c0b      	ldr	r4, [pc, #44]	@ (80059d0 <global_stdio_init.part.0+0x34>)
 80059a2:	4a0c      	ldr	r2, [pc, #48]	@ (80059d4 <global_stdio_init.part.0+0x38>)
 80059a4:	601a      	str	r2, [r3, #0]
 80059a6:	4620      	mov	r0, r4
 80059a8:	2200      	movs	r2, #0
 80059aa:	2104      	movs	r1, #4
 80059ac:	f7ff ff94 	bl	80058d8 <std>
 80059b0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80059b4:	2201      	movs	r2, #1
 80059b6:	2109      	movs	r1, #9
 80059b8:	f7ff ff8e 	bl	80058d8 <std>
 80059bc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80059c0:	2202      	movs	r2, #2
 80059c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059c6:	2112      	movs	r1, #18
 80059c8:	f7ff bf86 	b.w	80058d8 <std>
 80059cc:	20000474 	.word	0x20000474
 80059d0:	2000033c 	.word	0x2000033c
 80059d4:	08005945 	.word	0x08005945

080059d8 <__sfp_lock_acquire>:
 80059d8:	4801      	ldr	r0, [pc, #4]	@ (80059e0 <__sfp_lock_acquire+0x8>)
 80059da:	f000 b920 	b.w	8005c1e <__retarget_lock_acquire_recursive>
 80059de:	bf00      	nop
 80059e0:	2000047d 	.word	0x2000047d

080059e4 <__sfp_lock_release>:
 80059e4:	4801      	ldr	r0, [pc, #4]	@ (80059ec <__sfp_lock_release+0x8>)
 80059e6:	f000 b91b 	b.w	8005c20 <__retarget_lock_release_recursive>
 80059ea:	bf00      	nop
 80059ec:	2000047d 	.word	0x2000047d

080059f0 <__sinit>:
 80059f0:	b510      	push	{r4, lr}
 80059f2:	4604      	mov	r4, r0
 80059f4:	f7ff fff0 	bl	80059d8 <__sfp_lock_acquire>
 80059f8:	6a23      	ldr	r3, [r4, #32]
 80059fa:	b11b      	cbz	r3, 8005a04 <__sinit+0x14>
 80059fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a00:	f7ff bff0 	b.w	80059e4 <__sfp_lock_release>
 8005a04:	4b04      	ldr	r3, [pc, #16]	@ (8005a18 <__sinit+0x28>)
 8005a06:	6223      	str	r3, [r4, #32]
 8005a08:	4b04      	ldr	r3, [pc, #16]	@ (8005a1c <__sinit+0x2c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d1f5      	bne.n	80059fc <__sinit+0xc>
 8005a10:	f7ff ffc4 	bl	800599c <global_stdio_init.part.0>
 8005a14:	e7f2      	b.n	80059fc <__sinit+0xc>
 8005a16:	bf00      	nop
 8005a18:	0800595d 	.word	0x0800595d
 8005a1c:	20000474 	.word	0x20000474

08005a20 <_fwalk_sglue>:
 8005a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a24:	4607      	mov	r7, r0
 8005a26:	4688      	mov	r8, r1
 8005a28:	4614      	mov	r4, r2
 8005a2a:	2600      	movs	r6, #0
 8005a2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a30:	f1b9 0901 	subs.w	r9, r9, #1
 8005a34:	d505      	bpl.n	8005a42 <_fwalk_sglue+0x22>
 8005a36:	6824      	ldr	r4, [r4, #0]
 8005a38:	2c00      	cmp	r4, #0
 8005a3a:	d1f7      	bne.n	8005a2c <_fwalk_sglue+0xc>
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a42:	89ab      	ldrh	r3, [r5, #12]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d907      	bls.n	8005a58 <_fwalk_sglue+0x38>
 8005a48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	d003      	beq.n	8005a58 <_fwalk_sglue+0x38>
 8005a50:	4629      	mov	r1, r5
 8005a52:	4638      	mov	r0, r7
 8005a54:	47c0      	blx	r8
 8005a56:	4306      	orrs	r6, r0
 8005a58:	3568      	adds	r5, #104	@ 0x68
 8005a5a:	e7e9      	b.n	8005a30 <_fwalk_sglue+0x10>

08005a5c <siprintf>:
 8005a5c:	b40e      	push	{r1, r2, r3}
 8005a5e:	b500      	push	{lr}
 8005a60:	b09c      	sub	sp, #112	@ 0x70
 8005a62:	ab1d      	add	r3, sp, #116	@ 0x74
 8005a64:	9002      	str	r0, [sp, #8]
 8005a66:	9006      	str	r0, [sp, #24]
 8005a68:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a6c:	4809      	ldr	r0, [pc, #36]	@ (8005a94 <siprintf+0x38>)
 8005a6e:	9107      	str	r1, [sp, #28]
 8005a70:	9104      	str	r1, [sp, #16]
 8005a72:	4909      	ldr	r1, [pc, #36]	@ (8005a98 <siprintf+0x3c>)
 8005a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a78:	9105      	str	r1, [sp, #20]
 8005a7a:	6800      	ldr	r0, [r0, #0]
 8005a7c:	9301      	str	r3, [sp, #4]
 8005a7e:	a902      	add	r1, sp, #8
 8005a80:	f002 fbb4 	bl	80081ec <_svfiprintf_r>
 8005a84:	9b02      	ldr	r3, [sp, #8]
 8005a86:	2200      	movs	r2, #0
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	b01c      	add	sp, #112	@ 0x70
 8005a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a90:	b003      	add	sp, #12
 8005a92:	4770      	bx	lr
 8005a94:	20000018 	.word	0x20000018
 8005a98:	ffff0208 	.word	0xffff0208

08005a9c <__sread>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	460c      	mov	r4, r1
 8005aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aa4:	f000 f86c 	bl	8005b80 <_read_r>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	bfab      	itete	ge
 8005aac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005aae:	89a3      	ldrhlt	r3, [r4, #12]
 8005ab0:	181b      	addge	r3, r3, r0
 8005ab2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ab6:	bfac      	ite	ge
 8005ab8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005aba:	81a3      	strhlt	r3, [r4, #12]
 8005abc:	bd10      	pop	{r4, pc}

08005abe <__swrite>:
 8005abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac2:	461f      	mov	r7, r3
 8005ac4:	898b      	ldrh	r3, [r1, #12]
 8005ac6:	05db      	lsls	r3, r3, #23
 8005ac8:	4605      	mov	r5, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	4616      	mov	r6, r2
 8005ace:	d505      	bpl.n	8005adc <__swrite+0x1e>
 8005ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f000 f840 	bl	8005b5c <_lseek_r>
 8005adc:	89a3      	ldrh	r3, [r4, #12]
 8005ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ae2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ae6:	81a3      	strh	r3, [r4, #12]
 8005ae8:	4632      	mov	r2, r6
 8005aea:	463b      	mov	r3, r7
 8005aec:	4628      	mov	r0, r5
 8005aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005af2:	f000 b857 	b.w	8005ba4 <_write_r>

08005af6 <__sseek>:
 8005af6:	b510      	push	{r4, lr}
 8005af8:	460c      	mov	r4, r1
 8005afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005afe:	f000 f82d 	bl	8005b5c <_lseek_r>
 8005b02:	1c43      	adds	r3, r0, #1
 8005b04:	89a3      	ldrh	r3, [r4, #12]
 8005b06:	bf15      	itete	ne
 8005b08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005b0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005b0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005b12:	81a3      	strheq	r3, [r4, #12]
 8005b14:	bf18      	it	ne
 8005b16:	81a3      	strhne	r3, [r4, #12]
 8005b18:	bd10      	pop	{r4, pc}

08005b1a <__sclose>:
 8005b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b1e:	f000 b80d 	b.w	8005b3c <_close_r>

08005b22 <memset>:
 8005b22:	4402      	add	r2, r0
 8005b24:	4603      	mov	r3, r0
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d100      	bne.n	8005b2c <memset+0xa>
 8005b2a:	4770      	bx	lr
 8005b2c:	f803 1b01 	strb.w	r1, [r3], #1
 8005b30:	e7f9      	b.n	8005b26 <memset+0x4>
	...

08005b34 <_localeconv_r>:
 8005b34:	4800      	ldr	r0, [pc, #0]	@ (8005b38 <_localeconv_r+0x4>)
 8005b36:	4770      	bx	lr
 8005b38:	20000158 	.word	0x20000158

08005b3c <_close_r>:
 8005b3c:	b538      	push	{r3, r4, r5, lr}
 8005b3e:	4d06      	ldr	r5, [pc, #24]	@ (8005b58 <_close_r+0x1c>)
 8005b40:	2300      	movs	r3, #0
 8005b42:	4604      	mov	r4, r0
 8005b44:	4608      	mov	r0, r1
 8005b46:	602b      	str	r3, [r5, #0]
 8005b48:	f7fb fe48 	bl	80017dc <_close>
 8005b4c:	1c43      	adds	r3, r0, #1
 8005b4e:	d102      	bne.n	8005b56 <_close_r+0x1a>
 8005b50:	682b      	ldr	r3, [r5, #0]
 8005b52:	b103      	cbz	r3, 8005b56 <_close_r+0x1a>
 8005b54:	6023      	str	r3, [r4, #0]
 8005b56:	bd38      	pop	{r3, r4, r5, pc}
 8005b58:	20000478 	.word	0x20000478

08005b5c <_lseek_r>:
 8005b5c:	b538      	push	{r3, r4, r5, lr}
 8005b5e:	4d07      	ldr	r5, [pc, #28]	@ (8005b7c <_lseek_r+0x20>)
 8005b60:	4604      	mov	r4, r0
 8005b62:	4608      	mov	r0, r1
 8005b64:	4611      	mov	r1, r2
 8005b66:	2200      	movs	r2, #0
 8005b68:	602a      	str	r2, [r5, #0]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	f7fb fe5d 	bl	800182a <_lseek>
 8005b70:	1c43      	adds	r3, r0, #1
 8005b72:	d102      	bne.n	8005b7a <_lseek_r+0x1e>
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	b103      	cbz	r3, 8005b7a <_lseek_r+0x1e>
 8005b78:	6023      	str	r3, [r4, #0]
 8005b7a:	bd38      	pop	{r3, r4, r5, pc}
 8005b7c:	20000478 	.word	0x20000478

08005b80 <_read_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4d07      	ldr	r5, [pc, #28]	@ (8005ba0 <_read_r+0x20>)
 8005b84:	4604      	mov	r4, r0
 8005b86:	4608      	mov	r0, r1
 8005b88:	4611      	mov	r1, r2
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	602a      	str	r2, [r5, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	f7fb fdeb 	bl	800176a <_read>
 8005b94:	1c43      	adds	r3, r0, #1
 8005b96:	d102      	bne.n	8005b9e <_read_r+0x1e>
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	b103      	cbz	r3, 8005b9e <_read_r+0x1e>
 8005b9c:	6023      	str	r3, [r4, #0]
 8005b9e:	bd38      	pop	{r3, r4, r5, pc}
 8005ba0:	20000478 	.word	0x20000478

08005ba4 <_write_r>:
 8005ba4:	b538      	push	{r3, r4, r5, lr}
 8005ba6:	4d07      	ldr	r5, [pc, #28]	@ (8005bc4 <_write_r+0x20>)
 8005ba8:	4604      	mov	r4, r0
 8005baa:	4608      	mov	r0, r1
 8005bac:	4611      	mov	r1, r2
 8005bae:	2200      	movs	r2, #0
 8005bb0:	602a      	str	r2, [r5, #0]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	f7fb fdf6 	bl	80017a4 <_write>
 8005bb8:	1c43      	adds	r3, r0, #1
 8005bba:	d102      	bne.n	8005bc2 <_write_r+0x1e>
 8005bbc:	682b      	ldr	r3, [r5, #0]
 8005bbe:	b103      	cbz	r3, 8005bc2 <_write_r+0x1e>
 8005bc0:	6023      	str	r3, [r4, #0]
 8005bc2:	bd38      	pop	{r3, r4, r5, pc}
 8005bc4:	20000478 	.word	0x20000478

08005bc8 <__errno>:
 8005bc8:	4b01      	ldr	r3, [pc, #4]	@ (8005bd0 <__errno+0x8>)
 8005bca:	6818      	ldr	r0, [r3, #0]
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	20000018 	.word	0x20000018

08005bd4 <__libc_init_array>:
 8005bd4:	b570      	push	{r4, r5, r6, lr}
 8005bd6:	4d0d      	ldr	r5, [pc, #52]	@ (8005c0c <__libc_init_array+0x38>)
 8005bd8:	4c0d      	ldr	r4, [pc, #52]	@ (8005c10 <__libc_init_array+0x3c>)
 8005bda:	1b64      	subs	r4, r4, r5
 8005bdc:	10a4      	asrs	r4, r4, #2
 8005bde:	2600      	movs	r6, #0
 8005be0:	42a6      	cmp	r6, r4
 8005be2:	d109      	bne.n	8005bf8 <__libc_init_array+0x24>
 8005be4:	4d0b      	ldr	r5, [pc, #44]	@ (8005c14 <__libc_init_array+0x40>)
 8005be6:	4c0c      	ldr	r4, [pc, #48]	@ (8005c18 <__libc_init_array+0x44>)
 8005be8:	f003 fb70 	bl	80092cc <_init>
 8005bec:	1b64      	subs	r4, r4, r5
 8005bee:	10a4      	asrs	r4, r4, #2
 8005bf0:	2600      	movs	r6, #0
 8005bf2:	42a6      	cmp	r6, r4
 8005bf4:	d105      	bne.n	8005c02 <__libc_init_array+0x2e>
 8005bf6:	bd70      	pop	{r4, r5, r6, pc}
 8005bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bfc:	4798      	blx	r3
 8005bfe:	3601      	adds	r6, #1
 8005c00:	e7ee      	b.n	8005be0 <__libc_init_array+0xc>
 8005c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c06:	4798      	blx	r3
 8005c08:	3601      	adds	r6, #1
 8005c0a:	e7f2      	b.n	8005bf2 <__libc_init_array+0x1e>
 8005c0c:	08009770 	.word	0x08009770
 8005c10:	08009770 	.word	0x08009770
 8005c14:	08009770 	.word	0x08009770
 8005c18:	08009774 	.word	0x08009774

08005c1c <__retarget_lock_init_recursive>:
 8005c1c:	4770      	bx	lr

08005c1e <__retarget_lock_acquire_recursive>:
 8005c1e:	4770      	bx	lr

08005c20 <__retarget_lock_release_recursive>:
 8005c20:	4770      	bx	lr
	...

08005c24 <nanf>:
 8005c24:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005c2c <nanf+0x8>
 8005c28:	4770      	bx	lr
 8005c2a:	bf00      	nop
 8005c2c:	7fc00000 	.word	0x7fc00000

08005c30 <quorem>:
 8005c30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c34:	6903      	ldr	r3, [r0, #16]
 8005c36:	690c      	ldr	r4, [r1, #16]
 8005c38:	42a3      	cmp	r3, r4
 8005c3a:	4607      	mov	r7, r0
 8005c3c:	db7e      	blt.n	8005d3c <quorem+0x10c>
 8005c3e:	3c01      	subs	r4, #1
 8005c40:	f101 0814 	add.w	r8, r1, #20
 8005c44:	00a3      	lsls	r3, r4, #2
 8005c46:	f100 0514 	add.w	r5, r0, #20
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c50:	9301      	str	r3, [sp, #4]
 8005c52:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c62:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c66:	d32e      	bcc.n	8005cc6 <quorem+0x96>
 8005c68:	f04f 0a00 	mov.w	sl, #0
 8005c6c:	46c4      	mov	ip, r8
 8005c6e:	46ae      	mov	lr, r5
 8005c70:	46d3      	mov	fp, sl
 8005c72:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c76:	b298      	uxth	r0, r3
 8005c78:	fb06 a000 	mla	r0, r6, r0, sl
 8005c7c:	0c02      	lsrs	r2, r0, #16
 8005c7e:	0c1b      	lsrs	r3, r3, #16
 8005c80:	fb06 2303 	mla	r3, r6, r3, r2
 8005c84:	f8de 2000 	ldr.w	r2, [lr]
 8005c88:	b280      	uxth	r0, r0
 8005c8a:	b292      	uxth	r2, r2
 8005c8c:	1a12      	subs	r2, r2, r0
 8005c8e:	445a      	add	r2, fp
 8005c90:	f8de 0000 	ldr.w	r0, [lr]
 8005c94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c98:	b29b      	uxth	r3, r3
 8005c9a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005c9e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005ca2:	b292      	uxth	r2, r2
 8005ca4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005ca8:	45e1      	cmp	r9, ip
 8005caa:	f84e 2b04 	str.w	r2, [lr], #4
 8005cae:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005cb2:	d2de      	bcs.n	8005c72 <quorem+0x42>
 8005cb4:	9b00      	ldr	r3, [sp, #0]
 8005cb6:	58eb      	ldr	r3, [r5, r3]
 8005cb8:	b92b      	cbnz	r3, 8005cc6 <quorem+0x96>
 8005cba:	9b01      	ldr	r3, [sp, #4]
 8005cbc:	3b04      	subs	r3, #4
 8005cbe:	429d      	cmp	r5, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	d32f      	bcc.n	8005d24 <quorem+0xf4>
 8005cc4:	613c      	str	r4, [r7, #16]
 8005cc6:	4638      	mov	r0, r7
 8005cc8:	f001 f9c2 	bl	8007050 <__mcmp>
 8005ccc:	2800      	cmp	r0, #0
 8005cce:	db25      	blt.n	8005d1c <quorem+0xec>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	f858 2b04 	ldr.w	r2, [r8], #4
 8005cd8:	f8d1 c000 	ldr.w	ip, [r1]
 8005cdc:	fa1f fe82 	uxth.w	lr, r2
 8005ce0:	fa1f f38c 	uxth.w	r3, ip
 8005ce4:	eba3 030e 	sub.w	r3, r3, lr
 8005ce8:	4403      	add	r3, r0
 8005cea:	0c12      	lsrs	r2, r2, #16
 8005cec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005cf0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cfa:	45c1      	cmp	r9, r8
 8005cfc:	f841 3b04 	str.w	r3, [r1], #4
 8005d00:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005d04:	d2e6      	bcs.n	8005cd4 <quorem+0xa4>
 8005d06:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d0e:	b922      	cbnz	r2, 8005d1a <quorem+0xea>
 8005d10:	3b04      	subs	r3, #4
 8005d12:	429d      	cmp	r5, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	d30b      	bcc.n	8005d30 <quorem+0x100>
 8005d18:	613c      	str	r4, [r7, #16]
 8005d1a:	3601      	adds	r6, #1
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	b003      	add	sp, #12
 8005d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d24:	6812      	ldr	r2, [r2, #0]
 8005d26:	3b04      	subs	r3, #4
 8005d28:	2a00      	cmp	r2, #0
 8005d2a:	d1cb      	bne.n	8005cc4 <quorem+0x94>
 8005d2c:	3c01      	subs	r4, #1
 8005d2e:	e7c6      	b.n	8005cbe <quorem+0x8e>
 8005d30:	6812      	ldr	r2, [r2, #0]
 8005d32:	3b04      	subs	r3, #4
 8005d34:	2a00      	cmp	r2, #0
 8005d36:	d1ef      	bne.n	8005d18 <quorem+0xe8>
 8005d38:	3c01      	subs	r4, #1
 8005d3a:	e7ea      	b.n	8005d12 <quorem+0xe2>
 8005d3c:	2000      	movs	r0, #0
 8005d3e:	e7ee      	b.n	8005d1e <quorem+0xee>

08005d40 <_dtoa_r>:
 8005d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d44:	69c7      	ldr	r7, [r0, #28]
 8005d46:	b099      	sub	sp, #100	@ 0x64
 8005d48:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005d4c:	ec55 4b10 	vmov	r4, r5, d0
 8005d50:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005d52:	9109      	str	r1, [sp, #36]	@ 0x24
 8005d54:	4683      	mov	fp, r0
 8005d56:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d58:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005d5a:	b97f      	cbnz	r7, 8005d7c <_dtoa_r+0x3c>
 8005d5c:	2010      	movs	r0, #16
 8005d5e:	f000 fdfd 	bl	800695c <malloc>
 8005d62:	4602      	mov	r2, r0
 8005d64:	f8cb 001c 	str.w	r0, [fp, #28]
 8005d68:	b920      	cbnz	r0, 8005d74 <_dtoa_r+0x34>
 8005d6a:	4ba7      	ldr	r3, [pc, #668]	@ (8006008 <_dtoa_r+0x2c8>)
 8005d6c:	21ef      	movs	r1, #239	@ 0xef
 8005d6e:	48a7      	ldr	r0, [pc, #668]	@ (800600c <_dtoa_r+0x2cc>)
 8005d70:	f002 fc36 	bl	80085e0 <__assert_func>
 8005d74:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005d78:	6007      	str	r7, [r0, #0]
 8005d7a:	60c7      	str	r7, [r0, #12]
 8005d7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d80:	6819      	ldr	r1, [r3, #0]
 8005d82:	b159      	cbz	r1, 8005d9c <_dtoa_r+0x5c>
 8005d84:	685a      	ldr	r2, [r3, #4]
 8005d86:	604a      	str	r2, [r1, #4]
 8005d88:	2301      	movs	r3, #1
 8005d8a:	4093      	lsls	r3, r2
 8005d8c:	608b      	str	r3, [r1, #8]
 8005d8e:	4658      	mov	r0, fp
 8005d90:	f000 feda 	bl	8006b48 <_Bfree>
 8005d94:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	601a      	str	r2, [r3, #0]
 8005d9c:	1e2b      	subs	r3, r5, #0
 8005d9e:	bfb9      	ittee	lt
 8005da0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005da4:	9303      	strlt	r3, [sp, #12]
 8005da6:	2300      	movge	r3, #0
 8005da8:	6033      	strge	r3, [r6, #0]
 8005daa:	9f03      	ldr	r7, [sp, #12]
 8005dac:	4b98      	ldr	r3, [pc, #608]	@ (8006010 <_dtoa_r+0x2d0>)
 8005dae:	bfbc      	itt	lt
 8005db0:	2201      	movlt	r2, #1
 8005db2:	6032      	strlt	r2, [r6, #0]
 8005db4:	43bb      	bics	r3, r7
 8005db6:	d112      	bne.n	8005dde <_dtoa_r+0x9e>
 8005db8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005dba:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005dbe:	6013      	str	r3, [r2, #0]
 8005dc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005dc4:	4323      	orrs	r3, r4
 8005dc6:	f000 854d 	beq.w	8006864 <_dtoa_r+0xb24>
 8005dca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005dcc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006024 <_dtoa_r+0x2e4>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 854f 	beq.w	8006874 <_dtoa_r+0xb34>
 8005dd6:	f10a 0303 	add.w	r3, sl, #3
 8005dda:	f000 bd49 	b.w	8006870 <_dtoa_r+0xb30>
 8005dde:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005de2:	2200      	movs	r2, #0
 8005de4:	ec51 0b17 	vmov	r0, r1, d7
 8005de8:	2300      	movs	r3, #0
 8005dea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005dee:	f7fa fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005df2:	4680      	mov	r8, r0
 8005df4:	b158      	cbz	r0, 8005e0e <_dtoa_r+0xce>
 8005df6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005df8:	2301      	movs	r3, #1
 8005dfa:	6013      	str	r3, [r2, #0]
 8005dfc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005dfe:	b113      	cbz	r3, 8005e06 <_dtoa_r+0xc6>
 8005e00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005e02:	4b84      	ldr	r3, [pc, #528]	@ (8006014 <_dtoa_r+0x2d4>)
 8005e04:	6013      	str	r3, [r2, #0]
 8005e06:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006028 <_dtoa_r+0x2e8>
 8005e0a:	f000 bd33 	b.w	8006874 <_dtoa_r+0xb34>
 8005e0e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005e12:	aa16      	add	r2, sp, #88	@ 0x58
 8005e14:	a917      	add	r1, sp, #92	@ 0x5c
 8005e16:	4658      	mov	r0, fp
 8005e18:	f001 fa3a 	bl	8007290 <__d2b>
 8005e1c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005e20:	4681      	mov	r9, r0
 8005e22:	2e00      	cmp	r6, #0
 8005e24:	d077      	beq.n	8005f16 <_dtoa_r+0x1d6>
 8005e26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e28:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005e2c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005e34:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005e38:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005e3c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005e40:	4619      	mov	r1, r3
 8005e42:	2200      	movs	r2, #0
 8005e44:	4b74      	ldr	r3, [pc, #464]	@ (8006018 <_dtoa_r+0x2d8>)
 8005e46:	f7fa fa1f 	bl	8000288 <__aeabi_dsub>
 8005e4a:	a369      	add	r3, pc, #420	@ (adr r3, 8005ff0 <_dtoa_r+0x2b0>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f7fa fbd2 	bl	80005f8 <__aeabi_dmul>
 8005e54:	a368      	add	r3, pc, #416	@ (adr r3, 8005ff8 <_dtoa_r+0x2b8>)
 8005e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e5a:	f7fa fa17 	bl	800028c <__adddf3>
 8005e5e:	4604      	mov	r4, r0
 8005e60:	4630      	mov	r0, r6
 8005e62:	460d      	mov	r5, r1
 8005e64:	f7fa fb5e 	bl	8000524 <__aeabi_i2d>
 8005e68:	a365      	add	r3, pc, #404	@ (adr r3, 8006000 <_dtoa_r+0x2c0>)
 8005e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e6e:	f7fa fbc3 	bl	80005f8 <__aeabi_dmul>
 8005e72:	4602      	mov	r2, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	4620      	mov	r0, r4
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f7fa fa07 	bl	800028c <__adddf3>
 8005e7e:	4604      	mov	r4, r0
 8005e80:	460d      	mov	r5, r1
 8005e82:	f7fa fe69 	bl	8000b58 <__aeabi_d2iz>
 8005e86:	2200      	movs	r2, #0
 8005e88:	4607      	mov	r7, r0
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	4629      	mov	r1, r5
 8005e90:	f7fa fe24 	bl	8000adc <__aeabi_dcmplt>
 8005e94:	b140      	cbz	r0, 8005ea8 <_dtoa_r+0x168>
 8005e96:	4638      	mov	r0, r7
 8005e98:	f7fa fb44 	bl	8000524 <__aeabi_i2d>
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	462b      	mov	r3, r5
 8005ea0:	f7fa fe12 	bl	8000ac8 <__aeabi_dcmpeq>
 8005ea4:	b900      	cbnz	r0, 8005ea8 <_dtoa_r+0x168>
 8005ea6:	3f01      	subs	r7, #1
 8005ea8:	2f16      	cmp	r7, #22
 8005eaa:	d851      	bhi.n	8005f50 <_dtoa_r+0x210>
 8005eac:	4b5b      	ldr	r3, [pc, #364]	@ (800601c <_dtoa_r+0x2dc>)
 8005eae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005eba:	f7fa fe0f 	bl	8000adc <__aeabi_dcmplt>
 8005ebe:	2800      	cmp	r0, #0
 8005ec0:	d048      	beq.n	8005f54 <_dtoa_r+0x214>
 8005ec2:	3f01      	subs	r7, #1
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005ec8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005eca:	1b9b      	subs	r3, r3, r6
 8005ecc:	1e5a      	subs	r2, r3, #1
 8005ece:	bf44      	itt	mi
 8005ed0:	f1c3 0801 	rsbmi	r8, r3, #1
 8005ed4:	2300      	movmi	r3, #0
 8005ed6:	9208      	str	r2, [sp, #32]
 8005ed8:	bf54      	ite	pl
 8005eda:	f04f 0800 	movpl.w	r8, #0
 8005ede:	9308      	strmi	r3, [sp, #32]
 8005ee0:	2f00      	cmp	r7, #0
 8005ee2:	db39      	blt.n	8005f58 <_dtoa_r+0x218>
 8005ee4:	9b08      	ldr	r3, [sp, #32]
 8005ee6:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005ee8:	443b      	add	r3, r7
 8005eea:	9308      	str	r3, [sp, #32]
 8005eec:	2300      	movs	r3, #0
 8005eee:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef2:	2b09      	cmp	r3, #9
 8005ef4:	d864      	bhi.n	8005fc0 <_dtoa_r+0x280>
 8005ef6:	2b05      	cmp	r3, #5
 8005ef8:	bfc4      	itt	gt
 8005efa:	3b04      	subgt	r3, #4
 8005efc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f00:	f1a3 0302 	sub.w	r3, r3, #2
 8005f04:	bfcc      	ite	gt
 8005f06:	2400      	movgt	r4, #0
 8005f08:	2401      	movle	r4, #1
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d863      	bhi.n	8005fd6 <_dtoa_r+0x296>
 8005f0e:	e8df f003 	tbb	[pc, r3]
 8005f12:	372a      	.short	0x372a
 8005f14:	5535      	.short	0x5535
 8005f16:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005f1a:	441e      	add	r6, r3
 8005f1c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005f20:	2b20      	cmp	r3, #32
 8005f22:	bfc1      	itttt	gt
 8005f24:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005f28:	409f      	lslgt	r7, r3
 8005f2a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005f2e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005f32:	bfd6      	itet	le
 8005f34:	f1c3 0320 	rsble	r3, r3, #32
 8005f38:	ea47 0003 	orrgt.w	r0, r7, r3
 8005f3c:	fa04 f003 	lslle.w	r0, r4, r3
 8005f40:	f7fa fae0 	bl	8000504 <__aeabi_ui2d>
 8005f44:	2201      	movs	r2, #1
 8005f46:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005f4a:	3e01      	subs	r6, #1
 8005f4c:	9214      	str	r2, [sp, #80]	@ 0x50
 8005f4e:	e777      	b.n	8005e40 <_dtoa_r+0x100>
 8005f50:	2301      	movs	r3, #1
 8005f52:	e7b8      	b.n	8005ec6 <_dtoa_r+0x186>
 8005f54:	9012      	str	r0, [sp, #72]	@ 0x48
 8005f56:	e7b7      	b.n	8005ec8 <_dtoa_r+0x188>
 8005f58:	427b      	negs	r3, r7
 8005f5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	eba8 0807 	sub.w	r8, r8, r7
 8005f62:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005f64:	e7c4      	b.n	8005ef0 <_dtoa_r+0x1b0>
 8005f66:	2300      	movs	r3, #0
 8005f68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	dc35      	bgt.n	8005fdc <_dtoa_r+0x29c>
 8005f70:	2301      	movs	r3, #1
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	9307      	str	r3, [sp, #28]
 8005f76:	461a      	mov	r2, r3
 8005f78:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f7a:	e00b      	b.n	8005f94 <_dtoa_r+0x254>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	e7f3      	b.n	8005f68 <_dtoa_r+0x228>
 8005f80:	2300      	movs	r3, #0
 8005f82:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005f86:	18fb      	adds	r3, r7, r3
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	9307      	str	r3, [sp, #28]
 8005f90:	bfb8      	it	lt
 8005f92:	2301      	movlt	r3, #1
 8005f94:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005f98:	2100      	movs	r1, #0
 8005f9a:	2204      	movs	r2, #4
 8005f9c:	f102 0514 	add.w	r5, r2, #20
 8005fa0:	429d      	cmp	r5, r3
 8005fa2:	d91f      	bls.n	8005fe4 <_dtoa_r+0x2a4>
 8005fa4:	6041      	str	r1, [r0, #4]
 8005fa6:	4658      	mov	r0, fp
 8005fa8:	f000 fd8e 	bl	8006ac8 <_Balloc>
 8005fac:	4682      	mov	sl, r0
 8005fae:	2800      	cmp	r0, #0
 8005fb0:	d13c      	bne.n	800602c <_dtoa_r+0x2ec>
 8005fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8006020 <_dtoa_r+0x2e0>)
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	f240 11af 	movw	r1, #431	@ 0x1af
 8005fba:	e6d8      	b.n	8005d6e <_dtoa_r+0x2e>
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e7e0      	b.n	8005f82 <_dtoa_r+0x242>
 8005fc0:	2401      	movs	r4, #1
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fc6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	9307      	str	r3, [sp, #28]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	2312      	movs	r3, #18
 8005fd4:	e7d0      	b.n	8005f78 <_dtoa_r+0x238>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005fda:	e7f5      	b.n	8005fc8 <_dtoa_r+0x288>
 8005fdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	9307      	str	r3, [sp, #28]
 8005fe2:	e7d7      	b.n	8005f94 <_dtoa_r+0x254>
 8005fe4:	3101      	adds	r1, #1
 8005fe6:	0052      	lsls	r2, r2, #1
 8005fe8:	e7d8      	b.n	8005f9c <_dtoa_r+0x25c>
 8005fea:	bf00      	nop
 8005fec:	f3af 8000 	nop.w
 8005ff0:	636f4361 	.word	0x636f4361
 8005ff4:	3fd287a7 	.word	0x3fd287a7
 8005ff8:	8b60c8b3 	.word	0x8b60c8b3
 8005ffc:	3fc68a28 	.word	0x3fc68a28
 8006000:	509f79fb 	.word	0x509f79fb
 8006004:	3fd34413 	.word	0x3fd34413
 8006008:	08009382 	.word	0x08009382
 800600c:	08009399 	.word	0x08009399
 8006010:	7ff00000 	.word	0x7ff00000
 8006014:	0800934d 	.word	0x0800934d
 8006018:	3ff80000 	.word	0x3ff80000
 800601c:	08009490 	.word	0x08009490
 8006020:	080093f1 	.word	0x080093f1
 8006024:	0800937e 	.word	0x0800937e
 8006028:	0800934c 	.word	0x0800934c
 800602c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006030:	6018      	str	r0, [r3, #0]
 8006032:	9b07      	ldr	r3, [sp, #28]
 8006034:	2b0e      	cmp	r3, #14
 8006036:	f200 80a4 	bhi.w	8006182 <_dtoa_r+0x442>
 800603a:	2c00      	cmp	r4, #0
 800603c:	f000 80a1 	beq.w	8006182 <_dtoa_r+0x442>
 8006040:	2f00      	cmp	r7, #0
 8006042:	dd33      	ble.n	80060ac <_dtoa_r+0x36c>
 8006044:	4bad      	ldr	r3, [pc, #692]	@ (80062fc <_dtoa_r+0x5bc>)
 8006046:	f007 020f 	and.w	r2, r7, #15
 800604a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800604e:	ed93 7b00 	vldr	d7, [r3]
 8006052:	05f8      	lsls	r0, r7, #23
 8006054:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006058:	ea4f 1427 	mov.w	r4, r7, asr #4
 800605c:	d516      	bpl.n	800608c <_dtoa_r+0x34c>
 800605e:	4ba8      	ldr	r3, [pc, #672]	@ (8006300 <_dtoa_r+0x5c0>)
 8006060:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006064:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006068:	f7fa fbf0 	bl	800084c <__aeabi_ddiv>
 800606c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006070:	f004 040f 	and.w	r4, r4, #15
 8006074:	2603      	movs	r6, #3
 8006076:	4da2      	ldr	r5, [pc, #648]	@ (8006300 <_dtoa_r+0x5c0>)
 8006078:	b954      	cbnz	r4, 8006090 <_dtoa_r+0x350>
 800607a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800607e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006082:	f7fa fbe3 	bl	800084c <__aeabi_ddiv>
 8006086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800608a:	e028      	b.n	80060de <_dtoa_r+0x39e>
 800608c:	2602      	movs	r6, #2
 800608e:	e7f2      	b.n	8006076 <_dtoa_r+0x336>
 8006090:	07e1      	lsls	r1, r4, #31
 8006092:	d508      	bpl.n	80060a6 <_dtoa_r+0x366>
 8006094:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006098:	e9d5 2300 	ldrd	r2, r3, [r5]
 800609c:	f7fa faac 	bl	80005f8 <__aeabi_dmul>
 80060a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060a4:	3601      	adds	r6, #1
 80060a6:	1064      	asrs	r4, r4, #1
 80060a8:	3508      	adds	r5, #8
 80060aa:	e7e5      	b.n	8006078 <_dtoa_r+0x338>
 80060ac:	f000 80d2 	beq.w	8006254 <_dtoa_r+0x514>
 80060b0:	427c      	negs	r4, r7
 80060b2:	4b92      	ldr	r3, [pc, #584]	@ (80062fc <_dtoa_r+0x5bc>)
 80060b4:	4d92      	ldr	r5, [pc, #584]	@ (8006300 <_dtoa_r+0x5c0>)
 80060b6:	f004 020f 	and.w	r2, r4, #15
 80060ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80060be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060c6:	f7fa fa97 	bl	80005f8 <__aeabi_dmul>
 80060ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060ce:	1124      	asrs	r4, r4, #4
 80060d0:	2300      	movs	r3, #0
 80060d2:	2602      	movs	r6, #2
 80060d4:	2c00      	cmp	r4, #0
 80060d6:	f040 80b2 	bne.w	800623e <_dtoa_r+0x4fe>
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1d3      	bne.n	8006086 <_dtoa_r+0x346>
 80060de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80060e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	f000 80b7 	beq.w	8006258 <_dtoa_r+0x518>
 80060ea:	4b86      	ldr	r3, [pc, #536]	@ (8006304 <_dtoa_r+0x5c4>)
 80060ec:	2200      	movs	r2, #0
 80060ee:	4620      	mov	r0, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	f7fa fcf3 	bl	8000adc <__aeabi_dcmplt>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	f000 80ae 	beq.w	8006258 <_dtoa_r+0x518>
 80060fc:	9b07      	ldr	r3, [sp, #28]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	f000 80aa 	beq.w	8006258 <_dtoa_r+0x518>
 8006104:	9b00      	ldr	r3, [sp, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	dd37      	ble.n	800617a <_dtoa_r+0x43a>
 800610a:	1e7b      	subs	r3, r7, #1
 800610c:	9304      	str	r3, [sp, #16]
 800610e:	4620      	mov	r0, r4
 8006110:	4b7d      	ldr	r3, [pc, #500]	@ (8006308 <_dtoa_r+0x5c8>)
 8006112:	2200      	movs	r2, #0
 8006114:	4629      	mov	r1, r5
 8006116:	f7fa fa6f 	bl	80005f8 <__aeabi_dmul>
 800611a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800611e:	9c00      	ldr	r4, [sp, #0]
 8006120:	3601      	adds	r6, #1
 8006122:	4630      	mov	r0, r6
 8006124:	f7fa f9fe 	bl	8000524 <__aeabi_i2d>
 8006128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800612c:	f7fa fa64 	bl	80005f8 <__aeabi_dmul>
 8006130:	4b76      	ldr	r3, [pc, #472]	@ (800630c <_dtoa_r+0x5cc>)
 8006132:	2200      	movs	r2, #0
 8006134:	f7fa f8aa 	bl	800028c <__adddf3>
 8006138:	4605      	mov	r5, r0
 800613a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800613e:	2c00      	cmp	r4, #0
 8006140:	f040 808d 	bne.w	800625e <_dtoa_r+0x51e>
 8006144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006148:	4b71      	ldr	r3, [pc, #452]	@ (8006310 <_dtoa_r+0x5d0>)
 800614a:	2200      	movs	r2, #0
 800614c:	f7fa f89c 	bl	8000288 <__aeabi_dsub>
 8006150:	4602      	mov	r2, r0
 8006152:	460b      	mov	r3, r1
 8006154:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006158:	462a      	mov	r2, r5
 800615a:	4633      	mov	r3, r6
 800615c:	f7fa fcdc 	bl	8000b18 <__aeabi_dcmpgt>
 8006160:	2800      	cmp	r0, #0
 8006162:	f040 828b 	bne.w	800667c <_dtoa_r+0x93c>
 8006166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800616a:	462a      	mov	r2, r5
 800616c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006170:	f7fa fcb4 	bl	8000adc <__aeabi_dcmplt>
 8006174:	2800      	cmp	r0, #0
 8006176:	f040 8128 	bne.w	80063ca <_dtoa_r+0x68a>
 800617a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800617e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006182:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006184:	2b00      	cmp	r3, #0
 8006186:	f2c0 815a 	blt.w	800643e <_dtoa_r+0x6fe>
 800618a:	2f0e      	cmp	r7, #14
 800618c:	f300 8157 	bgt.w	800643e <_dtoa_r+0x6fe>
 8006190:	4b5a      	ldr	r3, [pc, #360]	@ (80062fc <_dtoa_r+0x5bc>)
 8006192:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006196:	ed93 7b00 	vldr	d7, [r3]
 800619a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800619c:	2b00      	cmp	r3, #0
 800619e:	ed8d 7b00 	vstr	d7, [sp]
 80061a2:	da03      	bge.n	80061ac <_dtoa_r+0x46c>
 80061a4:	9b07      	ldr	r3, [sp, #28]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f340 8101 	ble.w	80063ae <_dtoa_r+0x66e>
 80061ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80061b0:	4656      	mov	r6, sl
 80061b2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061b6:	4620      	mov	r0, r4
 80061b8:	4629      	mov	r1, r5
 80061ba:	f7fa fb47 	bl	800084c <__aeabi_ddiv>
 80061be:	f7fa fccb 	bl	8000b58 <__aeabi_d2iz>
 80061c2:	4680      	mov	r8, r0
 80061c4:	f7fa f9ae 	bl	8000524 <__aeabi_i2d>
 80061c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061cc:	f7fa fa14 	bl	80005f8 <__aeabi_dmul>
 80061d0:	4602      	mov	r2, r0
 80061d2:	460b      	mov	r3, r1
 80061d4:	4620      	mov	r0, r4
 80061d6:	4629      	mov	r1, r5
 80061d8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80061dc:	f7fa f854 	bl	8000288 <__aeabi_dsub>
 80061e0:	f806 4b01 	strb.w	r4, [r6], #1
 80061e4:	9d07      	ldr	r5, [sp, #28]
 80061e6:	eba6 040a 	sub.w	r4, r6, sl
 80061ea:	42a5      	cmp	r5, r4
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	f040 8117 	bne.w	8006422 <_dtoa_r+0x6e2>
 80061f4:	f7fa f84a 	bl	800028c <__adddf3>
 80061f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80061fc:	4604      	mov	r4, r0
 80061fe:	460d      	mov	r5, r1
 8006200:	f7fa fc8a 	bl	8000b18 <__aeabi_dcmpgt>
 8006204:	2800      	cmp	r0, #0
 8006206:	f040 80f9 	bne.w	80063fc <_dtoa_r+0x6bc>
 800620a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800620e:	4620      	mov	r0, r4
 8006210:	4629      	mov	r1, r5
 8006212:	f7fa fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 8006216:	b118      	cbz	r0, 8006220 <_dtoa_r+0x4e0>
 8006218:	f018 0f01 	tst.w	r8, #1
 800621c:	f040 80ee 	bne.w	80063fc <_dtoa_r+0x6bc>
 8006220:	4649      	mov	r1, r9
 8006222:	4658      	mov	r0, fp
 8006224:	f000 fc90 	bl	8006b48 <_Bfree>
 8006228:	2300      	movs	r3, #0
 800622a:	7033      	strb	r3, [r6, #0]
 800622c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800622e:	3701      	adds	r7, #1
 8006230:	601f      	str	r7, [r3, #0]
 8006232:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 831d 	beq.w	8006874 <_dtoa_r+0xb34>
 800623a:	601e      	str	r6, [r3, #0]
 800623c:	e31a      	b.n	8006874 <_dtoa_r+0xb34>
 800623e:	07e2      	lsls	r2, r4, #31
 8006240:	d505      	bpl.n	800624e <_dtoa_r+0x50e>
 8006242:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006246:	f7fa f9d7 	bl	80005f8 <__aeabi_dmul>
 800624a:	3601      	adds	r6, #1
 800624c:	2301      	movs	r3, #1
 800624e:	1064      	asrs	r4, r4, #1
 8006250:	3508      	adds	r5, #8
 8006252:	e73f      	b.n	80060d4 <_dtoa_r+0x394>
 8006254:	2602      	movs	r6, #2
 8006256:	e742      	b.n	80060de <_dtoa_r+0x39e>
 8006258:	9c07      	ldr	r4, [sp, #28]
 800625a:	9704      	str	r7, [sp, #16]
 800625c:	e761      	b.n	8006122 <_dtoa_r+0x3e2>
 800625e:	4b27      	ldr	r3, [pc, #156]	@ (80062fc <_dtoa_r+0x5bc>)
 8006260:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006262:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006266:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800626a:	4454      	add	r4, sl
 800626c:	2900      	cmp	r1, #0
 800626e:	d053      	beq.n	8006318 <_dtoa_r+0x5d8>
 8006270:	4928      	ldr	r1, [pc, #160]	@ (8006314 <_dtoa_r+0x5d4>)
 8006272:	2000      	movs	r0, #0
 8006274:	f7fa faea 	bl	800084c <__aeabi_ddiv>
 8006278:	4633      	mov	r3, r6
 800627a:	462a      	mov	r2, r5
 800627c:	f7fa f804 	bl	8000288 <__aeabi_dsub>
 8006280:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006284:	4656      	mov	r6, sl
 8006286:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800628a:	f7fa fc65 	bl	8000b58 <__aeabi_d2iz>
 800628e:	4605      	mov	r5, r0
 8006290:	f7fa f948 	bl	8000524 <__aeabi_i2d>
 8006294:	4602      	mov	r2, r0
 8006296:	460b      	mov	r3, r1
 8006298:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800629c:	f7f9 fff4 	bl	8000288 <__aeabi_dsub>
 80062a0:	3530      	adds	r5, #48	@ 0x30
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80062aa:	f806 5b01 	strb.w	r5, [r6], #1
 80062ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062b2:	f7fa fc13 	bl	8000adc <__aeabi_dcmplt>
 80062b6:	2800      	cmp	r0, #0
 80062b8:	d171      	bne.n	800639e <_dtoa_r+0x65e>
 80062ba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80062be:	4911      	ldr	r1, [pc, #68]	@ (8006304 <_dtoa_r+0x5c4>)
 80062c0:	2000      	movs	r0, #0
 80062c2:	f7f9 ffe1 	bl	8000288 <__aeabi_dsub>
 80062c6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80062ca:	f7fa fc07 	bl	8000adc <__aeabi_dcmplt>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	f040 8095 	bne.w	80063fe <_dtoa_r+0x6be>
 80062d4:	42a6      	cmp	r6, r4
 80062d6:	f43f af50 	beq.w	800617a <_dtoa_r+0x43a>
 80062da:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80062de:	4b0a      	ldr	r3, [pc, #40]	@ (8006308 <_dtoa_r+0x5c8>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	f7fa f989 	bl	80005f8 <__aeabi_dmul>
 80062e6:	4b08      	ldr	r3, [pc, #32]	@ (8006308 <_dtoa_r+0x5c8>)
 80062e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80062ec:	2200      	movs	r2, #0
 80062ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80062f2:	f7fa f981 	bl	80005f8 <__aeabi_dmul>
 80062f6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062fa:	e7c4      	b.n	8006286 <_dtoa_r+0x546>
 80062fc:	08009490 	.word	0x08009490
 8006300:	08009468 	.word	0x08009468
 8006304:	3ff00000 	.word	0x3ff00000
 8006308:	40240000 	.word	0x40240000
 800630c:	401c0000 	.word	0x401c0000
 8006310:	40140000 	.word	0x40140000
 8006314:	3fe00000 	.word	0x3fe00000
 8006318:	4631      	mov	r1, r6
 800631a:	4628      	mov	r0, r5
 800631c:	f7fa f96c 	bl	80005f8 <__aeabi_dmul>
 8006320:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006324:	9415      	str	r4, [sp, #84]	@ 0x54
 8006326:	4656      	mov	r6, sl
 8006328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800632c:	f7fa fc14 	bl	8000b58 <__aeabi_d2iz>
 8006330:	4605      	mov	r5, r0
 8006332:	f7fa f8f7 	bl	8000524 <__aeabi_i2d>
 8006336:	4602      	mov	r2, r0
 8006338:	460b      	mov	r3, r1
 800633a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800633e:	f7f9 ffa3 	bl	8000288 <__aeabi_dsub>
 8006342:	3530      	adds	r5, #48	@ 0x30
 8006344:	f806 5b01 	strb.w	r5, [r6], #1
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	42a6      	cmp	r6, r4
 800634e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006352:	f04f 0200 	mov.w	r2, #0
 8006356:	d124      	bne.n	80063a2 <_dtoa_r+0x662>
 8006358:	4bac      	ldr	r3, [pc, #688]	@ (800660c <_dtoa_r+0x8cc>)
 800635a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800635e:	f7f9 ff95 	bl	800028c <__adddf3>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800636a:	f7fa fbd5 	bl	8000b18 <__aeabi_dcmpgt>
 800636e:	2800      	cmp	r0, #0
 8006370:	d145      	bne.n	80063fe <_dtoa_r+0x6be>
 8006372:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006376:	49a5      	ldr	r1, [pc, #660]	@ (800660c <_dtoa_r+0x8cc>)
 8006378:	2000      	movs	r0, #0
 800637a:	f7f9 ff85 	bl	8000288 <__aeabi_dsub>
 800637e:	4602      	mov	r2, r0
 8006380:	460b      	mov	r3, r1
 8006382:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006386:	f7fa fba9 	bl	8000adc <__aeabi_dcmplt>
 800638a:	2800      	cmp	r0, #0
 800638c:	f43f aef5 	beq.w	800617a <_dtoa_r+0x43a>
 8006390:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006392:	1e73      	subs	r3, r6, #1
 8006394:	9315      	str	r3, [sp, #84]	@ 0x54
 8006396:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800639a:	2b30      	cmp	r3, #48	@ 0x30
 800639c:	d0f8      	beq.n	8006390 <_dtoa_r+0x650>
 800639e:	9f04      	ldr	r7, [sp, #16]
 80063a0:	e73e      	b.n	8006220 <_dtoa_r+0x4e0>
 80063a2:	4b9b      	ldr	r3, [pc, #620]	@ (8006610 <_dtoa_r+0x8d0>)
 80063a4:	f7fa f928 	bl	80005f8 <__aeabi_dmul>
 80063a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063ac:	e7bc      	b.n	8006328 <_dtoa_r+0x5e8>
 80063ae:	d10c      	bne.n	80063ca <_dtoa_r+0x68a>
 80063b0:	4b98      	ldr	r3, [pc, #608]	@ (8006614 <_dtoa_r+0x8d4>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063b8:	f7fa f91e 	bl	80005f8 <__aeabi_dmul>
 80063bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063c0:	f7fa fba0 	bl	8000b04 <__aeabi_dcmpge>
 80063c4:	2800      	cmp	r0, #0
 80063c6:	f000 8157 	beq.w	8006678 <_dtoa_r+0x938>
 80063ca:	2400      	movs	r4, #0
 80063cc:	4625      	mov	r5, r4
 80063ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063d0:	43db      	mvns	r3, r3
 80063d2:	9304      	str	r3, [sp, #16]
 80063d4:	4656      	mov	r6, sl
 80063d6:	2700      	movs	r7, #0
 80063d8:	4621      	mov	r1, r4
 80063da:	4658      	mov	r0, fp
 80063dc:	f000 fbb4 	bl	8006b48 <_Bfree>
 80063e0:	2d00      	cmp	r5, #0
 80063e2:	d0dc      	beq.n	800639e <_dtoa_r+0x65e>
 80063e4:	b12f      	cbz	r7, 80063f2 <_dtoa_r+0x6b2>
 80063e6:	42af      	cmp	r7, r5
 80063e8:	d003      	beq.n	80063f2 <_dtoa_r+0x6b2>
 80063ea:	4639      	mov	r1, r7
 80063ec:	4658      	mov	r0, fp
 80063ee:	f000 fbab 	bl	8006b48 <_Bfree>
 80063f2:	4629      	mov	r1, r5
 80063f4:	4658      	mov	r0, fp
 80063f6:	f000 fba7 	bl	8006b48 <_Bfree>
 80063fa:	e7d0      	b.n	800639e <_dtoa_r+0x65e>
 80063fc:	9704      	str	r7, [sp, #16]
 80063fe:	4633      	mov	r3, r6
 8006400:	461e      	mov	r6, r3
 8006402:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006406:	2a39      	cmp	r2, #57	@ 0x39
 8006408:	d107      	bne.n	800641a <_dtoa_r+0x6da>
 800640a:	459a      	cmp	sl, r3
 800640c:	d1f8      	bne.n	8006400 <_dtoa_r+0x6c0>
 800640e:	9a04      	ldr	r2, [sp, #16]
 8006410:	3201      	adds	r2, #1
 8006412:	9204      	str	r2, [sp, #16]
 8006414:	2230      	movs	r2, #48	@ 0x30
 8006416:	f88a 2000 	strb.w	r2, [sl]
 800641a:	781a      	ldrb	r2, [r3, #0]
 800641c:	3201      	adds	r2, #1
 800641e:	701a      	strb	r2, [r3, #0]
 8006420:	e7bd      	b.n	800639e <_dtoa_r+0x65e>
 8006422:	4b7b      	ldr	r3, [pc, #492]	@ (8006610 <_dtoa_r+0x8d0>)
 8006424:	2200      	movs	r2, #0
 8006426:	f7fa f8e7 	bl	80005f8 <__aeabi_dmul>
 800642a:	2200      	movs	r2, #0
 800642c:	2300      	movs	r3, #0
 800642e:	4604      	mov	r4, r0
 8006430:	460d      	mov	r5, r1
 8006432:	f7fa fb49 	bl	8000ac8 <__aeabi_dcmpeq>
 8006436:	2800      	cmp	r0, #0
 8006438:	f43f aebb 	beq.w	80061b2 <_dtoa_r+0x472>
 800643c:	e6f0      	b.n	8006220 <_dtoa_r+0x4e0>
 800643e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006440:	2a00      	cmp	r2, #0
 8006442:	f000 80db 	beq.w	80065fc <_dtoa_r+0x8bc>
 8006446:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006448:	2a01      	cmp	r2, #1
 800644a:	f300 80bf 	bgt.w	80065cc <_dtoa_r+0x88c>
 800644e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006450:	2a00      	cmp	r2, #0
 8006452:	f000 80b7 	beq.w	80065c4 <_dtoa_r+0x884>
 8006456:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800645a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800645c:	4646      	mov	r6, r8
 800645e:	9a08      	ldr	r2, [sp, #32]
 8006460:	2101      	movs	r1, #1
 8006462:	441a      	add	r2, r3
 8006464:	4658      	mov	r0, fp
 8006466:	4498      	add	r8, r3
 8006468:	9208      	str	r2, [sp, #32]
 800646a:	f000 fc6b 	bl	8006d44 <__i2b>
 800646e:	4605      	mov	r5, r0
 8006470:	b15e      	cbz	r6, 800648a <_dtoa_r+0x74a>
 8006472:	9b08      	ldr	r3, [sp, #32]
 8006474:	2b00      	cmp	r3, #0
 8006476:	dd08      	ble.n	800648a <_dtoa_r+0x74a>
 8006478:	42b3      	cmp	r3, r6
 800647a:	9a08      	ldr	r2, [sp, #32]
 800647c:	bfa8      	it	ge
 800647e:	4633      	movge	r3, r6
 8006480:	eba8 0803 	sub.w	r8, r8, r3
 8006484:	1af6      	subs	r6, r6, r3
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	9308      	str	r3, [sp, #32]
 800648a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800648c:	b1f3      	cbz	r3, 80064cc <_dtoa_r+0x78c>
 800648e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 80b7 	beq.w	8006604 <_dtoa_r+0x8c4>
 8006496:	b18c      	cbz	r4, 80064bc <_dtoa_r+0x77c>
 8006498:	4629      	mov	r1, r5
 800649a:	4622      	mov	r2, r4
 800649c:	4658      	mov	r0, fp
 800649e:	f000 fd11 	bl	8006ec4 <__pow5mult>
 80064a2:	464a      	mov	r2, r9
 80064a4:	4601      	mov	r1, r0
 80064a6:	4605      	mov	r5, r0
 80064a8:	4658      	mov	r0, fp
 80064aa:	f000 fc61 	bl	8006d70 <__multiply>
 80064ae:	4649      	mov	r1, r9
 80064b0:	9004      	str	r0, [sp, #16]
 80064b2:	4658      	mov	r0, fp
 80064b4:	f000 fb48 	bl	8006b48 <_Bfree>
 80064b8:	9b04      	ldr	r3, [sp, #16]
 80064ba:	4699      	mov	r9, r3
 80064bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80064be:	1b1a      	subs	r2, r3, r4
 80064c0:	d004      	beq.n	80064cc <_dtoa_r+0x78c>
 80064c2:	4649      	mov	r1, r9
 80064c4:	4658      	mov	r0, fp
 80064c6:	f000 fcfd 	bl	8006ec4 <__pow5mult>
 80064ca:	4681      	mov	r9, r0
 80064cc:	2101      	movs	r1, #1
 80064ce:	4658      	mov	r0, fp
 80064d0:	f000 fc38 	bl	8006d44 <__i2b>
 80064d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064d6:	4604      	mov	r4, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 81cf 	beq.w	800687c <_dtoa_r+0xb3c>
 80064de:	461a      	mov	r2, r3
 80064e0:	4601      	mov	r1, r0
 80064e2:	4658      	mov	r0, fp
 80064e4:	f000 fcee 	bl	8006ec4 <__pow5mult>
 80064e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	4604      	mov	r4, r0
 80064ee:	f300 8095 	bgt.w	800661c <_dtoa_r+0x8dc>
 80064f2:	9b02      	ldr	r3, [sp, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f040 8087 	bne.w	8006608 <_dtoa_r+0x8c8>
 80064fa:	9b03      	ldr	r3, [sp, #12]
 80064fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006500:	2b00      	cmp	r3, #0
 8006502:	f040 8089 	bne.w	8006618 <_dtoa_r+0x8d8>
 8006506:	9b03      	ldr	r3, [sp, #12]
 8006508:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800650c:	0d1b      	lsrs	r3, r3, #20
 800650e:	051b      	lsls	r3, r3, #20
 8006510:	b12b      	cbz	r3, 800651e <_dtoa_r+0x7de>
 8006512:	9b08      	ldr	r3, [sp, #32]
 8006514:	3301      	adds	r3, #1
 8006516:	9308      	str	r3, [sp, #32]
 8006518:	f108 0801 	add.w	r8, r8, #1
 800651c:	2301      	movs	r3, #1
 800651e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006520:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 81b0 	beq.w	8006888 <_dtoa_r+0xb48>
 8006528:	6923      	ldr	r3, [r4, #16]
 800652a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800652e:	6918      	ldr	r0, [r3, #16]
 8006530:	f000 fbbc 	bl	8006cac <__hi0bits>
 8006534:	f1c0 0020 	rsb	r0, r0, #32
 8006538:	9b08      	ldr	r3, [sp, #32]
 800653a:	4418      	add	r0, r3
 800653c:	f010 001f 	ands.w	r0, r0, #31
 8006540:	d077      	beq.n	8006632 <_dtoa_r+0x8f2>
 8006542:	f1c0 0320 	rsb	r3, r0, #32
 8006546:	2b04      	cmp	r3, #4
 8006548:	dd6b      	ble.n	8006622 <_dtoa_r+0x8e2>
 800654a:	9b08      	ldr	r3, [sp, #32]
 800654c:	f1c0 001c 	rsb	r0, r0, #28
 8006550:	4403      	add	r3, r0
 8006552:	4480      	add	r8, r0
 8006554:	4406      	add	r6, r0
 8006556:	9308      	str	r3, [sp, #32]
 8006558:	f1b8 0f00 	cmp.w	r8, #0
 800655c:	dd05      	ble.n	800656a <_dtoa_r+0x82a>
 800655e:	4649      	mov	r1, r9
 8006560:	4642      	mov	r2, r8
 8006562:	4658      	mov	r0, fp
 8006564:	f000 fd08 	bl	8006f78 <__lshift>
 8006568:	4681      	mov	r9, r0
 800656a:	9b08      	ldr	r3, [sp, #32]
 800656c:	2b00      	cmp	r3, #0
 800656e:	dd05      	ble.n	800657c <_dtoa_r+0x83c>
 8006570:	4621      	mov	r1, r4
 8006572:	461a      	mov	r2, r3
 8006574:	4658      	mov	r0, fp
 8006576:	f000 fcff 	bl	8006f78 <__lshift>
 800657a:	4604      	mov	r4, r0
 800657c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800657e:	2b00      	cmp	r3, #0
 8006580:	d059      	beq.n	8006636 <_dtoa_r+0x8f6>
 8006582:	4621      	mov	r1, r4
 8006584:	4648      	mov	r0, r9
 8006586:	f000 fd63 	bl	8007050 <__mcmp>
 800658a:	2800      	cmp	r0, #0
 800658c:	da53      	bge.n	8006636 <_dtoa_r+0x8f6>
 800658e:	1e7b      	subs	r3, r7, #1
 8006590:	9304      	str	r3, [sp, #16]
 8006592:	4649      	mov	r1, r9
 8006594:	2300      	movs	r3, #0
 8006596:	220a      	movs	r2, #10
 8006598:	4658      	mov	r0, fp
 800659a:	f000 faf7 	bl	8006b8c <__multadd>
 800659e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065a0:	4681      	mov	r9, r0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 8172 	beq.w	800688c <_dtoa_r+0xb4c>
 80065a8:	2300      	movs	r3, #0
 80065aa:	4629      	mov	r1, r5
 80065ac:	220a      	movs	r2, #10
 80065ae:	4658      	mov	r0, fp
 80065b0:	f000 faec 	bl	8006b8c <__multadd>
 80065b4:	9b00      	ldr	r3, [sp, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	4605      	mov	r5, r0
 80065ba:	dc67      	bgt.n	800668c <_dtoa_r+0x94c>
 80065bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065be:	2b02      	cmp	r3, #2
 80065c0:	dc41      	bgt.n	8006646 <_dtoa_r+0x906>
 80065c2:	e063      	b.n	800668c <_dtoa_r+0x94c>
 80065c4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80065c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80065ca:	e746      	b.n	800645a <_dtoa_r+0x71a>
 80065cc:	9b07      	ldr	r3, [sp, #28]
 80065ce:	1e5c      	subs	r4, r3, #1
 80065d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065d2:	42a3      	cmp	r3, r4
 80065d4:	bfbf      	itttt	lt
 80065d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80065d8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80065da:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80065dc:	1ae3      	sublt	r3, r4, r3
 80065de:	bfb4      	ite	lt
 80065e0:	18d2      	addlt	r2, r2, r3
 80065e2:	1b1c      	subge	r4, r3, r4
 80065e4:	9b07      	ldr	r3, [sp, #28]
 80065e6:	bfbc      	itt	lt
 80065e8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80065ea:	2400      	movlt	r4, #0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bfb5      	itete	lt
 80065f0:	eba8 0603 	sublt.w	r6, r8, r3
 80065f4:	9b07      	ldrge	r3, [sp, #28]
 80065f6:	2300      	movlt	r3, #0
 80065f8:	4646      	movge	r6, r8
 80065fa:	e730      	b.n	800645e <_dtoa_r+0x71e>
 80065fc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80065fe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006600:	4646      	mov	r6, r8
 8006602:	e735      	b.n	8006470 <_dtoa_r+0x730>
 8006604:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006606:	e75c      	b.n	80064c2 <_dtoa_r+0x782>
 8006608:	2300      	movs	r3, #0
 800660a:	e788      	b.n	800651e <_dtoa_r+0x7de>
 800660c:	3fe00000 	.word	0x3fe00000
 8006610:	40240000 	.word	0x40240000
 8006614:	40140000 	.word	0x40140000
 8006618:	9b02      	ldr	r3, [sp, #8]
 800661a:	e780      	b.n	800651e <_dtoa_r+0x7de>
 800661c:	2300      	movs	r3, #0
 800661e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006620:	e782      	b.n	8006528 <_dtoa_r+0x7e8>
 8006622:	d099      	beq.n	8006558 <_dtoa_r+0x818>
 8006624:	9a08      	ldr	r2, [sp, #32]
 8006626:	331c      	adds	r3, #28
 8006628:	441a      	add	r2, r3
 800662a:	4498      	add	r8, r3
 800662c:	441e      	add	r6, r3
 800662e:	9208      	str	r2, [sp, #32]
 8006630:	e792      	b.n	8006558 <_dtoa_r+0x818>
 8006632:	4603      	mov	r3, r0
 8006634:	e7f6      	b.n	8006624 <_dtoa_r+0x8e4>
 8006636:	9b07      	ldr	r3, [sp, #28]
 8006638:	9704      	str	r7, [sp, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	dc20      	bgt.n	8006680 <_dtoa_r+0x940>
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006642:	2b02      	cmp	r3, #2
 8006644:	dd1e      	ble.n	8006684 <_dtoa_r+0x944>
 8006646:	9b00      	ldr	r3, [sp, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	f47f aec0 	bne.w	80063ce <_dtoa_r+0x68e>
 800664e:	4621      	mov	r1, r4
 8006650:	2205      	movs	r2, #5
 8006652:	4658      	mov	r0, fp
 8006654:	f000 fa9a 	bl	8006b8c <__multadd>
 8006658:	4601      	mov	r1, r0
 800665a:	4604      	mov	r4, r0
 800665c:	4648      	mov	r0, r9
 800665e:	f000 fcf7 	bl	8007050 <__mcmp>
 8006662:	2800      	cmp	r0, #0
 8006664:	f77f aeb3 	ble.w	80063ce <_dtoa_r+0x68e>
 8006668:	4656      	mov	r6, sl
 800666a:	2331      	movs	r3, #49	@ 0x31
 800666c:	f806 3b01 	strb.w	r3, [r6], #1
 8006670:	9b04      	ldr	r3, [sp, #16]
 8006672:	3301      	adds	r3, #1
 8006674:	9304      	str	r3, [sp, #16]
 8006676:	e6ae      	b.n	80063d6 <_dtoa_r+0x696>
 8006678:	9c07      	ldr	r4, [sp, #28]
 800667a:	9704      	str	r7, [sp, #16]
 800667c:	4625      	mov	r5, r4
 800667e:	e7f3      	b.n	8006668 <_dtoa_r+0x928>
 8006680:	9b07      	ldr	r3, [sp, #28]
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 8104 	beq.w	8006894 <_dtoa_r+0xb54>
 800668c:	2e00      	cmp	r6, #0
 800668e:	dd05      	ble.n	800669c <_dtoa_r+0x95c>
 8006690:	4629      	mov	r1, r5
 8006692:	4632      	mov	r2, r6
 8006694:	4658      	mov	r0, fp
 8006696:	f000 fc6f 	bl	8006f78 <__lshift>
 800669a:	4605      	mov	r5, r0
 800669c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d05a      	beq.n	8006758 <_dtoa_r+0xa18>
 80066a2:	6869      	ldr	r1, [r5, #4]
 80066a4:	4658      	mov	r0, fp
 80066a6:	f000 fa0f 	bl	8006ac8 <_Balloc>
 80066aa:	4606      	mov	r6, r0
 80066ac:	b928      	cbnz	r0, 80066ba <_dtoa_r+0x97a>
 80066ae:	4b84      	ldr	r3, [pc, #528]	@ (80068c0 <_dtoa_r+0xb80>)
 80066b0:	4602      	mov	r2, r0
 80066b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80066b6:	f7ff bb5a 	b.w	8005d6e <_dtoa_r+0x2e>
 80066ba:	692a      	ldr	r2, [r5, #16]
 80066bc:	3202      	adds	r2, #2
 80066be:	0092      	lsls	r2, r2, #2
 80066c0:	f105 010c 	add.w	r1, r5, #12
 80066c4:	300c      	adds	r0, #12
 80066c6:	f001 ff75 	bl	80085b4 <memcpy>
 80066ca:	2201      	movs	r2, #1
 80066cc:	4631      	mov	r1, r6
 80066ce:	4658      	mov	r0, fp
 80066d0:	f000 fc52 	bl	8006f78 <__lshift>
 80066d4:	f10a 0301 	add.w	r3, sl, #1
 80066d8:	9307      	str	r3, [sp, #28]
 80066da:	9b00      	ldr	r3, [sp, #0]
 80066dc:	4453      	add	r3, sl
 80066de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80066e0:	9b02      	ldr	r3, [sp, #8]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	462f      	mov	r7, r5
 80066e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80066ea:	4605      	mov	r5, r0
 80066ec:	9b07      	ldr	r3, [sp, #28]
 80066ee:	4621      	mov	r1, r4
 80066f0:	3b01      	subs	r3, #1
 80066f2:	4648      	mov	r0, r9
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	f7ff fa9b 	bl	8005c30 <quorem>
 80066fa:	4639      	mov	r1, r7
 80066fc:	9002      	str	r0, [sp, #8]
 80066fe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006702:	4648      	mov	r0, r9
 8006704:	f000 fca4 	bl	8007050 <__mcmp>
 8006708:	462a      	mov	r2, r5
 800670a:	9008      	str	r0, [sp, #32]
 800670c:	4621      	mov	r1, r4
 800670e:	4658      	mov	r0, fp
 8006710:	f000 fcba 	bl	8007088 <__mdiff>
 8006714:	68c2      	ldr	r2, [r0, #12]
 8006716:	4606      	mov	r6, r0
 8006718:	bb02      	cbnz	r2, 800675c <_dtoa_r+0xa1c>
 800671a:	4601      	mov	r1, r0
 800671c:	4648      	mov	r0, r9
 800671e:	f000 fc97 	bl	8007050 <__mcmp>
 8006722:	4602      	mov	r2, r0
 8006724:	4631      	mov	r1, r6
 8006726:	4658      	mov	r0, fp
 8006728:	920e      	str	r2, [sp, #56]	@ 0x38
 800672a:	f000 fa0d 	bl	8006b48 <_Bfree>
 800672e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006730:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006732:	9e07      	ldr	r6, [sp, #28]
 8006734:	ea43 0102 	orr.w	r1, r3, r2
 8006738:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800673a:	4319      	orrs	r1, r3
 800673c:	d110      	bne.n	8006760 <_dtoa_r+0xa20>
 800673e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006742:	d029      	beq.n	8006798 <_dtoa_r+0xa58>
 8006744:	9b08      	ldr	r3, [sp, #32]
 8006746:	2b00      	cmp	r3, #0
 8006748:	dd02      	ble.n	8006750 <_dtoa_r+0xa10>
 800674a:	9b02      	ldr	r3, [sp, #8]
 800674c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006750:	9b00      	ldr	r3, [sp, #0]
 8006752:	f883 8000 	strb.w	r8, [r3]
 8006756:	e63f      	b.n	80063d8 <_dtoa_r+0x698>
 8006758:	4628      	mov	r0, r5
 800675a:	e7bb      	b.n	80066d4 <_dtoa_r+0x994>
 800675c:	2201      	movs	r2, #1
 800675e:	e7e1      	b.n	8006724 <_dtoa_r+0x9e4>
 8006760:	9b08      	ldr	r3, [sp, #32]
 8006762:	2b00      	cmp	r3, #0
 8006764:	db04      	blt.n	8006770 <_dtoa_r+0xa30>
 8006766:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006768:	430b      	orrs	r3, r1
 800676a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800676c:	430b      	orrs	r3, r1
 800676e:	d120      	bne.n	80067b2 <_dtoa_r+0xa72>
 8006770:	2a00      	cmp	r2, #0
 8006772:	dded      	ble.n	8006750 <_dtoa_r+0xa10>
 8006774:	4649      	mov	r1, r9
 8006776:	2201      	movs	r2, #1
 8006778:	4658      	mov	r0, fp
 800677a:	f000 fbfd 	bl	8006f78 <__lshift>
 800677e:	4621      	mov	r1, r4
 8006780:	4681      	mov	r9, r0
 8006782:	f000 fc65 	bl	8007050 <__mcmp>
 8006786:	2800      	cmp	r0, #0
 8006788:	dc03      	bgt.n	8006792 <_dtoa_r+0xa52>
 800678a:	d1e1      	bne.n	8006750 <_dtoa_r+0xa10>
 800678c:	f018 0f01 	tst.w	r8, #1
 8006790:	d0de      	beq.n	8006750 <_dtoa_r+0xa10>
 8006792:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006796:	d1d8      	bne.n	800674a <_dtoa_r+0xa0a>
 8006798:	9a00      	ldr	r2, [sp, #0]
 800679a:	2339      	movs	r3, #57	@ 0x39
 800679c:	7013      	strb	r3, [r2, #0]
 800679e:	4633      	mov	r3, r6
 80067a0:	461e      	mov	r6, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80067a8:	2a39      	cmp	r2, #57	@ 0x39
 80067aa:	d052      	beq.n	8006852 <_dtoa_r+0xb12>
 80067ac:	3201      	adds	r2, #1
 80067ae:	701a      	strb	r2, [r3, #0]
 80067b0:	e612      	b.n	80063d8 <_dtoa_r+0x698>
 80067b2:	2a00      	cmp	r2, #0
 80067b4:	dd07      	ble.n	80067c6 <_dtoa_r+0xa86>
 80067b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80067ba:	d0ed      	beq.n	8006798 <_dtoa_r+0xa58>
 80067bc:	9a00      	ldr	r2, [sp, #0]
 80067be:	f108 0301 	add.w	r3, r8, #1
 80067c2:	7013      	strb	r3, [r2, #0]
 80067c4:	e608      	b.n	80063d8 <_dtoa_r+0x698>
 80067c6:	9b07      	ldr	r3, [sp, #28]
 80067c8:	9a07      	ldr	r2, [sp, #28]
 80067ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80067ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d028      	beq.n	8006826 <_dtoa_r+0xae6>
 80067d4:	4649      	mov	r1, r9
 80067d6:	2300      	movs	r3, #0
 80067d8:	220a      	movs	r2, #10
 80067da:	4658      	mov	r0, fp
 80067dc:	f000 f9d6 	bl	8006b8c <__multadd>
 80067e0:	42af      	cmp	r7, r5
 80067e2:	4681      	mov	r9, r0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	f04f 020a 	mov.w	r2, #10
 80067ec:	4639      	mov	r1, r7
 80067ee:	4658      	mov	r0, fp
 80067f0:	d107      	bne.n	8006802 <_dtoa_r+0xac2>
 80067f2:	f000 f9cb 	bl	8006b8c <__multadd>
 80067f6:	4607      	mov	r7, r0
 80067f8:	4605      	mov	r5, r0
 80067fa:	9b07      	ldr	r3, [sp, #28]
 80067fc:	3301      	adds	r3, #1
 80067fe:	9307      	str	r3, [sp, #28]
 8006800:	e774      	b.n	80066ec <_dtoa_r+0x9ac>
 8006802:	f000 f9c3 	bl	8006b8c <__multadd>
 8006806:	4629      	mov	r1, r5
 8006808:	4607      	mov	r7, r0
 800680a:	2300      	movs	r3, #0
 800680c:	220a      	movs	r2, #10
 800680e:	4658      	mov	r0, fp
 8006810:	f000 f9bc 	bl	8006b8c <__multadd>
 8006814:	4605      	mov	r5, r0
 8006816:	e7f0      	b.n	80067fa <_dtoa_r+0xaba>
 8006818:	9b00      	ldr	r3, [sp, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	bfcc      	ite	gt
 800681e:	461e      	movgt	r6, r3
 8006820:	2601      	movle	r6, #1
 8006822:	4456      	add	r6, sl
 8006824:	2700      	movs	r7, #0
 8006826:	4649      	mov	r1, r9
 8006828:	2201      	movs	r2, #1
 800682a:	4658      	mov	r0, fp
 800682c:	f000 fba4 	bl	8006f78 <__lshift>
 8006830:	4621      	mov	r1, r4
 8006832:	4681      	mov	r9, r0
 8006834:	f000 fc0c 	bl	8007050 <__mcmp>
 8006838:	2800      	cmp	r0, #0
 800683a:	dcb0      	bgt.n	800679e <_dtoa_r+0xa5e>
 800683c:	d102      	bne.n	8006844 <_dtoa_r+0xb04>
 800683e:	f018 0f01 	tst.w	r8, #1
 8006842:	d1ac      	bne.n	800679e <_dtoa_r+0xa5e>
 8006844:	4633      	mov	r3, r6
 8006846:	461e      	mov	r6, r3
 8006848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800684c:	2a30      	cmp	r2, #48	@ 0x30
 800684e:	d0fa      	beq.n	8006846 <_dtoa_r+0xb06>
 8006850:	e5c2      	b.n	80063d8 <_dtoa_r+0x698>
 8006852:	459a      	cmp	sl, r3
 8006854:	d1a4      	bne.n	80067a0 <_dtoa_r+0xa60>
 8006856:	9b04      	ldr	r3, [sp, #16]
 8006858:	3301      	adds	r3, #1
 800685a:	9304      	str	r3, [sp, #16]
 800685c:	2331      	movs	r3, #49	@ 0x31
 800685e:	f88a 3000 	strb.w	r3, [sl]
 8006862:	e5b9      	b.n	80063d8 <_dtoa_r+0x698>
 8006864:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006866:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80068c4 <_dtoa_r+0xb84>
 800686a:	b11b      	cbz	r3, 8006874 <_dtoa_r+0xb34>
 800686c:	f10a 0308 	add.w	r3, sl, #8
 8006870:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	4650      	mov	r0, sl
 8006876:	b019      	add	sp, #100	@ 0x64
 8006878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800687e:	2b01      	cmp	r3, #1
 8006880:	f77f ae37 	ble.w	80064f2 <_dtoa_r+0x7b2>
 8006884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006886:	930a      	str	r3, [sp, #40]	@ 0x28
 8006888:	2001      	movs	r0, #1
 800688a:	e655      	b.n	8006538 <_dtoa_r+0x7f8>
 800688c:	9b00      	ldr	r3, [sp, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f77f aed6 	ble.w	8006640 <_dtoa_r+0x900>
 8006894:	4656      	mov	r6, sl
 8006896:	4621      	mov	r1, r4
 8006898:	4648      	mov	r0, r9
 800689a:	f7ff f9c9 	bl	8005c30 <quorem>
 800689e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80068a2:	f806 8b01 	strb.w	r8, [r6], #1
 80068a6:	9b00      	ldr	r3, [sp, #0]
 80068a8:	eba6 020a 	sub.w	r2, r6, sl
 80068ac:	4293      	cmp	r3, r2
 80068ae:	ddb3      	ble.n	8006818 <_dtoa_r+0xad8>
 80068b0:	4649      	mov	r1, r9
 80068b2:	2300      	movs	r3, #0
 80068b4:	220a      	movs	r2, #10
 80068b6:	4658      	mov	r0, fp
 80068b8:	f000 f968 	bl	8006b8c <__multadd>
 80068bc:	4681      	mov	r9, r0
 80068be:	e7ea      	b.n	8006896 <_dtoa_r+0xb56>
 80068c0:	080093f1 	.word	0x080093f1
 80068c4:	08009375 	.word	0x08009375

080068c8 <_free_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	4605      	mov	r5, r0
 80068cc:	2900      	cmp	r1, #0
 80068ce:	d041      	beq.n	8006954 <_free_r+0x8c>
 80068d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068d4:	1f0c      	subs	r4, r1, #4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bfb8      	it	lt
 80068da:	18e4      	addlt	r4, r4, r3
 80068dc:	f000 f8e8 	bl	8006ab0 <__malloc_lock>
 80068e0:	4a1d      	ldr	r2, [pc, #116]	@ (8006958 <_free_r+0x90>)
 80068e2:	6813      	ldr	r3, [r2, #0]
 80068e4:	b933      	cbnz	r3, 80068f4 <_free_r+0x2c>
 80068e6:	6063      	str	r3, [r4, #4]
 80068e8:	6014      	str	r4, [r2, #0]
 80068ea:	4628      	mov	r0, r5
 80068ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068f0:	f000 b8e4 	b.w	8006abc <__malloc_unlock>
 80068f4:	42a3      	cmp	r3, r4
 80068f6:	d908      	bls.n	800690a <_free_r+0x42>
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	1821      	adds	r1, r4, r0
 80068fc:	428b      	cmp	r3, r1
 80068fe:	bf01      	itttt	eq
 8006900:	6819      	ldreq	r1, [r3, #0]
 8006902:	685b      	ldreq	r3, [r3, #4]
 8006904:	1809      	addeq	r1, r1, r0
 8006906:	6021      	streq	r1, [r4, #0]
 8006908:	e7ed      	b.n	80068e6 <_free_r+0x1e>
 800690a:	461a      	mov	r2, r3
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	b10b      	cbz	r3, 8006914 <_free_r+0x4c>
 8006910:	42a3      	cmp	r3, r4
 8006912:	d9fa      	bls.n	800690a <_free_r+0x42>
 8006914:	6811      	ldr	r1, [r2, #0]
 8006916:	1850      	adds	r0, r2, r1
 8006918:	42a0      	cmp	r0, r4
 800691a:	d10b      	bne.n	8006934 <_free_r+0x6c>
 800691c:	6820      	ldr	r0, [r4, #0]
 800691e:	4401      	add	r1, r0
 8006920:	1850      	adds	r0, r2, r1
 8006922:	4283      	cmp	r3, r0
 8006924:	6011      	str	r1, [r2, #0]
 8006926:	d1e0      	bne.n	80068ea <_free_r+0x22>
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	6053      	str	r3, [r2, #4]
 800692e:	4408      	add	r0, r1
 8006930:	6010      	str	r0, [r2, #0]
 8006932:	e7da      	b.n	80068ea <_free_r+0x22>
 8006934:	d902      	bls.n	800693c <_free_r+0x74>
 8006936:	230c      	movs	r3, #12
 8006938:	602b      	str	r3, [r5, #0]
 800693a:	e7d6      	b.n	80068ea <_free_r+0x22>
 800693c:	6820      	ldr	r0, [r4, #0]
 800693e:	1821      	adds	r1, r4, r0
 8006940:	428b      	cmp	r3, r1
 8006942:	bf04      	itt	eq
 8006944:	6819      	ldreq	r1, [r3, #0]
 8006946:	685b      	ldreq	r3, [r3, #4]
 8006948:	6063      	str	r3, [r4, #4]
 800694a:	bf04      	itt	eq
 800694c:	1809      	addeq	r1, r1, r0
 800694e:	6021      	streq	r1, [r4, #0]
 8006950:	6054      	str	r4, [r2, #4]
 8006952:	e7ca      	b.n	80068ea <_free_r+0x22>
 8006954:	bd38      	pop	{r3, r4, r5, pc}
 8006956:	bf00      	nop
 8006958:	20000484 	.word	0x20000484

0800695c <malloc>:
 800695c:	4b02      	ldr	r3, [pc, #8]	@ (8006968 <malloc+0xc>)
 800695e:	4601      	mov	r1, r0
 8006960:	6818      	ldr	r0, [r3, #0]
 8006962:	f000 b825 	b.w	80069b0 <_malloc_r>
 8006966:	bf00      	nop
 8006968:	20000018 	.word	0x20000018

0800696c <sbrk_aligned>:
 800696c:	b570      	push	{r4, r5, r6, lr}
 800696e:	4e0f      	ldr	r6, [pc, #60]	@ (80069ac <sbrk_aligned+0x40>)
 8006970:	460c      	mov	r4, r1
 8006972:	6831      	ldr	r1, [r6, #0]
 8006974:	4605      	mov	r5, r0
 8006976:	b911      	cbnz	r1, 800697e <sbrk_aligned+0x12>
 8006978:	f001 fe0c 	bl	8008594 <_sbrk_r>
 800697c:	6030      	str	r0, [r6, #0]
 800697e:	4621      	mov	r1, r4
 8006980:	4628      	mov	r0, r5
 8006982:	f001 fe07 	bl	8008594 <_sbrk_r>
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	d103      	bne.n	8006992 <sbrk_aligned+0x26>
 800698a:	f04f 34ff 	mov.w	r4, #4294967295
 800698e:	4620      	mov	r0, r4
 8006990:	bd70      	pop	{r4, r5, r6, pc}
 8006992:	1cc4      	adds	r4, r0, #3
 8006994:	f024 0403 	bic.w	r4, r4, #3
 8006998:	42a0      	cmp	r0, r4
 800699a:	d0f8      	beq.n	800698e <sbrk_aligned+0x22>
 800699c:	1a21      	subs	r1, r4, r0
 800699e:	4628      	mov	r0, r5
 80069a0:	f001 fdf8 	bl	8008594 <_sbrk_r>
 80069a4:	3001      	adds	r0, #1
 80069a6:	d1f2      	bne.n	800698e <sbrk_aligned+0x22>
 80069a8:	e7ef      	b.n	800698a <sbrk_aligned+0x1e>
 80069aa:	bf00      	nop
 80069ac:	20000480 	.word	0x20000480

080069b0 <_malloc_r>:
 80069b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b4:	1ccd      	adds	r5, r1, #3
 80069b6:	f025 0503 	bic.w	r5, r5, #3
 80069ba:	3508      	adds	r5, #8
 80069bc:	2d0c      	cmp	r5, #12
 80069be:	bf38      	it	cc
 80069c0:	250c      	movcc	r5, #12
 80069c2:	2d00      	cmp	r5, #0
 80069c4:	4606      	mov	r6, r0
 80069c6:	db01      	blt.n	80069cc <_malloc_r+0x1c>
 80069c8:	42a9      	cmp	r1, r5
 80069ca:	d904      	bls.n	80069d6 <_malloc_r+0x26>
 80069cc:	230c      	movs	r3, #12
 80069ce:	6033      	str	r3, [r6, #0]
 80069d0:	2000      	movs	r0, #0
 80069d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006aac <_malloc_r+0xfc>
 80069da:	f000 f869 	bl	8006ab0 <__malloc_lock>
 80069de:	f8d8 3000 	ldr.w	r3, [r8]
 80069e2:	461c      	mov	r4, r3
 80069e4:	bb44      	cbnz	r4, 8006a38 <_malloc_r+0x88>
 80069e6:	4629      	mov	r1, r5
 80069e8:	4630      	mov	r0, r6
 80069ea:	f7ff ffbf 	bl	800696c <sbrk_aligned>
 80069ee:	1c43      	adds	r3, r0, #1
 80069f0:	4604      	mov	r4, r0
 80069f2:	d158      	bne.n	8006aa6 <_malloc_r+0xf6>
 80069f4:	f8d8 4000 	ldr.w	r4, [r8]
 80069f8:	4627      	mov	r7, r4
 80069fa:	2f00      	cmp	r7, #0
 80069fc:	d143      	bne.n	8006a86 <_malloc_r+0xd6>
 80069fe:	2c00      	cmp	r4, #0
 8006a00:	d04b      	beq.n	8006a9a <_malloc_r+0xea>
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	4639      	mov	r1, r7
 8006a06:	4630      	mov	r0, r6
 8006a08:	eb04 0903 	add.w	r9, r4, r3
 8006a0c:	f001 fdc2 	bl	8008594 <_sbrk_r>
 8006a10:	4581      	cmp	r9, r0
 8006a12:	d142      	bne.n	8006a9a <_malloc_r+0xea>
 8006a14:	6821      	ldr	r1, [r4, #0]
 8006a16:	1a6d      	subs	r5, r5, r1
 8006a18:	4629      	mov	r1, r5
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f7ff ffa6 	bl	800696c <sbrk_aligned>
 8006a20:	3001      	adds	r0, #1
 8006a22:	d03a      	beq.n	8006a9a <_malloc_r+0xea>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	442b      	add	r3, r5
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	bb62      	cbnz	r2, 8006a8c <_malloc_r+0xdc>
 8006a32:	f8c8 7000 	str.w	r7, [r8]
 8006a36:	e00f      	b.n	8006a58 <_malloc_r+0xa8>
 8006a38:	6822      	ldr	r2, [r4, #0]
 8006a3a:	1b52      	subs	r2, r2, r5
 8006a3c:	d420      	bmi.n	8006a80 <_malloc_r+0xd0>
 8006a3e:	2a0b      	cmp	r2, #11
 8006a40:	d917      	bls.n	8006a72 <_malloc_r+0xc2>
 8006a42:	1961      	adds	r1, r4, r5
 8006a44:	42a3      	cmp	r3, r4
 8006a46:	6025      	str	r5, [r4, #0]
 8006a48:	bf18      	it	ne
 8006a4a:	6059      	strne	r1, [r3, #4]
 8006a4c:	6863      	ldr	r3, [r4, #4]
 8006a4e:	bf08      	it	eq
 8006a50:	f8c8 1000 	streq.w	r1, [r8]
 8006a54:	5162      	str	r2, [r4, r5]
 8006a56:	604b      	str	r3, [r1, #4]
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f000 f82f 	bl	8006abc <__malloc_unlock>
 8006a5e:	f104 000b 	add.w	r0, r4, #11
 8006a62:	1d23      	adds	r3, r4, #4
 8006a64:	f020 0007 	bic.w	r0, r0, #7
 8006a68:	1ac2      	subs	r2, r0, r3
 8006a6a:	bf1c      	itt	ne
 8006a6c:	1a1b      	subne	r3, r3, r0
 8006a6e:	50a3      	strne	r3, [r4, r2]
 8006a70:	e7af      	b.n	80069d2 <_malloc_r+0x22>
 8006a72:	6862      	ldr	r2, [r4, #4]
 8006a74:	42a3      	cmp	r3, r4
 8006a76:	bf0c      	ite	eq
 8006a78:	f8c8 2000 	streq.w	r2, [r8]
 8006a7c:	605a      	strne	r2, [r3, #4]
 8006a7e:	e7eb      	b.n	8006a58 <_malloc_r+0xa8>
 8006a80:	4623      	mov	r3, r4
 8006a82:	6864      	ldr	r4, [r4, #4]
 8006a84:	e7ae      	b.n	80069e4 <_malloc_r+0x34>
 8006a86:	463c      	mov	r4, r7
 8006a88:	687f      	ldr	r7, [r7, #4]
 8006a8a:	e7b6      	b.n	80069fa <_malloc_r+0x4a>
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	42a3      	cmp	r3, r4
 8006a92:	d1fb      	bne.n	8006a8c <_malloc_r+0xdc>
 8006a94:	2300      	movs	r3, #0
 8006a96:	6053      	str	r3, [r2, #4]
 8006a98:	e7de      	b.n	8006a58 <_malloc_r+0xa8>
 8006a9a:	230c      	movs	r3, #12
 8006a9c:	6033      	str	r3, [r6, #0]
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f000 f80c 	bl	8006abc <__malloc_unlock>
 8006aa4:	e794      	b.n	80069d0 <_malloc_r+0x20>
 8006aa6:	6005      	str	r5, [r0, #0]
 8006aa8:	e7d6      	b.n	8006a58 <_malloc_r+0xa8>
 8006aaa:	bf00      	nop
 8006aac:	20000484 	.word	0x20000484

08006ab0 <__malloc_lock>:
 8006ab0:	4801      	ldr	r0, [pc, #4]	@ (8006ab8 <__malloc_lock+0x8>)
 8006ab2:	f7ff b8b4 	b.w	8005c1e <__retarget_lock_acquire_recursive>
 8006ab6:	bf00      	nop
 8006ab8:	2000047c 	.word	0x2000047c

08006abc <__malloc_unlock>:
 8006abc:	4801      	ldr	r0, [pc, #4]	@ (8006ac4 <__malloc_unlock+0x8>)
 8006abe:	f7ff b8af 	b.w	8005c20 <__retarget_lock_release_recursive>
 8006ac2:	bf00      	nop
 8006ac4:	2000047c 	.word	0x2000047c

08006ac8 <_Balloc>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	69c6      	ldr	r6, [r0, #28]
 8006acc:	4604      	mov	r4, r0
 8006ace:	460d      	mov	r5, r1
 8006ad0:	b976      	cbnz	r6, 8006af0 <_Balloc+0x28>
 8006ad2:	2010      	movs	r0, #16
 8006ad4:	f7ff ff42 	bl	800695c <malloc>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	61e0      	str	r0, [r4, #28]
 8006adc:	b920      	cbnz	r0, 8006ae8 <_Balloc+0x20>
 8006ade:	4b18      	ldr	r3, [pc, #96]	@ (8006b40 <_Balloc+0x78>)
 8006ae0:	4818      	ldr	r0, [pc, #96]	@ (8006b44 <_Balloc+0x7c>)
 8006ae2:	216b      	movs	r1, #107	@ 0x6b
 8006ae4:	f001 fd7c 	bl	80085e0 <__assert_func>
 8006ae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006aec:	6006      	str	r6, [r0, #0]
 8006aee:	60c6      	str	r6, [r0, #12]
 8006af0:	69e6      	ldr	r6, [r4, #28]
 8006af2:	68f3      	ldr	r3, [r6, #12]
 8006af4:	b183      	cbz	r3, 8006b18 <_Balloc+0x50>
 8006af6:	69e3      	ldr	r3, [r4, #28]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006afe:	b9b8      	cbnz	r0, 8006b30 <_Balloc+0x68>
 8006b00:	2101      	movs	r1, #1
 8006b02:	fa01 f605 	lsl.w	r6, r1, r5
 8006b06:	1d72      	adds	r2, r6, #5
 8006b08:	0092      	lsls	r2, r2, #2
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f001 fd86 	bl	800861c <_calloc_r>
 8006b10:	b160      	cbz	r0, 8006b2c <_Balloc+0x64>
 8006b12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006b16:	e00e      	b.n	8006b36 <_Balloc+0x6e>
 8006b18:	2221      	movs	r2, #33	@ 0x21
 8006b1a:	2104      	movs	r1, #4
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f001 fd7d 	bl	800861c <_calloc_r>
 8006b22:	69e3      	ldr	r3, [r4, #28]
 8006b24:	60f0      	str	r0, [r6, #12]
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e4      	bne.n	8006af6 <_Balloc+0x2e>
 8006b2c:	2000      	movs	r0, #0
 8006b2e:	bd70      	pop	{r4, r5, r6, pc}
 8006b30:	6802      	ldr	r2, [r0, #0]
 8006b32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006b36:	2300      	movs	r3, #0
 8006b38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b3c:	e7f7      	b.n	8006b2e <_Balloc+0x66>
 8006b3e:	bf00      	nop
 8006b40:	08009382 	.word	0x08009382
 8006b44:	08009402 	.word	0x08009402

08006b48 <_Bfree>:
 8006b48:	b570      	push	{r4, r5, r6, lr}
 8006b4a:	69c6      	ldr	r6, [r0, #28]
 8006b4c:	4605      	mov	r5, r0
 8006b4e:	460c      	mov	r4, r1
 8006b50:	b976      	cbnz	r6, 8006b70 <_Bfree+0x28>
 8006b52:	2010      	movs	r0, #16
 8006b54:	f7ff ff02 	bl	800695c <malloc>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	61e8      	str	r0, [r5, #28]
 8006b5c:	b920      	cbnz	r0, 8006b68 <_Bfree+0x20>
 8006b5e:	4b09      	ldr	r3, [pc, #36]	@ (8006b84 <_Bfree+0x3c>)
 8006b60:	4809      	ldr	r0, [pc, #36]	@ (8006b88 <_Bfree+0x40>)
 8006b62:	218f      	movs	r1, #143	@ 0x8f
 8006b64:	f001 fd3c 	bl	80085e0 <__assert_func>
 8006b68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b6c:	6006      	str	r6, [r0, #0]
 8006b6e:	60c6      	str	r6, [r0, #12]
 8006b70:	b13c      	cbz	r4, 8006b82 <_Bfree+0x3a>
 8006b72:	69eb      	ldr	r3, [r5, #28]
 8006b74:	6862      	ldr	r2, [r4, #4]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b7c:	6021      	str	r1, [r4, #0]
 8006b7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b82:	bd70      	pop	{r4, r5, r6, pc}
 8006b84:	08009382 	.word	0x08009382
 8006b88:	08009402 	.word	0x08009402

08006b8c <__multadd>:
 8006b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b90:	690d      	ldr	r5, [r1, #16]
 8006b92:	4607      	mov	r7, r0
 8006b94:	460c      	mov	r4, r1
 8006b96:	461e      	mov	r6, r3
 8006b98:	f101 0c14 	add.w	ip, r1, #20
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	f8dc 3000 	ldr.w	r3, [ip]
 8006ba2:	b299      	uxth	r1, r3
 8006ba4:	fb02 6101 	mla	r1, r2, r1, r6
 8006ba8:	0c1e      	lsrs	r6, r3, #16
 8006baa:	0c0b      	lsrs	r3, r1, #16
 8006bac:	fb02 3306 	mla	r3, r2, r6, r3
 8006bb0:	b289      	uxth	r1, r1
 8006bb2:	3001      	adds	r0, #1
 8006bb4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006bb8:	4285      	cmp	r5, r0
 8006bba:	f84c 1b04 	str.w	r1, [ip], #4
 8006bbe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006bc2:	dcec      	bgt.n	8006b9e <__multadd+0x12>
 8006bc4:	b30e      	cbz	r6, 8006c0a <__multadd+0x7e>
 8006bc6:	68a3      	ldr	r3, [r4, #8]
 8006bc8:	42ab      	cmp	r3, r5
 8006bca:	dc19      	bgt.n	8006c00 <__multadd+0x74>
 8006bcc:	6861      	ldr	r1, [r4, #4]
 8006bce:	4638      	mov	r0, r7
 8006bd0:	3101      	adds	r1, #1
 8006bd2:	f7ff ff79 	bl	8006ac8 <_Balloc>
 8006bd6:	4680      	mov	r8, r0
 8006bd8:	b928      	cbnz	r0, 8006be6 <__multadd+0x5a>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8006c10 <__multadd+0x84>)
 8006bde:	480d      	ldr	r0, [pc, #52]	@ (8006c14 <__multadd+0x88>)
 8006be0:	21ba      	movs	r1, #186	@ 0xba
 8006be2:	f001 fcfd 	bl	80085e0 <__assert_func>
 8006be6:	6922      	ldr	r2, [r4, #16]
 8006be8:	3202      	adds	r2, #2
 8006bea:	f104 010c 	add.w	r1, r4, #12
 8006bee:	0092      	lsls	r2, r2, #2
 8006bf0:	300c      	adds	r0, #12
 8006bf2:	f001 fcdf 	bl	80085b4 <memcpy>
 8006bf6:	4621      	mov	r1, r4
 8006bf8:	4638      	mov	r0, r7
 8006bfa:	f7ff ffa5 	bl	8006b48 <_Bfree>
 8006bfe:	4644      	mov	r4, r8
 8006c00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006c04:	3501      	adds	r5, #1
 8006c06:	615e      	str	r6, [r3, #20]
 8006c08:	6125      	str	r5, [r4, #16]
 8006c0a:	4620      	mov	r0, r4
 8006c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c10:	080093f1 	.word	0x080093f1
 8006c14:	08009402 	.word	0x08009402

08006c18 <__s2b>:
 8006c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c1c:	460c      	mov	r4, r1
 8006c1e:	4615      	mov	r5, r2
 8006c20:	461f      	mov	r7, r3
 8006c22:	2209      	movs	r2, #9
 8006c24:	3308      	adds	r3, #8
 8006c26:	4606      	mov	r6, r0
 8006c28:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	2201      	movs	r2, #1
 8006c30:	429a      	cmp	r2, r3
 8006c32:	db09      	blt.n	8006c48 <__s2b+0x30>
 8006c34:	4630      	mov	r0, r6
 8006c36:	f7ff ff47 	bl	8006ac8 <_Balloc>
 8006c3a:	b940      	cbnz	r0, 8006c4e <__s2b+0x36>
 8006c3c:	4602      	mov	r2, r0
 8006c3e:	4b19      	ldr	r3, [pc, #100]	@ (8006ca4 <__s2b+0x8c>)
 8006c40:	4819      	ldr	r0, [pc, #100]	@ (8006ca8 <__s2b+0x90>)
 8006c42:	21d3      	movs	r1, #211	@ 0xd3
 8006c44:	f001 fccc 	bl	80085e0 <__assert_func>
 8006c48:	0052      	lsls	r2, r2, #1
 8006c4a:	3101      	adds	r1, #1
 8006c4c:	e7f0      	b.n	8006c30 <__s2b+0x18>
 8006c4e:	9b08      	ldr	r3, [sp, #32]
 8006c50:	6143      	str	r3, [r0, #20]
 8006c52:	2d09      	cmp	r5, #9
 8006c54:	f04f 0301 	mov.w	r3, #1
 8006c58:	6103      	str	r3, [r0, #16]
 8006c5a:	dd16      	ble.n	8006c8a <__s2b+0x72>
 8006c5c:	f104 0909 	add.w	r9, r4, #9
 8006c60:	46c8      	mov	r8, r9
 8006c62:	442c      	add	r4, r5
 8006c64:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c68:	4601      	mov	r1, r0
 8006c6a:	3b30      	subs	r3, #48	@ 0x30
 8006c6c:	220a      	movs	r2, #10
 8006c6e:	4630      	mov	r0, r6
 8006c70:	f7ff ff8c 	bl	8006b8c <__multadd>
 8006c74:	45a0      	cmp	r8, r4
 8006c76:	d1f5      	bne.n	8006c64 <__s2b+0x4c>
 8006c78:	f1a5 0408 	sub.w	r4, r5, #8
 8006c7c:	444c      	add	r4, r9
 8006c7e:	1b2d      	subs	r5, r5, r4
 8006c80:	1963      	adds	r3, r4, r5
 8006c82:	42bb      	cmp	r3, r7
 8006c84:	db04      	blt.n	8006c90 <__s2b+0x78>
 8006c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c8a:	340a      	adds	r4, #10
 8006c8c:	2509      	movs	r5, #9
 8006c8e:	e7f6      	b.n	8006c7e <__s2b+0x66>
 8006c90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c94:	4601      	mov	r1, r0
 8006c96:	3b30      	subs	r3, #48	@ 0x30
 8006c98:	220a      	movs	r2, #10
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f7ff ff76 	bl	8006b8c <__multadd>
 8006ca0:	e7ee      	b.n	8006c80 <__s2b+0x68>
 8006ca2:	bf00      	nop
 8006ca4:	080093f1 	.word	0x080093f1
 8006ca8:	08009402 	.word	0x08009402

08006cac <__hi0bits>:
 8006cac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	bf36      	itet	cc
 8006cb4:	0403      	lslcc	r3, r0, #16
 8006cb6:	2000      	movcs	r0, #0
 8006cb8:	2010      	movcc	r0, #16
 8006cba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006cbe:	bf3c      	itt	cc
 8006cc0:	021b      	lslcc	r3, r3, #8
 8006cc2:	3008      	addcc	r0, #8
 8006cc4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006cc8:	bf3c      	itt	cc
 8006cca:	011b      	lslcc	r3, r3, #4
 8006ccc:	3004      	addcc	r0, #4
 8006cce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cd2:	bf3c      	itt	cc
 8006cd4:	009b      	lslcc	r3, r3, #2
 8006cd6:	3002      	addcc	r0, #2
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	db05      	blt.n	8006ce8 <__hi0bits+0x3c>
 8006cdc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ce0:	f100 0001 	add.w	r0, r0, #1
 8006ce4:	bf08      	it	eq
 8006ce6:	2020      	moveq	r0, #32
 8006ce8:	4770      	bx	lr

08006cea <__lo0bits>:
 8006cea:	6803      	ldr	r3, [r0, #0]
 8006cec:	4602      	mov	r2, r0
 8006cee:	f013 0007 	ands.w	r0, r3, #7
 8006cf2:	d00b      	beq.n	8006d0c <__lo0bits+0x22>
 8006cf4:	07d9      	lsls	r1, r3, #31
 8006cf6:	d421      	bmi.n	8006d3c <__lo0bits+0x52>
 8006cf8:	0798      	lsls	r0, r3, #30
 8006cfa:	bf49      	itett	mi
 8006cfc:	085b      	lsrmi	r3, r3, #1
 8006cfe:	089b      	lsrpl	r3, r3, #2
 8006d00:	2001      	movmi	r0, #1
 8006d02:	6013      	strmi	r3, [r2, #0]
 8006d04:	bf5c      	itt	pl
 8006d06:	6013      	strpl	r3, [r2, #0]
 8006d08:	2002      	movpl	r0, #2
 8006d0a:	4770      	bx	lr
 8006d0c:	b299      	uxth	r1, r3
 8006d0e:	b909      	cbnz	r1, 8006d14 <__lo0bits+0x2a>
 8006d10:	0c1b      	lsrs	r3, r3, #16
 8006d12:	2010      	movs	r0, #16
 8006d14:	b2d9      	uxtb	r1, r3
 8006d16:	b909      	cbnz	r1, 8006d1c <__lo0bits+0x32>
 8006d18:	3008      	adds	r0, #8
 8006d1a:	0a1b      	lsrs	r3, r3, #8
 8006d1c:	0719      	lsls	r1, r3, #28
 8006d1e:	bf04      	itt	eq
 8006d20:	091b      	lsreq	r3, r3, #4
 8006d22:	3004      	addeq	r0, #4
 8006d24:	0799      	lsls	r1, r3, #30
 8006d26:	bf04      	itt	eq
 8006d28:	089b      	lsreq	r3, r3, #2
 8006d2a:	3002      	addeq	r0, #2
 8006d2c:	07d9      	lsls	r1, r3, #31
 8006d2e:	d403      	bmi.n	8006d38 <__lo0bits+0x4e>
 8006d30:	085b      	lsrs	r3, r3, #1
 8006d32:	f100 0001 	add.w	r0, r0, #1
 8006d36:	d003      	beq.n	8006d40 <__lo0bits+0x56>
 8006d38:	6013      	str	r3, [r2, #0]
 8006d3a:	4770      	bx	lr
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	4770      	bx	lr
 8006d40:	2020      	movs	r0, #32
 8006d42:	4770      	bx	lr

08006d44 <__i2b>:
 8006d44:	b510      	push	{r4, lr}
 8006d46:	460c      	mov	r4, r1
 8006d48:	2101      	movs	r1, #1
 8006d4a:	f7ff febd 	bl	8006ac8 <_Balloc>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	b928      	cbnz	r0, 8006d5e <__i2b+0x1a>
 8006d52:	4b05      	ldr	r3, [pc, #20]	@ (8006d68 <__i2b+0x24>)
 8006d54:	4805      	ldr	r0, [pc, #20]	@ (8006d6c <__i2b+0x28>)
 8006d56:	f240 1145 	movw	r1, #325	@ 0x145
 8006d5a:	f001 fc41 	bl	80085e0 <__assert_func>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	6144      	str	r4, [r0, #20]
 8006d62:	6103      	str	r3, [r0, #16]
 8006d64:	bd10      	pop	{r4, pc}
 8006d66:	bf00      	nop
 8006d68:	080093f1 	.word	0x080093f1
 8006d6c:	08009402 	.word	0x08009402

08006d70 <__multiply>:
 8006d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	4614      	mov	r4, r2
 8006d76:	690a      	ldr	r2, [r1, #16]
 8006d78:	6923      	ldr	r3, [r4, #16]
 8006d7a:	429a      	cmp	r2, r3
 8006d7c:	bfa8      	it	ge
 8006d7e:	4623      	movge	r3, r4
 8006d80:	460f      	mov	r7, r1
 8006d82:	bfa4      	itt	ge
 8006d84:	460c      	movge	r4, r1
 8006d86:	461f      	movge	r7, r3
 8006d88:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006d8c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006d90:	68a3      	ldr	r3, [r4, #8]
 8006d92:	6861      	ldr	r1, [r4, #4]
 8006d94:	eb0a 0609 	add.w	r6, sl, r9
 8006d98:	42b3      	cmp	r3, r6
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	bfb8      	it	lt
 8006d9e:	3101      	addlt	r1, #1
 8006da0:	f7ff fe92 	bl	8006ac8 <_Balloc>
 8006da4:	b930      	cbnz	r0, 8006db4 <__multiply+0x44>
 8006da6:	4602      	mov	r2, r0
 8006da8:	4b44      	ldr	r3, [pc, #272]	@ (8006ebc <__multiply+0x14c>)
 8006daa:	4845      	ldr	r0, [pc, #276]	@ (8006ec0 <__multiply+0x150>)
 8006dac:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006db0:	f001 fc16 	bl	80085e0 <__assert_func>
 8006db4:	f100 0514 	add.w	r5, r0, #20
 8006db8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006dbc:	462b      	mov	r3, r5
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	4543      	cmp	r3, r8
 8006dc2:	d321      	bcc.n	8006e08 <__multiply+0x98>
 8006dc4:	f107 0114 	add.w	r1, r7, #20
 8006dc8:	f104 0214 	add.w	r2, r4, #20
 8006dcc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006dd0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006dd4:	9302      	str	r3, [sp, #8]
 8006dd6:	1b13      	subs	r3, r2, r4
 8006dd8:	3b15      	subs	r3, #21
 8006dda:	f023 0303 	bic.w	r3, r3, #3
 8006dde:	3304      	adds	r3, #4
 8006de0:	f104 0715 	add.w	r7, r4, #21
 8006de4:	42ba      	cmp	r2, r7
 8006de6:	bf38      	it	cc
 8006de8:	2304      	movcc	r3, #4
 8006dea:	9301      	str	r3, [sp, #4]
 8006dec:	9b02      	ldr	r3, [sp, #8]
 8006dee:	9103      	str	r1, [sp, #12]
 8006df0:	428b      	cmp	r3, r1
 8006df2:	d80c      	bhi.n	8006e0e <__multiply+0x9e>
 8006df4:	2e00      	cmp	r6, #0
 8006df6:	dd03      	ble.n	8006e00 <__multiply+0x90>
 8006df8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d05b      	beq.n	8006eb8 <__multiply+0x148>
 8006e00:	6106      	str	r6, [r0, #16]
 8006e02:	b005      	add	sp, #20
 8006e04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e08:	f843 2b04 	str.w	r2, [r3], #4
 8006e0c:	e7d8      	b.n	8006dc0 <__multiply+0x50>
 8006e0e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006e12:	f1ba 0f00 	cmp.w	sl, #0
 8006e16:	d024      	beq.n	8006e62 <__multiply+0xf2>
 8006e18:	f104 0e14 	add.w	lr, r4, #20
 8006e1c:	46a9      	mov	r9, r5
 8006e1e:	f04f 0c00 	mov.w	ip, #0
 8006e22:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006e26:	f8d9 3000 	ldr.w	r3, [r9]
 8006e2a:	fa1f fb87 	uxth.w	fp, r7
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	fb0a 330b 	mla	r3, sl, fp, r3
 8006e34:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006e38:	f8d9 7000 	ldr.w	r7, [r9]
 8006e3c:	4463      	add	r3, ip
 8006e3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e42:	fb0a c70b 	mla	r7, sl, fp, ip
 8006e46:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e50:	4572      	cmp	r2, lr
 8006e52:	f849 3b04 	str.w	r3, [r9], #4
 8006e56:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006e5a:	d8e2      	bhi.n	8006e22 <__multiply+0xb2>
 8006e5c:	9b01      	ldr	r3, [sp, #4]
 8006e5e:	f845 c003 	str.w	ip, [r5, r3]
 8006e62:	9b03      	ldr	r3, [sp, #12]
 8006e64:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e68:	3104      	adds	r1, #4
 8006e6a:	f1b9 0f00 	cmp.w	r9, #0
 8006e6e:	d021      	beq.n	8006eb4 <__multiply+0x144>
 8006e70:	682b      	ldr	r3, [r5, #0]
 8006e72:	f104 0c14 	add.w	ip, r4, #20
 8006e76:	46ae      	mov	lr, r5
 8006e78:	f04f 0a00 	mov.w	sl, #0
 8006e7c:	f8bc b000 	ldrh.w	fp, [ip]
 8006e80:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006e84:	fb09 770b 	mla	r7, r9, fp, r7
 8006e88:	4457      	add	r7, sl
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006e90:	f84e 3b04 	str.w	r3, [lr], #4
 8006e94:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e98:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e9c:	f8be 3000 	ldrh.w	r3, [lr]
 8006ea0:	fb09 330a 	mla	r3, r9, sl, r3
 8006ea4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006ea8:	4562      	cmp	r2, ip
 8006eaa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006eae:	d8e5      	bhi.n	8006e7c <__multiply+0x10c>
 8006eb0:	9f01      	ldr	r7, [sp, #4]
 8006eb2:	51eb      	str	r3, [r5, r7]
 8006eb4:	3504      	adds	r5, #4
 8006eb6:	e799      	b.n	8006dec <__multiply+0x7c>
 8006eb8:	3e01      	subs	r6, #1
 8006eba:	e79b      	b.n	8006df4 <__multiply+0x84>
 8006ebc:	080093f1 	.word	0x080093f1
 8006ec0:	08009402 	.word	0x08009402

08006ec4 <__pow5mult>:
 8006ec4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec8:	4615      	mov	r5, r2
 8006eca:	f012 0203 	ands.w	r2, r2, #3
 8006ece:	4607      	mov	r7, r0
 8006ed0:	460e      	mov	r6, r1
 8006ed2:	d007      	beq.n	8006ee4 <__pow5mult+0x20>
 8006ed4:	4c25      	ldr	r4, [pc, #148]	@ (8006f6c <__pow5mult+0xa8>)
 8006ed6:	3a01      	subs	r2, #1
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006ede:	f7ff fe55 	bl	8006b8c <__multadd>
 8006ee2:	4606      	mov	r6, r0
 8006ee4:	10ad      	asrs	r5, r5, #2
 8006ee6:	d03d      	beq.n	8006f64 <__pow5mult+0xa0>
 8006ee8:	69fc      	ldr	r4, [r7, #28]
 8006eea:	b97c      	cbnz	r4, 8006f0c <__pow5mult+0x48>
 8006eec:	2010      	movs	r0, #16
 8006eee:	f7ff fd35 	bl	800695c <malloc>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	61f8      	str	r0, [r7, #28]
 8006ef6:	b928      	cbnz	r0, 8006f04 <__pow5mult+0x40>
 8006ef8:	4b1d      	ldr	r3, [pc, #116]	@ (8006f70 <__pow5mult+0xac>)
 8006efa:	481e      	ldr	r0, [pc, #120]	@ (8006f74 <__pow5mult+0xb0>)
 8006efc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006f00:	f001 fb6e 	bl	80085e0 <__assert_func>
 8006f04:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f08:	6004      	str	r4, [r0, #0]
 8006f0a:	60c4      	str	r4, [r0, #12]
 8006f0c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006f10:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f14:	b94c      	cbnz	r4, 8006f2a <__pow5mult+0x66>
 8006f16:	f240 2171 	movw	r1, #625	@ 0x271
 8006f1a:	4638      	mov	r0, r7
 8006f1c:	f7ff ff12 	bl	8006d44 <__i2b>
 8006f20:	2300      	movs	r3, #0
 8006f22:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f26:	4604      	mov	r4, r0
 8006f28:	6003      	str	r3, [r0, #0]
 8006f2a:	f04f 0900 	mov.w	r9, #0
 8006f2e:	07eb      	lsls	r3, r5, #31
 8006f30:	d50a      	bpl.n	8006f48 <__pow5mult+0x84>
 8006f32:	4631      	mov	r1, r6
 8006f34:	4622      	mov	r2, r4
 8006f36:	4638      	mov	r0, r7
 8006f38:	f7ff ff1a 	bl	8006d70 <__multiply>
 8006f3c:	4631      	mov	r1, r6
 8006f3e:	4680      	mov	r8, r0
 8006f40:	4638      	mov	r0, r7
 8006f42:	f7ff fe01 	bl	8006b48 <_Bfree>
 8006f46:	4646      	mov	r6, r8
 8006f48:	106d      	asrs	r5, r5, #1
 8006f4a:	d00b      	beq.n	8006f64 <__pow5mult+0xa0>
 8006f4c:	6820      	ldr	r0, [r4, #0]
 8006f4e:	b938      	cbnz	r0, 8006f60 <__pow5mult+0x9c>
 8006f50:	4622      	mov	r2, r4
 8006f52:	4621      	mov	r1, r4
 8006f54:	4638      	mov	r0, r7
 8006f56:	f7ff ff0b 	bl	8006d70 <__multiply>
 8006f5a:	6020      	str	r0, [r4, #0]
 8006f5c:	f8c0 9000 	str.w	r9, [r0]
 8006f60:	4604      	mov	r4, r0
 8006f62:	e7e4      	b.n	8006f2e <__pow5mult+0x6a>
 8006f64:	4630      	mov	r0, r6
 8006f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f6a:	bf00      	nop
 8006f6c:	0800945c 	.word	0x0800945c
 8006f70:	08009382 	.word	0x08009382
 8006f74:	08009402 	.word	0x08009402

08006f78 <__lshift>:
 8006f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	6849      	ldr	r1, [r1, #4]
 8006f80:	6923      	ldr	r3, [r4, #16]
 8006f82:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f86:	68a3      	ldr	r3, [r4, #8]
 8006f88:	4607      	mov	r7, r0
 8006f8a:	4691      	mov	r9, r2
 8006f8c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f90:	f108 0601 	add.w	r6, r8, #1
 8006f94:	42b3      	cmp	r3, r6
 8006f96:	db0b      	blt.n	8006fb0 <__lshift+0x38>
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f7ff fd95 	bl	8006ac8 <_Balloc>
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	b948      	cbnz	r0, 8006fb6 <__lshift+0x3e>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	4b28      	ldr	r3, [pc, #160]	@ (8007048 <__lshift+0xd0>)
 8006fa6:	4829      	ldr	r0, [pc, #164]	@ (800704c <__lshift+0xd4>)
 8006fa8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006fac:	f001 fb18 	bl	80085e0 <__assert_func>
 8006fb0:	3101      	adds	r1, #1
 8006fb2:	005b      	lsls	r3, r3, #1
 8006fb4:	e7ee      	b.n	8006f94 <__lshift+0x1c>
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f100 0114 	add.w	r1, r0, #20
 8006fbc:	f100 0210 	add.w	r2, r0, #16
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	4553      	cmp	r3, sl
 8006fc4:	db33      	blt.n	800702e <__lshift+0xb6>
 8006fc6:	6920      	ldr	r0, [r4, #16]
 8006fc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006fcc:	f104 0314 	add.w	r3, r4, #20
 8006fd0:	f019 091f 	ands.w	r9, r9, #31
 8006fd4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006fd8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006fdc:	d02b      	beq.n	8007036 <__lshift+0xbe>
 8006fde:	f1c9 0e20 	rsb	lr, r9, #32
 8006fe2:	468a      	mov	sl, r1
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	6818      	ldr	r0, [r3, #0]
 8006fe8:	fa00 f009 	lsl.w	r0, r0, r9
 8006fec:	4310      	orrs	r0, r2
 8006fee:	f84a 0b04 	str.w	r0, [sl], #4
 8006ff2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff6:	459c      	cmp	ip, r3
 8006ff8:	fa22 f20e 	lsr.w	r2, r2, lr
 8006ffc:	d8f3      	bhi.n	8006fe6 <__lshift+0x6e>
 8006ffe:	ebac 0304 	sub.w	r3, ip, r4
 8007002:	3b15      	subs	r3, #21
 8007004:	f023 0303 	bic.w	r3, r3, #3
 8007008:	3304      	adds	r3, #4
 800700a:	f104 0015 	add.w	r0, r4, #21
 800700e:	4584      	cmp	ip, r0
 8007010:	bf38      	it	cc
 8007012:	2304      	movcc	r3, #4
 8007014:	50ca      	str	r2, [r1, r3]
 8007016:	b10a      	cbz	r2, 800701c <__lshift+0xa4>
 8007018:	f108 0602 	add.w	r6, r8, #2
 800701c:	3e01      	subs	r6, #1
 800701e:	4638      	mov	r0, r7
 8007020:	612e      	str	r6, [r5, #16]
 8007022:	4621      	mov	r1, r4
 8007024:	f7ff fd90 	bl	8006b48 <_Bfree>
 8007028:	4628      	mov	r0, r5
 800702a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800702e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007032:	3301      	adds	r3, #1
 8007034:	e7c5      	b.n	8006fc2 <__lshift+0x4a>
 8007036:	3904      	subs	r1, #4
 8007038:	f853 2b04 	ldr.w	r2, [r3], #4
 800703c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007040:	459c      	cmp	ip, r3
 8007042:	d8f9      	bhi.n	8007038 <__lshift+0xc0>
 8007044:	e7ea      	b.n	800701c <__lshift+0xa4>
 8007046:	bf00      	nop
 8007048:	080093f1 	.word	0x080093f1
 800704c:	08009402 	.word	0x08009402

08007050 <__mcmp>:
 8007050:	690a      	ldr	r2, [r1, #16]
 8007052:	4603      	mov	r3, r0
 8007054:	6900      	ldr	r0, [r0, #16]
 8007056:	1a80      	subs	r0, r0, r2
 8007058:	b530      	push	{r4, r5, lr}
 800705a:	d10e      	bne.n	800707a <__mcmp+0x2a>
 800705c:	3314      	adds	r3, #20
 800705e:	3114      	adds	r1, #20
 8007060:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007064:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007068:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800706c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007070:	4295      	cmp	r5, r2
 8007072:	d003      	beq.n	800707c <__mcmp+0x2c>
 8007074:	d205      	bcs.n	8007082 <__mcmp+0x32>
 8007076:	f04f 30ff 	mov.w	r0, #4294967295
 800707a:	bd30      	pop	{r4, r5, pc}
 800707c:	42a3      	cmp	r3, r4
 800707e:	d3f3      	bcc.n	8007068 <__mcmp+0x18>
 8007080:	e7fb      	b.n	800707a <__mcmp+0x2a>
 8007082:	2001      	movs	r0, #1
 8007084:	e7f9      	b.n	800707a <__mcmp+0x2a>
	...

08007088 <__mdiff>:
 8007088:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	4689      	mov	r9, r1
 800708e:	4606      	mov	r6, r0
 8007090:	4611      	mov	r1, r2
 8007092:	4648      	mov	r0, r9
 8007094:	4614      	mov	r4, r2
 8007096:	f7ff ffdb 	bl	8007050 <__mcmp>
 800709a:	1e05      	subs	r5, r0, #0
 800709c:	d112      	bne.n	80070c4 <__mdiff+0x3c>
 800709e:	4629      	mov	r1, r5
 80070a0:	4630      	mov	r0, r6
 80070a2:	f7ff fd11 	bl	8006ac8 <_Balloc>
 80070a6:	4602      	mov	r2, r0
 80070a8:	b928      	cbnz	r0, 80070b6 <__mdiff+0x2e>
 80070aa:	4b3f      	ldr	r3, [pc, #252]	@ (80071a8 <__mdiff+0x120>)
 80070ac:	f240 2137 	movw	r1, #567	@ 0x237
 80070b0:	483e      	ldr	r0, [pc, #248]	@ (80071ac <__mdiff+0x124>)
 80070b2:	f001 fa95 	bl	80085e0 <__assert_func>
 80070b6:	2301      	movs	r3, #1
 80070b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070bc:	4610      	mov	r0, r2
 80070be:	b003      	add	sp, #12
 80070c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070c4:	bfbc      	itt	lt
 80070c6:	464b      	movlt	r3, r9
 80070c8:	46a1      	movlt	r9, r4
 80070ca:	4630      	mov	r0, r6
 80070cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80070d0:	bfba      	itte	lt
 80070d2:	461c      	movlt	r4, r3
 80070d4:	2501      	movlt	r5, #1
 80070d6:	2500      	movge	r5, #0
 80070d8:	f7ff fcf6 	bl	8006ac8 <_Balloc>
 80070dc:	4602      	mov	r2, r0
 80070de:	b918      	cbnz	r0, 80070e8 <__mdiff+0x60>
 80070e0:	4b31      	ldr	r3, [pc, #196]	@ (80071a8 <__mdiff+0x120>)
 80070e2:	f240 2145 	movw	r1, #581	@ 0x245
 80070e6:	e7e3      	b.n	80070b0 <__mdiff+0x28>
 80070e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80070ec:	6926      	ldr	r6, [r4, #16]
 80070ee:	60c5      	str	r5, [r0, #12]
 80070f0:	f109 0310 	add.w	r3, r9, #16
 80070f4:	f109 0514 	add.w	r5, r9, #20
 80070f8:	f104 0e14 	add.w	lr, r4, #20
 80070fc:	f100 0b14 	add.w	fp, r0, #20
 8007100:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007104:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007108:	9301      	str	r3, [sp, #4]
 800710a:	46d9      	mov	r9, fp
 800710c:	f04f 0c00 	mov.w	ip, #0
 8007110:	9b01      	ldr	r3, [sp, #4]
 8007112:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007116:	f853 af04 	ldr.w	sl, [r3, #4]!
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	fa1f f38a 	uxth.w	r3, sl
 8007120:	4619      	mov	r1, r3
 8007122:	b283      	uxth	r3, r0
 8007124:	1acb      	subs	r3, r1, r3
 8007126:	0c00      	lsrs	r0, r0, #16
 8007128:	4463      	add	r3, ip
 800712a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800712e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007132:	b29b      	uxth	r3, r3
 8007134:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007138:	4576      	cmp	r6, lr
 800713a:	f849 3b04 	str.w	r3, [r9], #4
 800713e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007142:	d8e5      	bhi.n	8007110 <__mdiff+0x88>
 8007144:	1b33      	subs	r3, r6, r4
 8007146:	3b15      	subs	r3, #21
 8007148:	f023 0303 	bic.w	r3, r3, #3
 800714c:	3415      	adds	r4, #21
 800714e:	3304      	adds	r3, #4
 8007150:	42a6      	cmp	r6, r4
 8007152:	bf38      	it	cc
 8007154:	2304      	movcc	r3, #4
 8007156:	441d      	add	r5, r3
 8007158:	445b      	add	r3, fp
 800715a:	461e      	mov	r6, r3
 800715c:	462c      	mov	r4, r5
 800715e:	4544      	cmp	r4, r8
 8007160:	d30e      	bcc.n	8007180 <__mdiff+0xf8>
 8007162:	f108 0103 	add.w	r1, r8, #3
 8007166:	1b49      	subs	r1, r1, r5
 8007168:	f021 0103 	bic.w	r1, r1, #3
 800716c:	3d03      	subs	r5, #3
 800716e:	45a8      	cmp	r8, r5
 8007170:	bf38      	it	cc
 8007172:	2100      	movcc	r1, #0
 8007174:	440b      	add	r3, r1
 8007176:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800717a:	b191      	cbz	r1, 80071a2 <__mdiff+0x11a>
 800717c:	6117      	str	r7, [r2, #16]
 800717e:	e79d      	b.n	80070bc <__mdiff+0x34>
 8007180:	f854 1b04 	ldr.w	r1, [r4], #4
 8007184:	46e6      	mov	lr, ip
 8007186:	0c08      	lsrs	r0, r1, #16
 8007188:	fa1c fc81 	uxtah	ip, ip, r1
 800718c:	4471      	add	r1, lr
 800718e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007192:	b289      	uxth	r1, r1
 8007194:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007198:	f846 1b04 	str.w	r1, [r6], #4
 800719c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80071a0:	e7dd      	b.n	800715e <__mdiff+0xd6>
 80071a2:	3f01      	subs	r7, #1
 80071a4:	e7e7      	b.n	8007176 <__mdiff+0xee>
 80071a6:	bf00      	nop
 80071a8:	080093f1 	.word	0x080093f1
 80071ac:	08009402 	.word	0x08009402

080071b0 <__ulp>:
 80071b0:	b082      	sub	sp, #8
 80071b2:	ed8d 0b00 	vstr	d0, [sp]
 80071b6:	9a01      	ldr	r2, [sp, #4]
 80071b8:	4b0f      	ldr	r3, [pc, #60]	@ (80071f8 <__ulp+0x48>)
 80071ba:	4013      	ands	r3, r2
 80071bc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	dc08      	bgt.n	80071d6 <__ulp+0x26>
 80071c4:	425b      	negs	r3, r3
 80071c6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80071ca:	ea4f 5223 	mov.w	r2, r3, asr #20
 80071ce:	da04      	bge.n	80071da <__ulp+0x2a>
 80071d0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80071d4:	4113      	asrs	r3, r2
 80071d6:	2200      	movs	r2, #0
 80071d8:	e008      	b.n	80071ec <__ulp+0x3c>
 80071da:	f1a2 0314 	sub.w	r3, r2, #20
 80071de:	2b1e      	cmp	r3, #30
 80071e0:	bfda      	itte	le
 80071e2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80071e6:	40da      	lsrle	r2, r3
 80071e8:	2201      	movgt	r2, #1
 80071ea:	2300      	movs	r3, #0
 80071ec:	4619      	mov	r1, r3
 80071ee:	4610      	mov	r0, r2
 80071f0:	ec41 0b10 	vmov	d0, r0, r1
 80071f4:	b002      	add	sp, #8
 80071f6:	4770      	bx	lr
 80071f8:	7ff00000 	.word	0x7ff00000

080071fc <__b2d>:
 80071fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007200:	6906      	ldr	r6, [r0, #16]
 8007202:	f100 0814 	add.w	r8, r0, #20
 8007206:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800720a:	1f37      	subs	r7, r6, #4
 800720c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007210:	4610      	mov	r0, r2
 8007212:	f7ff fd4b 	bl	8006cac <__hi0bits>
 8007216:	f1c0 0320 	rsb	r3, r0, #32
 800721a:	280a      	cmp	r0, #10
 800721c:	600b      	str	r3, [r1, #0]
 800721e:	491b      	ldr	r1, [pc, #108]	@ (800728c <__b2d+0x90>)
 8007220:	dc15      	bgt.n	800724e <__b2d+0x52>
 8007222:	f1c0 0c0b 	rsb	ip, r0, #11
 8007226:	fa22 f30c 	lsr.w	r3, r2, ip
 800722a:	45b8      	cmp	r8, r7
 800722c:	ea43 0501 	orr.w	r5, r3, r1
 8007230:	bf34      	ite	cc
 8007232:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007236:	2300      	movcs	r3, #0
 8007238:	3015      	adds	r0, #21
 800723a:	fa02 f000 	lsl.w	r0, r2, r0
 800723e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007242:	4303      	orrs	r3, r0
 8007244:	461c      	mov	r4, r3
 8007246:	ec45 4b10 	vmov	d0, r4, r5
 800724a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800724e:	45b8      	cmp	r8, r7
 8007250:	bf3a      	itte	cc
 8007252:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007256:	f1a6 0708 	subcc.w	r7, r6, #8
 800725a:	2300      	movcs	r3, #0
 800725c:	380b      	subs	r0, #11
 800725e:	d012      	beq.n	8007286 <__b2d+0x8a>
 8007260:	f1c0 0120 	rsb	r1, r0, #32
 8007264:	fa23 f401 	lsr.w	r4, r3, r1
 8007268:	4082      	lsls	r2, r0
 800726a:	4322      	orrs	r2, r4
 800726c:	4547      	cmp	r7, r8
 800726e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007272:	bf8c      	ite	hi
 8007274:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007278:	2200      	movls	r2, #0
 800727a:	4083      	lsls	r3, r0
 800727c:	40ca      	lsrs	r2, r1
 800727e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007282:	4313      	orrs	r3, r2
 8007284:	e7de      	b.n	8007244 <__b2d+0x48>
 8007286:	ea42 0501 	orr.w	r5, r2, r1
 800728a:	e7db      	b.n	8007244 <__b2d+0x48>
 800728c:	3ff00000 	.word	0x3ff00000

08007290 <__d2b>:
 8007290:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007294:	460f      	mov	r7, r1
 8007296:	2101      	movs	r1, #1
 8007298:	ec59 8b10 	vmov	r8, r9, d0
 800729c:	4616      	mov	r6, r2
 800729e:	f7ff fc13 	bl	8006ac8 <_Balloc>
 80072a2:	4604      	mov	r4, r0
 80072a4:	b930      	cbnz	r0, 80072b4 <__d2b+0x24>
 80072a6:	4602      	mov	r2, r0
 80072a8:	4b23      	ldr	r3, [pc, #140]	@ (8007338 <__d2b+0xa8>)
 80072aa:	4824      	ldr	r0, [pc, #144]	@ (800733c <__d2b+0xac>)
 80072ac:	f240 310f 	movw	r1, #783	@ 0x30f
 80072b0:	f001 f996 	bl	80085e0 <__assert_func>
 80072b4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80072b8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80072bc:	b10d      	cbz	r5, 80072c2 <__d2b+0x32>
 80072be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80072c2:	9301      	str	r3, [sp, #4]
 80072c4:	f1b8 0300 	subs.w	r3, r8, #0
 80072c8:	d023      	beq.n	8007312 <__d2b+0x82>
 80072ca:	4668      	mov	r0, sp
 80072cc:	9300      	str	r3, [sp, #0]
 80072ce:	f7ff fd0c 	bl	8006cea <__lo0bits>
 80072d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80072d6:	b1d0      	cbz	r0, 800730e <__d2b+0x7e>
 80072d8:	f1c0 0320 	rsb	r3, r0, #32
 80072dc:	fa02 f303 	lsl.w	r3, r2, r3
 80072e0:	430b      	orrs	r3, r1
 80072e2:	40c2      	lsrs	r2, r0
 80072e4:	6163      	str	r3, [r4, #20]
 80072e6:	9201      	str	r2, [sp, #4]
 80072e8:	9b01      	ldr	r3, [sp, #4]
 80072ea:	61a3      	str	r3, [r4, #24]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	bf0c      	ite	eq
 80072f0:	2201      	moveq	r2, #1
 80072f2:	2202      	movne	r2, #2
 80072f4:	6122      	str	r2, [r4, #16]
 80072f6:	b1a5      	cbz	r5, 8007322 <__d2b+0x92>
 80072f8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80072fc:	4405      	add	r5, r0
 80072fe:	603d      	str	r5, [r7, #0]
 8007300:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007304:	6030      	str	r0, [r6, #0]
 8007306:	4620      	mov	r0, r4
 8007308:	b003      	add	sp, #12
 800730a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800730e:	6161      	str	r1, [r4, #20]
 8007310:	e7ea      	b.n	80072e8 <__d2b+0x58>
 8007312:	a801      	add	r0, sp, #4
 8007314:	f7ff fce9 	bl	8006cea <__lo0bits>
 8007318:	9b01      	ldr	r3, [sp, #4]
 800731a:	6163      	str	r3, [r4, #20]
 800731c:	3020      	adds	r0, #32
 800731e:	2201      	movs	r2, #1
 8007320:	e7e8      	b.n	80072f4 <__d2b+0x64>
 8007322:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007326:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800732a:	6038      	str	r0, [r7, #0]
 800732c:	6918      	ldr	r0, [r3, #16]
 800732e:	f7ff fcbd 	bl	8006cac <__hi0bits>
 8007332:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007336:	e7e5      	b.n	8007304 <__d2b+0x74>
 8007338:	080093f1 	.word	0x080093f1
 800733c:	08009402 	.word	0x08009402

08007340 <__ratio>:
 8007340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	b085      	sub	sp, #20
 8007346:	e9cd 1000 	strd	r1, r0, [sp]
 800734a:	a902      	add	r1, sp, #8
 800734c:	f7ff ff56 	bl	80071fc <__b2d>
 8007350:	9800      	ldr	r0, [sp, #0]
 8007352:	a903      	add	r1, sp, #12
 8007354:	ec55 4b10 	vmov	r4, r5, d0
 8007358:	f7ff ff50 	bl	80071fc <__b2d>
 800735c:	9b01      	ldr	r3, [sp, #4]
 800735e:	6919      	ldr	r1, [r3, #16]
 8007360:	9b00      	ldr	r3, [sp, #0]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	1ac9      	subs	r1, r1, r3
 8007366:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800736a:	1a9b      	subs	r3, r3, r2
 800736c:	ec5b ab10 	vmov	sl, fp, d0
 8007370:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007374:	2b00      	cmp	r3, #0
 8007376:	bfce      	itee	gt
 8007378:	462a      	movgt	r2, r5
 800737a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800737e:	465a      	movle	r2, fp
 8007380:	462f      	mov	r7, r5
 8007382:	46d9      	mov	r9, fp
 8007384:	bfcc      	ite	gt
 8007386:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800738a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800738e:	464b      	mov	r3, r9
 8007390:	4652      	mov	r2, sl
 8007392:	4620      	mov	r0, r4
 8007394:	4639      	mov	r1, r7
 8007396:	f7f9 fa59 	bl	800084c <__aeabi_ddiv>
 800739a:	ec41 0b10 	vmov	d0, r0, r1
 800739e:	b005      	add	sp, #20
 80073a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080073a4 <__copybits>:
 80073a4:	3901      	subs	r1, #1
 80073a6:	b570      	push	{r4, r5, r6, lr}
 80073a8:	1149      	asrs	r1, r1, #5
 80073aa:	6914      	ldr	r4, [r2, #16]
 80073ac:	3101      	adds	r1, #1
 80073ae:	f102 0314 	add.w	r3, r2, #20
 80073b2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80073b6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80073ba:	1f05      	subs	r5, r0, #4
 80073bc:	42a3      	cmp	r3, r4
 80073be:	d30c      	bcc.n	80073da <__copybits+0x36>
 80073c0:	1aa3      	subs	r3, r4, r2
 80073c2:	3b11      	subs	r3, #17
 80073c4:	f023 0303 	bic.w	r3, r3, #3
 80073c8:	3211      	adds	r2, #17
 80073ca:	42a2      	cmp	r2, r4
 80073cc:	bf88      	it	hi
 80073ce:	2300      	movhi	r3, #0
 80073d0:	4418      	add	r0, r3
 80073d2:	2300      	movs	r3, #0
 80073d4:	4288      	cmp	r0, r1
 80073d6:	d305      	bcc.n	80073e4 <__copybits+0x40>
 80073d8:	bd70      	pop	{r4, r5, r6, pc}
 80073da:	f853 6b04 	ldr.w	r6, [r3], #4
 80073de:	f845 6f04 	str.w	r6, [r5, #4]!
 80073e2:	e7eb      	b.n	80073bc <__copybits+0x18>
 80073e4:	f840 3b04 	str.w	r3, [r0], #4
 80073e8:	e7f4      	b.n	80073d4 <__copybits+0x30>

080073ea <__any_on>:
 80073ea:	f100 0214 	add.w	r2, r0, #20
 80073ee:	6900      	ldr	r0, [r0, #16]
 80073f0:	114b      	asrs	r3, r1, #5
 80073f2:	4298      	cmp	r0, r3
 80073f4:	b510      	push	{r4, lr}
 80073f6:	db11      	blt.n	800741c <__any_on+0x32>
 80073f8:	dd0a      	ble.n	8007410 <__any_on+0x26>
 80073fa:	f011 011f 	ands.w	r1, r1, #31
 80073fe:	d007      	beq.n	8007410 <__any_on+0x26>
 8007400:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007404:	fa24 f001 	lsr.w	r0, r4, r1
 8007408:	fa00 f101 	lsl.w	r1, r0, r1
 800740c:	428c      	cmp	r4, r1
 800740e:	d10b      	bne.n	8007428 <__any_on+0x3e>
 8007410:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007414:	4293      	cmp	r3, r2
 8007416:	d803      	bhi.n	8007420 <__any_on+0x36>
 8007418:	2000      	movs	r0, #0
 800741a:	bd10      	pop	{r4, pc}
 800741c:	4603      	mov	r3, r0
 800741e:	e7f7      	b.n	8007410 <__any_on+0x26>
 8007420:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007424:	2900      	cmp	r1, #0
 8007426:	d0f5      	beq.n	8007414 <__any_on+0x2a>
 8007428:	2001      	movs	r0, #1
 800742a:	e7f6      	b.n	800741a <__any_on+0x30>

0800742c <sulp>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	4604      	mov	r4, r0
 8007430:	460d      	mov	r5, r1
 8007432:	ec45 4b10 	vmov	d0, r4, r5
 8007436:	4616      	mov	r6, r2
 8007438:	f7ff feba 	bl	80071b0 <__ulp>
 800743c:	ec51 0b10 	vmov	r0, r1, d0
 8007440:	b17e      	cbz	r6, 8007462 <sulp+0x36>
 8007442:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007446:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800744a:	2b00      	cmp	r3, #0
 800744c:	dd09      	ble.n	8007462 <sulp+0x36>
 800744e:	051b      	lsls	r3, r3, #20
 8007450:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007454:	2400      	movs	r4, #0
 8007456:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800745a:	4622      	mov	r2, r4
 800745c:	462b      	mov	r3, r5
 800745e:	f7f9 f8cb 	bl	80005f8 <__aeabi_dmul>
 8007462:	ec41 0b10 	vmov	d0, r0, r1
 8007466:	bd70      	pop	{r4, r5, r6, pc}

08007468 <_strtod_l>:
 8007468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746c:	b09f      	sub	sp, #124	@ 0x7c
 800746e:	460c      	mov	r4, r1
 8007470:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007472:	2200      	movs	r2, #0
 8007474:	921a      	str	r2, [sp, #104]	@ 0x68
 8007476:	9005      	str	r0, [sp, #20]
 8007478:	f04f 0a00 	mov.w	sl, #0
 800747c:	f04f 0b00 	mov.w	fp, #0
 8007480:	460a      	mov	r2, r1
 8007482:	9219      	str	r2, [sp, #100]	@ 0x64
 8007484:	7811      	ldrb	r1, [r2, #0]
 8007486:	292b      	cmp	r1, #43	@ 0x2b
 8007488:	d04a      	beq.n	8007520 <_strtod_l+0xb8>
 800748a:	d838      	bhi.n	80074fe <_strtod_l+0x96>
 800748c:	290d      	cmp	r1, #13
 800748e:	d832      	bhi.n	80074f6 <_strtod_l+0x8e>
 8007490:	2908      	cmp	r1, #8
 8007492:	d832      	bhi.n	80074fa <_strtod_l+0x92>
 8007494:	2900      	cmp	r1, #0
 8007496:	d03b      	beq.n	8007510 <_strtod_l+0xa8>
 8007498:	2200      	movs	r2, #0
 800749a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800749c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800749e:	782a      	ldrb	r2, [r5, #0]
 80074a0:	2a30      	cmp	r2, #48	@ 0x30
 80074a2:	f040 80b3 	bne.w	800760c <_strtod_l+0x1a4>
 80074a6:	786a      	ldrb	r2, [r5, #1]
 80074a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80074ac:	2a58      	cmp	r2, #88	@ 0x58
 80074ae:	d16e      	bne.n	800758e <_strtod_l+0x126>
 80074b0:	9302      	str	r3, [sp, #8]
 80074b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	4a8e      	ldr	r2, [pc, #568]	@ (80076f4 <_strtod_l+0x28c>)
 80074bc:	9805      	ldr	r0, [sp, #20]
 80074be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80074c0:	a919      	add	r1, sp, #100	@ 0x64
 80074c2:	f001 f927 	bl	8008714 <__gethex>
 80074c6:	f010 060f 	ands.w	r6, r0, #15
 80074ca:	4604      	mov	r4, r0
 80074cc:	d005      	beq.n	80074da <_strtod_l+0x72>
 80074ce:	2e06      	cmp	r6, #6
 80074d0:	d128      	bne.n	8007524 <_strtod_l+0xbc>
 80074d2:	3501      	adds	r5, #1
 80074d4:	2300      	movs	r3, #0
 80074d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80074d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f040 858e 	bne.w	8007ffe <_strtod_l+0xb96>
 80074e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80074e4:	b1cb      	cbz	r3, 800751a <_strtod_l+0xb2>
 80074e6:	4652      	mov	r2, sl
 80074e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80074ec:	ec43 2b10 	vmov	d0, r2, r3
 80074f0:	b01f      	add	sp, #124	@ 0x7c
 80074f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074f6:	2920      	cmp	r1, #32
 80074f8:	d1ce      	bne.n	8007498 <_strtod_l+0x30>
 80074fa:	3201      	adds	r2, #1
 80074fc:	e7c1      	b.n	8007482 <_strtod_l+0x1a>
 80074fe:	292d      	cmp	r1, #45	@ 0x2d
 8007500:	d1ca      	bne.n	8007498 <_strtod_l+0x30>
 8007502:	2101      	movs	r1, #1
 8007504:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007506:	1c51      	adds	r1, r2, #1
 8007508:	9119      	str	r1, [sp, #100]	@ 0x64
 800750a:	7852      	ldrb	r2, [r2, #1]
 800750c:	2a00      	cmp	r2, #0
 800750e:	d1c5      	bne.n	800749c <_strtod_l+0x34>
 8007510:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007512:	9419      	str	r4, [sp, #100]	@ 0x64
 8007514:	2b00      	cmp	r3, #0
 8007516:	f040 8570 	bne.w	8007ffa <_strtod_l+0xb92>
 800751a:	4652      	mov	r2, sl
 800751c:	465b      	mov	r3, fp
 800751e:	e7e5      	b.n	80074ec <_strtod_l+0x84>
 8007520:	2100      	movs	r1, #0
 8007522:	e7ef      	b.n	8007504 <_strtod_l+0x9c>
 8007524:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007526:	b13a      	cbz	r2, 8007538 <_strtod_l+0xd0>
 8007528:	2135      	movs	r1, #53	@ 0x35
 800752a:	a81c      	add	r0, sp, #112	@ 0x70
 800752c:	f7ff ff3a 	bl	80073a4 <__copybits>
 8007530:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007532:	9805      	ldr	r0, [sp, #20]
 8007534:	f7ff fb08 	bl	8006b48 <_Bfree>
 8007538:	3e01      	subs	r6, #1
 800753a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800753c:	2e04      	cmp	r6, #4
 800753e:	d806      	bhi.n	800754e <_strtod_l+0xe6>
 8007540:	e8df f006 	tbb	[pc, r6]
 8007544:	201d0314 	.word	0x201d0314
 8007548:	14          	.byte	0x14
 8007549:	00          	.byte	0x00
 800754a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800754e:	05e1      	lsls	r1, r4, #23
 8007550:	bf48      	it	mi
 8007552:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007556:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800755a:	0d1b      	lsrs	r3, r3, #20
 800755c:	051b      	lsls	r3, r3, #20
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1bb      	bne.n	80074da <_strtod_l+0x72>
 8007562:	f7fe fb31 	bl	8005bc8 <__errno>
 8007566:	2322      	movs	r3, #34	@ 0x22
 8007568:	6003      	str	r3, [r0, #0]
 800756a:	e7b6      	b.n	80074da <_strtod_l+0x72>
 800756c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007570:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007574:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007578:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800757c:	e7e7      	b.n	800754e <_strtod_l+0xe6>
 800757e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80076fc <_strtod_l+0x294>
 8007582:	e7e4      	b.n	800754e <_strtod_l+0xe6>
 8007584:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007588:	f04f 3aff 	mov.w	sl, #4294967295
 800758c:	e7df      	b.n	800754e <_strtod_l+0xe6>
 800758e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007590:	1c5a      	adds	r2, r3, #1
 8007592:	9219      	str	r2, [sp, #100]	@ 0x64
 8007594:	785b      	ldrb	r3, [r3, #1]
 8007596:	2b30      	cmp	r3, #48	@ 0x30
 8007598:	d0f9      	beq.n	800758e <_strtod_l+0x126>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d09d      	beq.n	80074da <_strtod_l+0x72>
 800759e:	2301      	movs	r3, #1
 80075a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80075a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80075a6:	2300      	movs	r3, #0
 80075a8:	9308      	str	r3, [sp, #32]
 80075aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80075ac:	461f      	mov	r7, r3
 80075ae:	220a      	movs	r2, #10
 80075b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80075b2:	7805      	ldrb	r5, [r0, #0]
 80075b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80075b8:	b2d9      	uxtb	r1, r3
 80075ba:	2909      	cmp	r1, #9
 80075bc:	d928      	bls.n	8007610 <_strtod_l+0x1a8>
 80075be:	494e      	ldr	r1, [pc, #312]	@ (80076f8 <_strtod_l+0x290>)
 80075c0:	2201      	movs	r2, #1
 80075c2:	f000 ffd5 	bl	8008570 <strncmp>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d032      	beq.n	8007630 <_strtod_l+0x1c8>
 80075ca:	2000      	movs	r0, #0
 80075cc:	462a      	mov	r2, r5
 80075ce:	4681      	mov	r9, r0
 80075d0:	463d      	mov	r5, r7
 80075d2:	4603      	mov	r3, r0
 80075d4:	2a65      	cmp	r2, #101	@ 0x65
 80075d6:	d001      	beq.n	80075dc <_strtod_l+0x174>
 80075d8:	2a45      	cmp	r2, #69	@ 0x45
 80075da:	d114      	bne.n	8007606 <_strtod_l+0x19e>
 80075dc:	b91d      	cbnz	r5, 80075e6 <_strtod_l+0x17e>
 80075de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075e0:	4302      	orrs	r2, r0
 80075e2:	d095      	beq.n	8007510 <_strtod_l+0xa8>
 80075e4:	2500      	movs	r5, #0
 80075e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80075e8:	1c62      	adds	r2, r4, #1
 80075ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80075ec:	7862      	ldrb	r2, [r4, #1]
 80075ee:	2a2b      	cmp	r2, #43	@ 0x2b
 80075f0:	d077      	beq.n	80076e2 <_strtod_l+0x27a>
 80075f2:	2a2d      	cmp	r2, #45	@ 0x2d
 80075f4:	d07b      	beq.n	80076ee <_strtod_l+0x286>
 80075f6:	f04f 0c00 	mov.w	ip, #0
 80075fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80075fe:	2909      	cmp	r1, #9
 8007600:	f240 8082 	bls.w	8007708 <_strtod_l+0x2a0>
 8007604:	9419      	str	r4, [sp, #100]	@ 0x64
 8007606:	f04f 0800 	mov.w	r8, #0
 800760a:	e0a2      	b.n	8007752 <_strtod_l+0x2ea>
 800760c:	2300      	movs	r3, #0
 800760e:	e7c7      	b.n	80075a0 <_strtod_l+0x138>
 8007610:	2f08      	cmp	r7, #8
 8007612:	bfd5      	itete	le
 8007614:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007616:	9908      	ldrgt	r1, [sp, #32]
 8007618:	fb02 3301 	mlale	r3, r2, r1, r3
 800761c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007620:	f100 0001 	add.w	r0, r0, #1
 8007624:	bfd4      	ite	le
 8007626:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007628:	9308      	strgt	r3, [sp, #32]
 800762a:	3701      	adds	r7, #1
 800762c:	9019      	str	r0, [sp, #100]	@ 0x64
 800762e:	e7bf      	b.n	80075b0 <_strtod_l+0x148>
 8007630:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	9219      	str	r2, [sp, #100]	@ 0x64
 8007636:	785a      	ldrb	r2, [r3, #1]
 8007638:	b37f      	cbz	r7, 800769a <_strtod_l+0x232>
 800763a:	4681      	mov	r9, r0
 800763c:	463d      	mov	r5, r7
 800763e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007642:	2b09      	cmp	r3, #9
 8007644:	d912      	bls.n	800766c <_strtod_l+0x204>
 8007646:	2301      	movs	r3, #1
 8007648:	e7c4      	b.n	80075d4 <_strtod_l+0x16c>
 800764a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800764c:	1c5a      	adds	r2, r3, #1
 800764e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007650:	785a      	ldrb	r2, [r3, #1]
 8007652:	3001      	adds	r0, #1
 8007654:	2a30      	cmp	r2, #48	@ 0x30
 8007656:	d0f8      	beq.n	800764a <_strtod_l+0x1e2>
 8007658:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800765c:	2b08      	cmp	r3, #8
 800765e:	f200 84d3 	bhi.w	8008008 <_strtod_l+0xba0>
 8007662:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007664:	930c      	str	r3, [sp, #48]	@ 0x30
 8007666:	4681      	mov	r9, r0
 8007668:	2000      	movs	r0, #0
 800766a:	4605      	mov	r5, r0
 800766c:	3a30      	subs	r2, #48	@ 0x30
 800766e:	f100 0301 	add.w	r3, r0, #1
 8007672:	d02a      	beq.n	80076ca <_strtod_l+0x262>
 8007674:	4499      	add	r9, r3
 8007676:	eb00 0c05 	add.w	ip, r0, r5
 800767a:	462b      	mov	r3, r5
 800767c:	210a      	movs	r1, #10
 800767e:	4563      	cmp	r3, ip
 8007680:	d10d      	bne.n	800769e <_strtod_l+0x236>
 8007682:	1c69      	adds	r1, r5, #1
 8007684:	4401      	add	r1, r0
 8007686:	4428      	add	r0, r5
 8007688:	2808      	cmp	r0, #8
 800768a:	dc16      	bgt.n	80076ba <_strtod_l+0x252>
 800768c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800768e:	230a      	movs	r3, #10
 8007690:	fb03 2300 	mla	r3, r3, r0, r2
 8007694:	930a      	str	r3, [sp, #40]	@ 0x28
 8007696:	2300      	movs	r3, #0
 8007698:	e018      	b.n	80076cc <_strtod_l+0x264>
 800769a:	4638      	mov	r0, r7
 800769c:	e7da      	b.n	8007654 <_strtod_l+0x1ec>
 800769e:	2b08      	cmp	r3, #8
 80076a0:	f103 0301 	add.w	r3, r3, #1
 80076a4:	dc03      	bgt.n	80076ae <_strtod_l+0x246>
 80076a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80076a8:	434e      	muls	r6, r1
 80076aa:	960a      	str	r6, [sp, #40]	@ 0x28
 80076ac:	e7e7      	b.n	800767e <_strtod_l+0x216>
 80076ae:	2b10      	cmp	r3, #16
 80076b0:	bfde      	ittt	le
 80076b2:	9e08      	ldrle	r6, [sp, #32]
 80076b4:	434e      	mulle	r6, r1
 80076b6:	9608      	strle	r6, [sp, #32]
 80076b8:	e7e1      	b.n	800767e <_strtod_l+0x216>
 80076ba:	280f      	cmp	r0, #15
 80076bc:	dceb      	bgt.n	8007696 <_strtod_l+0x22e>
 80076be:	9808      	ldr	r0, [sp, #32]
 80076c0:	230a      	movs	r3, #10
 80076c2:	fb03 2300 	mla	r3, r3, r0, r2
 80076c6:	9308      	str	r3, [sp, #32]
 80076c8:	e7e5      	b.n	8007696 <_strtod_l+0x22e>
 80076ca:	4629      	mov	r1, r5
 80076cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076ce:	1c50      	adds	r0, r2, #1
 80076d0:	9019      	str	r0, [sp, #100]	@ 0x64
 80076d2:	7852      	ldrb	r2, [r2, #1]
 80076d4:	4618      	mov	r0, r3
 80076d6:	460d      	mov	r5, r1
 80076d8:	e7b1      	b.n	800763e <_strtod_l+0x1d6>
 80076da:	f04f 0900 	mov.w	r9, #0
 80076de:	2301      	movs	r3, #1
 80076e0:	e77d      	b.n	80075de <_strtod_l+0x176>
 80076e2:	f04f 0c00 	mov.w	ip, #0
 80076e6:	1ca2      	adds	r2, r4, #2
 80076e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80076ea:	78a2      	ldrb	r2, [r4, #2]
 80076ec:	e785      	b.n	80075fa <_strtod_l+0x192>
 80076ee:	f04f 0c01 	mov.w	ip, #1
 80076f2:	e7f8      	b.n	80076e6 <_strtod_l+0x27e>
 80076f4:	08009570 	.word	0x08009570
 80076f8:	08009558 	.word	0x08009558
 80076fc:	7ff00000 	.word	0x7ff00000
 8007700:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007702:	1c51      	adds	r1, r2, #1
 8007704:	9119      	str	r1, [sp, #100]	@ 0x64
 8007706:	7852      	ldrb	r2, [r2, #1]
 8007708:	2a30      	cmp	r2, #48	@ 0x30
 800770a:	d0f9      	beq.n	8007700 <_strtod_l+0x298>
 800770c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007710:	2908      	cmp	r1, #8
 8007712:	f63f af78 	bhi.w	8007606 <_strtod_l+0x19e>
 8007716:	3a30      	subs	r2, #48	@ 0x30
 8007718:	920e      	str	r2, [sp, #56]	@ 0x38
 800771a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800771c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800771e:	f04f 080a 	mov.w	r8, #10
 8007722:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007724:	1c56      	adds	r6, r2, #1
 8007726:	9619      	str	r6, [sp, #100]	@ 0x64
 8007728:	7852      	ldrb	r2, [r2, #1]
 800772a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800772e:	f1be 0f09 	cmp.w	lr, #9
 8007732:	d939      	bls.n	80077a8 <_strtod_l+0x340>
 8007734:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007736:	1a76      	subs	r6, r6, r1
 8007738:	2e08      	cmp	r6, #8
 800773a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800773e:	dc03      	bgt.n	8007748 <_strtod_l+0x2e0>
 8007740:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007742:	4588      	cmp	r8, r1
 8007744:	bfa8      	it	ge
 8007746:	4688      	movge	r8, r1
 8007748:	f1bc 0f00 	cmp.w	ip, #0
 800774c:	d001      	beq.n	8007752 <_strtod_l+0x2ea>
 800774e:	f1c8 0800 	rsb	r8, r8, #0
 8007752:	2d00      	cmp	r5, #0
 8007754:	d14e      	bne.n	80077f4 <_strtod_l+0x38c>
 8007756:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007758:	4308      	orrs	r0, r1
 800775a:	f47f aebe 	bne.w	80074da <_strtod_l+0x72>
 800775e:	2b00      	cmp	r3, #0
 8007760:	f47f aed6 	bne.w	8007510 <_strtod_l+0xa8>
 8007764:	2a69      	cmp	r2, #105	@ 0x69
 8007766:	d028      	beq.n	80077ba <_strtod_l+0x352>
 8007768:	dc25      	bgt.n	80077b6 <_strtod_l+0x34e>
 800776a:	2a49      	cmp	r2, #73	@ 0x49
 800776c:	d025      	beq.n	80077ba <_strtod_l+0x352>
 800776e:	2a4e      	cmp	r2, #78	@ 0x4e
 8007770:	f47f aece 	bne.w	8007510 <_strtod_l+0xa8>
 8007774:	499b      	ldr	r1, [pc, #620]	@ (80079e4 <_strtod_l+0x57c>)
 8007776:	a819      	add	r0, sp, #100	@ 0x64
 8007778:	f001 f9ee 	bl	8008b58 <__match>
 800777c:	2800      	cmp	r0, #0
 800777e:	f43f aec7 	beq.w	8007510 <_strtod_l+0xa8>
 8007782:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007784:	781b      	ldrb	r3, [r3, #0]
 8007786:	2b28      	cmp	r3, #40	@ 0x28
 8007788:	d12e      	bne.n	80077e8 <_strtod_l+0x380>
 800778a:	4997      	ldr	r1, [pc, #604]	@ (80079e8 <_strtod_l+0x580>)
 800778c:	aa1c      	add	r2, sp, #112	@ 0x70
 800778e:	a819      	add	r0, sp, #100	@ 0x64
 8007790:	f001 f9f6 	bl	8008b80 <__hexnan>
 8007794:	2805      	cmp	r0, #5
 8007796:	d127      	bne.n	80077e8 <_strtod_l+0x380>
 8007798:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800779a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800779e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80077a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80077a6:	e698      	b.n	80074da <_strtod_l+0x72>
 80077a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80077aa:	fb08 2101 	mla	r1, r8, r1, r2
 80077ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80077b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80077b4:	e7b5      	b.n	8007722 <_strtod_l+0x2ba>
 80077b6:	2a6e      	cmp	r2, #110	@ 0x6e
 80077b8:	e7da      	b.n	8007770 <_strtod_l+0x308>
 80077ba:	498c      	ldr	r1, [pc, #560]	@ (80079ec <_strtod_l+0x584>)
 80077bc:	a819      	add	r0, sp, #100	@ 0x64
 80077be:	f001 f9cb 	bl	8008b58 <__match>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	f43f aea4 	beq.w	8007510 <_strtod_l+0xa8>
 80077c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077ca:	4989      	ldr	r1, [pc, #548]	@ (80079f0 <_strtod_l+0x588>)
 80077cc:	3b01      	subs	r3, #1
 80077ce:	a819      	add	r0, sp, #100	@ 0x64
 80077d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80077d2:	f001 f9c1 	bl	8008b58 <__match>
 80077d6:	b910      	cbnz	r0, 80077de <_strtod_l+0x376>
 80077d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80077da:	3301      	adds	r3, #1
 80077dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80077de:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007a00 <_strtod_l+0x598>
 80077e2:	f04f 0a00 	mov.w	sl, #0
 80077e6:	e678      	b.n	80074da <_strtod_l+0x72>
 80077e8:	4882      	ldr	r0, [pc, #520]	@ (80079f4 <_strtod_l+0x58c>)
 80077ea:	f000 fef1 	bl	80085d0 <nan>
 80077ee:	ec5b ab10 	vmov	sl, fp, d0
 80077f2:	e672      	b.n	80074da <_strtod_l+0x72>
 80077f4:	eba8 0309 	sub.w	r3, r8, r9
 80077f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80077fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80077fc:	2f00      	cmp	r7, #0
 80077fe:	bf08      	it	eq
 8007800:	462f      	moveq	r7, r5
 8007802:	2d10      	cmp	r5, #16
 8007804:	462c      	mov	r4, r5
 8007806:	bfa8      	it	ge
 8007808:	2410      	movge	r4, #16
 800780a:	f7f8 fe7b 	bl	8000504 <__aeabi_ui2d>
 800780e:	2d09      	cmp	r5, #9
 8007810:	4682      	mov	sl, r0
 8007812:	468b      	mov	fp, r1
 8007814:	dc13      	bgt.n	800783e <_strtod_l+0x3d6>
 8007816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007818:	2b00      	cmp	r3, #0
 800781a:	f43f ae5e 	beq.w	80074da <_strtod_l+0x72>
 800781e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007820:	dd78      	ble.n	8007914 <_strtod_l+0x4ac>
 8007822:	2b16      	cmp	r3, #22
 8007824:	dc5f      	bgt.n	80078e6 <_strtod_l+0x47e>
 8007826:	4974      	ldr	r1, [pc, #464]	@ (80079f8 <_strtod_l+0x590>)
 8007828:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800782c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007830:	4652      	mov	r2, sl
 8007832:	465b      	mov	r3, fp
 8007834:	f7f8 fee0 	bl	80005f8 <__aeabi_dmul>
 8007838:	4682      	mov	sl, r0
 800783a:	468b      	mov	fp, r1
 800783c:	e64d      	b.n	80074da <_strtod_l+0x72>
 800783e:	4b6e      	ldr	r3, [pc, #440]	@ (80079f8 <_strtod_l+0x590>)
 8007840:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007844:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007848:	f7f8 fed6 	bl	80005f8 <__aeabi_dmul>
 800784c:	4682      	mov	sl, r0
 800784e:	9808      	ldr	r0, [sp, #32]
 8007850:	468b      	mov	fp, r1
 8007852:	f7f8 fe57 	bl	8000504 <__aeabi_ui2d>
 8007856:	4602      	mov	r2, r0
 8007858:	460b      	mov	r3, r1
 800785a:	4650      	mov	r0, sl
 800785c:	4659      	mov	r1, fp
 800785e:	f7f8 fd15 	bl	800028c <__adddf3>
 8007862:	2d0f      	cmp	r5, #15
 8007864:	4682      	mov	sl, r0
 8007866:	468b      	mov	fp, r1
 8007868:	ddd5      	ble.n	8007816 <_strtod_l+0x3ae>
 800786a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800786c:	1b2c      	subs	r4, r5, r4
 800786e:	441c      	add	r4, r3
 8007870:	2c00      	cmp	r4, #0
 8007872:	f340 8096 	ble.w	80079a2 <_strtod_l+0x53a>
 8007876:	f014 030f 	ands.w	r3, r4, #15
 800787a:	d00a      	beq.n	8007892 <_strtod_l+0x42a>
 800787c:	495e      	ldr	r1, [pc, #376]	@ (80079f8 <_strtod_l+0x590>)
 800787e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007882:	4652      	mov	r2, sl
 8007884:	465b      	mov	r3, fp
 8007886:	e9d1 0100 	ldrd	r0, r1, [r1]
 800788a:	f7f8 feb5 	bl	80005f8 <__aeabi_dmul>
 800788e:	4682      	mov	sl, r0
 8007890:	468b      	mov	fp, r1
 8007892:	f034 040f 	bics.w	r4, r4, #15
 8007896:	d073      	beq.n	8007980 <_strtod_l+0x518>
 8007898:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800789c:	dd48      	ble.n	8007930 <_strtod_l+0x4c8>
 800789e:	2400      	movs	r4, #0
 80078a0:	46a0      	mov	r8, r4
 80078a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80078a4:	46a1      	mov	r9, r4
 80078a6:	9a05      	ldr	r2, [sp, #20]
 80078a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007a00 <_strtod_l+0x598>
 80078ac:	2322      	movs	r3, #34	@ 0x22
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	f04f 0a00 	mov.w	sl, #0
 80078b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f43f ae0f 	beq.w	80074da <_strtod_l+0x72>
 80078bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80078be:	9805      	ldr	r0, [sp, #20]
 80078c0:	f7ff f942 	bl	8006b48 <_Bfree>
 80078c4:	9805      	ldr	r0, [sp, #20]
 80078c6:	4649      	mov	r1, r9
 80078c8:	f7ff f93e 	bl	8006b48 <_Bfree>
 80078cc:	9805      	ldr	r0, [sp, #20]
 80078ce:	4641      	mov	r1, r8
 80078d0:	f7ff f93a 	bl	8006b48 <_Bfree>
 80078d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078d6:	9805      	ldr	r0, [sp, #20]
 80078d8:	f7ff f936 	bl	8006b48 <_Bfree>
 80078dc:	9805      	ldr	r0, [sp, #20]
 80078de:	4621      	mov	r1, r4
 80078e0:	f7ff f932 	bl	8006b48 <_Bfree>
 80078e4:	e5f9      	b.n	80074da <_strtod_l+0x72>
 80078e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80078ec:	4293      	cmp	r3, r2
 80078ee:	dbbc      	blt.n	800786a <_strtod_l+0x402>
 80078f0:	4c41      	ldr	r4, [pc, #260]	@ (80079f8 <_strtod_l+0x590>)
 80078f2:	f1c5 050f 	rsb	r5, r5, #15
 80078f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078fa:	4652      	mov	r2, sl
 80078fc:	465b      	mov	r3, fp
 80078fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007902:	f7f8 fe79 	bl	80005f8 <__aeabi_dmul>
 8007906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007908:	1b5d      	subs	r5, r3, r5
 800790a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800790e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007912:	e78f      	b.n	8007834 <_strtod_l+0x3cc>
 8007914:	3316      	adds	r3, #22
 8007916:	dba8      	blt.n	800786a <_strtod_l+0x402>
 8007918:	4b37      	ldr	r3, [pc, #220]	@ (80079f8 <_strtod_l+0x590>)
 800791a:	eba9 0808 	sub.w	r8, r9, r8
 800791e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007922:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007926:	4650      	mov	r0, sl
 8007928:	4659      	mov	r1, fp
 800792a:	f7f8 ff8f 	bl	800084c <__aeabi_ddiv>
 800792e:	e783      	b.n	8007838 <_strtod_l+0x3d0>
 8007930:	4b32      	ldr	r3, [pc, #200]	@ (80079fc <_strtod_l+0x594>)
 8007932:	9308      	str	r3, [sp, #32]
 8007934:	2300      	movs	r3, #0
 8007936:	1124      	asrs	r4, r4, #4
 8007938:	4650      	mov	r0, sl
 800793a:	4659      	mov	r1, fp
 800793c:	461e      	mov	r6, r3
 800793e:	2c01      	cmp	r4, #1
 8007940:	dc21      	bgt.n	8007986 <_strtod_l+0x51e>
 8007942:	b10b      	cbz	r3, 8007948 <_strtod_l+0x4e0>
 8007944:	4682      	mov	sl, r0
 8007946:	468b      	mov	fp, r1
 8007948:	492c      	ldr	r1, [pc, #176]	@ (80079fc <_strtod_l+0x594>)
 800794a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800794e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007952:	4652      	mov	r2, sl
 8007954:	465b      	mov	r3, fp
 8007956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800795a:	f7f8 fe4d 	bl	80005f8 <__aeabi_dmul>
 800795e:	4b28      	ldr	r3, [pc, #160]	@ (8007a00 <_strtod_l+0x598>)
 8007960:	460a      	mov	r2, r1
 8007962:	400b      	ands	r3, r1
 8007964:	4927      	ldr	r1, [pc, #156]	@ (8007a04 <_strtod_l+0x59c>)
 8007966:	428b      	cmp	r3, r1
 8007968:	4682      	mov	sl, r0
 800796a:	d898      	bhi.n	800789e <_strtod_l+0x436>
 800796c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007970:	428b      	cmp	r3, r1
 8007972:	bf86      	itte	hi
 8007974:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007a08 <_strtod_l+0x5a0>
 8007978:	f04f 3aff 	movhi.w	sl, #4294967295
 800797c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007980:	2300      	movs	r3, #0
 8007982:	9308      	str	r3, [sp, #32]
 8007984:	e07a      	b.n	8007a7c <_strtod_l+0x614>
 8007986:	07e2      	lsls	r2, r4, #31
 8007988:	d505      	bpl.n	8007996 <_strtod_l+0x52e>
 800798a:	9b08      	ldr	r3, [sp, #32]
 800798c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007990:	f7f8 fe32 	bl	80005f8 <__aeabi_dmul>
 8007994:	2301      	movs	r3, #1
 8007996:	9a08      	ldr	r2, [sp, #32]
 8007998:	3208      	adds	r2, #8
 800799a:	3601      	adds	r6, #1
 800799c:	1064      	asrs	r4, r4, #1
 800799e:	9208      	str	r2, [sp, #32]
 80079a0:	e7cd      	b.n	800793e <_strtod_l+0x4d6>
 80079a2:	d0ed      	beq.n	8007980 <_strtod_l+0x518>
 80079a4:	4264      	negs	r4, r4
 80079a6:	f014 020f 	ands.w	r2, r4, #15
 80079aa:	d00a      	beq.n	80079c2 <_strtod_l+0x55a>
 80079ac:	4b12      	ldr	r3, [pc, #72]	@ (80079f8 <_strtod_l+0x590>)
 80079ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079b2:	4650      	mov	r0, sl
 80079b4:	4659      	mov	r1, fp
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f7f8 ff47 	bl	800084c <__aeabi_ddiv>
 80079be:	4682      	mov	sl, r0
 80079c0:	468b      	mov	fp, r1
 80079c2:	1124      	asrs	r4, r4, #4
 80079c4:	d0dc      	beq.n	8007980 <_strtod_l+0x518>
 80079c6:	2c1f      	cmp	r4, #31
 80079c8:	dd20      	ble.n	8007a0c <_strtod_l+0x5a4>
 80079ca:	2400      	movs	r4, #0
 80079cc:	46a0      	mov	r8, r4
 80079ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80079d0:	46a1      	mov	r9, r4
 80079d2:	9a05      	ldr	r2, [sp, #20]
 80079d4:	2322      	movs	r3, #34	@ 0x22
 80079d6:	f04f 0a00 	mov.w	sl, #0
 80079da:	f04f 0b00 	mov.w	fp, #0
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	e768      	b.n	80078b4 <_strtod_l+0x44c>
 80079e2:	bf00      	nop
 80079e4:	08009349 	.word	0x08009349
 80079e8:	0800955c 	.word	0x0800955c
 80079ec:	08009341 	.word	0x08009341
 80079f0:	08009378 	.word	0x08009378
 80079f4:	08009705 	.word	0x08009705
 80079f8:	08009490 	.word	0x08009490
 80079fc:	08009468 	.word	0x08009468
 8007a00:	7ff00000 	.word	0x7ff00000
 8007a04:	7ca00000 	.word	0x7ca00000
 8007a08:	7fefffff 	.word	0x7fefffff
 8007a0c:	f014 0310 	ands.w	r3, r4, #16
 8007a10:	bf18      	it	ne
 8007a12:	236a      	movne	r3, #106	@ 0x6a
 8007a14:	4ea9      	ldr	r6, [pc, #676]	@ (8007cbc <_strtod_l+0x854>)
 8007a16:	9308      	str	r3, [sp, #32]
 8007a18:	4650      	mov	r0, sl
 8007a1a:	4659      	mov	r1, fp
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	07e2      	lsls	r2, r4, #31
 8007a20:	d504      	bpl.n	8007a2c <_strtod_l+0x5c4>
 8007a22:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007a26:	f7f8 fde7 	bl	80005f8 <__aeabi_dmul>
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	1064      	asrs	r4, r4, #1
 8007a2e:	f106 0608 	add.w	r6, r6, #8
 8007a32:	d1f4      	bne.n	8007a1e <_strtod_l+0x5b6>
 8007a34:	b10b      	cbz	r3, 8007a3a <_strtod_l+0x5d2>
 8007a36:	4682      	mov	sl, r0
 8007a38:	468b      	mov	fp, r1
 8007a3a:	9b08      	ldr	r3, [sp, #32]
 8007a3c:	b1b3      	cbz	r3, 8007a6c <_strtod_l+0x604>
 8007a3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007a42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	4659      	mov	r1, fp
 8007a4a:	dd0f      	ble.n	8007a6c <_strtod_l+0x604>
 8007a4c:	2b1f      	cmp	r3, #31
 8007a4e:	dd55      	ble.n	8007afc <_strtod_l+0x694>
 8007a50:	2b34      	cmp	r3, #52	@ 0x34
 8007a52:	bfde      	ittt	le
 8007a54:	f04f 33ff 	movle.w	r3, #4294967295
 8007a58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007a5c:	4093      	lslle	r3, r2
 8007a5e:	f04f 0a00 	mov.w	sl, #0
 8007a62:	bfcc      	ite	gt
 8007a64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007a68:	ea03 0b01 	andle.w	fp, r3, r1
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	2300      	movs	r3, #0
 8007a70:	4650      	mov	r0, sl
 8007a72:	4659      	mov	r1, fp
 8007a74:	f7f9 f828 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a78:	2800      	cmp	r0, #0
 8007a7a:	d1a6      	bne.n	80079ca <_strtod_l+0x562>
 8007a7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a7e:	9300      	str	r3, [sp, #0]
 8007a80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007a82:	9805      	ldr	r0, [sp, #20]
 8007a84:	462b      	mov	r3, r5
 8007a86:	463a      	mov	r2, r7
 8007a88:	f7ff f8c6 	bl	8006c18 <__s2b>
 8007a8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8007a8e:	2800      	cmp	r0, #0
 8007a90:	f43f af05 	beq.w	800789e <_strtod_l+0x436>
 8007a94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a96:	2a00      	cmp	r2, #0
 8007a98:	eba9 0308 	sub.w	r3, r9, r8
 8007a9c:	bfa8      	it	ge
 8007a9e:	2300      	movge	r3, #0
 8007aa0:	9312      	str	r3, [sp, #72]	@ 0x48
 8007aa2:	2400      	movs	r4, #0
 8007aa4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007aa8:	9316      	str	r3, [sp, #88]	@ 0x58
 8007aaa:	46a0      	mov	r8, r4
 8007aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007aae:	9805      	ldr	r0, [sp, #20]
 8007ab0:	6859      	ldr	r1, [r3, #4]
 8007ab2:	f7ff f809 	bl	8006ac8 <_Balloc>
 8007ab6:	4681      	mov	r9, r0
 8007ab8:	2800      	cmp	r0, #0
 8007aba:	f43f aef4 	beq.w	80078a6 <_strtod_l+0x43e>
 8007abe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007ac0:	691a      	ldr	r2, [r3, #16]
 8007ac2:	3202      	adds	r2, #2
 8007ac4:	f103 010c 	add.w	r1, r3, #12
 8007ac8:	0092      	lsls	r2, r2, #2
 8007aca:	300c      	adds	r0, #12
 8007acc:	f000 fd72 	bl	80085b4 <memcpy>
 8007ad0:	ec4b ab10 	vmov	d0, sl, fp
 8007ad4:	9805      	ldr	r0, [sp, #20]
 8007ad6:	aa1c      	add	r2, sp, #112	@ 0x70
 8007ad8:	a91b      	add	r1, sp, #108	@ 0x6c
 8007ada:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007ade:	f7ff fbd7 	bl	8007290 <__d2b>
 8007ae2:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ae4:	2800      	cmp	r0, #0
 8007ae6:	f43f aede 	beq.w	80078a6 <_strtod_l+0x43e>
 8007aea:	9805      	ldr	r0, [sp, #20]
 8007aec:	2101      	movs	r1, #1
 8007aee:	f7ff f929 	bl	8006d44 <__i2b>
 8007af2:	4680      	mov	r8, r0
 8007af4:	b948      	cbnz	r0, 8007b0a <_strtod_l+0x6a2>
 8007af6:	f04f 0800 	mov.w	r8, #0
 8007afa:	e6d4      	b.n	80078a6 <_strtod_l+0x43e>
 8007afc:	f04f 32ff 	mov.w	r2, #4294967295
 8007b00:	fa02 f303 	lsl.w	r3, r2, r3
 8007b04:	ea03 0a0a 	and.w	sl, r3, sl
 8007b08:	e7b0      	b.n	8007a6c <_strtod_l+0x604>
 8007b0a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007b0c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007b0e:	2d00      	cmp	r5, #0
 8007b10:	bfab      	itete	ge
 8007b12:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007b14:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007b16:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007b18:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007b1a:	bfac      	ite	ge
 8007b1c:	18ef      	addge	r7, r5, r3
 8007b1e:	1b5e      	sublt	r6, r3, r5
 8007b20:	9b08      	ldr	r3, [sp, #32]
 8007b22:	1aed      	subs	r5, r5, r3
 8007b24:	4415      	add	r5, r2
 8007b26:	4b66      	ldr	r3, [pc, #408]	@ (8007cc0 <_strtod_l+0x858>)
 8007b28:	3d01      	subs	r5, #1
 8007b2a:	429d      	cmp	r5, r3
 8007b2c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007b30:	da50      	bge.n	8007bd4 <_strtod_l+0x76c>
 8007b32:	1b5b      	subs	r3, r3, r5
 8007b34:	2b1f      	cmp	r3, #31
 8007b36:	eba2 0203 	sub.w	r2, r2, r3
 8007b3a:	f04f 0101 	mov.w	r1, #1
 8007b3e:	dc3d      	bgt.n	8007bbc <_strtod_l+0x754>
 8007b40:	fa01 f303 	lsl.w	r3, r1, r3
 8007b44:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b46:	2300      	movs	r3, #0
 8007b48:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b4a:	18bd      	adds	r5, r7, r2
 8007b4c:	9b08      	ldr	r3, [sp, #32]
 8007b4e:	42af      	cmp	r7, r5
 8007b50:	4416      	add	r6, r2
 8007b52:	441e      	add	r6, r3
 8007b54:	463b      	mov	r3, r7
 8007b56:	bfa8      	it	ge
 8007b58:	462b      	movge	r3, r5
 8007b5a:	42b3      	cmp	r3, r6
 8007b5c:	bfa8      	it	ge
 8007b5e:	4633      	movge	r3, r6
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	bfc2      	ittt	gt
 8007b64:	1aed      	subgt	r5, r5, r3
 8007b66:	1af6      	subgt	r6, r6, r3
 8007b68:	1aff      	subgt	r7, r7, r3
 8007b6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	dd16      	ble.n	8007b9e <_strtod_l+0x736>
 8007b70:	4641      	mov	r1, r8
 8007b72:	9805      	ldr	r0, [sp, #20]
 8007b74:	461a      	mov	r2, r3
 8007b76:	f7ff f9a5 	bl	8006ec4 <__pow5mult>
 8007b7a:	4680      	mov	r8, r0
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	d0ba      	beq.n	8007af6 <_strtod_l+0x68e>
 8007b80:	4601      	mov	r1, r0
 8007b82:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b84:	9805      	ldr	r0, [sp, #20]
 8007b86:	f7ff f8f3 	bl	8006d70 <__multiply>
 8007b8a:	900e      	str	r0, [sp, #56]	@ 0x38
 8007b8c:	2800      	cmp	r0, #0
 8007b8e:	f43f ae8a 	beq.w	80078a6 <_strtod_l+0x43e>
 8007b92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b94:	9805      	ldr	r0, [sp, #20]
 8007b96:	f7fe ffd7 	bl	8006b48 <_Bfree>
 8007b9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b9e:	2d00      	cmp	r5, #0
 8007ba0:	dc1d      	bgt.n	8007bde <_strtod_l+0x776>
 8007ba2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	dd23      	ble.n	8007bf0 <_strtod_l+0x788>
 8007ba8:	4649      	mov	r1, r9
 8007baa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007bac:	9805      	ldr	r0, [sp, #20]
 8007bae:	f7ff f989 	bl	8006ec4 <__pow5mult>
 8007bb2:	4681      	mov	r9, r0
 8007bb4:	b9e0      	cbnz	r0, 8007bf0 <_strtod_l+0x788>
 8007bb6:	f04f 0900 	mov.w	r9, #0
 8007bba:	e674      	b.n	80078a6 <_strtod_l+0x43e>
 8007bbc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007bc0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007bc4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007bc8:	35e2      	adds	r5, #226	@ 0xe2
 8007bca:	fa01 f305 	lsl.w	r3, r1, r5
 8007bce:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bd0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007bd2:	e7ba      	b.n	8007b4a <_strtod_l+0x6e2>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007bd8:	2301      	movs	r3, #1
 8007bda:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007bdc:	e7b5      	b.n	8007b4a <_strtod_l+0x6e2>
 8007bde:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007be0:	9805      	ldr	r0, [sp, #20]
 8007be2:	462a      	mov	r2, r5
 8007be4:	f7ff f9c8 	bl	8006f78 <__lshift>
 8007be8:	901a      	str	r0, [sp, #104]	@ 0x68
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d1d9      	bne.n	8007ba2 <_strtod_l+0x73a>
 8007bee:	e65a      	b.n	80078a6 <_strtod_l+0x43e>
 8007bf0:	2e00      	cmp	r6, #0
 8007bf2:	dd07      	ble.n	8007c04 <_strtod_l+0x79c>
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	9805      	ldr	r0, [sp, #20]
 8007bf8:	4632      	mov	r2, r6
 8007bfa:	f7ff f9bd 	bl	8006f78 <__lshift>
 8007bfe:	4681      	mov	r9, r0
 8007c00:	2800      	cmp	r0, #0
 8007c02:	d0d8      	beq.n	8007bb6 <_strtod_l+0x74e>
 8007c04:	2f00      	cmp	r7, #0
 8007c06:	dd08      	ble.n	8007c1a <_strtod_l+0x7b2>
 8007c08:	4641      	mov	r1, r8
 8007c0a:	9805      	ldr	r0, [sp, #20]
 8007c0c:	463a      	mov	r2, r7
 8007c0e:	f7ff f9b3 	bl	8006f78 <__lshift>
 8007c12:	4680      	mov	r8, r0
 8007c14:	2800      	cmp	r0, #0
 8007c16:	f43f ae46 	beq.w	80078a6 <_strtod_l+0x43e>
 8007c1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c1c:	9805      	ldr	r0, [sp, #20]
 8007c1e:	464a      	mov	r2, r9
 8007c20:	f7ff fa32 	bl	8007088 <__mdiff>
 8007c24:	4604      	mov	r4, r0
 8007c26:	2800      	cmp	r0, #0
 8007c28:	f43f ae3d 	beq.w	80078a6 <_strtod_l+0x43e>
 8007c2c:	68c3      	ldr	r3, [r0, #12]
 8007c2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007c30:	2300      	movs	r3, #0
 8007c32:	60c3      	str	r3, [r0, #12]
 8007c34:	4641      	mov	r1, r8
 8007c36:	f7ff fa0b 	bl	8007050 <__mcmp>
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	da46      	bge.n	8007ccc <_strtod_l+0x864>
 8007c3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c40:	ea53 030a 	orrs.w	r3, r3, sl
 8007c44:	d16c      	bne.n	8007d20 <_strtod_l+0x8b8>
 8007c46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d168      	bne.n	8007d20 <_strtod_l+0x8b8>
 8007c4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c52:	0d1b      	lsrs	r3, r3, #20
 8007c54:	051b      	lsls	r3, r3, #20
 8007c56:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c5a:	d961      	bls.n	8007d20 <_strtod_l+0x8b8>
 8007c5c:	6963      	ldr	r3, [r4, #20]
 8007c5e:	b913      	cbnz	r3, 8007c66 <_strtod_l+0x7fe>
 8007c60:	6923      	ldr	r3, [r4, #16]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	dd5c      	ble.n	8007d20 <_strtod_l+0x8b8>
 8007c66:	4621      	mov	r1, r4
 8007c68:	2201      	movs	r2, #1
 8007c6a:	9805      	ldr	r0, [sp, #20]
 8007c6c:	f7ff f984 	bl	8006f78 <__lshift>
 8007c70:	4641      	mov	r1, r8
 8007c72:	4604      	mov	r4, r0
 8007c74:	f7ff f9ec 	bl	8007050 <__mcmp>
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	dd51      	ble.n	8007d20 <_strtod_l+0x8b8>
 8007c7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c80:	9a08      	ldr	r2, [sp, #32]
 8007c82:	0d1b      	lsrs	r3, r3, #20
 8007c84:	051b      	lsls	r3, r3, #20
 8007c86:	2a00      	cmp	r2, #0
 8007c88:	d06b      	beq.n	8007d62 <_strtod_l+0x8fa>
 8007c8a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c8e:	d868      	bhi.n	8007d62 <_strtod_l+0x8fa>
 8007c90:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007c94:	f67f ae9d 	bls.w	80079d2 <_strtod_l+0x56a>
 8007c98:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc4 <_strtod_l+0x85c>)
 8007c9a:	4650      	mov	r0, sl
 8007c9c:	4659      	mov	r1, fp
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	f7f8 fcaa 	bl	80005f8 <__aeabi_dmul>
 8007ca4:	4b08      	ldr	r3, [pc, #32]	@ (8007cc8 <_strtod_l+0x860>)
 8007ca6:	400b      	ands	r3, r1
 8007ca8:	4682      	mov	sl, r0
 8007caa:	468b      	mov	fp, r1
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f47f ae05 	bne.w	80078bc <_strtod_l+0x454>
 8007cb2:	9a05      	ldr	r2, [sp, #20]
 8007cb4:	2322      	movs	r3, #34	@ 0x22
 8007cb6:	6013      	str	r3, [r2, #0]
 8007cb8:	e600      	b.n	80078bc <_strtod_l+0x454>
 8007cba:	bf00      	nop
 8007cbc:	08009588 	.word	0x08009588
 8007cc0:	fffffc02 	.word	0xfffffc02
 8007cc4:	39500000 	.word	0x39500000
 8007cc8:	7ff00000 	.word	0x7ff00000
 8007ccc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007cd0:	d165      	bne.n	8007d9e <_strtod_l+0x936>
 8007cd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007cd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007cd8:	b35a      	cbz	r2, 8007d32 <_strtod_l+0x8ca>
 8007cda:	4a9f      	ldr	r2, [pc, #636]	@ (8007f58 <_strtod_l+0xaf0>)
 8007cdc:	4293      	cmp	r3, r2
 8007cde:	d12b      	bne.n	8007d38 <_strtod_l+0x8d0>
 8007ce0:	9b08      	ldr	r3, [sp, #32]
 8007ce2:	4651      	mov	r1, sl
 8007ce4:	b303      	cbz	r3, 8007d28 <_strtod_l+0x8c0>
 8007ce6:	4b9d      	ldr	r3, [pc, #628]	@ (8007f5c <_strtod_l+0xaf4>)
 8007ce8:	465a      	mov	r2, fp
 8007cea:	4013      	ands	r3, r2
 8007cec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cf4:	d81b      	bhi.n	8007d2e <_strtod_l+0x8c6>
 8007cf6:	0d1b      	lsrs	r3, r3, #20
 8007cf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007d00:	4299      	cmp	r1, r3
 8007d02:	d119      	bne.n	8007d38 <_strtod_l+0x8d0>
 8007d04:	4b96      	ldr	r3, [pc, #600]	@ (8007f60 <_strtod_l+0xaf8>)
 8007d06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d102      	bne.n	8007d12 <_strtod_l+0x8aa>
 8007d0c:	3101      	adds	r1, #1
 8007d0e:	f43f adca 	beq.w	80078a6 <_strtod_l+0x43e>
 8007d12:	4b92      	ldr	r3, [pc, #584]	@ (8007f5c <_strtod_l+0xaf4>)
 8007d14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d16:	401a      	ands	r2, r3
 8007d18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007d1c:	f04f 0a00 	mov.w	sl, #0
 8007d20:	9b08      	ldr	r3, [sp, #32]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d1b8      	bne.n	8007c98 <_strtod_l+0x830>
 8007d26:	e5c9      	b.n	80078bc <_strtod_l+0x454>
 8007d28:	f04f 33ff 	mov.w	r3, #4294967295
 8007d2c:	e7e8      	b.n	8007d00 <_strtod_l+0x898>
 8007d2e:	4613      	mov	r3, r2
 8007d30:	e7e6      	b.n	8007d00 <_strtod_l+0x898>
 8007d32:	ea53 030a 	orrs.w	r3, r3, sl
 8007d36:	d0a1      	beq.n	8007c7c <_strtod_l+0x814>
 8007d38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d3a:	b1db      	cbz	r3, 8007d74 <_strtod_l+0x90c>
 8007d3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007d3e:	4213      	tst	r3, r2
 8007d40:	d0ee      	beq.n	8007d20 <_strtod_l+0x8b8>
 8007d42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d44:	9a08      	ldr	r2, [sp, #32]
 8007d46:	4650      	mov	r0, sl
 8007d48:	4659      	mov	r1, fp
 8007d4a:	b1bb      	cbz	r3, 8007d7c <_strtod_l+0x914>
 8007d4c:	f7ff fb6e 	bl	800742c <sulp>
 8007d50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d54:	ec53 2b10 	vmov	r2, r3, d0
 8007d58:	f7f8 fa98 	bl	800028c <__adddf3>
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	468b      	mov	fp, r1
 8007d60:	e7de      	b.n	8007d20 <_strtod_l+0x8b8>
 8007d62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007d66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d6e:	f04f 3aff 	mov.w	sl, #4294967295
 8007d72:	e7d5      	b.n	8007d20 <_strtod_l+0x8b8>
 8007d74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d76:	ea13 0f0a 	tst.w	r3, sl
 8007d7a:	e7e1      	b.n	8007d40 <_strtod_l+0x8d8>
 8007d7c:	f7ff fb56 	bl	800742c <sulp>
 8007d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d84:	ec53 2b10 	vmov	r2, r3, d0
 8007d88:	f7f8 fa7e 	bl	8000288 <__aeabi_dsub>
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	2300      	movs	r3, #0
 8007d90:	4682      	mov	sl, r0
 8007d92:	468b      	mov	fp, r1
 8007d94:	f7f8 fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d0c1      	beq.n	8007d20 <_strtod_l+0x8b8>
 8007d9c:	e619      	b.n	80079d2 <_strtod_l+0x56a>
 8007d9e:	4641      	mov	r1, r8
 8007da0:	4620      	mov	r0, r4
 8007da2:	f7ff facd 	bl	8007340 <__ratio>
 8007da6:	ec57 6b10 	vmov	r6, r7, d0
 8007daa:	2200      	movs	r2, #0
 8007dac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007db0:	4630      	mov	r0, r6
 8007db2:	4639      	mov	r1, r7
 8007db4:	f7f8 fe9c 	bl	8000af0 <__aeabi_dcmple>
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d06f      	beq.n	8007e9c <_strtod_l+0xa34>
 8007dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d17a      	bne.n	8007eb8 <_strtod_l+0xa50>
 8007dc2:	f1ba 0f00 	cmp.w	sl, #0
 8007dc6:	d158      	bne.n	8007e7a <_strtod_l+0xa12>
 8007dc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d15a      	bne.n	8007e88 <_strtod_l+0xa20>
 8007dd2:	4b64      	ldr	r3, [pc, #400]	@ (8007f64 <_strtod_l+0xafc>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	4639      	mov	r1, r7
 8007dda:	f7f8 fe7f 	bl	8000adc <__aeabi_dcmplt>
 8007dde:	2800      	cmp	r0, #0
 8007de0:	d159      	bne.n	8007e96 <_strtod_l+0xa2e>
 8007de2:	4630      	mov	r0, r6
 8007de4:	4639      	mov	r1, r7
 8007de6:	4b60      	ldr	r3, [pc, #384]	@ (8007f68 <_strtod_l+0xb00>)
 8007de8:	2200      	movs	r2, #0
 8007dea:	f7f8 fc05 	bl	80005f8 <__aeabi_dmul>
 8007dee:	4606      	mov	r6, r0
 8007df0:	460f      	mov	r7, r1
 8007df2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007df6:	9606      	str	r6, [sp, #24]
 8007df8:	9307      	str	r3, [sp, #28]
 8007dfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dfe:	4d57      	ldr	r5, [pc, #348]	@ (8007f5c <_strtod_l+0xaf4>)
 8007e00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007e04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e06:	401d      	ands	r5, r3
 8007e08:	4b58      	ldr	r3, [pc, #352]	@ (8007f6c <_strtod_l+0xb04>)
 8007e0a:	429d      	cmp	r5, r3
 8007e0c:	f040 80b2 	bne.w	8007f74 <_strtod_l+0xb0c>
 8007e10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007e16:	ec4b ab10 	vmov	d0, sl, fp
 8007e1a:	f7ff f9c9 	bl	80071b0 <__ulp>
 8007e1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007e22:	ec51 0b10 	vmov	r0, r1, d0
 8007e26:	f7f8 fbe7 	bl	80005f8 <__aeabi_dmul>
 8007e2a:	4652      	mov	r2, sl
 8007e2c:	465b      	mov	r3, fp
 8007e2e:	f7f8 fa2d 	bl	800028c <__adddf3>
 8007e32:	460b      	mov	r3, r1
 8007e34:	4949      	ldr	r1, [pc, #292]	@ (8007f5c <_strtod_l+0xaf4>)
 8007e36:	4a4e      	ldr	r2, [pc, #312]	@ (8007f70 <_strtod_l+0xb08>)
 8007e38:	4019      	ands	r1, r3
 8007e3a:	4291      	cmp	r1, r2
 8007e3c:	4682      	mov	sl, r0
 8007e3e:	d942      	bls.n	8007ec6 <_strtod_l+0xa5e>
 8007e40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007e42:	4b47      	ldr	r3, [pc, #284]	@ (8007f60 <_strtod_l+0xaf8>)
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d103      	bne.n	8007e50 <_strtod_l+0x9e8>
 8007e48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	f43f ad2b 	beq.w	80078a6 <_strtod_l+0x43e>
 8007e50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007f60 <_strtod_l+0xaf8>
 8007e54:	f04f 3aff 	mov.w	sl, #4294967295
 8007e58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e5a:	9805      	ldr	r0, [sp, #20]
 8007e5c:	f7fe fe74 	bl	8006b48 <_Bfree>
 8007e60:	9805      	ldr	r0, [sp, #20]
 8007e62:	4649      	mov	r1, r9
 8007e64:	f7fe fe70 	bl	8006b48 <_Bfree>
 8007e68:	9805      	ldr	r0, [sp, #20]
 8007e6a:	4641      	mov	r1, r8
 8007e6c:	f7fe fe6c 	bl	8006b48 <_Bfree>
 8007e70:	9805      	ldr	r0, [sp, #20]
 8007e72:	4621      	mov	r1, r4
 8007e74:	f7fe fe68 	bl	8006b48 <_Bfree>
 8007e78:	e618      	b.n	8007aac <_strtod_l+0x644>
 8007e7a:	f1ba 0f01 	cmp.w	sl, #1
 8007e7e:	d103      	bne.n	8007e88 <_strtod_l+0xa20>
 8007e80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f43f ada5 	beq.w	80079d2 <_strtod_l+0x56a>
 8007e88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007f38 <_strtod_l+0xad0>
 8007e8c:	4f35      	ldr	r7, [pc, #212]	@ (8007f64 <_strtod_l+0xafc>)
 8007e8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007e92:	2600      	movs	r6, #0
 8007e94:	e7b1      	b.n	8007dfa <_strtod_l+0x992>
 8007e96:	4f34      	ldr	r7, [pc, #208]	@ (8007f68 <_strtod_l+0xb00>)
 8007e98:	2600      	movs	r6, #0
 8007e9a:	e7aa      	b.n	8007df2 <_strtod_l+0x98a>
 8007e9c:	4b32      	ldr	r3, [pc, #200]	@ (8007f68 <_strtod_l+0xb00>)
 8007e9e:	4630      	mov	r0, r6
 8007ea0:	4639      	mov	r1, r7
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f7f8 fba8 	bl	80005f8 <__aeabi_dmul>
 8007ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eaa:	4606      	mov	r6, r0
 8007eac:	460f      	mov	r7, r1
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d09f      	beq.n	8007df2 <_strtod_l+0x98a>
 8007eb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007eb6:	e7a0      	b.n	8007dfa <_strtod_l+0x992>
 8007eb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007f40 <_strtod_l+0xad8>
 8007ebc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ec0:	ec57 6b17 	vmov	r6, r7, d7
 8007ec4:	e799      	b.n	8007dfa <_strtod_l+0x992>
 8007ec6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007eca:	9b08      	ldr	r3, [sp, #32]
 8007ecc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d1c1      	bne.n	8007e58 <_strtod_l+0x9f0>
 8007ed4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007ed8:	0d1b      	lsrs	r3, r3, #20
 8007eda:	051b      	lsls	r3, r3, #20
 8007edc:	429d      	cmp	r5, r3
 8007ede:	d1bb      	bne.n	8007e58 <_strtod_l+0x9f0>
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	4639      	mov	r1, r7
 8007ee4:	f7f8 fed0 	bl	8000c88 <__aeabi_d2lz>
 8007ee8:	f7f8 fb58 	bl	800059c <__aeabi_l2d>
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4630      	mov	r0, r6
 8007ef2:	4639      	mov	r1, r7
 8007ef4:	f7f8 f9c8 	bl	8000288 <__aeabi_dsub>
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4602      	mov	r2, r0
 8007efc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007f00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f06:	ea46 060a 	orr.w	r6, r6, sl
 8007f0a:	431e      	orrs	r6, r3
 8007f0c:	d06f      	beq.n	8007fee <_strtod_l+0xb86>
 8007f0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007f48 <_strtod_l+0xae0>)
 8007f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f14:	f7f8 fde2 	bl	8000adc <__aeabi_dcmplt>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	f47f accf 	bne.w	80078bc <_strtod_l+0x454>
 8007f1e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007f50 <_strtod_l+0xae8>)
 8007f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007f28:	f7f8 fdf6 	bl	8000b18 <__aeabi_dcmpgt>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d093      	beq.n	8007e58 <_strtod_l+0x9f0>
 8007f30:	e4c4      	b.n	80078bc <_strtod_l+0x454>
 8007f32:	bf00      	nop
 8007f34:	f3af 8000 	nop.w
 8007f38:	00000000 	.word	0x00000000
 8007f3c:	bff00000 	.word	0xbff00000
 8007f40:	00000000 	.word	0x00000000
 8007f44:	3ff00000 	.word	0x3ff00000
 8007f48:	94a03595 	.word	0x94a03595
 8007f4c:	3fdfffff 	.word	0x3fdfffff
 8007f50:	35afe535 	.word	0x35afe535
 8007f54:	3fe00000 	.word	0x3fe00000
 8007f58:	000fffff 	.word	0x000fffff
 8007f5c:	7ff00000 	.word	0x7ff00000
 8007f60:	7fefffff 	.word	0x7fefffff
 8007f64:	3ff00000 	.word	0x3ff00000
 8007f68:	3fe00000 	.word	0x3fe00000
 8007f6c:	7fe00000 	.word	0x7fe00000
 8007f70:	7c9fffff 	.word	0x7c9fffff
 8007f74:	9b08      	ldr	r3, [sp, #32]
 8007f76:	b323      	cbz	r3, 8007fc2 <_strtod_l+0xb5a>
 8007f78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007f7c:	d821      	bhi.n	8007fc2 <_strtod_l+0xb5a>
 8007f7e:	a328      	add	r3, pc, #160	@ (adr r3, 8008020 <_strtod_l+0xbb8>)
 8007f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f84:	4630      	mov	r0, r6
 8007f86:	4639      	mov	r1, r7
 8007f88:	f7f8 fdb2 	bl	8000af0 <__aeabi_dcmple>
 8007f8c:	b1a0      	cbz	r0, 8007fb8 <_strtod_l+0xb50>
 8007f8e:	4639      	mov	r1, r7
 8007f90:	4630      	mov	r0, r6
 8007f92:	f7f8 fe09 	bl	8000ba8 <__aeabi_d2uiz>
 8007f96:	2801      	cmp	r0, #1
 8007f98:	bf38      	it	cc
 8007f9a:	2001      	movcc	r0, #1
 8007f9c:	f7f8 fab2 	bl	8000504 <__aeabi_ui2d>
 8007fa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fa2:	4606      	mov	r6, r0
 8007fa4:	460f      	mov	r7, r1
 8007fa6:	b9fb      	cbnz	r3, 8007fe8 <_strtod_l+0xb80>
 8007fa8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007fac:	9014      	str	r0, [sp, #80]	@ 0x50
 8007fae:	9315      	str	r3, [sp, #84]	@ 0x54
 8007fb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007fb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007fb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007fba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007fbe:	1b5b      	subs	r3, r3, r5
 8007fc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007fc2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007fc6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007fca:	f7ff f8f1 	bl	80071b0 <__ulp>
 8007fce:	4650      	mov	r0, sl
 8007fd0:	ec53 2b10 	vmov	r2, r3, d0
 8007fd4:	4659      	mov	r1, fp
 8007fd6:	f7f8 fb0f 	bl	80005f8 <__aeabi_dmul>
 8007fda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007fde:	f7f8 f955 	bl	800028c <__adddf3>
 8007fe2:	4682      	mov	sl, r0
 8007fe4:	468b      	mov	fp, r1
 8007fe6:	e770      	b.n	8007eca <_strtod_l+0xa62>
 8007fe8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007fec:	e7e0      	b.n	8007fb0 <_strtod_l+0xb48>
 8007fee:	a30e      	add	r3, pc, #56	@ (adr r3, 8008028 <_strtod_l+0xbc0>)
 8007ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ff4:	f7f8 fd72 	bl	8000adc <__aeabi_dcmplt>
 8007ff8:	e798      	b.n	8007f2c <_strtod_l+0xac4>
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ffe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008000:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	f7ff ba6d 	b.w	80074e2 <_strtod_l+0x7a>
 8008008:	2a65      	cmp	r2, #101	@ 0x65
 800800a:	f43f ab66 	beq.w	80076da <_strtod_l+0x272>
 800800e:	2a45      	cmp	r2, #69	@ 0x45
 8008010:	f43f ab63 	beq.w	80076da <_strtod_l+0x272>
 8008014:	2301      	movs	r3, #1
 8008016:	f7ff bb9e 	b.w	8007756 <_strtod_l+0x2ee>
 800801a:	bf00      	nop
 800801c:	f3af 8000 	nop.w
 8008020:	ffc00000 	.word	0xffc00000
 8008024:	41dfffff 	.word	0x41dfffff
 8008028:	94a03595 	.word	0x94a03595
 800802c:	3fcfffff 	.word	0x3fcfffff

08008030 <_strtod_r>:
 8008030:	4b01      	ldr	r3, [pc, #4]	@ (8008038 <_strtod_r+0x8>)
 8008032:	f7ff ba19 	b.w	8007468 <_strtod_l>
 8008036:	bf00      	nop
 8008038:	20000068 	.word	0x20000068

0800803c <_strtol_l.constprop.0>:
 800803c:	2b24      	cmp	r3, #36	@ 0x24
 800803e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008042:	4686      	mov	lr, r0
 8008044:	4690      	mov	r8, r2
 8008046:	d801      	bhi.n	800804c <_strtol_l.constprop.0+0x10>
 8008048:	2b01      	cmp	r3, #1
 800804a:	d106      	bne.n	800805a <_strtol_l.constprop.0+0x1e>
 800804c:	f7fd fdbc 	bl	8005bc8 <__errno>
 8008050:	2316      	movs	r3, #22
 8008052:	6003      	str	r3, [r0, #0]
 8008054:	2000      	movs	r0, #0
 8008056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800805a:	4834      	ldr	r0, [pc, #208]	@ (800812c <_strtol_l.constprop.0+0xf0>)
 800805c:	460d      	mov	r5, r1
 800805e:	462a      	mov	r2, r5
 8008060:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008064:	5d06      	ldrb	r6, [r0, r4]
 8008066:	f016 0608 	ands.w	r6, r6, #8
 800806a:	d1f8      	bne.n	800805e <_strtol_l.constprop.0+0x22>
 800806c:	2c2d      	cmp	r4, #45	@ 0x2d
 800806e:	d12d      	bne.n	80080cc <_strtol_l.constprop.0+0x90>
 8008070:	782c      	ldrb	r4, [r5, #0]
 8008072:	2601      	movs	r6, #1
 8008074:	1c95      	adds	r5, r2, #2
 8008076:	f033 0210 	bics.w	r2, r3, #16
 800807a:	d109      	bne.n	8008090 <_strtol_l.constprop.0+0x54>
 800807c:	2c30      	cmp	r4, #48	@ 0x30
 800807e:	d12a      	bne.n	80080d6 <_strtol_l.constprop.0+0x9a>
 8008080:	782a      	ldrb	r2, [r5, #0]
 8008082:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008086:	2a58      	cmp	r2, #88	@ 0x58
 8008088:	d125      	bne.n	80080d6 <_strtol_l.constprop.0+0x9a>
 800808a:	786c      	ldrb	r4, [r5, #1]
 800808c:	2310      	movs	r3, #16
 800808e:	3502      	adds	r5, #2
 8008090:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008094:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008098:	2200      	movs	r2, #0
 800809a:	fbbc f9f3 	udiv	r9, ip, r3
 800809e:	4610      	mov	r0, r2
 80080a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80080a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80080a8:	2f09      	cmp	r7, #9
 80080aa:	d81b      	bhi.n	80080e4 <_strtol_l.constprop.0+0xa8>
 80080ac:	463c      	mov	r4, r7
 80080ae:	42a3      	cmp	r3, r4
 80080b0:	dd27      	ble.n	8008102 <_strtol_l.constprop.0+0xc6>
 80080b2:	1c57      	adds	r7, r2, #1
 80080b4:	d007      	beq.n	80080c6 <_strtol_l.constprop.0+0x8a>
 80080b6:	4581      	cmp	r9, r0
 80080b8:	d320      	bcc.n	80080fc <_strtol_l.constprop.0+0xc0>
 80080ba:	d101      	bne.n	80080c0 <_strtol_l.constprop.0+0x84>
 80080bc:	45a2      	cmp	sl, r4
 80080be:	db1d      	blt.n	80080fc <_strtol_l.constprop.0+0xc0>
 80080c0:	fb00 4003 	mla	r0, r0, r3, r4
 80080c4:	2201      	movs	r2, #1
 80080c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80080ca:	e7eb      	b.n	80080a4 <_strtol_l.constprop.0+0x68>
 80080cc:	2c2b      	cmp	r4, #43	@ 0x2b
 80080ce:	bf04      	itt	eq
 80080d0:	782c      	ldrbeq	r4, [r5, #0]
 80080d2:	1c95      	addeq	r5, r2, #2
 80080d4:	e7cf      	b.n	8008076 <_strtol_l.constprop.0+0x3a>
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d1da      	bne.n	8008090 <_strtol_l.constprop.0+0x54>
 80080da:	2c30      	cmp	r4, #48	@ 0x30
 80080dc:	bf0c      	ite	eq
 80080de:	2308      	moveq	r3, #8
 80080e0:	230a      	movne	r3, #10
 80080e2:	e7d5      	b.n	8008090 <_strtol_l.constprop.0+0x54>
 80080e4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80080e8:	2f19      	cmp	r7, #25
 80080ea:	d801      	bhi.n	80080f0 <_strtol_l.constprop.0+0xb4>
 80080ec:	3c37      	subs	r4, #55	@ 0x37
 80080ee:	e7de      	b.n	80080ae <_strtol_l.constprop.0+0x72>
 80080f0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80080f4:	2f19      	cmp	r7, #25
 80080f6:	d804      	bhi.n	8008102 <_strtol_l.constprop.0+0xc6>
 80080f8:	3c57      	subs	r4, #87	@ 0x57
 80080fa:	e7d8      	b.n	80080ae <_strtol_l.constprop.0+0x72>
 80080fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008100:	e7e1      	b.n	80080c6 <_strtol_l.constprop.0+0x8a>
 8008102:	1c53      	adds	r3, r2, #1
 8008104:	d108      	bne.n	8008118 <_strtol_l.constprop.0+0xdc>
 8008106:	2322      	movs	r3, #34	@ 0x22
 8008108:	f8ce 3000 	str.w	r3, [lr]
 800810c:	4660      	mov	r0, ip
 800810e:	f1b8 0f00 	cmp.w	r8, #0
 8008112:	d0a0      	beq.n	8008056 <_strtol_l.constprop.0+0x1a>
 8008114:	1e69      	subs	r1, r5, #1
 8008116:	e006      	b.n	8008126 <_strtol_l.constprop.0+0xea>
 8008118:	b106      	cbz	r6, 800811c <_strtol_l.constprop.0+0xe0>
 800811a:	4240      	negs	r0, r0
 800811c:	f1b8 0f00 	cmp.w	r8, #0
 8008120:	d099      	beq.n	8008056 <_strtol_l.constprop.0+0x1a>
 8008122:	2a00      	cmp	r2, #0
 8008124:	d1f6      	bne.n	8008114 <_strtol_l.constprop.0+0xd8>
 8008126:	f8c8 1000 	str.w	r1, [r8]
 800812a:	e794      	b.n	8008056 <_strtol_l.constprop.0+0x1a>
 800812c:	080095b1 	.word	0x080095b1

08008130 <_strtol_r>:
 8008130:	f7ff bf84 	b.w	800803c <_strtol_l.constprop.0>

08008134 <__ssputs_r>:
 8008134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008138:	688e      	ldr	r6, [r1, #8]
 800813a:	461f      	mov	r7, r3
 800813c:	42be      	cmp	r6, r7
 800813e:	680b      	ldr	r3, [r1, #0]
 8008140:	4682      	mov	sl, r0
 8008142:	460c      	mov	r4, r1
 8008144:	4690      	mov	r8, r2
 8008146:	d82d      	bhi.n	80081a4 <__ssputs_r+0x70>
 8008148:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800814c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008150:	d026      	beq.n	80081a0 <__ssputs_r+0x6c>
 8008152:	6965      	ldr	r5, [r4, #20]
 8008154:	6909      	ldr	r1, [r1, #16]
 8008156:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800815a:	eba3 0901 	sub.w	r9, r3, r1
 800815e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008162:	1c7b      	adds	r3, r7, #1
 8008164:	444b      	add	r3, r9
 8008166:	106d      	asrs	r5, r5, #1
 8008168:	429d      	cmp	r5, r3
 800816a:	bf38      	it	cc
 800816c:	461d      	movcc	r5, r3
 800816e:	0553      	lsls	r3, r2, #21
 8008170:	d527      	bpl.n	80081c2 <__ssputs_r+0x8e>
 8008172:	4629      	mov	r1, r5
 8008174:	f7fe fc1c 	bl	80069b0 <_malloc_r>
 8008178:	4606      	mov	r6, r0
 800817a:	b360      	cbz	r0, 80081d6 <__ssputs_r+0xa2>
 800817c:	6921      	ldr	r1, [r4, #16]
 800817e:	464a      	mov	r2, r9
 8008180:	f000 fa18 	bl	80085b4 <memcpy>
 8008184:	89a3      	ldrh	r3, [r4, #12]
 8008186:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800818a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800818e:	81a3      	strh	r3, [r4, #12]
 8008190:	6126      	str	r6, [r4, #16]
 8008192:	6165      	str	r5, [r4, #20]
 8008194:	444e      	add	r6, r9
 8008196:	eba5 0509 	sub.w	r5, r5, r9
 800819a:	6026      	str	r6, [r4, #0]
 800819c:	60a5      	str	r5, [r4, #8]
 800819e:	463e      	mov	r6, r7
 80081a0:	42be      	cmp	r6, r7
 80081a2:	d900      	bls.n	80081a6 <__ssputs_r+0x72>
 80081a4:	463e      	mov	r6, r7
 80081a6:	6820      	ldr	r0, [r4, #0]
 80081a8:	4632      	mov	r2, r6
 80081aa:	4641      	mov	r1, r8
 80081ac:	f000 f9c6 	bl	800853c <memmove>
 80081b0:	68a3      	ldr	r3, [r4, #8]
 80081b2:	1b9b      	subs	r3, r3, r6
 80081b4:	60a3      	str	r3, [r4, #8]
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	4433      	add	r3, r6
 80081ba:	6023      	str	r3, [r4, #0]
 80081bc:	2000      	movs	r0, #0
 80081be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c2:	462a      	mov	r2, r5
 80081c4:	f000 fd89 	bl	8008cda <_realloc_r>
 80081c8:	4606      	mov	r6, r0
 80081ca:	2800      	cmp	r0, #0
 80081cc:	d1e0      	bne.n	8008190 <__ssputs_r+0x5c>
 80081ce:	6921      	ldr	r1, [r4, #16]
 80081d0:	4650      	mov	r0, sl
 80081d2:	f7fe fb79 	bl	80068c8 <_free_r>
 80081d6:	230c      	movs	r3, #12
 80081d8:	f8ca 3000 	str.w	r3, [sl]
 80081dc:	89a3      	ldrh	r3, [r4, #12]
 80081de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081e2:	81a3      	strh	r3, [r4, #12]
 80081e4:	f04f 30ff 	mov.w	r0, #4294967295
 80081e8:	e7e9      	b.n	80081be <__ssputs_r+0x8a>
	...

080081ec <_svfiprintf_r>:
 80081ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f0:	4698      	mov	r8, r3
 80081f2:	898b      	ldrh	r3, [r1, #12]
 80081f4:	061b      	lsls	r3, r3, #24
 80081f6:	b09d      	sub	sp, #116	@ 0x74
 80081f8:	4607      	mov	r7, r0
 80081fa:	460d      	mov	r5, r1
 80081fc:	4614      	mov	r4, r2
 80081fe:	d510      	bpl.n	8008222 <_svfiprintf_r+0x36>
 8008200:	690b      	ldr	r3, [r1, #16]
 8008202:	b973      	cbnz	r3, 8008222 <_svfiprintf_r+0x36>
 8008204:	2140      	movs	r1, #64	@ 0x40
 8008206:	f7fe fbd3 	bl	80069b0 <_malloc_r>
 800820a:	6028      	str	r0, [r5, #0]
 800820c:	6128      	str	r0, [r5, #16]
 800820e:	b930      	cbnz	r0, 800821e <_svfiprintf_r+0x32>
 8008210:	230c      	movs	r3, #12
 8008212:	603b      	str	r3, [r7, #0]
 8008214:	f04f 30ff 	mov.w	r0, #4294967295
 8008218:	b01d      	add	sp, #116	@ 0x74
 800821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821e:	2340      	movs	r3, #64	@ 0x40
 8008220:	616b      	str	r3, [r5, #20]
 8008222:	2300      	movs	r3, #0
 8008224:	9309      	str	r3, [sp, #36]	@ 0x24
 8008226:	2320      	movs	r3, #32
 8008228:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800822c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008230:	2330      	movs	r3, #48	@ 0x30
 8008232:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80083d0 <_svfiprintf_r+0x1e4>
 8008236:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800823a:	f04f 0901 	mov.w	r9, #1
 800823e:	4623      	mov	r3, r4
 8008240:	469a      	mov	sl, r3
 8008242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008246:	b10a      	cbz	r2, 800824c <_svfiprintf_r+0x60>
 8008248:	2a25      	cmp	r2, #37	@ 0x25
 800824a:	d1f9      	bne.n	8008240 <_svfiprintf_r+0x54>
 800824c:	ebba 0b04 	subs.w	fp, sl, r4
 8008250:	d00b      	beq.n	800826a <_svfiprintf_r+0x7e>
 8008252:	465b      	mov	r3, fp
 8008254:	4622      	mov	r2, r4
 8008256:	4629      	mov	r1, r5
 8008258:	4638      	mov	r0, r7
 800825a:	f7ff ff6b 	bl	8008134 <__ssputs_r>
 800825e:	3001      	adds	r0, #1
 8008260:	f000 80a7 	beq.w	80083b2 <_svfiprintf_r+0x1c6>
 8008264:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008266:	445a      	add	r2, fp
 8008268:	9209      	str	r2, [sp, #36]	@ 0x24
 800826a:	f89a 3000 	ldrb.w	r3, [sl]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 809f 	beq.w	80083b2 <_svfiprintf_r+0x1c6>
 8008274:	2300      	movs	r3, #0
 8008276:	f04f 32ff 	mov.w	r2, #4294967295
 800827a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800827e:	f10a 0a01 	add.w	sl, sl, #1
 8008282:	9304      	str	r3, [sp, #16]
 8008284:	9307      	str	r3, [sp, #28]
 8008286:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800828a:	931a      	str	r3, [sp, #104]	@ 0x68
 800828c:	4654      	mov	r4, sl
 800828e:	2205      	movs	r2, #5
 8008290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008294:	484e      	ldr	r0, [pc, #312]	@ (80083d0 <_svfiprintf_r+0x1e4>)
 8008296:	f7f7 ff9b 	bl	80001d0 <memchr>
 800829a:	9a04      	ldr	r2, [sp, #16]
 800829c:	b9d8      	cbnz	r0, 80082d6 <_svfiprintf_r+0xea>
 800829e:	06d0      	lsls	r0, r2, #27
 80082a0:	bf44      	itt	mi
 80082a2:	2320      	movmi	r3, #32
 80082a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082a8:	0711      	lsls	r1, r2, #28
 80082aa:	bf44      	itt	mi
 80082ac:	232b      	movmi	r3, #43	@ 0x2b
 80082ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082b2:	f89a 3000 	ldrb.w	r3, [sl]
 80082b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80082b8:	d015      	beq.n	80082e6 <_svfiprintf_r+0xfa>
 80082ba:	9a07      	ldr	r2, [sp, #28]
 80082bc:	4654      	mov	r4, sl
 80082be:	2000      	movs	r0, #0
 80082c0:	f04f 0c0a 	mov.w	ip, #10
 80082c4:	4621      	mov	r1, r4
 80082c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ca:	3b30      	subs	r3, #48	@ 0x30
 80082cc:	2b09      	cmp	r3, #9
 80082ce:	d94b      	bls.n	8008368 <_svfiprintf_r+0x17c>
 80082d0:	b1b0      	cbz	r0, 8008300 <_svfiprintf_r+0x114>
 80082d2:	9207      	str	r2, [sp, #28]
 80082d4:	e014      	b.n	8008300 <_svfiprintf_r+0x114>
 80082d6:	eba0 0308 	sub.w	r3, r0, r8
 80082da:	fa09 f303 	lsl.w	r3, r9, r3
 80082de:	4313      	orrs	r3, r2
 80082e0:	9304      	str	r3, [sp, #16]
 80082e2:	46a2      	mov	sl, r4
 80082e4:	e7d2      	b.n	800828c <_svfiprintf_r+0xa0>
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	1d19      	adds	r1, r3, #4
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	9103      	str	r1, [sp, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bfbb      	ittet	lt
 80082f2:	425b      	neglt	r3, r3
 80082f4:	f042 0202 	orrlt.w	r2, r2, #2
 80082f8:	9307      	strge	r3, [sp, #28]
 80082fa:	9307      	strlt	r3, [sp, #28]
 80082fc:	bfb8      	it	lt
 80082fe:	9204      	strlt	r2, [sp, #16]
 8008300:	7823      	ldrb	r3, [r4, #0]
 8008302:	2b2e      	cmp	r3, #46	@ 0x2e
 8008304:	d10a      	bne.n	800831c <_svfiprintf_r+0x130>
 8008306:	7863      	ldrb	r3, [r4, #1]
 8008308:	2b2a      	cmp	r3, #42	@ 0x2a
 800830a:	d132      	bne.n	8008372 <_svfiprintf_r+0x186>
 800830c:	9b03      	ldr	r3, [sp, #12]
 800830e:	1d1a      	adds	r2, r3, #4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	9203      	str	r2, [sp, #12]
 8008314:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008318:	3402      	adds	r4, #2
 800831a:	9305      	str	r3, [sp, #20]
 800831c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80083e0 <_svfiprintf_r+0x1f4>
 8008320:	7821      	ldrb	r1, [r4, #0]
 8008322:	2203      	movs	r2, #3
 8008324:	4650      	mov	r0, sl
 8008326:	f7f7 ff53 	bl	80001d0 <memchr>
 800832a:	b138      	cbz	r0, 800833c <_svfiprintf_r+0x150>
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	eba0 000a 	sub.w	r0, r0, sl
 8008332:	2240      	movs	r2, #64	@ 0x40
 8008334:	4082      	lsls	r2, r0
 8008336:	4313      	orrs	r3, r2
 8008338:	3401      	adds	r4, #1
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008340:	4824      	ldr	r0, [pc, #144]	@ (80083d4 <_svfiprintf_r+0x1e8>)
 8008342:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008346:	2206      	movs	r2, #6
 8008348:	f7f7 ff42 	bl	80001d0 <memchr>
 800834c:	2800      	cmp	r0, #0
 800834e:	d036      	beq.n	80083be <_svfiprintf_r+0x1d2>
 8008350:	4b21      	ldr	r3, [pc, #132]	@ (80083d8 <_svfiprintf_r+0x1ec>)
 8008352:	bb1b      	cbnz	r3, 800839c <_svfiprintf_r+0x1b0>
 8008354:	9b03      	ldr	r3, [sp, #12]
 8008356:	3307      	adds	r3, #7
 8008358:	f023 0307 	bic.w	r3, r3, #7
 800835c:	3308      	adds	r3, #8
 800835e:	9303      	str	r3, [sp, #12]
 8008360:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008362:	4433      	add	r3, r6
 8008364:	9309      	str	r3, [sp, #36]	@ 0x24
 8008366:	e76a      	b.n	800823e <_svfiprintf_r+0x52>
 8008368:	fb0c 3202 	mla	r2, ip, r2, r3
 800836c:	460c      	mov	r4, r1
 800836e:	2001      	movs	r0, #1
 8008370:	e7a8      	b.n	80082c4 <_svfiprintf_r+0xd8>
 8008372:	2300      	movs	r3, #0
 8008374:	3401      	adds	r4, #1
 8008376:	9305      	str	r3, [sp, #20]
 8008378:	4619      	mov	r1, r3
 800837a:	f04f 0c0a 	mov.w	ip, #10
 800837e:	4620      	mov	r0, r4
 8008380:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008384:	3a30      	subs	r2, #48	@ 0x30
 8008386:	2a09      	cmp	r2, #9
 8008388:	d903      	bls.n	8008392 <_svfiprintf_r+0x1a6>
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0c6      	beq.n	800831c <_svfiprintf_r+0x130>
 800838e:	9105      	str	r1, [sp, #20]
 8008390:	e7c4      	b.n	800831c <_svfiprintf_r+0x130>
 8008392:	fb0c 2101 	mla	r1, ip, r1, r2
 8008396:	4604      	mov	r4, r0
 8008398:	2301      	movs	r3, #1
 800839a:	e7f0      	b.n	800837e <_svfiprintf_r+0x192>
 800839c:	ab03      	add	r3, sp, #12
 800839e:	9300      	str	r3, [sp, #0]
 80083a0:	462a      	mov	r2, r5
 80083a2:	4b0e      	ldr	r3, [pc, #56]	@ (80083dc <_svfiprintf_r+0x1f0>)
 80083a4:	a904      	add	r1, sp, #16
 80083a6:	4638      	mov	r0, r7
 80083a8:	f7fc fcca 	bl	8004d40 <_printf_float>
 80083ac:	1c42      	adds	r2, r0, #1
 80083ae:	4606      	mov	r6, r0
 80083b0:	d1d6      	bne.n	8008360 <_svfiprintf_r+0x174>
 80083b2:	89ab      	ldrh	r3, [r5, #12]
 80083b4:	065b      	lsls	r3, r3, #25
 80083b6:	f53f af2d 	bmi.w	8008214 <_svfiprintf_r+0x28>
 80083ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80083bc:	e72c      	b.n	8008218 <_svfiprintf_r+0x2c>
 80083be:	ab03      	add	r3, sp, #12
 80083c0:	9300      	str	r3, [sp, #0]
 80083c2:	462a      	mov	r2, r5
 80083c4:	4b05      	ldr	r3, [pc, #20]	@ (80083dc <_svfiprintf_r+0x1f0>)
 80083c6:	a904      	add	r1, sp, #16
 80083c8:	4638      	mov	r0, r7
 80083ca:	f7fc ff51 	bl	8005270 <_printf_i>
 80083ce:	e7ed      	b.n	80083ac <_svfiprintf_r+0x1c0>
 80083d0:	080096b1 	.word	0x080096b1
 80083d4:	080096bb 	.word	0x080096bb
 80083d8:	08004d41 	.word	0x08004d41
 80083dc:	08008135 	.word	0x08008135
 80083e0:	080096b7 	.word	0x080096b7

080083e4 <__sflush_r>:
 80083e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ec:	0716      	lsls	r6, r2, #28
 80083ee:	4605      	mov	r5, r0
 80083f0:	460c      	mov	r4, r1
 80083f2:	d454      	bmi.n	800849e <__sflush_r+0xba>
 80083f4:	684b      	ldr	r3, [r1, #4]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	dc02      	bgt.n	8008400 <__sflush_r+0x1c>
 80083fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	dd48      	ble.n	8008492 <__sflush_r+0xae>
 8008400:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008402:	2e00      	cmp	r6, #0
 8008404:	d045      	beq.n	8008492 <__sflush_r+0xae>
 8008406:	2300      	movs	r3, #0
 8008408:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800840c:	682f      	ldr	r7, [r5, #0]
 800840e:	6a21      	ldr	r1, [r4, #32]
 8008410:	602b      	str	r3, [r5, #0]
 8008412:	d030      	beq.n	8008476 <__sflush_r+0x92>
 8008414:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008416:	89a3      	ldrh	r3, [r4, #12]
 8008418:	0759      	lsls	r1, r3, #29
 800841a:	d505      	bpl.n	8008428 <__sflush_r+0x44>
 800841c:	6863      	ldr	r3, [r4, #4]
 800841e:	1ad2      	subs	r2, r2, r3
 8008420:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008422:	b10b      	cbz	r3, 8008428 <__sflush_r+0x44>
 8008424:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008426:	1ad2      	subs	r2, r2, r3
 8008428:	2300      	movs	r3, #0
 800842a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800842c:	6a21      	ldr	r1, [r4, #32]
 800842e:	4628      	mov	r0, r5
 8008430:	47b0      	blx	r6
 8008432:	1c43      	adds	r3, r0, #1
 8008434:	89a3      	ldrh	r3, [r4, #12]
 8008436:	d106      	bne.n	8008446 <__sflush_r+0x62>
 8008438:	6829      	ldr	r1, [r5, #0]
 800843a:	291d      	cmp	r1, #29
 800843c:	d82b      	bhi.n	8008496 <__sflush_r+0xb2>
 800843e:	4a2a      	ldr	r2, [pc, #168]	@ (80084e8 <__sflush_r+0x104>)
 8008440:	410a      	asrs	r2, r1
 8008442:	07d6      	lsls	r6, r2, #31
 8008444:	d427      	bmi.n	8008496 <__sflush_r+0xb2>
 8008446:	2200      	movs	r2, #0
 8008448:	6062      	str	r2, [r4, #4]
 800844a:	04d9      	lsls	r1, r3, #19
 800844c:	6922      	ldr	r2, [r4, #16]
 800844e:	6022      	str	r2, [r4, #0]
 8008450:	d504      	bpl.n	800845c <__sflush_r+0x78>
 8008452:	1c42      	adds	r2, r0, #1
 8008454:	d101      	bne.n	800845a <__sflush_r+0x76>
 8008456:	682b      	ldr	r3, [r5, #0]
 8008458:	b903      	cbnz	r3, 800845c <__sflush_r+0x78>
 800845a:	6560      	str	r0, [r4, #84]	@ 0x54
 800845c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800845e:	602f      	str	r7, [r5, #0]
 8008460:	b1b9      	cbz	r1, 8008492 <__sflush_r+0xae>
 8008462:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008466:	4299      	cmp	r1, r3
 8008468:	d002      	beq.n	8008470 <__sflush_r+0x8c>
 800846a:	4628      	mov	r0, r5
 800846c:	f7fe fa2c 	bl	80068c8 <_free_r>
 8008470:	2300      	movs	r3, #0
 8008472:	6363      	str	r3, [r4, #52]	@ 0x34
 8008474:	e00d      	b.n	8008492 <__sflush_r+0xae>
 8008476:	2301      	movs	r3, #1
 8008478:	4628      	mov	r0, r5
 800847a:	47b0      	blx	r6
 800847c:	4602      	mov	r2, r0
 800847e:	1c50      	adds	r0, r2, #1
 8008480:	d1c9      	bne.n	8008416 <__sflush_r+0x32>
 8008482:	682b      	ldr	r3, [r5, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d0c6      	beq.n	8008416 <__sflush_r+0x32>
 8008488:	2b1d      	cmp	r3, #29
 800848a:	d001      	beq.n	8008490 <__sflush_r+0xac>
 800848c:	2b16      	cmp	r3, #22
 800848e:	d11e      	bne.n	80084ce <__sflush_r+0xea>
 8008490:	602f      	str	r7, [r5, #0]
 8008492:	2000      	movs	r0, #0
 8008494:	e022      	b.n	80084dc <__sflush_r+0xf8>
 8008496:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800849a:	b21b      	sxth	r3, r3
 800849c:	e01b      	b.n	80084d6 <__sflush_r+0xf2>
 800849e:	690f      	ldr	r7, [r1, #16]
 80084a0:	2f00      	cmp	r7, #0
 80084a2:	d0f6      	beq.n	8008492 <__sflush_r+0xae>
 80084a4:	0793      	lsls	r3, r2, #30
 80084a6:	680e      	ldr	r6, [r1, #0]
 80084a8:	bf08      	it	eq
 80084aa:	694b      	ldreq	r3, [r1, #20]
 80084ac:	600f      	str	r7, [r1, #0]
 80084ae:	bf18      	it	ne
 80084b0:	2300      	movne	r3, #0
 80084b2:	eba6 0807 	sub.w	r8, r6, r7
 80084b6:	608b      	str	r3, [r1, #8]
 80084b8:	f1b8 0f00 	cmp.w	r8, #0
 80084bc:	dde9      	ble.n	8008492 <__sflush_r+0xae>
 80084be:	6a21      	ldr	r1, [r4, #32]
 80084c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80084c2:	4643      	mov	r3, r8
 80084c4:	463a      	mov	r2, r7
 80084c6:	4628      	mov	r0, r5
 80084c8:	47b0      	blx	r6
 80084ca:	2800      	cmp	r0, #0
 80084cc:	dc08      	bgt.n	80084e0 <__sflush_r+0xfc>
 80084ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084d6:	81a3      	strh	r3, [r4, #12]
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e0:	4407      	add	r7, r0
 80084e2:	eba8 0800 	sub.w	r8, r8, r0
 80084e6:	e7e7      	b.n	80084b8 <__sflush_r+0xd4>
 80084e8:	dfbffffe 	.word	0xdfbffffe

080084ec <_fflush_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	690b      	ldr	r3, [r1, #16]
 80084f0:	4605      	mov	r5, r0
 80084f2:	460c      	mov	r4, r1
 80084f4:	b913      	cbnz	r3, 80084fc <_fflush_r+0x10>
 80084f6:	2500      	movs	r5, #0
 80084f8:	4628      	mov	r0, r5
 80084fa:	bd38      	pop	{r3, r4, r5, pc}
 80084fc:	b118      	cbz	r0, 8008506 <_fflush_r+0x1a>
 80084fe:	6a03      	ldr	r3, [r0, #32]
 8008500:	b90b      	cbnz	r3, 8008506 <_fflush_r+0x1a>
 8008502:	f7fd fa75 	bl	80059f0 <__sinit>
 8008506:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d0f3      	beq.n	80084f6 <_fflush_r+0xa>
 800850e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008510:	07d0      	lsls	r0, r2, #31
 8008512:	d404      	bmi.n	800851e <_fflush_r+0x32>
 8008514:	0599      	lsls	r1, r3, #22
 8008516:	d402      	bmi.n	800851e <_fflush_r+0x32>
 8008518:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800851a:	f7fd fb80 	bl	8005c1e <__retarget_lock_acquire_recursive>
 800851e:	4628      	mov	r0, r5
 8008520:	4621      	mov	r1, r4
 8008522:	f7ff ff5f 	bl	80083e4 <__sflush_r>
 8008526:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008528:	07da      	lsls	r2, r3, #31
 800852a:	4605      	mov	r5, r0
 800852c:	d4e4      	bmi.n	80084f8 <_fflush_r+0xc>
 800852e:	89a3      	ldrh	r3, [r4, #12]
 8008530:	059b      	lsls	r3, r3, #22
 8008532:	d4e1      	bmi.n	80084f8 <_fflush_r+0xc>
 8008534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008536:	f7fd fb73 	bl	8005c20 <__retarget_lock_release_recursive>
 800853a:	e7dd      	b.n	80084f8 <_fflush_r+0xc>

0800853c <memmove>:
 800853c:	4288      	cmp	r0, r1
 800853e:	b510      	push	{r4, lr}
 8008540:	eb01 0402 	add.w	r4, r1, r2
 8008544:	d902      	bls.n	800854c <memmove+0x10>
 8008546:	4284      	cmp	r4, r0
 8008548:	4623      	mov	r3, r4
 800854a:	d807      	bhi.n	800855c <memmove+0x20>
 800854c:	1e43      	subs	r3, r0, #1
 800854e:	42a1      	cmp	r1, r4
 8008550:	d008      	beq.n	8008564 <memmove+0x28>
 8008552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800855a:	e7f8      	b.n	800854e <memmove+0x12>
 800855c:	4402      	add	r2, r0
 800855e:	4601      	mov	r1, r0
 8008560:	428a      	cmp	r2, r1
 8008562:	d100      	bne.n	8008566 <memmove+0x2a>
 8008564:	bd10      	pop	{r4, pc}
 8008566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800856a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800856e:	e7f7      	b.n	8008560 <memmove+0x24>

08008570 <strncmp>:
 8008570:	b510      	push	{r4, lr}
 8008572:	b16a      	cbz	r2, 8008590 <strncmp+0x20>
 8008574:	3901      	subs	r1, #1
 8008576:	1884      	adds	r4, r0, r2
 8008578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800857c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008580:	429a      	cmp	r2, r3
 8008582:	d103      	bne.n	800858c <strncmp+0x1c>
 8008584:	42a0      	cmp	r0, r4
 8008586:	d001      	beq.n	800858c <strncmp+0x1c>
 8008588:	2a00      	cmp	r2, #0
 800858a:	d1f5      	bne.n	8008578 <strncmp+0x8>
 800858c:	1ad0      	subs	r0, r2, r3
 800858e:	bd10      	pop	{r4, pc}
 8008590:	4610      	mov	r0, r2
 8008592:	e7fc      	b.n	800858e <strncmp+0x1e>

08008594 <_sbrk_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4d06      	ldr	r5, [pc, #24]	@ (80085b0 <_sbrk_r+0x1c>)
 8008598:	2300      	movs	r3, #0
 800859a:	4604      	mov	r4, r0
 800859c:	4608      	mov	r0, r1
 800859e:	602b      	str	r3, [r5, #0]
 80085a0:	f7f9 f950 	bl	8001844 <_sbrk>
 80085a4:	1c43      	adds	r3, r0, #1
 80085a6:	d102      	bne.n	80085ae <_sbrk_r+0x1a>
 80085a8:	682b      	ldr	r3, [r5, #0]
 80085aa:	b103      	cbz	r3, 80085ae <_sbrk_r+0x1a>
 80085ac:	6023      	str	r3, [r4, #0]
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	20000478 	.word	0x20000478

080085b4 <memcpy>:
 80085b4:	440a      	add	r2, r1
 80085b6:	4291      	cmp	r1, r2
 80085b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80085bc:	d100      	bne.n	80085c0 <memcpy+0xc>
 80085be:	4770      	bx	lr
 80085c0:	b510      	push	{r4, lr}
 80085c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085ca:	4291      	cmp	r1, r2
 80085cc:	d1f9      	bne.n	80085c2 <memcpy+0xe>
 80085ce:	bd10      	pop	{r4, pc}

080085d0 <nan>:
 80085d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80085d8 <nan+0x8>
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	00000000 	.word	0x00000000
 80085dc:	7ff80000 	.word	0x7ff80000

080085e0 <__assert_func>:
 80085e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80085e2:	4614      	mov	r4, r2
 80085e4:	461a      	mov	r2, r3
 80085e6:	4b09      	ldr	r3, [pc, #36]	@ (800860c <__assert_func+0x2c>)
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4605      	mov	r5, r0
 80085ec:	68d8      	ldr	r0, [r3, #12]
 80085ee:	b954      	cbnz	r4, 8008606 <__assert_func+0x26>
 80085f0:	4b07      	ldr	r3, [pc, #28]	@ (8008610 <__assert_func+0x30>)
 80085f2:	461c      	mov	r4, r3
 80085f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085f8:	9100      	str	r1, [sp, #0]
 80085fa:	462b      	mov	r3, r5
 80085fc:	4905      	ldr	r1, [pc, #20]	@ (8008614 <__assert_func+0x34>)
 80085fe:	f000 fba7 	bl	8008d50 <fiprintf>
 8008602:	f000 fbb7 	bl	8008d74 <abort>
 8008606:	4b04      	ldr	r3, [pc, #16]	@ (8008618 <__assert_func+0x38>)
 8008608:	e7f4      	b.n	80085f4 <__assert_func+0x14>
 800860a:	bf00      	nop
 800860c:	20000018 	.word	0x20000018
 8008610:	08009705 	.word	0x08009705
 8008614:	080096d7 	.word	0x080096d7
 8008618:	080096ca 	.word	0x080096ca

0800861c <_calloc_r>:
 800861c:	b570      	push	{r4, r5, r6, lr}
 800861e:	fba1 5402 	umull	r5, r4, r1, r2
 8008622:	b93c      	cbnz	r4, 8008634 <_calloc_r+0x18>
 8008624:	4629      	mov	r1, r5
 8008626:	f7fe f9c3 	bl	80069b0 <_malloc_r>
 800862a:	4606      	mov	r6, r0
 800862c:	b928      	cbnz	r0, 800863a <_calloc_r+0x1e>
 800862e:	2600      	movs	r6, #0
 8008630:	4630      	mov	r0, r6
 8008632:	bd70      	pop	{r4, r5, r6, pc}
 8008634:	220c      	movs	r2, #12
 8008636:	6002      	str	r2, [r0, #0]
 8008638:	e7f9      	b.n	800862e <_calloc_r+0x12>
 800863a:	462a      	mov	r2, r5
 800863c:	4621      	mov	r1, r4
 800863e:	f7fd fa70 	bl	8005b22 <memset>
 8008642:	e7f5      	b.n	8008630 <_calloc_r+0x14>

08008644 <rshift>:
 8008644:	6903      	ldr	r3, [r0, #16]
 8008646:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800864a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800864e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008652:	f100 0414 	add.w	r4, r0, #20
 8008656:	dd45      	ble.n	80086e4 <rshift+0xa0>
 8008658:	f011 011f 	ands.w	r1, r1, #31
 800865c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008660:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008664:	d10c      	bne.n	8008680 <rshift+0x3c>
 8008666:	f100 0710 	add.w	r7, r0, #16
 800866a:	4629      	mov	r1, r5
 800866c:	42b1      	cmp	r1, r6
 800866e:	d334      	bcc.n	80086da <rshift+0x96>
 8008670:	1a9b      	subs	r3, r3, r2
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	1eea      	subs	r2, r5, #3
 8008676:	4296      	cmp	r6, r2
 8008678:	bf38      	it	cc
 800867a:	2300      	movcc	r3, #0
 800867c:	4423      	add	r3, r4
 800867e:	e015      	b.n	80086ac <rshift+0x68>
 8008680:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008684:	f1c1 0820 	rsb	r8, r1, #32
 8008688:	40cf      	lsrs	r7, r1
 800868a:	f105 0e04 	add.w	lr, r5, #4
 800868e:	46a1      	mov	r9, r4
 8008690:	4576      	cmp	r6, lr
 8008692:	46f4      	mov	ip, lr
 8008694:	d815      	bhi.n	80086c2 <rshift+0x7e>
 8008696:	1a9a      	subs	r2, r3, r2
 8008698:	0092      	lsls	r2, r2, #2
 800869a:	3a04      	subs	r2, #4
 800869c:	3501      	adds	r5, #1
 800869e:	42ae      	cmp	r6, r5
 80086a0:	bf38      	it	cc
 80086a2:	2200      	movcc	r2, #0
 80086a4:	18a3      	adds	r3, r4, r2
 80086a6:	50a7      	str	r7, [r4, r2]
 80086a8:	b107      	cbz	r7, 80086ac <rshift+0x68>
 80086aa:	3304      	adds	r3, #4
 80086ac:	1b1a      	subs	r2, r3, r4
 80086ae:	42a3      	cmp	r3, r4
 80086b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80086b4:	bf08      	it	eq
 80086b6:	2300      	moveq	r3, #0
 80086b8:	6102      	str	r2, [r0, #16]
 80086ba:	bf08      	it	eq
 80086bc:	6143      	streq	r3, [r0, #20]
 80086be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086c2:	f8dc c000 	ldr.w	ip, [ip]
 80086c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80086ca:	ea4c 0707 	orr.w	r7, ip, r7
 80086ce:	f849 7b04 	str.w	r7, [r9], #4
 80086d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80086d6:	40cf      	lsrs	r7, r1
 80086d8:	e7da      	b.n	8008690 <rshift+0x4c>
 80086da:	f851 cb04 	ldr.w	ip, [r1], #4
 80086de:	f847 cf04 	str.w	ip, [r7, #4]!
 80086e2:	e7c3      	b.n	800866c <rshift+0x28>
 80086e4:	4623      	mov	r3, r4
 80086e6:	e7e1      	b.n	80086ac <rshift+0x68>

080086e8 <__hexdig_fun>:
 80086e8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80086ec:	2b09      	cmp	r3, #9
 80086ee:	d802      	bhi.n	80086f6 <__hexdig_fun+0xe>
 80086f0:	3820      	subs	r0, #32
 80086f2:	b2c0      	uxtb	r0, r0
 80086f4:	4770      	bx	lr
 80086f6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80086fa:	2b05      	cmp	r3, #5
 80086fc:	d801      	bhi.n	8008702 <__hexdig_fun+0x1a>
 80086fe:	3847      	subs	r0, #71	@ 0x47
 8008700:	e7f7      	b.n	80086f2 <__hexdig_fun+0xa>
 8008702:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008706:	2b05      	cmp	r3, #5
 8008708:	d801      	bhi.n	800870e <__hexdig_fun+0x26>
 800870a:	3827      	subs	r0, #39	@ 0x27
 800870c:	e7f1      	b.n	80086f2 <__hexdig_fun+0xa>
 800870e:	2000      	movs	r0, #0
 8008710:	4770      	bx	lr
	...

08008714 <__gethex>:
 8008714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008718:	b085      	sub	sp, #20
 800871a:	468a      	mov	sl, r1
 800871c:	9302      	str	r3, [sp, #8]
 800871e:	680b      	ldr	r3, [r1, #0]
 8008720:	9001      	str	r0, [sp, #4]
 8008722:	4690      	mov	r8, r2
 8008724:	1c9c      	adds	r4, r3, #2
 8008726:	46a1      	mov	r9, r4
 8008728:	f814 0b01 	ldrb.w	r0, [r4], #1
 800872c:	2830      	cmp	r0, #48	@ 0x30
 800872e:	d0fa      	beq.n	8008726 <__gethex+0x12>
 8008730:	eba9 0303 	sub.w	r3, r9, r3
 8008734:	f1a3 0b02 	sub.w	fp, r3, #2
 8008738:	f7ff ffd6 	bl	80086e8 <__hexdig_fun>
 800873c:	4605      	mov	r5, r0
 800873e:	2800      	cmp	r0, #0
 8008740:	d168      	bne.n	8008814 <__gethex+0x100>
 8008742:	49a0      	ldr	r1, [pc, #640]	@ (80089c4 <__gethex+0x2b0>)
 8008744:	2201      	movs	r2, #1
 8008746:	4648      	mov	r0, r9
 8008748:	f7ff ff12 	bl	8008570 <strncmp>
 800874c:	4607      	mov	r7, r0
 800874e:	2800      	cmp	r0, #0
 8008750:	d167      	bne.n	8008822 <__gethex+0x10e>
 8008752:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008756:	4626      	mov	r6, r4
 8008758:	f7ff ffc6 	bl	80086e8 <__hexdig_fun>
 800875c:	2800      	cmp	r0, #0
 800875e:	d062      	beq.n	8008826 <__gethex+0x112>
 8008760:	4623      	mov	r3, r4
 8008762:	7818      	ldrb	r0, [r3, #0]
 8008764:	2830      	cmp	r0, #48	@ 0x30
 8008766:	4699      	mov	r9, r3
 8008768:	f103 0301 	add.w	r3, r3, #1
 800876c:	d0f9      	beq.n	8008762 <__gethex+0x4e>
 800876e:	f7ff ffbb 	bl	80086e8 <__hexdig_fun>
 8008772:	fab0 f580 	clz	r5, r0
 8008776:	096d      	lsrs	r5, r5, #5
 8008778:	f04f 0b01 	mov.w	fp, #1
 800877c:	464a      	mov	r2, r9
 800877e:	4616      	mov	r6, r2
 8008780:	3201      	adds	r2, #1
 8008782:	7830      	ldrb	r0, [r6, #0]
 8008784:	f7ff ffb0 	bl	80086e8 <__hexdig_fun>
 8008788:	2800      	cmp	r0, #0
 800878a:	d1f8      	bne.n	800877e <__gethex+0x6a>
 800878c:	498d      	ldr	r1, [pc, #564]	@ (80089c4 <__gethex+0x2b0>)
 800878e:	2201      	movs	r2, #1
 8008790:	4630      	mov	r0, r6
 8008792:	f7ff feed 	bl	8008570 <strncmp>
 8008796:	2800      	cmp	r0, #0
 8008798:	d13f      	bne.n	800881a <__gethex+0x106>
 800879a:	b944      	cbnz	r4, 80087ae <__gethex+0x9a>
 800879c:	1c74      	adds	r4, r6, #1
 800879e:	4622      	mov	r2, r4
 80087a0:	4616      	mov	r6, r2
 80087a2:	3201      	adds	r2, #1
 80087a4:	7830      	ldrb	r0, [r6, #0]
 80087a6:	f7ff ff9f 	bl	80086e8 <__hexdig_fun>
 80087aa:	2800      	cmp	r0, #0
 80087ac:	d1f8      	bne.n	80087a0 <__gethex+0x8c>
 80087ae:	1ba4      	subs	r4, r4, r6
 80087b0:	00a7      	lsls	r7, r4, #2
 80087b2:	7833      	ldrb	r3, [r6, #0]
 80087b4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80087b8:	2b50      	cmp	r3, #80	@ 0x50
 80087ba:	d13e      	bne.n	800883a <__gethex+0x126>
 80087bc:	7873      	ldrb	r3, [r6, #1]
 80087be:	2b2b      	cmp	r3, #43	@ 0x2b
 80087c0:	d033      	beq.n	800882a <__gethex+0x116>
 80087c2:	2b2d      	cmp	r3, #45	@ 0x2d
 80087c4:	d034      	beq.n	8008830 <__gethex+0x11c>
 80087c6:	1c71      	adds	r1, r6, #1
 80087c8:	2400      	movs	r4, #0
 80087ca:	7808      	ldrb	r0, [r1, #0]
 80087cc:	f7ff ff8c 	bl	80086e8 <__hexdig_fun>
 80087d0:	1e43      	subs	r3, r0, #1
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	2b18      	cmp	r3, #24
 80087d6:	d830      	bhi.n	800883a <__gethex+0x126>
 80087d8:	f1a0 0210 	sub.w	r2, r0, #16
 80087dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80087e0:	f7ff ff82 	bl	80086e8 <__hexdig_fun>
 80087e4:	f100 3cff 	add.w	ip, r0, #4294967295
 80087e8:	fa5f fc8c 	uxtb.w	ip, ip
 80087ec:	f1bc 0f18 	cmp.w	ip, #24
 80087f0:	f04f 030a 	mov.w	r3, #10
 80087f4:	d91e      	bls.n	8008834 <__gethex+0x120>
 80087f6:	b104      	cbz	r4, 80087fa <__gethex+0xe6>
 80087f8:	4252      	negs	r2, r2
 80087fa:	4417      	add	r7, r2
 80087fc:	f8ca 1000 	str.w	r1, [sl]
 8008800:	b1ed      	cbz	r5, 800883e <__gethex+0x12a>
 8008802:	f1bb 0f00 	cmp.w	fp, #0
 8008806:	bf0c      	ite	eq
 8008808:	2506      	moveq	r5, #6
 800880a:	2500      	movne	r5, #0
 800880c:	4628      	mov	r0, r5
 800880e:	b005      	add	sp, #20
 8008810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008814:	2500      	movs	r5, #0
 8008816:	462c      	mov	r4, r5
 8008818:	e7b0      	b.n	800877c <__gethex+0x68>
 800881a:	2c00      	cmp	r4, #0
 800881c:	d1c7      	bne.n	80087ae <__gethex+0x9a>
 800881e:	4627      	mov	r7, r4
 8008820:	e7c7      	b.n	80087b2 <__gethex+0x9e>
 8008822:	464e      	mov	r6, r9
 8008824:	462f      	mov	r7, r5
 8008826:	2501      	movs	r5, #1
 8008828:	e7c3      	b.n	80087b2 <__gethex+0x9e>
 800882a:	2400      	movs	r4, #0
 800882c:	1cb1      	adds	r1, r6, #2
 800882e:	e7cc      	b.n	80087ca <__gethex+0xb6>
 8008830:	2401      	movs	r4, #1
 8008832:	e7fb      	b.n	800882c <__gethex+0x118>
 8008834:	fb03 0002 	mla	r0, r3, r2, r0
 8008838:	e7ce      	b.n	80087d8 <__gethex+0xc4>
 800883a:	4631      	mov	r1, r6
 800883c:	e7de      	b.n	80087fc <__gethex+0xe8>
 800883e:	eba6 0309 	sub.w	r3, r6, r9
 8008842:	3b01      	subs	r3, #1
 8008844:	4629      	mov	r1, r5
 8008846:	2b07      	cmp	r3, #7
 8008848:	dc0a      	bgt.n	8008860 <__gethex+0x14c>
 800884a:	9801      	ldr	r0, [sp, #4]
 800884c:	f7fe f93c 	bl	8006ac8 <_Balloc>
 8008850:	4604      	mov	r4, r0
 8008852:	b940      	cbnz	r0, 8008866 <__gethex+0x152>
 8008854:	4b5c      	ldr	r3, [pc, #368]	@ (80089c8 <__gethex+0x2b4>)
 8008856:	4602      	mov	r2, r0
 8008858:	21e4      	movs	r1, #228	@ 0xe4
 800885a:	485c      	ldr	r0, [pc, #368]	@ (80089cc <__gethex+0x2b8>)
 800885c:	f7ff fec0 	bl	80085e0 <__assert_func>
 8008860:	3101      	adds	r1, #1
 8008862:	105b      	asrs	r3, r3, #1
 8008864:	e7ef      	b.n	8008846 <__gethex+0x132>
 8008866:	f100 0a14 	add.w	sl, r0, #20
 800886a:	2300      	movs	r3, #0
 800886c:	4655      	mov	r5, sl
 800886e:	469b      	mov	fp, r3
 8008870:	45b1      	cmp	r9, r6
 8008872:	d337      	bcc.n	80088e4 <__gethex+0x1d0>
 8008874:	f845 bb04 	str.w	fp, [r5], #4
 8008878:	eba5 050a 	sub.w	r5, r5, sl
 800887c:	10ad      	asrs	r5, r5, #2
 800887e:	6125      	str	r5, [r4, #16]
 8008880:	4658      	mov	r0, fp
 8008882:	f7fe fa13 	bl	8006cac <__hi0bits>
 8008886:	016d      	lsls	r5, r5, #5
 8008888:	f8d8 6000 	ldr.w	r6, [r8]
 800888c:	1a2d      	subs	r5, r5, r0
 800888e:	42b5      	cmp	r5, r6
 8008890:	dd54      	ble.n	800893c <__gethex+0x228>
 8008892:	1bad      	subs	r5, r5, r6
 8008894:	4629      	mov	r1, r5
 8008896:	4620      	mov	r0, r4
 8008898:	f7fe fda7 	bl	80073ea <__any_on>
 800889c:	4681      	mov	r9, r0
 800889e:	b178      	cbz	r0, 80088c0 <__gethex+0x1ac>
 80088a0:	1e6b      	subs	r3, r5, #1
 80088a2:	1159      	asrs	r1, r3, #5
 80088a4:	f003 021f 	and.w	r2, r3, #31
 80088a8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80088ac:	f04f 0901 	mov.w	r9, #1
 80088b0:	fa09 f202 	lsl.w	r2, r9, r2
 80088b4:	420a      	tst	r2, r1
 80088b6:	d003      	beq.n	80088c0 <__gethex+0x1ac>
 80088b8:	454b      	cmp	r3, r9
 80088ba:	dc36      	bgt.n	800892a <__gethex+0x216>
 80088bc:	f04f 0902 	mov.w	r9, #2
 80088c0:	4629      	mov	r1, r5
 80088c2:	4620      	mov	r0, r4
 80088c4:	f7ff febe 	bl	8008644 <rshift>
 80088c8:	442f      	add	r7, r5
 80088ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80088ce:	42bb      	cmp	r3, r7
 80088d0:	da42      	bge.n	8008958 <__gethex+0x244>
 80088d2:	9801      	ldr	r0, [sp, #4]
 80088d4:	4621      	mov	r1, r4
 80088d6:	f7fe f937 	bl	8006b48 <_Bfree>
 80088da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80088dc:	2300      	movs	r3, #0
 80088de:	6013      	str	r3, [r2, #0]
 80088e0:	25a3      	movs	r5, #163	@ 0xa3
 80088e2:	e793      	b.n	800880c <__gethex+0xf8>
 80088e4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80088e8:	2a2e      	cmp	r2, #46	@ 0x2e
 80088ea:	d012      	beq.n	8008912 <__gethex+0x1fe>
 80088ec:	2b20      	cmp	r3, #32
 80088ee:	d104      	bne.n	80088fa <__gethex+0x1e6>
 80088f0:	f845 bb04 	str.w	fp, [r5], #4
 80088f4:	f04f 0b00 	mov.w	fp, #0
 80088f8:	465b      	mov	r3, fp
 80088fa:	7830      	ldrb	r0, [r6, #0]
 80088fc:	9303      	str	r3, [sp, #12]
 80088fe:	f7ff fef3 	bl	80086e8 <__hexdig_fun>
 8008902:	9b03      	ldr	r3, [sp, #12]
 8008904:	f000 000f 	and.w	r0, r0, #15
 8008908:	4098      	lsls	r0, r3
 800890a:	ea4b 0b00 	orr.w	fp, fp, r0
 800890e:	3304      	adds	r3, #4
 8008910:	e7ae      	b.n	8008870 <__gethex+0x15c>
 8008912:	45b1      	cmp	r9, r6
 8008914:	d8ea      	bhi.n	80088ec <__gethex+0x1d8>
 8008916:	492b      	ldr	r1, [pc, #172]	@ (80089c4 <__gethex+0x2b0>)
 8008918:	9303      	str	r3, [sp, #12]
 800891a:	2201      	movs	r2, #1
 800891c:	4630      	mov	r0, r6
 800891e:	f7ff fe27 	bl	8008570 <strncmp>
 8008922:	9b03      	ldr	r3, [sp, #12]
 8008924:	2800      	cmp	r0, #0
 8008926:	d1e1      	bne.n	80088ec <__gethex+0x1d8>
 8008928:	e7a2      	b.n	8008870 <__gethex+0x15c>
 800892a:	1ea9      	subs	r1, r5, #2
 800892c:	4620      	mov	r0, r4
 800892e:	f7fe fd5c 	bl	80073ea <__any_on>
 8008932:	2800      	cmp	r0, #0
 8008934:	d0c2      	beq.n	80088bc <__gethex+0x1a8>
 8008936:	f04f 0903 	mov.w	r9, #3
 800893a:	e7c1      	b.n	80088c0 <__gethex+0x1ac>
 800893c:	da09      	bge.n	8008952 <__gethex+0x23e>
 800893e:	1b75      	subs	r5, r6, r5
 8008940:	4621      	mov	r1, r4
 8008942:	9801      	ldr	r0, [sp, #4]
 8008944:	462a      	mov	r2, r5
 8008946:	f7fe fb17 	bl	8006f78 <__lshift>
 800894a:	1b7f      	subs	r7, r7, r5
 800894c:	4604      	mov	r4, r0
 800894e:	f100 0a14 	add.w	sl, r0, #20
 8008952:	f04f 0900 	mov.w	r9, #0
 8008956:	e7b8      	b.n	80088ca <__gethex+0x1b6>
 8008958:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800895c:	42bd      	cmp	r5, r7
 800895e:	dd6f      	ble.n	8008a40 <__gethex+0x32c>
 8008960:	1bed      	subs	r5, r5, r7
 8008962:	42ae      	cmp	r6, r5
 8008964:	dc34      	bgt.n	80089d0 <__gethex+0x2bc>
 8008966:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800896a:	2b02      	cmp	r3, #2
 800896c:	d022      	beq.n	80089b4 <__gethex+0x2a0>
 800896e:	2b03      	cmp	r3, #3
 8008970:	d024      	beq.n	80089bc <__gethex+0x2a8>
 8008972:	2b01      	cmp	r3, #1
 8008974:	d115      	bne.n	80089a2 <__gethex+0x28e>
 8008976:	42ae      	cmp	r6, r5
 8008978:	d113      	bne.n	80089a2 <__gethex+0x28e>
 800897a:	2e01      	cmp	r6, #1
 800897c:	d10b      	bne.n	8008996 <__gethex+0x282>
 800897e:	9a02      	ldr	r2, [sp, #8]
 8008980:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008984:	6013      	str	r3, [r2, #0]
 8008986:	2301      	movs	r3, #1
 8008988:	6123      	str	r3, [r4, #16]
 800898a:	f8ca 3000 	str.w	r3, [sl]
 800898e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008990:	2562      	movs	r5, #98	@ 0x62
 8008992:	601c      	str	r4, [r3, #0]
 8008994:	e73a      	b.n	800880c <__gethex+0xf8>
 8008996:	1e71      	subs	r1, r6, #1
 8008998:	4620      	mov	r0, r4
 800899a:	f7fe fd26 	bl	80073ea <__any_on>
 800899e:	2800      	cmp	r0, #0
 80089a0:	d1ed      	bne.n	800897e <__gethex+0x26a>
 80089a2:	9801      	ldr	r0, [sp, #4]
 80089a4:	4621      	mov	r1, r4
 80089a6:	f7fe f8cf 	bl	8006b48 <_Bfree>
 80089aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80089ac:	2300      	movs	r3, #0
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	2550      	movs	r5, #80	@ 0x50
 80089b2:	e72b      	b.n	800880c <__gethex+0xf8>
 80089b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1f3      	bne.n	80089a2 <__gethex+0x28e>
 80089ba:	e7e0      	b.n	800897e <__gethex+0x26a>
 80089bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1dd      	bne.n	800897e <__gethex+0x26a>
 80089c2:	e7ee      	b.n	80089a2 <__gethex+0x28e>
 80089c4:	08009558 	.word	0x08009558
 80089c8:	080093f1 	.word	0x080093f1
 80089cc:	08009706 	.word	0x08009706
 80089d0:	1e6f      	subs	r7, r5, #1
 80089d2:	f1b9 0f00 	cmp.w	r9, #0
 80089d6:	d130      	bne.n	8008a3a <__gethex+0x326>
 80089d8:	b127      	cbz	r7, 80089e4 <__gethex+0x2d0>
 80089da:	4639      	mov	r1, r7
 80089dc:	4620      	mov	r0, r4
 80089de:	f7fe fd04 	bl	80073ea <__any_on>
 80089e2:	4681      	mov	r9, r0
 80089e4:	117a      	asrs	r2, r7, #5
 80089e6:	2301      	movs	r3, #1
 80089e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80089ec:	f007 071f 	and.w	r7, r7, #31
 80089f0:	40bb      	lsls	r3, r7
 80089f2:	4213      	tst	r3, r2
 80089f4:	4629      	mov	r1, r5
 80089f6:	4620      	mov	r0, r4
 80089f8:	bf18      	it	ne
 80089fa:	f049 0902 	orrne.w	r9, r9, #2
 80089fe:	f7ff fe21 	bl	8008644 <rshift>
 8008a02:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008a06:	1b76      	subs	r6, r6, r5
 8008a08:	2502      	movs	r5, #2
 8008a0a:	f1b9 0f00 	cmp.w	r9, #0
 8008a0e:	d047      	beq.n	8008aa0 <__gethex+0x38c>
 8008a10:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d015      	beq.n	8008a44 <__gethex+0x330>
 8008a18:	2b03      	cmp	r3, #3
 8008a1a:	d017      	beq.n	8008a4c <__gethex+0x338>
 8008a1c:	2b01      	cmp	r3, #1
 8008a1e:	d109      	bne.n	8008a34 <__gethex+0x320>
 8008a20:	f019 0f02 	tst.w	r9, #2
 8008a24:	d006      	beq.n	8008a34 <__gethex+0x320>
 8008a26:	f8da 3000 	ldr.w	r3, [sl]
 8008a2a:	ea49 0903 	orr.w	r9, r9, r3
 8008a2e:	f019 0f01 	tst.w	r9, #1
 8008a32:	d10e      	bne.n	8008a52 <__gethex+0x33e>
 8008a34:	f045 0510 	orr.w	r5, r5, #16
 8008a38:	e032      	b.n	8008aa0 <__gethex+0x38c>
 8008a3a:	f04f 0901 	mov.w	r9, #1
 8008a3e:	e7d1      	b.n	80089e4 <__gethex+0x2d0>
 8008a40:	2501      	movs	r5, #1
 8008a42:	e7e2      	b.n	8008a0a <__gethex+0x2f6>
 8008a44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a46:	f1c3 0301 	rsb	r3, r3, #1
 8008a4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0f0      	beq.n	8008a34 <__gethex+0x320>
 8008a52:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a56:	f104 0314 	add.w	r3, r4, #20
 8008a5a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008a5e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008a62:	f04f 0c00 	mov.w	ip, #0
 8008a66:	4618      	mov	r0, r3
 8008a68:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a6c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008a70:	d01b      	beq.n	8008aaa <__gethex+0x396>
 8008a72:	3201      	adds	r2, #1
 8008a74:	6002      	str	r2, [r0, #0]
 8008a76:	2d02      	cmp	r5, #2
 8008a78:	f104 0314 	add.w	r3, r4, #20
 8008a7c:	d13c      	bne.n	8008af8 <__gethex+0x3e4>
 8008a7e:	f8d8 2000 	ldr.w	r2, [r8]
 8008a82:	3a01      	subs	r2, #1
 8008a84:	42b2      	cmp	r2, r6
 8008a86:	d109      	bne.n	8008a9c <__gethex+0x388>
 8008a88:	1171      	asrs	r1, r6, #5
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a90:	f006 061f 	and.w	r6, r6, #31
 8008a94:	fa02 f606 	lsl.w	r6, r2, r6
 8008a98:	421e      	tst	r6, r3
 8008a9a:	d13a      	bne.n	8008b12 <__gethex+0x3fe>
 8008a9c:	f045 0520 	orr.w	r5, r5, #32
 8008aa0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008aa2:	601c      	str	r4, [r3, #0]
 8008aa4:	9b02      	ldr	r3, [sp, #8]
 8008aa6:	601f      	str	r7, [r3, #0]
 8008aa8:	e6b0      	b.n	800880c <__gethex+0xf8>
 8008aaa:	4299      	cmp	r1, r3
 8008aac:	f843 cc04 	str.w	ip, [r3, #-4]
 8008ab0:	d8d9      	bhi.n	8008a66 <__gethex+0x352>
 8008ab2:	68a3      	ldr	r3, [r4, #8]
 8008ab4:	459b      	cmp	fp, r3
 8008ab6:	db17      	blt.n	8008ae8 <__gethex+0x3d4>
 8008ab8:	6861      	ldr	r1, [r4, #4]
 8008aba:	9801      	ldr	r0, [sp, #4]
 8008abc:	3101      	adds	r1, #1
 8008abe:	f7fe f803 	bl	8006ac8 <_Balloc>
 8008ac2:	4681      	mov	r9, r0
 8008ac4:	b918      	cbnz	r0, 8008ace <__gethex+0x3ba>
 8008ac6:	4b1a      	ldr	r3, [pc, #104]	@ (8008b30 <__gethex+0x41c>)
 8008ac8:	4602      	mov	r2, r0
 8008aca:	2184      	movs	r1, #132	@ 0x84
 8008acc:	e6c5      	b.n	800885a <__gethex+0x146>
 8008ace:	6922      	ldr	r2, [r4, #16]
 8008ad0:	3202      	adds	r2, #2
 8008ad2:	f104 010c 	add.w	r1, r4, #12
 8008ad6:	0092      	lsls	r2, r2, #2
 8008ad8:	300c      	adds	r0, #12
 8008ada:	f7ff fd6b 	bl	80085b4 <memcpy>
 8008ade:	4621      	mov	r1, r4
 8008ae0:	9801      	ldr	r0, [sp, #4]
 8008ae2:	f7fe f831 	bl	8006b48 <_Bfree>
 8008ae6:	464c      	mov	r4, r9
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	1c5a      	adds	r2, r3, #1
 8008aec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008af0:	6122      	str	r2, [r4, #16]
 8008af2:	2201      	movs	r2, #1
 8008af4:	615a      	str	r2, [r3, #20]
 8008af6:	e7be      	b.n	8008a76 <__gethex+0x362>
 8008af8:	6922      	ldr	r2, [r4, #16]
 8008afa:	455a      	cmp	r2, fp
 8008afc:	dd0b      	ble.n	8008b16 <__gethex+0x402>
 8008afe:	2101      	movs	r1, #1
 8008b00:	4620      	mov	r0, r4
 8008b02:	f7ff fd9f 	bl	8008644 <rshift>
 8008b06:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b0a:	3701      	adds	r7, #1
 8008b0c:	42bb      	cmp	r3, r7
 8008b0e:	f6ff aee0 	blt.w	80088d2 <__gethex+0x1be>
 8008b12:	2501      	movs	r5, #1
 8008b14:	e7c2      	b.n	8008a9c <__gethex+0x388>
 8008b16:	f016 061f 	ands.w	r6, r6, #31
 8008b1a:	d0fa      	beq.n	8008b12 <__gethex+0x3fe>
 8008b1c:	4453      	add	r3, sl
 8008b1e:	f1c6 0620 	rsb	r6, r6, #32
 8008b22:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008b26:	f7fe f8c1 	bl	8006cac <__hi0bits>
 8008b2a:	42b0      	cmp	r0, r6
 8008b2c:	dbe7      	blt.n	8008afe <__gethex+0x3ea>
 8008b2e:	e7f0      	b.n	8008b12 <__gethex+0x3fe>
 8008b30:	080093f1 	.word	0x080093f1

08008b34 <L_shift>:
 8008b34:	f1c2 0208 	rsb	r2, r2, #8
 8008b38:	0092      	lsls	r2, r2, #2
 8008b3a:	b570      	push	{r4, r5, r6, lr}
 8008b3c:	f1c2 0620 	rsb	r6, r2, #32
 8008b40:	6843      	ldr	r3, [r0, #4]
 8008b42:	6804      	ldr	r4, [r0, #0]
 8008b44:	fa03 f506 	lsl.w	r5, r3, r6
 8008b48:	432c      	orrs	r4, r5
 8008b4a:	40d3      	lsrs	r3, r2
 8008b4c:	6004      	str	r4, [r0, #0]
 8008b4e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b52:	4288      	cmp	r0, r1
 8008b54:	d3f4      	bcc.n	8008b40 <L_shift+0xc>
 8008b56:	bd70      	pop	{r4, r5, r6, pc}

08008b58 <__match>:
 8008b58:	b530      	push	{r4, r5, lr}
 8008b5a:	6803      	ldr	r3, [r0, #0]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b62:	b914      	cbnz	r4, 8008b6a <__match+0x12>
 8008b64:	6003      	str	r3, [r0, #0]
 8008b66:	2001      	movs	r0, #1
 8008b68:	bd30      	pop	{r4, r5, pc}
 8008b6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b6e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008b72:	2d19      	cmp	r5, #25
 8008b74:	bf98      	it	ls
 8008b76:	3220      	addls	r2, #32
 8008b78:	42a2      	cmp	r2, r4
 8008b7a:	d0f0      	beq.n	8008b5e <__match+0x6>
 8008b7c:	2000      	movs	r0, #0
 8008b7e:	e7f3      	b.n	8008b68 <__match+0x10>

08008b80 <__hexnan>:
 8008b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b84:	680b      	ldr	r3, [r1, #0]
 8008b86:	6801      	ldr	r1, [r0, #0]
 8008b88:	115e      	asrs	r6, r3, #5
 8008b8a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008b8e:	f013 031f 	ands.w	r3, r3, #31
 8008b92:	b087      	sub	sp, #28
 8008b94:	bf18      	it	ne
 8008b96:	3604      	addne	r6, #4
 8008b98:	2500      	movs	r5, #0
 8008b9a:	1f37      	subs	r7, r6, #4
 8008b9c:	4682      	mov	sl, r0
 8008b9e:	4690      	mov	r8, r2
 8008ba0:	9301      	str	r3, [sp, #4]
 8008ba2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008ba6:	46b9      	mov	r9, r7
 8008ba8:	463c      	mov	r4, r7
 8008baa:	9502      	str	r5, [sp, #8]
 8008bac:	46ab      	mov	fp, r5
 8008bae:	784a      	ldrb	r2, [r1, #1]
 8008bb0:	1c4b      	adds	r3, r1, #1
 8008bb2:	9303      	str	r3, [sp, #12]
 8008bb4:	b342      	cbz	r2, 8008c08 <__hexnan+0x88>
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	9105      	str	r1, [sp, #20]
 8008bba:	9204      	str	r2, [sp, #16]
 8008bbc:	f7ff fd94 	bl	80086e8 <__hexdig_fun>
 8008bc0:	2800      	cmp	r0, #0
 8008bc2:	d151      	bne.n	8008c68 <__hexnan+0xe8>
 8008bc4:	9a04      	ldr	r2, [sp, #16]
 8008bc6:	9905      	ldr	r1, [sp, #20]
 8008bc8:	2a20      	cmp	r2, #32
 8008bca:	d818      	bhi.n	8008bfe <__hexnan+0x7e>
 8008bcc:	9b02      	ldr	r3, [sp, #8]
 8008bce:	459b      	cmp	fp, r3
 8008bd0:	dd13      	ble.n	8008bfa <__hexnan+0x7a>
 8008bd2:	454c      	cmp	r4, r9
 8008bd4:	d206      	bcs.n	8008be4 <__hexnan+0x64>
 8008bd6:	2d07      	cmp	r5, #7
 8008bd8:	dc04      	bgt.n	8008be4 <__hexnan+0x64>
 8008bda:	462a      	mov	r2, r5
 8008bdc:	4649      	mov	r1, r9
 8008bde:	4620      	mov	r0, r4
 8008be0:	f7ff ffa8 	bl	8008b34 <L_shift>
 8008be4:	4544      	cmp	r4, r8
 8008be6:	d952      	bls.n	8008c8e <__hexnan+0x10e>
 8008be8:	2300      	movs	r3, #0
 8008bea:	f1a4 0904 	sub.w	r9, r4, #4
 8008bee:	f844 3c04 	str.w	r3, [r4, #-4]
 8008bf2:	f8cd b008 	str.w	fp, [sp, #8]
 8008bf6:	464c      	mov	r4, r9
 8008bf8:	461d      	mov	r5, r3
 8008bfa:	9903      	ldr	r1, [sp, #12]
 8008bfc:	e7d7      	b.n	8008bae <__hexnan+0x2e>
 8008bfe:	2a29      	cmp	r2, #41	@ 0x29
 8008c00:	d157      	bne.n	8008cb2 <__hexnan+0x132>
 8008c02:	3102      	adds	r1, #2
 8008c04:	f8ca 1000 	str.w	r1, [sl]
 8008c08:	f1bb 0f00 	cmp.w	fp, #0
 8008c0c:	d051      	beq.n	8008cb2 <__hexnan+0x132>
 8008c0e:	454c      	cmp	r4, r9
 8008c10:	d206      	bcs.n	8008c20 <__hexnan+0xa0>
 8008c12:	2d07      	cmp	r5, #7
 8008c14:	dc04      	bgt.n	8008c20 <__hexnan+0xa0>
 8008c16:	462a      	mov	r2, r5
 8008c18:	4649      	mov	r1, r9
 8008c1a:	4620      	mov	r0, r4
 8008c1c:	f7ff ff8a 	bl	8008b34 <L_shift>
 8008c20:	4544      	cmp	r4, r8
 8008c22:	d936      	bls.n	8008c92 <__hexnan+0x112>
 8008c24:	f1a8 0204 	sub.w	r2, r8, #4
 8008c28:	4623      	mov	r3, r4
 8008c2a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008c2e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008c32:	429f      	cmp	r7, r3
 8008c34:	d2f9      	bcs.n	8008c2a <__hexnan+0xaa>
 8008c36:	1b3b      	subs	r3, r7, r4
 8008c38:	f023 0303 	bic.w	r3, r3, #3
 8008c3c:	3304      	adds	r3, #4
 8008c3e:	3401      	adds	r4, #1
 8008c40:	3e03      	subs	r6, #3
 8008c42:	42b4      	cmp	r4, r6
 8008c44:	bf88      	it	hi
 8008c46:	2304      	movhi	r3, #4
 8008c48:	4443      	add	r3, r8
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	f843 2b04 	str.w	r2, [r3], #4
 8008c50:	429f      	cmp	r7, r3
 8008c52:	d2fb      	bcs.n	8008c4c <__hexnan+0xcc>
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	b91b      	cbnz	r3, 8008c60 <__hexnan+0xe0>
 8008c58:	4547      	cmp	r7, r8
 8008c5a:	d128      	bne.n	8008cae <__hexnan+0x12e>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	603b      	str	r3, [r7, #0]
 8008c60:	2005      	movs	r0, #5
 8008c62:	b007      	add	sp, #28
 8008c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c68:	3501      	adds	r5, #1
 8008c6a:	2d08      	cmp	r5, #8
 8008c6c:	f10b 0b01 	add.w	fp, fp, #1
 8008c70:	dd06      	ble.n	8008c80 <__hexnan+0x100>
 8008c72:	4544      	cmp	r4, r8
 8008c74:	d9c1      	bls.n	8008bfa <__hexnan+0x7a>
 8008c76:	2300      	movs	r3, #0
 8008c78:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c7c:	2501      	movs	r5, #1
 8008c7e:	3c04      	subs	r4, #4
 8008c80:	6822      	ldr	r2, [r4, #0]
 8008c82:	f000 000f 	and.w	r0, r0, #15
 8008c86:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008c8a:	6020      	str	r0, [r4, #0]
 8008c8c:	e7b5      	b.n	8008bfa <__hexnan+0x7a>
 8008c8e:	2508      	movs	r5, #8
 8008c90:	e7b3      	b.n	8008bfa <__hexnan+0x7a>
 8008c92:	9b01      	ldr	r3, [sp, #4]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d0dd      	beq.n	8008c54 <__hexnan+0xd4>
 8008c98:	f1c3 0320 	rsb	r3, r3, #32
 8008c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca0:	40da      	lsrs	r2, r3
 8008ca2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	f846 3c04 	str.w	r3, [r6, #-4]
 8008cac:	e7d2      	b.n	8008c54 <__hexnan+0xd4>
 8008cae:	3f04      	subs	r7, #4
 8008cb0:	e7d0      	b.n	8008c54 <__hexnan+0xd4>
 8008cb2:	2004      	movs	r0, #4
 8008cb4:	e7d5      	b.n	8008c62 <__hexnan+0xe2>

08008cb6 <__ascii_mbtowc>:
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	b901      	cbnz	r1, 8008cbc <__ascii_mbtowc+0x6>
 8008cba:	a901      	add	r1, sp, #4
 8008cbc:	b142      	cbz	r2, 8008cd0 <__ascii_mbtowc+0x1a>
 8008cbe:	b14b      	cbz	r3, 8008cd4 <__ascii_mbtowc+0x1e>
 8008cc0:	7813      	ldrb	r3, [r2, #0]
 8008cc2:	600b      	str	r3, [r1, #0]
 8008cc4:	7812      	ldrb	r2, [r2, #0]
 8008cc6:	1e10      	subs	r0, r2, #0
 8008cc8:	bf18      	it	ne
 8008cca:	2001      	movne	r0, #1
 8008ccc:	b002      	add	sp, #8
 8008cce:	4770      	bx	lr
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	e7fb      	b.n	8008ccc <__ascii_mbtowc+0x16>
 8008cd4:	f06f 0001 	mvn.w	r0, #1
 8008cd8:	e7f8      	b.n	8008ccc <__ascii_mbtowc+0x16>

08008cda <_realloc_r>:
 8008cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cde:	4680      	mov	r8, r0
 8008ce0:	4615      	mov	r5, r2
 8008ce2:	460c      	mov	r4, r1
 8008ce4:	b921      	cbnz	r1, 8008cf0 <_realloc_r+0x16>
 8008ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cea:	4611      	mov	r1, r2
 8008cec:	f7fd be60 	b.w	80069b0 <_malloc_r>
 8008cf0:	b92a      	cbnz	r2, 8008cfe <_realloc_r+0x24>
 8008cf2:	f7fd fde9 	bl	80068c8 <_free_r>
 8008cf6:	2400      	movs	r4, #0
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cfe:	f000 f840 	bl	8008d82 <_malloc_usable_size_r>
 8008d02:	4285      	cmp	r5, r0
 8008d04:	4606      	mov	r6, r0
 8008d06:	d802      	bhi.n	8008d0e <_realloc_r+0x34>
 8008d08:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d0c:	d8f4      	bhi.n	8008cf8 <_realloc_r+0x1e>
 8008d0e:	4629      	mov	r1, r5
 8008d10:	4640      	mov	r0, r8
 8008d12:	f7fd fe4d 	bl	80069b0 <_malloc_r>
 8008d16:	4607      	mov	r7, r0
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d0ec      	beq.n	8008cf6 <_realloc_r+0x1c>
 8008d1c:	42b5      	cmp	r5, r6
 8008d1e:	462a      	mov	r2, r5
 8008d20:	4621      	mov	r1, r4
 8008d22:	bf28      	it	cs
 8008d24:	4632      	movcs	r2, r6
 8008d26:	f7ff fc45 	bl	80085b4 <memcpy>
 8008d2a:	4621      	mov	r1, r4
 8008d2c:	4640      	mov	r0, r8
 8008d2e:	f7fd fdcb 	bl	80068c8 <_free_r>
 8008d32:	463c      	mov	r4, r7
 8008d34:	e7e0      	b.n	8008cf8 <_realloc_r+0x1e>

08008d36 <__ascii_wctomb>:
 8008d36:	4603      	mov	r3, r0
 8008d38:	4608      	mov	r0, r1
 8008d3a:	b141      	cbz	r1, 8008d4e <__ascii_wctomb+0x18>
 8008d3c:	2aff      	cmp	r2, #255	@ 0xff
 8008d3e:	d904      	bls.n	8008d4a <__ascii_wctomb+0x14>
 8008d40:	228a      	movs	r2, #138	@ 0x8a
 8008d42:	601a      	str	r2, [r3, #0]
 8008d44:	f04f 30ff 	mov.w	r0, #4294967295
 8008d48:	4770      	bx	lr
 8008d4a:	700a      	strb	r2, [r1, #0]
 8008d4c:	2001      	movs	r0, #1
 8008d4e:	4770      	bx	lr

08008d50 <fiprintf>:
 8008d50:	b40e      	push	{r1, r2, r3}
 8008d52:	b503      	push	{r0, r1, lr}
 8008d54:	4601      	mov	r1, r0
 8008d56:	ab03      	add	r3, sp, #12
 8008d58:	4805      	ldr	r0, [pc, #20]	@ (8008d70 <fiprintf+0x20>)
 8008d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d5e:	6800      	ldr	r0, [r0, #0]
 8008d60:	9301      	str	r3, [sp, #4]
 8008d62:	f000 f83f 	bl	8008de4 <_vfiprintf_r>
 8008d66:	b002      	add	sp, #8
 8008d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d6c:	b003      	add	sp, #12
 8008d6e:	4770      	bx	lr
 8008d70:	20000018 	.word	0x20000018

08008d74 <abort>:
 8008d74:	b508      	push	{r3, lr}
 8008d76:	2006      	movs	r0, #6
 8008d78:	f000 fa08 	bl	800918c <raise>
 8008d7c:	2001      	movs	r0, #1
 8008d7e:	f7f8 fce9 	bl	8001754 <_exit>

08008d82 <_malloc_usable_size_r>:
 8008d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d86:	1f18      	subs	r0, r3, #4
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	bfbc      	itt	lt
 8008d8c:	580b      	ldrlt	r3, [r1, r0]
 8008d8e:	18c0      	addlt	r0, r0, r3
 8008d90:	4770      	bx	lr

08008d92 <__sfputc_r>:
 8008d92:	6893      	ldr	r3, [r2, #8]
 8008d94:	3b01      	subs	r3, #1
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	b410      	push	{r4}
 8008d9a:	6093      	str	r3, [r2, #8]
 8008d9c:	da08      	bge.n	8008db0 <__sfputc_r+0x1e>
 8008d9e:	6994      	ldr	r4, [r2, #24]
 8008da0:	42a3      	cmp	r3, r4
 8008da2:	db01      	blt.n	8008da8 <__sfputc_r+0x16>
 8008da4:	290a      	cmp	r1, #10
 8008da6:	d103      	bne.n	8008db0 <__sfputc_r+0x1e>
 8008da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dac:	f000 b932 	b.w	8009014 <__swbuf_r>
 8008db0:	6813      	ldr	r3, [r2, #0]
 8008db2:	1c58      	adds	r0, r3, #1
 8008db4:	6010      	str	r0, [r2, #0]
 8008db6:	7019      	strb	r1, [r3, #0]
 8008db8:	4608      	mov	r0, r1
 8008dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dbe:	4770      	bx	lr

08008dc0 <__sfputs_r>:
 8008dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dc2:	4606      	mov	r6, r0
 8008dc4:	460f      	mov	r7, r1
 8008dc6:	4614      	mov	r4, r2
 8008dc8:	18d5      	adds	r5, r2, r3
 8008dca:	42ac      	cmp	r4, r5
 8008dcc:	d101      	bne.n	8008dd2 <__sfputs_r+0x12>
 8008dce:	2000      	movs	r0, #0
 8008dd0:	e007      	b.n	8008de2 <__sfputs_r+0x22>
 8008dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dd6:	463a      	mov	r2, r7
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f7ff ffda 	bl	8008d92 <__sfputc_r>
 8008dde:	1c43      	adds	r3, r0, #1
 8008de0:	d1f3      	bne.n	8008dca <__sfputs_r+0xa>
 8008de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008de4 <_vfiprintf_r>:
 8008de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de8:	460d      	mov	r5, r1
 8008dea:	b09d      	sub	sp, #116	@ 0x74
 8008dec:	4614      	mov	r4, r2
 8008dee:	4698      	mov	r8, r3
 8008df0:	4606      	mov	r6, r0
 8008df2:	b118      	cbz	r0, 8008dfc <_vfiprintf_r+0x18>
 8008df4:	6a03      	ldr	r3, [r0, #32]
 8008df6:	b90b      	cbnz	r3, 8008dfc <_vfiprintf_r+0x18>
 8008df8:	f7fc fdfa 	bl	80059f0 <__sinit>
 8008dfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dfe:	07d9      	lsls	r1, r3, #31
 8008e00:	d405      	bmi.n	8008e0e <_vfiprintf_r+0x2a>
 8008e02:	89ab      	ldrh	r3, [r5, #12]
 8008e04:	059a      	lsls	r2, r3, #22
 8008e06:	d402      	bmi.n	8008e0e <_vfiprintf_r+0x2a>
 8008e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e0a:	f7fc ff08 	bl	8005c1e <__retarget_lock_acquire_recursive>
 8008e0e:	89ab      	ldrh	r3, [r5, #12]
 8008e10:	071b      	lsls	r3, r3, #28
 8008e12:	d501      	bpl.n	8008e18 <_vfiprintf_r+0x34>
 8008e14:	692b      	ldr	r3, [r5, #16]
 8008e16:	b99b      	cbnz	r3, 8008e40 <_vfiprintf_r+0x5c>
 8008e18:	4629      	mov	r1, r5
 8008e1a:	4630      	mov	r0, r6
 8008e1c:	f000 f938 	bl	8009090 <__swsetup_r>
 8008e20:	b170      	cbz	r0, 8008e40 <_vfiprintf_r+0x5c>
 8008e22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e24:	07dc      	lsls	r4, r3, #31
 8008e26:	d504      	bpl.n	8008e32 <_vfiprintf_r+0x4e>
 8008e28:	f04f 30ff 	mov.w	r0, #4294967295
 8008e2c:	b01d      	add	sp, #116	@ 0x74
 8008e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e32:	89ab      	ldrh	r3, [r5, #12]
 8008e34:	0598      	lsls	r0, r3, #22
 8008e36:	d4f7      	bmi.n	8008e28 <_vfiprintf_r+0x44>
 8008e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e3a:	f7fc fef1 	bl	8005c20 <__retarget_lock_release_recursive>
 8008e3e:	e7f3      	b.n	8008e28 <_vfiprintf_r+0x44>
 8008e40:	2300      	movs	r3, #0
 8008e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e44:	2320      	movs	r3, #32
 8008e46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e4e:	2330      	movs	r3, #48	@ 0x30
 8008e50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009000 <_vfiprintf_r+0x21c>
 8008e54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e58:	f04f 0901 	mov.w	r9, #1
 8008e5c:	4623      	mov	r3, r4
 8008e5e:	469a      	mov	sl, r3
 8008e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e64:	b10a      	cbz	r2, 8008e6a <_vfiprintf_r+0x86>
 8008e66:	2a25      	cmp	r2, #37	@ 0x25
 8008e68:	d1f9      	bne.n	8008e5e <_vfiprintf_r+0x7a>
 8008e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8008e6e:	d00b      	beq.n	8008e88 <_vfiprintf_r+0xa4>
 8008e70:	465b      	mov	r3, fp
 8008e72:	4622      	mov	r2, r4
 8008e74:	4629      	mov	r1, r5
 8008e76:	4630      	mov	r0, r6
 8008e78:	f7ff ffa2 	bl	8008dc0 <__sfputs_r>
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	f000 80a7 	beq.w	8008fd0 <_vfiprintf_r+0x1ec>
 8008e82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e84:	445a      	add	r2, fp
 8008e86:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e88:	f89a 3000 	ldrb.w	r3, [sl]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 809f 	beq.w	8008fd0 <_vfiprintf_r+0x1ec>
 8008e92:	2300      	movs	r3, #0
 8008e94:	f04f 32ff 	mov.w	r2, #4294967295
 8008e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e9c:	f10a 0a01 	add.w	sl, sl, #1
 8008ea0:	9304      	str	r3, [sp, #16]
 8008ea2:	9307      	str	r3, [sp, #28]
 8008ea4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ea8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008eaa:	4654      	mov	r4, sl
 8008eac:	2205      	movs	r2, #5
 8008eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eb2:	4853      	ldr	r0, [pc, #332]	@ (8009000 <_vfiprintf_r+0x21c>)
 8008eb4:	f7f7 f98c 	bl	80001d0 <memchr>
 8008eb8:	9a04      	ldr	r2, [sp, #16]
 8008eba:	b9d8      	cbnz	r0, 8008ef4 <_vfiprintf_r+0x110>
 8008ebc:	06d1      	lsls	r1, r2, #27
 8008ebe:	bf44      	itt	mi
 8008ec0:	2320      	movmi	r3, #32
 8008ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ec6:	0713      	lsls	r3, r2, #28
 8008ec8:	bf44      	itt	mi
 8008eca:	232b      	movmi	r3, #43	@ 0x2b
 8008ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ed4:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ed6:	d015      	beq.n	8008f04 <_vfiprintf_r+0x120>
 8008ed8:	9a07      	ldr	r2, [sp, #28]
 8008eda:	4654      	mov	r4, sl
 8008edc:	2000      	movs	r0, #0
 8008ede:	f04f 0c0a 	mov.w	ip, #10
 8008ee2:	4621      	mov	r1, r4
 8008ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ee8:	3b30      	subs	r3, #48	@ 0x30
 8008eea:	2b09      	cmp	r3, #9
 8008eec:	d94b      	bls.n	8008f86 <_vfiprintf_r+0x1a2>
 8008eee:	b1b0      	cbz	r0, 8008f1e <_vfiprintf_r+0x13a>
 8008ef0:	9207      	str	r2, [sp, #28]
 8008ef2:	e014      	b.n	8008f1e <_vfiprintf_r+0x13a>
 8008ef4:	eba0 0308 	sub.w	r3, r0, r8
 8008ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8008efc:	4313      	orrs	r3, r2
 8008efe:	9304      	str	r3, [sp, #16]
 8008f00:	46a2      	mov	sl, r4
 8008f02:	e7d2      	b.n	8008eaa <_vfiprintf_r+0xc6>
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	1d19      	adds	r1, r3, #4
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	9103      	str	r1, [sp, #12]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	bfbb      	ittet	lt
 8008f10:	425b      	neglt	r3, r3
 8008f12:	f042 0202 	orrlt.w	r2, r2, #2
 8008f16:	9307      	strge	r3, [sp, #28]
 8008f18:	9307      	strlt	r3, [sp, #28]
 8008f1a:	bfb8      	it	lt
 8008f1c:	9204      	strlt	r2, [sp, #16]
 8008f1e:	7823      	ldrb	r3, [r4, #0]
 8008f20:	2b2e      	cmp	r3, #46	@ 0x2e
 8008f22:	d10a      	bne.n	8008f3a <_vfiprintf_r+0x156>
 8008f24:	7863      	ldrb	r3, [r4, #1]
 8008f26:	2b2a      	cmp	r3, #42	@ 0x2a
 8008f28:	d132      	bne.n	8008f90 <_vfiprintf_r+0x1ac>
 8008f2a:	9b03      	ldr	r3, [sp, #12]
 8008f2c:	1d1a      	adds	r2, r3, #4
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	9203      	str	r2, [sp, #12]
 8008f32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008f36:	3402      	adds	r4, #2
 8008f38:	9305      	str	r3, [sp, #20]
 8008f3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009010 <_vfiprintf_r+0x22c>
 8008f3e:	7821      	ldrb	r1, [r4, #0]
 8008f40:	2203      	movs	r2, #3
 8008f42:	4650      	mov	r0, sl
 8008f44:	f7f7 f944 	bl	80001d0 <memchr>
 8008f48:	b138      	cbz	r0, 8008f5a <_vfiprintf_r+0x176>
 8008f4a:	9b04      	ldr	r3, [sp, #16]
 8008f4c:	eba0 000a 	sub.w	r0, r0, sl
 8008f50:	2240      	movs	r2, #64	@ 0x40
 8008f52:	4082      	lsls	r2, r0
 8008f54:	4313      	orrs	r3, r2
 8008f56:	3401      	adds	r4, #1
 8008f58:	9304      	str	r3, [sp, #16]
 8008f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f5e:	4829      	ldr	r0, [pc, #164]	@ (8009004 <_vfiprintf_r+0x220>)
 8008f60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f64:	2206      	movs	r2, #6
 8008f66:	f7f7 f933 	bl	80001d0 <memchr>
 8008f6a:	2800      	cmp	r0, #0
 8008f6c:	d03f      	beq.n	8008fee <_vfiprintf_r+0x20a>
 8008f6e:	4b26      	ldr	r3, [pc, #152]	@ (8009008 <_vfiprintf_r+0x224>)
 8008f70:	bb1b      	cbnz	r3, 8008fba <_vfiprintf_r+0x1d6>
 8008f72:	9b03      	ldr	r3, [sp, #12]
 8008f74:	3307      	adds	r3, #7
 8008f76:	f023 0307 	bic.w	r3, r3, #7
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	9303      	str	r3, [sp, #12]
 8008f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f80:	443b      	add	r3, r7
 8008f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f84:	e76a      	b.n	8008e5c <_vfiprintf_r+0x78>
 8008f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	2001      	movs	r0, #1
 8008f8e:	e7a8      	b.n	8008ee2 <_vfiprintf_r+0xfe>
 8008f90:	2300      	movs	r3, #0
 8008f92:	3401      	adds	r4, #1
 8008f94:	9305      	str	r3, [sp, #20]
 8008f96:	4619      	mov	r1, r3
 8008f98:	f04f 0c0a 	mov.w	ip, #10
 8008f9c:	4620      	mov	r0, r4
 8008f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fa2:	3a30      	subs	r2, #48	@ 0x30
 8008fa4:	2a09      	cmp	r2, #9
 8008fa6:	d903      	bls.n	8008fb0 <_vfiprintf_r+0x1cc>
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d0c6      	beq.n	8008f3a <_vfiprintf_r+0x156>
 8008fac:	9105      	str	r1, [sp, #20]
 8008fae:	e7c4      	b.n	8008f3a <_vfiprintf_r+0x156>
 8008fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008fb4:	4604      	mov	r4, r0
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e7f0      	b.n	8008f9c <_vfiprintf_r+0x1b8>
 8008fba:	ab03      	add	r3, sp, #12
 8008fbc:	9300      	str	r3, [sp, #0]
 8008fbe:	462a      	mov	r2, r5
 8008fc0:	4b12      	ldr	r3, [pc, #72]	@ (800900c <_vfiprintf_r+0x228>)
 8008fc2:	a904      	add	r1, sp, #16
 8008fc4:	4630      	mov	r0, r6
 8008fc6:	f7fb febb 	bl	8004d40 <_printf_float>
 8008fca:	4607      	mov	r7, r0
 8008fcc:	1c78      	adds	r0, r7, #1
 8008fce:	d1d6      	bne.n	8008f7e <_vfiprintf_r+0x19a>
 8008fd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008fd2:	07d9      	lsls	r1, r3, #31
 8008fd4:	d405      	bmi.n	8008fe2 <_vfiprintf_r+0x1fe>
 8008fd6:	89ab      	ldrh	r3, [r5, #12]
 8008fd8:	059a      	lsls	r2, r3, #22
 8008fda:	d402      	bmi.n	8008fe2 <_vfiprintf_r+0x1fe>
 8008fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008fde:	f7fc fe1f 	bl	8005c20 <__retarget_lock_release_recursive>
 8008fe2:	89ab      	ldrh	r3, [r5, #12]
 8008fe4:	065b      	lsls	r3, r3, #25
 8008fe6:	f53f af1f 	bmi.w	8008e28 <_vfiprintf_r+0x44>
 8008fea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fec:	e71e      	b.n	8008e2c <_vfiprintf_r+0x48>
 8008fee:	ab03      	add	r3, sp, #12
 8008ff0:	9300      	str	r3, [sp, #0]
 8008ff2:	462a      	mov	r2, r5
 8008ff4:	4b05      	ldr	r3, [pc, #20]	@ (800900c <_vfiprintf_r+0x228>)
 8008ff6:	a904      	add	r1, sp, #16
 8008ff8:	4630      	mov	r0, r6
 8008ffa:	f7fc f939 	bl	8005270 <_printf_i>
 8008ffe:	e7e4      	b.n	8008fca <_vfiprintf_r+0x1e6>
 8009000:	080096b1 	.word	0x080096b1
 8009004:	080096bb 	.word	0x080096bb
 8009008:	08004d41 	.word	0x08004d41
 800900c:	08008dc1 	.word	0x08008dc1
 8009010:	080096b7 	.word	0x080096b7

08009014 <__swbuf_r>:
 8009014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009016:	460e      	mov	r6, r1
 8009018:	4614      	mov	r4, r2
 800901a:	4605      	mov	r5, r0
 800901c:	b118      	cbz	r0, 8009026 <__swbuf_r+0x12>
 800901e:	6a03      	ldr	r3, [r0, #32]
 8009020:	b90b      	cbnz	r3, 8009026 <__swbuf_r+0x12>
 8009022:	f7fc fce5 	bl	80059f0 <__sinit>
 8009026:	69a3      	ldr	r3, [r4, #24]
 8009028:	60a3      	str	r3, [r4, #8]
 800902a:	89a3      	ldrh	r3, [r4, #12]
 800902c:	071a      	lsls	r2, r3, #28
 800902e:	d501      	bpl.n	8009034 <__swbuf_r+0x20>
 8009030:	6923      	ldr	r3, [r4, #16]
 8009032:	b943      	cbnz	r3, 8009046 <__swbuf_r+0x32>
 8009034:	4621      	mov	r1, r4
 8009036:	4628      	mov	r0, r5
 8009038:	f000 f82a 	bl	8009090 <__swsetup_r>
 800903c:	b118      	cbz	r0, 8009046 <__swbuf_r+0x32>
 800903e:	f04f 37ff 	mov.w	r7, #4294967295
 8009042:	4638      	mov	r0, r7
 8009044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009046:	6823      	ldr	r3, [r4, #0]
 8009048:	6922      	ldr	r2, [r4, #16]
 800904a:	1a98      	subs	r0, r3, r2
 800904c:	6963      	ldr	r3, [r4, #20]
 800904e:	b2f6      	uxtb	r6, r6
 8009050:	4283      	cmp	r3, r0
 8009052:	4637      	mov	r7, r6
 8009054:	dc05      	bgt.n	8009062 <__swbuf_r+0x4e>
 8009056:	4621      	mov	r1, r4
 8009058:	4628      	mov	r0, r5
 800905a:	f7ff fa47 	bl	80084ec <_fflush_r>
 800905e:	2800      	cmp	r0, #0
 8009060:	d1ed      	bne.n	800903e <__swbuf_r+0x2a>
 8009062:	68a3      	ldr	r3, [r4, #8]
 8009064:	3b01      	subs	r3, #1
 8009066:	60a3      	str	r3, [r4, #8]
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	1c5a      	adds	r2, r3, #1
 800906c:	6022      	str	r2, [r4, #0]
 800906e:	701e      	strb	r6, [r3, #0]
 8009070:	6962      	ldr	r2, [r4, #20]
 8009072:	1c43      	adds	r3, r0, #1
 8009074:	429a      	cmp	r2, r3
 8009076:	d004      	beq.n	8009082 <__swbuf_r+0x6e>
 8009078:	89a3      	ldrh	r3, [r4, #12]
 800907a:	07db      	lsls	r3, r3, #31
 800907c:	d5e1      	bpl.n	8009042 <__swbuf_r+0x2e>
 800907e:	2e0a      	cmp	r6, #10
 8009080:	d1df      	bne.n	8009042 <__swbuf_r+0x2e>
 8009082:	4621      	mov	r1, r4
 8009084:	4628      	mov	r0, r5
 8009086:	f7ff fa31 	bl	80084ec <_fflush_r>
 800908a:	2800      	cmp	r0, #0
 800908c:	d0d9      	beq.n	8009042 <__swbuf_r+0x2e>
 800908e:	e7d6      	b.n	800903e <__swbuf_r+0x2a>

08009090 <__swsetup_r>:
 8009090:	b538      	push	{r3, r4, r5, lr}
 8009092:	4b29      	ldr	r3, [pc, #164]	@ (8009138 <__swsetup_r+0xa8>)
 8009094:	4605      	mov	r5, r0
 8009096:	6818      	ldr	r0, [r3, #0]
 8009098:	460c      	mov	r4, r1
 800909a:	b118      	cbz	r0, 80090a4 <__swsetup_r+0x14>
 800909c:	6a03      	ldr	r3, [r0, #32]
 800909e:	b90b      	cbnz	r3, 80090a4 <__swsetup_r+0x14>
 80090a0:	f7fc fca6 	bl	80059f0 <__sinit>
 80090a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090a8:	0719      	lsls	r1, r3, #28
 80090aa:	d422      	bmi.n	80090f2 <__swsetup_r+0x62>
 80090ac:	06da      	lsls	r2, r3, #27
 80090ae:	d407      	bmi.n	80090c0 <__swsetup_r+0x30>
 80090b0:	2209      	movs	r2, #9
 80090b2:	602a      	str	r2, [r5, #0]
 80090b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090b8:	81a3      	strh	r3, [r4, #12]
 80090ba:	f04f 30ff 	mov.w	r0, #4294967295
 80090be:	e033      	b.n	8009128 <__swsetup_r+0x98>
 80090c0:	0758      	lsls	r0, r3, #29
 80090c2:	d512      	bpl.n	80090ea <__swsetup_r+0x5a>
 80090c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80090c6:	b141      	cbz	r1, 80090da <__swsetup_r+0x4a>
 80090c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80090cc:	4299      	cmp	r1, r3
 80090ce:	d002      	beq.n	80090d6 <__swsetup_r+0x46>
 80090d0:	4628      	mov	r0, r5
 80090d2:	f7fd fbf9 	bl	80068c8 <_free_r>
 80090d6:	2300      	movs	r3, #0
 80090d8:	6363      	str	r3, [r4, #52]	@ 0x34
 80090da:	89a3      	ldrh	r3, [r4, #12]
 80090dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80090e0:	81a3      	strh	r3, [r4, #12]
 80090e2:	2300      	movs	r3, #0
 80090e4:	6063      	str	r3, [r4, #4]
 80090e6:	6923      	ldr	r3, [r4, #16]
 80090e8:	6023      	str	r3, [r4, #0]
 80090ea:	89a3      	ldrh	r3, [r4, #12]
 80090ec:	f043 0308 	orr.w	r3, r3, #8
 80090f0:	81a3      	strh	r3, [r4, #12]
 80090f2:	6923      	ldr	r3, [r4, #16]
 80090f4:	b94b      	cbnz	r3, 800910a <__swsetup_r+0x7a>
 80090f6:	89a3      	ldrh	r3, [r4, #12]
 80090f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009100:	d003      	beq.n	800910a <__swsetup_r+0x7a>
 8009102:	4621      	mov	r1, r4
 8009104:	4628      	mov	r0, r5
 8009106:	f000 f883 	bl	8009210 <__smakebuf_r>
 800910a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800910e:	f013 0201 	ands.w	r2, r3, #1
 8009112:	d00a      	beq.n	800912a <__swsetup_r+0x9a>
 8009114:	2200      	movs	r2, #0
 8009116:	60a2      	str	r2, [r4, #8]
 8009118:	6962      	ldr	r2, [r4, #20]
 800911a:	4252      	negs	r2, r2
 800911c:	61a2      	str	r2, [r4, #24]
 800911e:	6922      	ldr	r2, [r4, #16]
 8009120:	b942      	cbnz	r2, 8009134 <__swsetup_r+0xa4>
 8009122:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009126:	d1c5      	bne.n	80090b4 <__swsetup_r+0x24>
 8009128:	bd38      	pop	{r3, r4, r5, pc}
 800912a:	0799      	lsls	r1, r3, #30
 800912c:	bf58      	it	pl
 800912e:	6962      	ldrpl	r2, [r4, #20]
 8009130:	60a2      	str	r2, [r4, #8]
 8009132:	e7f4      	b.n	800911e <__swsetup_r+0x8e>
 8009134:	2000      	movs	r0, #0
 8009136:	e7f7      	b.n	8009128 <__swsetup_r+0x98>
 8009138:	20000018 	.word	0x20000018

0800913c <_raise_r>:
 800913c:	291f      	cmp	r1, #31
 800913e:	b538      	push	{r3, r4, r5, lr}
 8009140:	4605      	mov	r5, r0
 8009142:	460c      	mov	r4, r1
 8009144:	d904      	bls.n	8009150 <_raise_r+0x14>
 8009146:	2316      	movs	r3, #22
 8009148:	6003      	str	r3, [r0, #0]
 800914a:	f04f 30ff 	mov.w	r0, #4294967295
 800914e:	bd38      	pop	{r3, r4, r5, pc}
 8009150:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009152:	b112      	cbz	r2, 800915a <_raise_r+0x1e>
 8009154:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009158:	b94b      	cbnz	r3, 800916e <_raise_r+0x32>
 800915a:	4628      	mov	r0, r5
 800915c:	f000 f830 	bl	80091c0 <_getpid_r>
 8009160:	4622      	mov	r2, r4
 8009162:	4601      	mov	r1, r0
 8009164:	4628      	mov	r0, r5
 8009166:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800916a:	f000 b817 	b.w	800919c <_kill_r>
 800916e:	2b01      	cmp	r3, #1
 8009170:	d00a      	beq.n	8009188 <_raise_r+0x4c>
 8009172:	1c59      	adds	r1, r3, #1
 8009174:	d103      	bne.n	800917e <_raise_r+0x42>
 8009176:	2316      	movs	r3, #22
 8009178:	6003      	str	r3, [r0, #0]
 800917a:	2001      	movs	r0, #1
 800917c:	e7e7      	b.n	800914e <_raise_r+0x12>
 800917e:	2100      	movs	r1, #0
 8009180:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009184:	4620      	mov	r0, r4
 8009186:	4798      	blx	r3
 8009188:	2000      	movs	r0, #0
 800918a:	e7e0      	b.n	800914e <_raise_r+0x12>

0800918c <raise>:
 800918c:	4b02      	ldr	r3, [pc, #8]	@ (8009198 <raise+0xc>)
 800918e:	4601      	mov	r1, r0
 8009190:	6818      	ldr	r0, [r3, #0]
 8009192:	f7ff bfd3 	b.w	800913c <_raise_r>
 8009196:	bf00      	nop
 8009198:	20000018 	.word	0x20000018

0800919c <_kill_r>:
 800919c:	b538      	push	{r3, r4, r5, lr}
 800919e:	4d07      	ldr	r5, [pc, #28]	@ (80091bc <_kill_r+0x20>)
 80091a0:	2300      	movs	r3, #0
 80091a2:	4604      	mov	r4, r0
 80091a4:	4608      	mov	r0, r1
 80091a6:	4611      	mov	r1, r2
 80091a8:	602b      	str	r3, [r5, #0]
 80091aa:	f7f8 fac3 	bl	8001734 <_kill>
 80091ae:	1c43      	adds	r3, r0, #1
 80091b0:	d102      	bne.n	80091b8 <_kill_r+0x1c>
 80091b2:	682b      	ldr	r3, [r5, #0]
 80091b4:	b103      	cbz	r3, 80091b8 <_kill_r+0x1c>
 80091b6:	6023      	str	r3, [r4, #0]
 80091b8:	bd38      	pop	{r3, r4, r5, pc}
 80091ba:	bf00      	nop
 80091bc:	20000478 	.word	0x20000478

080091c0 <_getpid_r>:
 80091c0:	f7f8 bab0 	b.w	8001724 <_getpid>

080091c4 <__swhatbuf_r>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	460c      	mov	r4, r1
 80091c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80091cc:	2900      	cmp	r1, #0
 80091ce:	b096      	sub	sp, #88	@ 0x58
 80091d0:	4615      	mov	r5, r2
 80091d2:	461e      	mov	r6, r3
 80091d4:	da0d      	bge.n	80091f2 <__swhatbuf_r+0x2e>
 80091d6:	89a3      	ldrh	r3, [r4, #12]
 80091d8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80091dc:	f04f 0100 	mov.w	r1, #0
 80091e0:	bf14      	ite	ne
 80091e2:	2340      	movne	r3, #64	@ 0x40
 80091e4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091e8:	2000      	movs	r0, #0
 80091ea:	6031      	str	r1, [r6, #0]
 80091ec:	602b      	str	r3, [r5, #0]
 80091ee:	b016      	add	sp, #88	@ 0x58
 80091f0:	bd70      	pop	{r4, r5, r6, pc}
 80091f2:	466a      	mov	r2, sp
 80091f4:	f000 f848 	bl	8009288 <_fstat_r>
 80091f8:	2800      	cmp	r0, #0
 80091fa:	dbec      	blt.n	80091d6 <__swhatbuf_r+0x12>
 80091fc:	9901      	ldr	r1, [sp, #4]
 80091fe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009202:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009206:	4259      	negs	r1, r3
 8009208:	4159      	adcs	r1, r3
 800920a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800920e:	e7eb      	b.n	80091e8 <__swhatbuf_r+0x24>

08009210 <__smakebuf_r>:
 8009210:	898b      	ldrh	r3, [r1, #12]
 8009212:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009214:	079d      	lsls	r5, r3, #30
 8009216:	4606      	mov	r6, r0
 8009218:	460c      	mov	r4, r1
 800921a:	d507      	bpl.n	800922c <__smakebuf_r+0x1c>
 800921c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	6123      	str	r3, [r4, #16]
 8009224:	2301      	movs	r3, #1
 8009226:	6163      	str	r3, [r4, #20]
 8009228:	b003      	add	sp, #12
 800922a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800922c:	ab01      	add	r3, sp, #4
 800922e:	466a      	mov	r2, sp
 8009230:	f7ff ffc8 	bl	80091c4 <__swhatbuf_r>
 8009234:	9f00      	ldr	r7, [sp, #0]
 8009236:	4605      	mov	r5, r0
 8009238:	4639      	mov	r1, r7
 800923a:	4630      	mov	r0, r6
 800923c:	f7fd fbb8 	bl	80069b0 <_malloc_r>
 8009240:	b948      	cbnz	r0, 8009256 <__smakebuf_r+0x46>
 8009242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009246:	059a      	lsls	r2, r3, #22
 8009248:	d4ee      	bmi.n	8009228 <__smakebuf_r+0x18>
 800924a:	f023 0303 	bic.w	r3, r3, #3
 800924e:	f043 0302 	orr.w	r3, r3, #2
 8009252:	81a3      	strh	r3, [r4, #12]
 8009254:	e7e2      	b.n	800921c <__smakebuf_r+0xc>
 8009256:	89a3      	ldrh	r3, [r4, #12]
 8009258:	6020      	str	r0, [r4, #0]
 800925a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800925e:	81a3      	strh	r3, [r4, #12]
 8009260:	9b01      	ldr	r3, [sp, #4]
 8009262:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009266:	b15b      	cbz	r3, 8009280 <__smakebuf_r+0x70>
 8009268:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800926c:	4630      	mov	r0, r6
 800926e:	f000 f81d 	bl	80092ac <_isatty_r>
 8009272:	b128      	cbz	r0, 8009280 <__smakebuf_r+0x70>
 8009274:	89a3      	ldrh	r3, [r4, #12]
 8009276:	f023 0303 	bic.w	r3, r3, #3
 800927a:	f043 0301 	orr.w	r3, r3, #1
 800927e:	81a3      	strh	r3, [r4, #12]
 8009280:	89a3      	ldrh	r3, [r4, #12]
 8009282:	431d      	orrs	r5, r3
 8009284:	81a5      	strh	r5, [r4, #12]
 8009286:	e7cf      	b.n	8009228 <__smakebuf_r+0x18>

08009288 <_fstat_r>:
 8009288:	b538      	push	{r3, r4, r5, lr}
 800928a:	4d07      	ldr	r5, [pc, #28]	@ (80092a8 <_fstat_r+0x20>)
 800928c:	2300      	movs	r3, #0
 800928e:	4604      	mov	r4, r0
 8009290:	4608      	mov	r0, r1
 8009292:	4611      	mov	r1, r2
 8009294:	602b      	str	r3, [r5, #0]
 8009296:	f7f8 faad 	bl	80017f4 <_fstat>
 800929a:	1c43      	adds	r3, r0, #1
 800929c:	d102      	bne.n	80092a4 <_fstat_r+0x1c>
 800929e:	682b      	ldr	r3, [r5, #0]
 80092a0:	b103      	cbz	r3, 80092a4 <_fstat_r+0x1c>
 80092a2:	6023      	str	r3, [r4, #0]
 80092a4:	bd38      	pop	{r3, r4, r5, pc}
 80092a6:	bf00      	nop
 80092a8:	20000478 	.word	0x20000478

080092ac <_isatty_r>:
 80092ac:	b538      	push	{r3, r4, r5, lr}
 80092ae:	4d06      	ldr	r5, [pc, #24]	@ (80092c8 <_isatty_r+0x1c>)
 80092b0:	2300      	movs	r3, #0
 80092b2:	4604      	mov	r4, r0
 80092b4:	4608      	mov	r0, r1
 80092b6:	602b      	str	r3, [r5, #0]
 80092b8:	f7f8 faac 	bl	8001814 <_isatty>
 80092bc:	1c43      	adds	r3, r0, #1
 80092be:	d102      	bne.n	80092c6 <_isatty_r+0x1a>
 80092c0:	682b      	ldr	r3, [r5, #0]
 80092c2:	b103      	cbz	r3, 80092c6 <_isatty_r+0x1a>
 80092c4:	6023      	str	r3, [r4, #0]
 80092c6:	bd38      	pop	{r3, r4, r5, pc}
 80092c8:	20000478 	.word	0x20000478

080092cc <_init>:
 80092cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ce:	bf00      	nop
 80092d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092d2:	bc08      	pop	{r3}
 80092d4:	469e      	mov	lr, r3
 80092d6:	4770      	bx	lr

080092d8 <_fini>:
 80092d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092da:	bf00      	nop
 80092dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092de:	bc08      	pop	{r3}
 80092e0:	469e      	mov	lr, r3
 80092e2:	4770      	bx	lr
