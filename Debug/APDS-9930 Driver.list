
APDS-9930 Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009284  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000478  08009418  08009418  0000a418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009890  08009890  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009890  08009890  0000a890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009898  08009898  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009898  08009898  0000a898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800989c  0800989c  0000a89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080098a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001d4  08009a74  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08009a74  0000b48c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d124  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efd  00000000  00000000  00018328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  0001a228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000086c  00000000  00000000  0001ad10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c546  00000000  00000000  0001b57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2e1  00000000  00000000  00037ac2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009fa8c  00000000  00000000  00046da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e682f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004178  00000000  00000000  000e6874  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ea9ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093fc 	.word	0x080093fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080093fc 	.word	0x080093fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000
 8000cf4:	00000000 	.word	0x00000000

08000cf8 <APDS9930_Init>:

/*
 * INITIALIZATION
 */

uint8_t APDS9930_Init (APDS9930_t* device, I2C_HandleTypeDef* i2c_handle) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
	// Set struct parameters
	device->i2c_handle = i2c_handle;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	601a      	str	r2, [r3, #0]

	device->lux = 0.0f;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
	device->prox = 0.0f;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]

	Ch0_data = 0;
 8000d18:	4bb5      	ldr	r3, [pc, #724]	@ (8000ff0 <APDS9930_Init+0x2f8>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	801a      	strh	r2, [r3, #0]
	Ch1_data = 0;
 8000d1e:	4bb5      	ldr	r3, [pc, #724]	@ (8000ff4 <APDS9930_Init+0x2fc>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	801a      	strh	r2, [r3, #0]

	IAC1 = 0.0f;
 8000d24:	4bb4      	ldr	r3, [pc, #720]	@ (8000ff8 <APDS9930_Init+0x300>)
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
	IAC2 = 0.0f;
 8000d2c:	4bb3      	ldr	r3, [pc, #716]	@ (8000ffc <APDS9930_Init+0x304>)
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]

	IAC = 0.0f;
 8000d34:	4bb2      	ldr	r3, [pc, #712]	@ (8001000 <APDS9930_Init+0x308>)
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
	LPC = 0.0f;
 8000d3c:	4bb1      	ldr	r3, [pc, #708]	@ (8001004 <APDS9930_Init+0x30c>)
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]

	// Store number of transaction errors ( to be returned at the end of the function )
	uint8_t err_num = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
	uint8_t reg_data;
	uint16_t reg_data_WORD;

	// ENABLE
	reg_data = APDS9930_DEFAULT_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_ENABLE, &reg_data);
 8000d4c:	f107 030d 	add.w	r3, r7, #13
 8000d50:	461a      	mov	r2, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 fa98 	bl	800128a <APDS9930_WriteRegister>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000d5e:	7bbb      	ldrb	r3, [r7, #14]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bf14      	ite	ne
 8000d64:	2301      	movne	r3, #1
 8000d66:	2300      	moveq	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	4413      	add	r3, r2
 8000d70:	73fb      	strb	r3, [r7, #15]

	// Check ID register (p.23)
	status = APDS9930_ReadRegister (device, APDS9930_REG_ID, &reg_data);
 8000d72:	f107 030d 	add.w	r3, r7, #13
 8000d76:	461a      	mov	r2, r3
 8000d78:	2112      	movs	r1, #18
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 fa31 	bl	80011e2 <APDS9930_ReadRegister>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bf14      	ite	ne
 8000d8a:	2301      	movne	r3, #1
 8000d8c:	2300      	moveq	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4413      	add	r3, r2
 8000d96:	73fb      	strb	r3, [r7, #15]

	if (reg_data != APDS9930_ID)	return 255;
 8000d98:	7b7b      	ldrb	r3, [r7, #13]
 8000d9a:	2b39      	cmp	r3, #57	@ 0x39
 8000d9c:	d001      	beq.n	8000da2 <APDS9930_Init+0xaa>
 8000d9e:	23ff      	movs	r3, #255	@ 0xff
 8000da0:	e118      	b.n	8000fd4 <APDS9930_Init+0x2dc>

	// ALS Timing Register
	reg_data = APDS9930_DEFAULT_ATIME;
 8000da2:	23ff      	movs	r3, #255	@ 0xff
 8000da4:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_ATIME, &reg_data);
 8000da6:	f107 030d 	add.w	r3, r7, #13
 8000daa:	461a      	mov	r2, r3
 8000dac:	2101      	movs	r1, #1
 8000dae:	6878      	ldr	r0, [r7, #4]
 8000db0:	f000 fa6b 	bl	800128a <APDS9930_WriteRegister>
 8000db4:	4603      	mov	r3, r0
 8000db6:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000db8:	7bbb      	ldrb	r3, [r7, #14]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	bf14      	ite	ne
 8000dbe:	2301      	movne	r3, #1
 8000dc0:	2300      	moveq	r3, #0
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	4413      	add	r3, r2
 8000dca:	73fb      	strb	r3, [r7, #15]

	ALSIT = 2.73 * (float) (256 - reg_data);
 8000dcc:	7b7b      	ldrb	r3, [r7, #13]
 8000dce:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000dd2:	ee07 3a90 	vmov	s15, r3
 8000dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dda:	ee17 0a90 	vmov	r0, s15
 8000dde:	f7ff fbb3 	bl	8000548 <__aeabi_f2d>
 8000de2:	a37f      	add	r3, pc, #508	@ (adr r3, 8000fe0 <APDS9930_Init+0x2e8>)
 8000de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de8:	f7ff fc06 	bl	80005f8 <__aeabi_dmul>
 8000dec:	4602      	mov	r2, r0
 8000dee:	460b      	mov	r3, r1
 8000df0:	4610      	mov	r0, r2
 8000df2:	4619      	mov	r1, r3
 8000df4:	f7ff fef8 	bl	8000be8 <__aeabi_d2f>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	4a83      	ldr	r2, [pc, #524]	@ (8001008 <APDS9930_Init+0x310>)
 8000dfc:	6013      	str	r3, [r2, #0]

	// Proximity Time Control Register
	reg_data = APDS9930_DEFAULT_PTIME;
 8000dfe:	23ff      	movs	r3, #255	@ 0xff
 8000e00:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_PTIME, &reg_data);
 8000e02:	f107 030d 	add.w	r3, r7, #13
 8000e06:	461a      	mov	r2, r3
 8000e08:	2102      	movs	r1, #2
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f000 fa3d 	bl	800128a <APDS9930_WriteRegister>
 8000e10:	4603      	mov	r3, r0
 8000e12:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e14:	7bbb      	ldrb	r3, [r7, #14]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	bf14      	ite	ne
 8000e1a:	2301      	movne	r3, #1
 8000e1c:	2300      	moveq	r3, #0
 8000e1e:	b2db      	uxtb	r3, r3
 8000e20:	461a      	mov	r2, r3
 8000e22:	7bfb      	ldrb	r3, [r7, #15]
 8000e24:	4413      	add	r3, r2
 8000e26:	73fb      	strb	r3, [r7, #15]

	// Wait Time Register
	reg_data = APDS9930_DEFAULT_WTIME;
 8000e28:	23ff      	movs	r3, #255	@ 0xff
 8000e2a:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_WTIME, &reg_data);
 8000e2c:	f107 030d 	add.w	r3, r7, #13
 8000e30:	461a      	mov	r2, r3
 8000e32:	2103      	movs	r1, #3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f000 fa28 	bl	800128a <APDS9930_WriteRegister>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e3e:	7bbb      	ldrb	r3, [r7, #14]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	bf14      	ite	ne
 8000e44:	2301      	movne	r3, #1
 8000e46:	2300      	moveq	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	4413      	add	r3, r2
 8000e50:	73fb      	strb	r3, [r7, #15]

	// Proximity Interrupt Low Threshold
	reg_data_WORD = APDS9930_DEFAULT_PILTx;
 8000e52:	2300      	movs	r3, #0
 8000e54:	817b      	strh	r3, [r7, #10]
	// status = APDS9930_WORD_WriteRegister (device, APDS9930_REG_PILTL, &reg_data, &reg_data_2);
	status = APDS9930_WORD_WriteRegister_2 (device, APDS9930_REG_PILTL, &reg_data_WORD);
 8000e56:	f107 030a 	add.w	r3, r7, #10
 8000e5a:	461a      	mov	r2, r3
 8000e5c:	2108      	movs	r1, #8
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 fa46 	bl	80012f0 <APDS9930_WORD_WriteRegister_2>
 8000e64:	4603      	mov	r3, r0
 8000e66:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e68:	7bbb      	ldrb	r3, [r7, #14]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bf14      	ite	ne
 8000e6e:	2301      	movne	r3, #1
 8000e70:	2300      	moveq	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	461a      	mov	r2, r3
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	4413      	add	r3, r2
 8000e7a:	73fb      	strb	r3, [r7, #15]

	// Proximity Interrupt High Threshold
	reg_data_WORD = APDS9930_DEFAULT_PIHTx;
 8000e7c:	2332      	movs	r3, #50	@ 0x32
 8000e7e:	817b      	strh	r3, [r7, #10]
	// status = APDS9930_WORD_WriteRegister (device, APDS9930_REG_PIHTL, &reg_data, &reg_data_2);
	status = APDS9930_WORD_WriteRegister_2 (device, APDS9930_REG_PIHTL, &reg_data_WORD);
 8000e80:	f107 030a 	add.w	r3, r7, #10
 8000e84:	461a      	mov	r2, r3
 8000e86:	210a      	movs	r1, #10
 8000e88:	6878      	ldr	r0, [r7, #4]
 8000e8a:	f000 fa31 	bl	80012f0 <APDS9930_WORD_WriteRegister_2>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e92:	7bbb      	ldrb	r3, [r7, #14]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	bf14      	ite	ne
 8000e98:	2301      	movne	r3, #1
 8000e9a:	2300      	moveq	r3, #0
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	7bfb      	ldrb	r3, [r7, #15]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	73fb      	strb	r3, [r7, #15]

	// Persistence Register
	reg_data = APDS9930_DEFAULT_PERS;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_PERS, &reg_data);
 8000eaa:	f107 030d 	add.w	r3, r7, #13
 8000eae:	461a      	mov	r2, r3
 8000eb0:	210c      	movs	r1, #12
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 f9e9 	bl	800128a <APDS9930_WriteRegister>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000ebc:	7bbb      	ldrb	r3, [r7, #14]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	bf14      	ite	ne
 8000ec2:	2301      	movne	r3, #1
 8000ec4:	2300      	moveq	r3, #0
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	461a      	mov	r2, r3
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	4413      	add	r3, r2
 8000ece:	73fb      	strb	r3, [r7, #15]

	// Configuration Register
	reg_data = APDS9930_DEFAULT_CONFIG;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_CONFIG, &reg_data);
 8000ed4:	f107 030d 	add.w	r3, r7, #13
 8000ed8:	461a      	mov	r2, r3
 8000eda:	210d      	movs	r1, #13
 8000edc:	6878      	ldr	r0, [r7, #4]
 8000ede:	f000 f9d4 	bl	800128a <APDS9930_WriteRegister>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000ee6:	7bbb      	ldrb	r3, [r7, #14]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bf14      	ite	ne
 8000eec:	2301      	movne	r3, #1
 8000eee:	2300      	moveq	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	7bfb      	ldrb	r3, [r7, #15]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	73fb      	strb	r3, [r7, #15]

	AGAIN = Pow (2, reg_data >> 2);
 8000efa:	7b7b      	ldrb	r3, [r7, #13]
 8000efc:	089b      	lsrs	r3, r3, #2
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4619      	mov	r1, r3
 8000f02:	2002      	movs	r0, #2
 8000f04:	f000 fa54 	bl	80013b0 <Pow>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	4b3f      	ldr	r3, [pc, #252]	@ (800100c <APDS9930_Init+0x314>)
 8000f0e:	701a      	strb	r2, [r3, #0]
	LPC = GA * DF / (ALSIT * (float) AGAIN);
 8000f10:	4b3e      	ldr	r3, [pc, #248]	@ (800100c <APDS9930_Init+0x314>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	ee07 3a90 	vmov	s15, r3
 8000f18:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f1c:	4b3a      	ldr	r3, [pc, #232]	@ (8001008 <APDS9930_Init+0x310>)
 8000f1e:	edd3 7a00 	vldr	s15, [r3]
 8000f22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f26:	ee17 0a90 	vmov	r0, s15
 8000f2a:	f7ff fb0d 	bl	8000548 <__aeabi_f2d>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	a12d      	add	r1, pc, #180	@ (adr r1, 8000fe8 <APDS9930_Init+0x2f0>)
 8000f34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f38:	f7ff fc88 	bl	800084c <__aeabi_ddiv>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	f7ff fe50 	bl	8000be8 <__aeabi_d2f>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a2e      	ldr	r2, [pc, #184]	@ (8001004 <APDS9930_Init+0x30c>)
 8000f4c:	6013      	str	r3, [r2, #0]

	// Proximity Pulse Count Register
	reg_data = APDS9930_DEFAULT_PPULSE;
 8000f4e:	2308      	movs	r3, #8
 8000f50:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_PPULSE, &reg_data);
 8000f52:	f107 030d 	add.w	r3, r7, #13
 8000f56:	461a      	mov	r2, r3
 8000f58:	210e      	movs	r1, #14
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f995 	bl	800128a <APDS9930_WriteRegister>
 8000f60:	4603      	mov	r3, r0
 8000f62:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	bf14      	ite	ne
 8000f6a:	2301      	movne	r3, #1
 8000f6c:	2300      	moveq	r3, #0
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	4413      	add	r3, r2
 8000f76:	73fb      	strb	r3, [r7, #15]

	// Control Register
	reg_data = APDS9930_DEFAULT_CONTROL;
 8000f78:	2320      	movs	r3, #32
 8000f7a:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_CONTROL, &reg_data);
 8000f7c:	f107 030d 	add.w	r3, r7, #13
 8000f80:	461a      	mov	r2, r3
 8000f82:	210f      	movs	r1, #15
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 f980 	bl	800128a <APDS9930_WriteRegister>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000f8e:	7bbb      	ldrb	r3, [r7, #14]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	bf14      	ite	ne
 8000f94:	2301      	movne	r3, #1
 8000f96:	2300      	moveq	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	73fb      	strb	r3, [r7, #15]

	// ENABLE
	reg_data = APDS9930_DEFAULT_ENABLE;
 8000fa2:	232f      	movs	r3, #47	@ 0x2f
 8000fa4:	737b      	strb	r3, [r7, #13]
	status = APDS9930_WriteRegister (device, APDS9930_REG_ENABLE, &reg_data);
 8000fa6:	f107 030d 	add.w	r3, r7, #13
 8000faa:	461a      	mov	r2, r3
 8000fac:	2100      	movs	r1, #0
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f000 f96b 	bl	800128a <APDS9930_WriteRegister>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000fb8:	7bbb      	ldrb	r3, [r7, #14]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	bf14      	ite	ne
 8000fbe:	2301      	movne	r3, #1
 8000fc0:	2300      	moveq	r3, #0
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	7bfb      	ldrb	r3, [r7, #15]
 8000fc8:	4413      	add	r3, r2
 8000fca:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(12);
 8000fcc:	200c      	movs	r0, #12
 8000fce:	f000 fdcb 	bl	8001b68 <HAL_Delay>

	return err_num;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	f3af 8000 	nop.w
 8000fe0:	3d70a3d7 	.word	0x3d70a3d7
 8000fe4:	4005d70a 	.word	0x4005d70a
 8000fe8:	47ae147b 	.word	0x47ae147b
 8000fec:	40397ae1 	.word	0x40397ae1
 8000ff0:	200001f6 	.word	0x200001f6
 8000ff4:	200001f8 	.word	0x200001f8
 8000ff8:	200001fc 	.word	0x200001fc
 8000ffc:	20000200 	.word	0x20000200
 8001000:	20000204 	.word	0x20000204
 8001004:	20000208 	.word	0x20000208
 8001008:	200001f0 	.word	0x200001f0
 800100c:	200001f4 	.word	0x200001f4

08001010 <APDS9930_ReadLux>:

/*
 * DATA AQUISITION
 */

HAL_StatusTypeDef APDS9930_ReadLux (APDS9930_t* device) {
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af02      	add	r7, sp, #8
 8001016:	6078      	str	r0, [r7, #4]
	uint8_t Ch0_raw[2];
	uint8_t Ch1_raw[2];
	HAL_StatusTypeDef status;

	status = APDS9930_WORD_ReadRegister (device, APDS9930_REG_Ch0DATAL, Ch0_raw);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	461a      	mov	r2, r3
 800101e:	2114      	movs	r1, #20
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f000 f908 	bl	8001236 <APDS9930_WORD_ReadRegister>
 8001026:	4603      	mov	r3, r0
 8001028:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)	return status;
 800102a:	7bfb      	ldrb	r3, [r7, #15]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <APDS9930_ReadLux+0x24>
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	e09c      	b.n	800116e <APDS9930_ReadLux+0x15e>
	status = APDS9930_WORD_ReadRegister (device, APDS9930_REG_Ch1DATAL, Ch1_raw);
 8001034:	f107 0308 	add.w	r3, r7, #8
 8001038:	461a      	mov	r2, r3
 800103a:	2116      	movs	r1, #22
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f8fa 	bl	8001236 <APDS9930_WORD_ReadRegister>
 8001042:	4603      	mov	r3, r0
 8001044:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)	return status;
 8001046:	7bfb      	ldrb	r3, [r7, #15]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <APDS9930_ReadLux+0x40>
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	e08e      	b.n	800116e <APDS9930_ReadLux+0x15e>

	Ch0_data = 256 * Ch0_raw[1] + Ch0_raw[0];
 8001050:	7b7b      	ldrb	r3, [r7, #13]
 8001052:	021b      	lsls	r3, r3, #8
 8001054:	b29b      	uxth	r3, r3
 8001056:	7b3a      	ldrb	r2, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b4c      	ldr	r3, [pc, #304]	@ (8001190 <APDS9930_ReadLux+0x180>)
 800105e:	801a      	strh	r2, [r3, #0]
	Ch1_data = 256 * Ch1_raw[1] + Ch1_raw[0];
 8001060:	7a7b      	ldrb	r3, [r7, #9]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b29b      	uxth	r3, r3
 8001066:	7a3a      	ldrb	r2, [r7, #8]
 8001068:	4413      	add	r3, r2
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b49      	ldr	r3, [pc, #292]	@ (8001194 <APDS9930_ReadLux+0x184>)
 800106e:	801a      	strh	r2, [r3, #0]

	IAC1 = (float) Ch0_data - B * (float) Ch1_data;
 8001070:	4b47      	ldr	r3, [pc, #284]	@ (8001190 <APDS9930_ReadLux+0x180>)
 8001072:	881b      	ldrh	r3, [r3, #0]
 8001074:	ee07 3a90 	vmov	s15, r3
 8001078:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800107c:	ee17 0a90 	vmov	r0, s15
 8001080:	f7ff fa62 	bl	8000548 <__aeabi_f2d>
 8001084:	4604      	mov	r4, r0
 8001086:	460d      	mov	r5, r1
 8001088:	4b42      	ldr	r3, [pc, #264]	@ (8001194 <APDS9930_ReadLux+0x184>)
 800108a:	881b      	ldrh	r3, [r3, #0]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001094:	ee17 0a90 	vmov	r0, s15
 8001098:	f7ff fa56 	bl	8000548 <__aeabi_f2d>
 800109c:	a336      	add	r3, pc, #216	@ (adr r3, 8001178 <APDS9930_ReadLux+0x168>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff faa9 	bl	80005f8 <__aeabi_dmul>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4620      	mov	r0, r4
 80010ac:	4629      	mov	r1, r5
 80010ae:	f7ff f8eb 	bl	8000288 <__aeabi_dsub>
 80010b2:	4602      	mov	r2, r0
 80010b4:	460b      	mov	r3, r1
 80010b6:	4610      	mov	r0, r2
 80010b8:	4619      	mov	r1, r3
 80010ba:	f7ff fd95 	bl	8000be8 <__aeabi_d2f>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a35      	ldr	r2, [pc, #212]	@ (8001198 <APDS9930_ReadLux+0x188>)
 80010c2:	6013      	str	r3, [r2, #0]
	IAC2 = C * (float) Ch0_data - D * (float) Ch1_data;
 80010c4:	4b32      	ldr	r3, [pc, #200]	@ (8001190 <APDS9930_ReadLux+0x180>)
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	ee07 3a90 	vmov	s15, r3
 80010cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d0:	ee17 0a90 	vmov	r0, s15
 80010d4:	f7ff fa38 	bl	8000548 <__aeabi_f2d>
 80010d8:	a329      	add	r3, pc, #164	@ (adr r3, 8001180 <APDS9930_ReadLux+0x170>)
 80010da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010de:	f7ff fa8b 	bl	80005f8 <__aeabi_dmul>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4614      	mov	r4, r2
 80010e8:	461d      	mov	r5, r3
 80010ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001194 <APDS9930_ReadLux+0x184>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f6:	ee17 0a90 	vmov	r0, s15
 80010fa:	f7ff fa25 	bl	8000548 <__aeabi_f2d>
 80010fe:	a322      	add	r3, pc, #136	@ (adr r3, 8001188 <APDS9930_ReadLux+0x178>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fa78 	bl	80005f8 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4620      	mov	r0, r4
 800110e:	4629      	mov	r1, r5
 8001110:	f7ff f8ba 	bl	8000288 <__aeabi_dsub>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fd64 	bl	8000be8 <__aeabi_d2f>
 8001120:	4603      	mov	r3, r0
 8001122:	4a1e      	ldr	r2, [pc, #120]	@ (800119c <APDS9930_ReadLux+0x18c>)
 8001124:	6013      	str	r3, [r2, #0]

	IAC = Max (2, IAC1, IAC2);
 8001126:	4b1c      	ldr	r3, [pc, #112]	@ (8001198 <APDS9930_ReadLux+0x188>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fa0c 	bl	8000548 <__aeabi_f2d>
 8001130:	4604      	mov	r4, r0
 8001132:	460d      	mov	r5, r1
 8001134:	4b19      	ldr	r3, [pc, #100]	@ (800119c <APDS9930_ReadLux+0x18c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fa05 	bl	8000548 <__aeabi_f2d>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	e9cd 2300 	strd	r2, r3, [sp]
 8001146:	4622      	mov	r2, r4
 8001148:	462b      	mov	r3, r5
 800114a:	2002      	movs	r0, #2
 800114c:	f000 f8f5 	bl	800133a <Max>
 8001150:	4603      	mov	r3, r0
 8001152:	4a13      	ldr	r2, [pc, #76]	@ (80011a0 <APDS9930_ReadLux+0x190>)
 8001154:	6013      	str	r3, [r2, #0]

	device->lux = IAC * LPC;
 8001156:	4b12      	ldr	r3, [pc, #72]	@ (80011a0 <APDS9930_ReadLux+0x190>)
 8001158:	ed93 7a00 	vldr	s14, [r3]
 800115c:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <APDS9930_ReadLux+0x194>)
 800115e:	edd3 7a00 	vldr	s15, [r3]
 8001162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	edc3 7a01 	vstr	s15, [r3, #4]

	return status;
 800116c:	7bfb      	ldrb	r3, [r7, #15]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3710      	adds	r7, #16
 8001172:	46bd      	mov	sp, r7
 8001174:	bdb0      	pop	{r4, r5, r7, pc}
 8001176:	bf00      	nop
 8001178:	83126e98 	.word	0x83126e98
 800117c:	3ffdcac0 	.word	0x3ffdcac0
 8001180:	645a1cac 	.word	0x645a1cac
 8001184:	3fe7df3b 	.word	0x3fe7df3b
 8001188:	9db22d0e 	.word	0x9db22d0e
 800118c:	3ff4a7ef 	.word	0x3ff4a7ef
 8001190:	200001f6 	.word	0x200001f6
 8001194:	200001f8 	.word	0x200001f8
 8001198:	200001fc 	.word	0x200001fc
 800119c:	20000200 	.word	0x20000200
 80011a0:	20000204 	.word	0x20000204
 80011a4:	20000208 	.word	0x20000208

080011a8 <APDS9930_ReadProximity>:

HAL_StatusTypeDef APDS9930_ReadProximity (APDS9930_t* device) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	uint8_t raw[2];
	HAL_StatusTypeDef status;

	status = APDS9930_WORD_ReadRegister (device, APDS9930_REG_PDATAL, raw);
 80011b0:	f107 030c 	add.w	r3, r7, #12
 80011b4:	461a      	mov	r2, r3
 80011b6:	2118      	movs	r1, #24
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f000 f83c 	bl	8001236 <APDS9930_WORD_ReadRegister>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
	device->prox = 256 * raw[1] + raw[0];
 80011c2:	7b7b      	ldrb	r3, [r7, #13]
 80011c4:	021b      	lsls	r3, r3, #8
 80011c6:	7b3a      	ldrb	r2, [r7, #12]
 80011c8:	4413      	add	r3, r2
 80011ca:	ee07 3a90 	vmov	s15, r3
 80011ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	edc3 7a02 	vstr	s15, [r3, #8]

	return status;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <APDS9930_ReadRegister>:

/*
 * LOW-LEVEL FUNCTIONS
 */

HAL_StatusTypeDef APDS9930_ReadRegister (APDS9930_t* device, uint8_t reg, uint8_t* data) {
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b088      	sub	sp, #32
 80011e6:	af02      	add	r7, sp, #8
 80011e8:	60f8      	str	r0, [r7, #12]
 80011ea:	460b      	mov	r3, r1
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd = APDS9930_REG_COMMAND_REPEAT + reg;
 80011f0:	7afb      	ldrb	r3, [r7, #11]
 80011f2:	3b80      	subs	r3, #128	@ 0x80
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Master_Transmit (device->i2c_handle, APDS9930_I2C_ADDR, &cmd, 1, HAL_MAX_DELAY)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	6818      	ldr	r0, [r3, #0]
 80011fc:	f107 0217 	add.w	r2, r7, #23
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2301      	movs	r3, #1
 8001208:	2172      	movs	r1, #114	@ 0x72
 800120a:	f001 f82b 	bl	8002264 <HAL_I2C_Master_Transmit>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <APDS9930_ReadRegister+0x36>
			!= HAL_OK)	return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e00a      	b.n	800122e <APDS9930_ReadRegister+0x4c>

	return HAL_I2C_Master_Receive (device->i2c_handle, APDS9930_I2C_ADDR, data, 1, HAL_MAX_DELAY);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	f04f 33ff 	mov.w	r3, #4294967295
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	2301      	movs	r3, #1
 8001224:	687a      	ldr	r2, [r7, #4]
 8001226:	2172      	movs	r1, #114	@ 0x72
 8001228:	f001 f934 	bl	8002494 <HAL_I2C_Master_Receive>
 800122c:	4603      	mov	r3, r0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <APDS9930_WORD_ReadRegister>:



HAL_StatusTypeDef APDS9930_WORD_ReadRegister (APDS9930_t* device, uint8_t reg, uint8_t* data) {
 8001236:	b580      	push	{r7, lr}
 8001238:	b088      	sub	sp, #32
 800123a:	af02      	add	r7, sp, #8
 800123c:	60f8      	str	r0, [r7, #12]
 800123e:	460b      	mov	r3, r1
 8001240:	607a      	str	r2, [r7, #4]
 8001242:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd = APDS9930_REG_COMMAND_REPEAT + reg;
 8001244:	7afb      	ldrb	r3, [r7, #11]
 8001246:	3b80      	subs	r3, #128	@ 0x80
 8001248:	b2db      	uxtb	r3, r3
 800124a:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Master_Transmit (device->i2c_handle, APDS9930_I2C_ADDR, &cmd, 1, HAL_MAX_DELAY)
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	6818      	ldr	r0, [r3, #0]
 8001250:	f107 0217 	add.w	r2, r7, #23
 8001254:	f04f 33ff 	mov.w	r3, #4294967295
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	2172      	movs	r1, #114	@ 0x72
 800125e:	f001 f801 	bl	8002264 <HAL_I2C_Master_Transmit>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <APDS9930_WORD_ReadRegister+0x36>
			!= HAL_OK)	return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e00a      	b.n	8001282 <APDS9930_WORD_ReadRegister+0x4c>

	return HAL_I2C_Master_Receive (device->i2c_handle, APDS9930_I2C_ADDR, data, 2, HAL_MAX_DELAY);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	9300      	str	r3, [sp, #0]
 8001276:	2302      	movs	r3, #2
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	2172      	movs	r1, #114	@ 0x72
 800127c:	f001 f90a 	bl	8002494 <HAL_I2C_Master_Receive>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <APDS9930_WriteRegister>:



HAL_StatusTypeDef APDS9930_WriteRegister (APDS9930_t* device, uint8_t reg, uint8_t* data) {
 800128a:	b580      	push	{r7, lr}
 800128c:	b088      	sub	sp, #32
 800128e:	af02      	add	r7, sp, #8
 8001290:	60f8      	str	r0, [r7, #12]
 8001292:	460b      	mov	r3, r1
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd[2] = {
			APDS9930_REG_COMMAND_REPEAT + reg,
 8001298:	7afb      	ldrb	r3, [r7, #11]
 800129a:	3b80      	subs	r3, #128	@ 0x80
 800129c:	b2db      	uxtb	r3, r3
	uint8_t cmd[2] = {
 800129e:	753b      	strb	r3, [r7, #20]
			(*data)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
	uint8_t cmd[2] = {
 80012a4:	757b      	strb	r3, [r7, #21]
	};

	return HAL_I2C_Master_Transmit (device->i2c_handle, APDS9930_I2C_ADDR, cmd, 2, HAL_MAX_DELAY);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6818      	ldr	r0, [r3, #0]
 80012aa:	f107 0214 	add.w	r2, r7, #20
 80012ae:	f04f 33ff 	mov.w	r3, #4294967295
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2302      	movs	r3, #2
 80012b6:	2172      	movs	r1, #114	@ 0x72
 80012b8:	f000 ffd4 	bl	8002264 <HAL_I2C_Master_Transmit>
 80012bc:	4603      	mov	r3, r0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <APDS9930_CLI_WriteRegister>:



HAL_StatusTypeDef APDS9930_CLI_WriteRegister (APDS9930_t* device, uint8_t command) {
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b084      	sub	sp, #16
 80012ca:	af02      	add	r7, sp, #8
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	460b      	mov	r3, r1
 80012d0:	70fb      	strb	r3, [r7, #3]
	// uint8_t cmd = command;

	return HAL_I2C_Master_Transmit (device->i2c_handle, APDS9930_I2C_ADDR, &command, 1, HAL_MAX_DELAY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	1cfa      	adds	r2, r7, #3
 80012d8:	f04f 33ff 	mov.w	r3, #4294967295
 80012dc:	9300      	str	r3, [sp, #0]
 80012de:	2301      	movs	r3, #1
 80012e0:	2172      	movs	r1, #114	@ 0x72
 80012e2:	f000 ffbf 	bl	8002264 <HAL_I2C_Master_Transmit>
 80012e6:	4603      	mov	r3, r0
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <APDS9930_WORD_WriteRegister_2>:
	return HAL_I2C_Master_Transmit (device->i2c_handle, APDS9930_I2C_ADDR, cmd, 3, HAL_MAX_DELAY);
}



HAL_StatusTypeDef APDS9930_WORD_WriteRegister_2 (APDS9930_t* device, uint8_t reg, uint16_t* data) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	460b      	mov	r3, r1
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd[3] = {
			APDS9930_REG_COMMAND_AUTO_INC + reg,
 80012fe:	7afb      	ldrb	r3, [r7, #11]
 8001300:	3b60      	subs	r3, #96	@ 0x60
 8001302:	b2db      	uxtb	r3, r3
	uint8_t cmd[3] = {
 8001304:	753b      	strb	r3, [r7, #20]
			(*data) & 0xFF,
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	881b      	ldrh	r3, [r3, #0]
	uint8_t cmd[3] = {
 800130a:	b2db      	uxtb	r3, r3
 800130c:	757b      	strb	r3, [r7, #21]
			(*data) >> 0x08
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	881b      	ldrh	r3, [r3, #0]
	uint8_t cmd[3] = {
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	b29b      	uxth	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	75bb      	strb	r3, [r7, #22]
	};

	return HAL_I2C_Master_Transmit (device->i2c_handle, APDS9930_I2C_ADDR, cmd, 3, HAL_MAX_DELAY);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6818      	ldr	r0, [r3, #0]
 800131e:	f107 0214 	add.w	r2, r7, #20
 8001322:	f04f 33ff 	mov.w	r3, #4294967295
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2303      	movs	r3, #3
 800132a:	2172      	movs	r1, #114	@ 0x72
 800132c:	f000 ff9a 	bl	8002264 <HAL_I2C_Master_Transmit>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <Max>:

/*
 * PRIVATE FUNCTIONS
 */

float Max (int num, ...) {
 800133a:	b40f      	push	{r0, r1, r2, r3}
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
	float max = 0.0f;
 8001342:	f04f 0300 	mov.w	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]
	float temp = 0.0f;
 8001348:	f04f 0300 	mov.w	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
	va_list vl;
	va_start (vl, num);
 800134e:	f107 031c 	add.w	r3, r7, #28
 8001352:	603b      	str	r3, [r7, #0]

	for (int i = 0; i < num; i++) {
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	e01e      	b.n	8001398 <Max+0x5e>
		temp = (float) va_arg (vl, double);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	3307      	adds	r3, #7
 800135e:	f023 0307 	bic.w	r3, r3, #7
 8001362:	f103 0208 	add.w	r2, r3, #8
 8001366:	603a      	str	r2, [r7, #0]
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc3a 	bl	8000be8 <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	607b      	str	r3, [r7, #4]
		max = temp > max ? temp : max;
 8001378:	ed97 7a01 	vldr	s14, [r7, #4]
 800137c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001380:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001388:	dd01      	ble.n	800138e <Max+0x54>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	e000      	b.n	8001390 <Max+0x56>
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < num; i++) {
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	3301      	adds	r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68ba      	ldr	r2, [r7, #8]
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	429a      	cmp	r2, r3
 800139e:	dbdc      	blt.n	800135a <Max+0x20>
	}

	return max;
 80013a0:	68fb      	ldr	r3, [r7, #12]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013ac:	b004      	add	sp, #16
 80013ae:	4770      	bx	lr

080013b0 <Pow>:

uint8_t Pow (uint8_t base, uint8_t exp) {
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	460a      	mov	r2, r1
 80013ba:	71fb      	strb	r3, [r7, #7]
 80013bc:	4613      	mov	r3, r2
 80013be:	71bb      	strb	r3, [r7, #6]
	uint8_t answer = 1;
 80013c0:	2301      	movs	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < exp; i++) {
 80013c4:	2300      	movs	r3, #0
 80013c6:	60bb      	str	r3, [r7, #8]
 80013c8:	e007      	b.n	80013da <Pow+0x2a>
		answer *= base;
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	fb12 f303 	smulbb	r3, r2, r3
 80013d2:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < exp; i++) {
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	3301      	adds	r3, #1
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	79bb      	ldrb	r3, [r7, #6]
 80013dc:	68ba      	ldr	r2, [r7, #8]
 80013de:	429a      	cmp	r2, r3
 80013e0:	dbf3      	blt.n	80013ca <Pow+0x1a>
	}

	return answer;
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3714      	adds	r7, #20
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013f4:	f000 fb52 	bl	8001a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013f8:	f000 f83a 	bl	8001470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013fc:	f000 f8fa 	bl	80015f4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001400:	f000 f888 	bl	8001514 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001404:	f000 f8c6 	bl	8001594 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  APDS9930_Init (&dev, &hi2c1);
 8001408:	4913      	ldr	r1, [pc, #76]	@ (8001458 <main+0x68>)
 800140a:	4814      	ldr	r0, [pc, #80]	@ (800145c <main+0x6c>)
 800140c:	f7ff fc74 	bl	8000cf8 <APDS9930_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (cool) {
 8001410:	4b13      	ldr	r3, [pc, #76]	@ (8001460 <main+0x70>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d0fb      	beq.n	8001410 <main+0x20>
		  APDS9930_ReadLux (&dev);
 8001418:	4810      	ldr	r0, [pc, #64]	@ (800145c <main+0x6c>)
 800141a:	f7ff fdf9 	bl	8001010 <APDS9930_ReadLux>
		  APDS9930_ReadProximity (&dev);
 800141e:	480f      	ldr	r0, [pc, #60]	@ (800145c <main+0x6c>)
 8001420:	f7ff fec2 	bl	80011a8 <APDS9930_ReadProximity>

//		  sprintf (message, "lux: %.2f\r\nprox: %.2f\r\n\n", dev.lux, dev.prox);
		  sprintf (message, "prox: %.2f\r\n\n", dev.prox);
 8001424:	4b0d      	ldr	r3, [pc, #52]	@ (800145c <main+0x6c>)
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f88d 	bl	8000548 <__aeabi_f2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	490c      	ldr	r1, [pc, #48]	@ (8001464 <main+0x74>)
 8001434:	480c      	ldr	r0, [pc, #48]	@ (8001468 <main+0x78>)
 8001436:	f004 fba7 	bl	8005b88 <siprintf>
		  HAL_UART_Transmit (&huart2, (uint8_t *) message, 64, HAL_MAX_DELAY);
 800143a:	f04f 33ff 	mov.w	r3, #4294967295
 800143e:	2240      	movs	r2, #64	@ 0x40
 8001440:	4909      	ldr	r1, [pc, #36]	@ (8001468 <main+0x78>)
 8001442:	480a      	ldr	r0, [pc, #40]	@ (800146c <main+0x7c>)
 8001444:	f003 f898 	bl	8004578 <HAL_UART_Transmit>
		  cool = false;
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <main+0x70>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]

		  APDS9930_CLI_WriteRegister (&dev, APDS9930_REG_COMMAND_PROX_CLI);
 800144e:	21e5      	movs	r1, #229	@ 0xe5
 8001450:	4802      	ldr	r0, [pc, #8]	@ (800145c <main+0x6c>)
 8001452:	f7ff ff38 	bl	80012c6 <APDS9930_CLI_WriteRegister>
	  if (cool) {
 8001456:	e7db      	b.n	8001410 <main+0x20>
 8001458:	2000020c 	.word	0x2000020c
 800145c:	200002e8 	.word	0x200002e8
 8001460:	200002f4 	.word	0x200002f4
 8001464:	08009418 	.word	0x08009418
 8001468:	200002f8 	.word	0x200002f8
 800146c:	20000260 	.word	0x20000260

08001470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b09c      	sub	sp, #112	@ 0x70
 8001474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001476:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800147a:	2228      	movs	r2, #40	@ 0x28
 800147c:	2100      	movs	r1, #0
 800147e:	4618      	mov	r0, r3
 8001480:	f004 fbe5 	bl	8005c4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001484:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001494:	463b      	mov	r3, r7
 8001496:	2234      	movs	r2, #52	@ 0x34
 8001498:	2100      	movs	r1, #0
 800149a:	4618      	mov	r0, r3
 800149c:	f004 fbd7 	bl	8005c4e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a0:	2302      	movs	r3, #2
 80014a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a4:	2301      	movs	r3, #1
 80014a6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014a8:	2310      	movs	r3, #16
 80014aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80014ac:	2300      	movs	r3, #0
 80014ae:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80014b4:	4618      	mov	r0, r3
 80014b6:	f001 fc21 	bl	8002cfc <HAL_RCC_OscConfig>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <SystemClock_Config+0x54>
  {
    Error_Handler();
 80014c0:	f000 f8d8 	bl	8001674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c4:	230f      	movs	r3, #15
 80014c6:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014c8:	2300      	movs	r3, #0
 80014ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014d4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014d6:	2300      	movs	r3, #0
 80014d8:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014da:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f002 fc49 	bl	8003d78 <HAL_RCC_ClockConfig>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80014ec:	f000 f8c2 	bl	8001674 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014f0:	2320      	movs	r3, #32
 80014f2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80014f4:	2310      	movs	r3, #16
 80014f6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014f8:	463b      	mov	r3, r7
 80014fa:	4618      	mov	r0, r3
 80014fc:	f002 fe5c 	bl	80041b8 <HAL_RCCEx_PeriphCLKConfig>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001506:	f000 f8b5 	bl	8001674 <Error_Handler>
  }
}
 800150a:	bf00      	nop
 800150c:	3770      	adds	r7, #112	@ 0x70
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001518:	4b1b      	ldr	r3, [pc, #108]	@ (8001588 <MX_I2C1_Init+0x74>)
 800151a:	4a1c      	ldr	r2, [pc, #112]	@ (800158c <MX_I2C1_Init+0x78>)
 800151c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <MX_I2C1_Init+0x74>)
 8001520:	4a1b      	ldr	r2, [pc, #108]	@ (8001590 <MX_I2C1_Init+0x7c>)
 8001522:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001524:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <MX_I2C1_Init+0x74>)
 8001526:	2200      	movs	r2, #0
 8001528:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800152a:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <MX_I2C1_Init+0x74>)
 800152c:	2201      	movs	r2, #1
 800152e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001530:	4b15      	ldr	r3, [pc, #84]	@ (8001588 <MX_I2C1_Init+0x74>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <MX_I2C1_Init+0x74>)
 8001538:	2200      	movs	r2, #0
 800153a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <MX_I2C1_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <MX_I2C1_Init+0x74>)
 8001544:	2200      	movs	r2, #0
 8001546:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001548:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <MX_I2C1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800154e:	480e      	ldr	r0, [pc, #56]	@ (8001588 <MX_I2C1_Init+0x74>)
 8001550:	f000 fded 	bl	800212e <HAL_I2C_Init>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800155a:	f000 f88b 	bl	8001674 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800155e:	2100      	movs	r1, #0
 8001560:	4809      	ldr	r0, [pc, #36]	@ (8001588 <MX_I2C1_Init+0x74>)
 8001562:	f001 fb33 	bl	8002bcc <HAL_I2CEx_ConfigAnalogFilter>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800156c:	f000 f882 	bl	8001674 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001570:	2100      	movs	r1, #0
 8001572:	4805      	ldr	r0, [pc, #20]	@ (8001588 <MX_I2C1_Init+0x74>)
 8001574:	f001 fb75 	bl	8002c62 <HAL_I2CEx_ConfigDigitalFilter>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800157e:	f000 f879 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	2000020c 	.word	0x2000020c
 800158c:	40005400 	.word	0x40005400
 8001590:	0010020a 	.word	0x0010020a

08001594 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001598:	4b14      	ldr	r3, [pc, #80]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 800159a:	4a15      	ldr	r2, [pc, #84]	@ (80015f0 <MX_USART2_UART_Init+0x5c>)
 800159c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800159e:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015a0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80015a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a6:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ac:	4b0f      	ldr	r3, [pc, #60]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015ba:	220c      	movs	r2, #12
 80015bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_USART2_UART_Init+0x58>)
 80015d8:	f002 ff80 	bl	80044dc <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015e2:	f000 f847 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000260 	.word	0x20000260
 80015f0:	40004400 	.word	0x40004400

080015f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
 8001608:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	4b19      	ldr	r3, [pc, #100]	@ (8001670 <MX_GPIO_Init+0x7c>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	4a18      	ldr	r2, [pc, #96]	@ (8001670 <MX_GPIO_Init+0x7c>)
 8001610:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001614:	6153      	str	r3, [r2, #20]
 8001616:	4b16      	ldr	r3, [pc, #88]	@ (8001670 <MX_GPIO_Init+0x7c>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <MX_GPIO_Init+0x7c>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	4a12      	ldr	r2, [pc, #72]	@ (8001670 <MX_GPIO_Init+0x7c>)
 8001628:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800162c:	6153      	str	r3, [r2, #20]
 800162e:	4b10      	ldr	r3, [pc, #64]	@ (8001670 <MX_GPIO_Init+0x7c>)
 8001630:	695b      	ldr	r3, [r3, #20]
 8001632:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 800163a:	2301      	movs	r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800163e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001642:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001644:	2301      	movs	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 030c 	add.w	r3, r7, #12
 800164c:	4619      	mov	r1, r3
 800164e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001652:	f000 fbbf 	bl	8001dd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	2006      	movs	r0, #6
 800165c:	f000 fb83 	bl	8001d66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001660:	2006      	movs	r0, #6
 8001662:	f000 fb9c 	bl	8001d9e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001666:	bf00      	nop
 8001668:	3720      	adds	r7, #32
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40021000 	.word	0x40021000

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800167c:	bf00      	nop
 800167e:	e7fd      	b.n	800167c <Error_Handler+0x8>

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	4b0f      	ldr	r3, [pc, #60]	@ (80016c4 <HAL_MspInit+0x44>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	4a0e      	ldr	r2, [pc, #56]	@ (80016c4 <HAL_MspInit+0x44>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6193      	str	r3, [r2, #24]
 8001692:	4b0c      	ldr	r3, [pc, #48]	@ (80016c4 <HAL_MspInit+0x44>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <HAL_MspInit+0x44>)
 80016a0:	69db      	ldr	r3, [r3, #28]
 80016a2:	4a08      	ldr	r2, [pc, #32]	@ (80016c4 <HAL_MspInit+0x44>)
 80016a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016a8:	61d3      	str	r3, [r2, #28]
 80016aa:	4b06      	ldr	r3, [pc, #24]	@ (80016c4 <HAL_MspInit+0x44>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b2:	603b      	str	r3, [r7, #0]
 80016b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b08a      	sub	sp, #40	@ 0x28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
 80016da:	609a      	str	r2, [r3, #8]
 80016dc:	60da      	str	r2, [r3, #12]
 80016de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a26      	ldr	r2, [pc, #152]	@ (8001780 <HAL_I2C_MspInit+0xb8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d145      	bne.n	8001776 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	4b26      	ldr	r3, [pc, #152]	@ (8001784 <HAL_I2C_MspInit+0xbc>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	4a25      	ldr	r2, [pc, #148]	@ (8001784 <HAL_I2C_MspInit+0xbc>)
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016f4:	6153      	str	r3, [r2, #20]
 80016f6:	4b23      	ldr	r3, [pc, #140]	@ (8001784 <HAL_I2C_MspInit+0xbc>)
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b20      	ldr	r3, [pc, #128]	@ (8001784 <HAL_I2C_MspInit+0xbc>)
 8001704:	695b      	ldr	r3, [r3, #20]
 8001706:	4a1f      	ldr	r2, [pc, #124]	@ (8001784 <HAL_I2C_MspInit+0xbc>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800170c:	6153      	str	r3, [r2, #20]
 800170e:	4b1d      	ldr	r3, [pc, #116]	@ (8001784 <HAL_I2C_MspInit+0xbc>)
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800171a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800171e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001720:	2312      	movs	r3, #18
 8001722:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800172c:	2304      	movs	r3, #4
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800173a:	f000 fb4b 	bl	8001dd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800173e:	2380      	movs	r3, #128	@ 0x80
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001742:	2312      	movs	r3, #18
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800174a:	2303      	movs	r3, #3
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800174e:	2304      	movs	r3, #4
 8001750:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	480b      	ldr	r0, [pc, #44]	@ (8001788 <HAL_I2C_MspInit+0xc0>)
 800175a:	f000 fb3b 	bl	8001dd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800175e:	4b09      	ldr	r3, [pc, #36]	@ (8001784 <HAL_I2C_MspInit+0xbc>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a08      	ldr	r2, [pc, #32]	@ (8001784 <HAL_I2C_MspInit+0xbc>)
 8001764:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_I2C_MspInit+0xbc>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001772:	60bb      	str	r3, [r7, #8]
 8001774:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001776:	bf00      	nop
 8001778:	3728      	adds	r7, #40	@ 0x28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40005400 	.word	0x40005400
 8001784:	40021000 	.word	0x40021000
 8001788:	48000400 	.word	0x48000400

0800178c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b08a      	sub	sp, #40	@ 0x28
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a17      	ldr	r2, [pc, #92]	@ (8001808 <HAL_UART_MspInit+0x7c>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d128      	bne.n	8001800 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017ae:	4b17      	ldr	r3, [pc, #92]	@ (800180c <HAL_UART_MspInit+0x80>)
 80017b0:	69db      	ldr	r3, [r3, #28]
 80017b2:	4a16      	ldr	r2, [pc, #88]	@ (800180c <HAL_UART_MspInit+0x80>)
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017b8:	61d3      	str	r3, [r2, #28]
 80017ba:	4b14      	ldr	r3, [pc, #80]	@ (800180c <HAL_UART_MspInit+0x80>)
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	4b11      	ldr	r3, [pc, #68]	@ (800180c <HAL_UART_MspInit+0x80>)
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	4a10      	ldr	r2, [pc, #64]	@ (800180c <HAL_UART_MspInit+0x80>)
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017d0:	6153      	str	r3, [r2, #20]
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_UART_MspInit+0x80>)
 80017d4:	695b      	ldr	r3, [r3, #20]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017de:	230c      	movs	r3, #12
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ee:	2307      	movs	r3, #7
 80017f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fc:	f000 faea 	bl	8001dd4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001800:	bf00      	nop
 8001802:	3728      	adds	r7, #40	@ 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40004400 	.word	0x40004400
 800180c:	40021000 	.word	0x40021000

08001810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001814:	bf00      	nop
 8001816:	e7fd      	b.n	8001814 <NMI_Handler+0x4>

08001818 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <MemManage_Handler+0x4>

08001828 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <BusFault_Handler+0x4>

08001830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <UsageFault_Handler+0x4>

08001838 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr

08001846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001846:	b480      	push	{r7}
 8001848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr

08001854 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr

08001862 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001866:	f000 f95f 	bl	8001b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (!HAL_GPIO_ReadPin(INT_GPIO_Port, INT_Pin)) {
 8001874:	2101      	movs	r1, #1
 8001876:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800187a:	f000 fc1d 	bl	80020b8 <HAL_GPIO_ReadPin>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <EXTI0_IRQHandler+0x1a>
		cool = true;
 8001884:	4b03      	ldr	r3, [pc, #12]	@ (8001894 <EXTI0_IRQHandler+0x24>)
 8001886:	2201      	movs	r2, #1
 8001888:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 800188a:	2001      	movs	r0, #1
 800188c:	f000 fc2c 	bl	80020e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200002f4 	.word	0x200002f4

08001898 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return 1;
 800189c:	2301      	movs	r3, #1
}
 800189e:	4618      	mov	r0, r3
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <_kill>:

int _kill(int pid, int sig)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
 80018b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018b2:	f004 fa1f 	bl	8005cf4 <__errno>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2216      	movs	r2, #22
 80018ba:	601a      	str	r2, [r3, #0]
  return -1;
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3708      	adds	r7, #8
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <_exit>:

void _exit (int status)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018d0:	f04f 31ff 	mov.w	r1, #4294967295
 80018d4:	6878      	ldr	r0, [r7, #4]
 80018d6:	f7ff ffe7 	bl	80018a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018da:	bf00      	nop
 80018dc:	e7fd      	b.n	80018da <_exit+0x12>

080018de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b086      	sub	sp, #24
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	60f8      	str	r0, [r7, #12]
 80018e6:	60b9      	str	r1, [r7, #8]
 80018e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
 80018ee:	e00a      	b.n	8001906 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018f0:	f3af 8000 	nop.w
 80018f4:	4601      	mov	r1, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1c5a      	adds	r2, r3, #1
 80018fa:	60ba      	str	r2, [r7, #8]
 80018fc:	b2ca      	uxtb	r2, r1
 80018fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3301      	adds	r3, #1
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	429a      	cmp	r2, r3
 800190c:	dbf0      	blt.n	80018f0 <_read+0x12>
  }

  return len;
 800190e:	687b      	ldr	r3, [r7, #4]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3718      	adds	r7, #24
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	e009      	b.n	800193e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	1c5a      	adds	r2, r3, #1
 800192e:	60ba      	str	r2, [r7, #8]
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	3301      	adds	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	697a      	ldr	r2, [r7, #20]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	dbf1      	blt.n	800192a <_write+0x12>
  }
  return len;
 8001946:	687b      	ldr	r3, [r7, #4]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <_close>:

int _close(int file)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001978:	605a      	str	r2, [r3, #4]
  return 0;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_isatty>:

int _isatty(int file)
{
 8001988:	b480      	push	{r7}
 800198a:	b083      	sub	sp, #12
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001990:	2301      	movs	r3, #1
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800199e:	b480      	push	{r7}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c0:	4a14      	ldr	r2, [pc, #80]	@ (8001a14 <_sbrk+0x5c>)
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <_sbrk+0x60>)
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019cc:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <_sbrk+0x64>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	@ (8001a20 <_sbrk+0x68>)
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d207      	bcs.n	80019f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e8:	f004 f984 	bl	8005cf4 <__errno>
 80019ec:	4603      	mov	r3, r0
 80019ee:	220c      	movs	r2, #12
 80019f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	e009      	b.n	8001a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fe:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <_sbrk+0x64>)
 8001a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20004000 	.word	0x20004000
 8001a18:	00000400 	.word	0x00000400
 8001a1c:	20000338 	.word	0x20000338
 8001a20:	20000490 	.word	0x20000490

08001a24 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a28:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <SystemInit+0x20>)
 8001a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a2e:	4a05      	ldr	r2, [pc, #20]	@ (8001a44 <SystemInit+0x20>)
 8001a30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a80 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a4c:	f7ff ffea 	bl	8001a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a50:	480c      	ldr	r0, [pc, #48]	@ (8001a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a52:	490d      	ldr	r1, [pc, #52]	@ (8001a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a54:	4a0d      	ldr	r2, [pc, #52]	@ (8001a8c <LoopForever+0xe>)
  movs r3, #0
 8001a56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a58:	e002      	b.n	8001a60 <LoopCopyDataInit>

08001a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a5e:	3304      	adds	r3, #4

08001a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a64:	d3f9      	bcc.n	8001a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a68:	4c0a      	ldr	r4, [pc, #40]	@ (8001a94 <LoopForever+0x16>)
  movs r3, #0
 8001a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a6c:	e001      	b.n	8001a72 <LoopFillZerobss>

08001a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a70:	3204      	adds	r2, #4

08001a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a74:	d3fb      	bcc.n	8001a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a76:	f004 f943 	bl	8005d00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a7a:	f7ff fcb9 	bl	80013f0 <main>

08001a7e <LoopForever>:

LoopForever:
    b LoopForever
 8001a7e:	e7fe      	b.n	8001a7e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a80:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a88:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a8c:	080098a0 	.word	0x080098a0
  ldr r2, =_sbss
 8001a90:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a94:	2000048c 	.word	0x2000048c

08001a98 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a98:	e7fe      	b.n	8001a98 <ADC1_IRQHandler>
	...

08001a9c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <HAL_Init+0x28>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a07      	ldr	r2, [pc, #28]	@ (8001ac4 <HAL_Init+0x28>)
 8001aa6:	f043 0310 	orr.w	r3, r3, #16
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aac:	2003      	movs	r0, #3
 8001aae:	f000 f94f 	bl	8001d50 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab2:	200f      	movs	r0, #15
 8001ab4:	f000 f808 	bl	8001ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab8:	f7ff fde2 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40022000 	.word	0x40022000

08001ac8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ad0:	4b12      	ldr	r3, [pc, #72]	@ (8001b1c <HAL_InitTick+0x54>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4b12      	ldr	r3, [pc, #72]	@ (8001b20 <HAL_InitTick+0x58>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ade:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ae2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f000 f967 	bl	8001dba <HAL_SYSTICK_Config>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00e      	b.n	8001b14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b0f      	cmp	r3, #15
 8001afa:	d80a      	bhi.n	8001b12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001afc:	2200      	movs	r2, #0
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	f04f 30ff 	mov.w	r0, #4294967295
 8001b04:	f000 f92f 	bl	8001d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b08:	4a06      	ldr	r2, [pc, #24]	@ (8001b24 <HAL_InitTick+0x5c>)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	e000      	b.n	8001b14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3708      	adds	r7, #8
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	20000008 	.word	0x20000008
 8001b24:	20000004 	.word	0x20000004

08001b28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b2c:	4b06      	ldr	r3, [pc, #24]	@ (8001b48 <HAL_IncTick+0x20>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_IncTick+0x24>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4413      	add	r3, r2
 8001b38:	4a04      	ldr	r2, [pc, #16]	@ (8001b4c <HAL_IncTick+0x24>)
 8001b3a:	6013      	str	r3, [r2, #0]
}
 8001b3c:	bf00      	nop
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	20000008 	.word	0x20000008
 8001b4c:	2000033c 	.word	0x2000033c

08001b50 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <HAL_GetTick+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	2000033c 	.word	0x2000033c

08001b68 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b70:	f7ff ffee 	bl	8001b50 <HAL_GetTick>
 8001b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d005      	beq.n	8001b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b82:	4b0a      	ldr	r3, [pc, #40]	@ (8001bac <HAL_Delay+0x44>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b8e:	bf00      	nop
 8001b90:	f7ff ffde 	bl	8001b50 <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d8f7      	bhi.n	8001b90 <HAL_Delay+0x28>
  {
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000008 	.word	0x20000008

08001bb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f003 0307 	and.w	r3, r3, #7
 8001bbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bdc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001be2:	4a04      	ldr	r2, [pc, #16]	@ (8001bf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	60d3      	str	r3, [r2, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bfc:	4b04      	ldr	r3, [pc, #16]	@ (8001c10 <__NVIC_GetPriorityGrouping+0x18>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	0a1b      	lsrs	r3, r3, #8
 8001c02:	f003 0307 	and.w	r3, r3, #7
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	db0b      	blt.n	8001c3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c26:	79fb      	ldrb	r3, [r7, #7]
 8001c28:	f003 021f 	and.w	r2, r3, #31
 8001c2c:	4907      	ldr	r1, [pc, #28]	@ (8001c4c <__NVIC_EnableIRQ+0x38>)
 8001c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c32:	095b      	lsrs	r3, r3, #5
 8001c34:	2001      	movs	r0, #1
 8001c36:	fa00 f202 	lsl.w	r2, r0, r2
 8001c3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	e000e100 	.word	0xe000e100

08001c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	db0a      	blt.n	8001c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	b2da      	uxtb	r2, r3
 8001c68:	490c      	ldr	r1, [pc, #48]	@ (8001c9c <__NVIC_SetPriority+0x4c>)
 8001c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6e:	0112      	lsls	r2, r2, #4
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	440b      	add	r3, r1
 8001c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c78:	e00a      	b.n	8001c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4908      	ldr	r1, [pc, #32]	@ (8001ca0 <__NVIC_SetPriority+0x50>)
 8001c80:	79fb      	ldrb	r3, [r7, #7]
 8001c82:	f003 030f 	and.w	r3, r3, #15
 8001c86:	3b04      	subs	r3, #4
 8001c88:	0112      	lsls	r2, r2, #4
 8001c8a:	b2d2      	uxtb	r2, r2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	761a      	strb	r2, [r3, #24]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	e000e100 	.word	0xe000e100
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b089      	sub	sp, #36	@ 0x24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	60b9      	str	r1, [r7, #8]
 8001cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	f1c3 0307 	rsb	r3, r3, #7
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	bf28      	it	cs
 8001cc2:	2304      	movcs	r3, #4
 8001cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3304      	adds	r3, #4
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d902      	bls.n	8001cd4 <NVIC_EncodePriority+0x30>
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	3b03      	subs	r3, #3
 8001cd2:	e000      	b.n	8001cd6 <NVIC_EncodePriority+0x32>
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce2:	43da      	mvns	r2, r3
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	401a      	ands	r2, r3
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf6:	43d9      	mvns	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cfc:	4313      	orrs	r3, r2
         );
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3724      	adds	r7, #36	@ 0x24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3b01      	subs	r3, #1
 8001d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d1c:	d301      	bcc.n	8001d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e00f      	b.n	8001d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d22:	4a0a      	ldr	r2, [pc, #40]	@ (8001d4c <SysTick_Config+0x40>)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3b01      	subs	r3, #1
 8001d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d2a:	210f      	movs	r1, #15
 8001d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d30:	f7ff ff8e 	bl	8001c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d34:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <SysTick_Config+0x40>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3a:	4b04      	ldr	r3, [pc, #16]	@ (8001d4c <SysTick_Config+0x40>)
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	e000e010 	.word	0xe000e010

08001d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f7ff ff29 	bl	8001bb0 <__NVIC_SetPriorityGrouping>
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b086      	sub	sp, #24
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	60b9      	str	r1, [r7, #8]
 8001d70:	607a      	str	r2, [r7, #4]
 8001d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d78:	f7ff ff3e 	bl	8001bf8 <__NVIC_GetPriorityGrouping>
 8001d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	68b9      	ldr	r1, [r7, #8]
 8001d82:	6978      	ldr	r0, [r7, #20]
 8001d84:	f7ff ff8e 	bl	8001ca4 <NVIC_EncodePriority>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff5d 	bl	8001c50 <__NVIC_SetPriority>
}
 8001d96:	bf00      	nop
 8001d98:	3718      	adds	r7, #24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff ff31 	bl	8001c14 <__NVIC_EnableIRQ>
}
 8001db2:	bf00      	nop
 8001db4:	3708      	adds	r7, #8
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b082      	sub	sp, #8
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffa2 	bl	8001d0c <SysTick_Config>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
	...

08001dd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b087      	sub	sp, #28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dde:	2300      	movs	r3, #0
 8001de0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de2:	e14e      	b.n	8002082 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	2101      	movs	r1, #1
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa01 f303 	lsl.w	r3, r1, r3
 8001df0:	4013      	ands	r3, r2
 8001df2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8140 	beq.w	800207c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 0303 	and.w	r3, r3, #3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d005      	beq.n	8001e14 <HAL_GPIO_Init+0x40>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0303 	and.w	r3, r3, #3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d130      	bne.n	8001e76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	005b      	lsls	r3, r3, #1
 8001e1e:	2203      	movs	r2, #3
 8001e20:	fa02 f303 	lsl.w	r3, r2, r3
 8001e24:	43db      	mvns	r3, r3
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	68da      	ldr	r2, [r3, #12]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	693a      	ldr	r2, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4013      	ands	r3, r2
 8001e58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	091b      	lsrs	r3, r3, #4
 8001e60:	f003 0201 	and.w	r2, r3, #1
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b03      	cmp	r3, #3
 8001e80:	d017      	beq.n	8001eb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	689a      	ldr	r2, [r3, #8]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	693a      	ldr	r2, [r7, #16]
 8001eb0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d123      	bne.n	8001f06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	08da      	lsrs	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3208      	adds	r2, #8
 8001ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	220f      	movs	r2, #15
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	691a      	ldr	r2, [r3, #16]
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	08da      	lsrs	r2, r3, #3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3208      	adds	r2, #8
 8001f00:	6939      	ldr	r1, [r7, #16]
 8001f02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2203      	movs	r2, #3
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f003 0203 	and.w	r2, r3, #3
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	f000 809a 	beq.w	800207c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f48:	4b55      	ldr	r3, [pc, #340]	@ (80020a0 <HAL_GPIO_Init+0x2cc>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a54      	ldr	r2, [pc, #336]	@ (80020a0 <HAL_GPIO_Init+0x2cc>)
 8001f4e:	f043 0301 	orr.w	r3, r3, #1
 8001f52:	6193      	str	r3, [r2, #24]
 8001f54:	4b52      	ldr	r3, [pc, #328]	@ (80020a0 <HAL_GPIO_Init+0x2cc>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	60bb      	str	r3, [r7, #8]
 8001f5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f60:	4a50      	ldr	r2, [pc, #320]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	3302      	adds	r3, #2
 8001f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f003 0303 	and.w	r3, r3, #3
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f8a:	d013      	beq.n	8001fb4 <HAL_GPIO_Init+0x1e0>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a46      	ldr	r2, [pc, #280]	@ (80020a8 <HAL_GPIO_Init+0x2d4>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00d      	beq.n	8001fb0 <HAL_GPIO_Init+0x1dc>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a45      	ldr	r2, [pc, #276]	@ (80020ac <HAL_GPIO_Init+0x2d8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d007      	beq.n	8001fac <HAL_GPIO_Init+0x1d8>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a44      	ldr	r2, [pc, #272]	@ (80020b0 <HAL_GPIO_Init+0x2dc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d101      	bne.n	8001fa8 <HAL_GPIO_Init+0x1d4>
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e006      	b.n	8001fb6 <HAL_GPIO_Init+0x1e2>
 8001fa8:	2305      	movs	r3, #5
 8001faa:	e004      	b.n	8001fb6 <HAL_GPIO_Init+0x1e2>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e002      	b.n	8001fb6 <HAL_GPIO_Init+0x1e2>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e000      	b.n	8001fb6 <HAL_GPIO_Init+0x1e2>
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	f002 0203 	and.w	r2, r2, #3
 8001fbc:	0092      	lsls	r2, r2, #2
 8001fbe:	4093      	lsls	r3, r2
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fc6:	4937      	ldr	r1, [pc, #220]	@ (80020a4 <HAL_GPIO_Init+0x2d0>)
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	089b      	lsrs	r3, r3, #2
 8001fcc:	3302      	adds	r3, #2
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fd4:	4b37      	ldr	r3, [pc, #220]	@ (80020b4 <HAL_GPIO_Init+0x2e0>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	693a      	ldr	r2, [r7, #16]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001ff0:	693a      	ldr	r2, [r7, #16]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80020b4 <HAL_GPIO_Init+0x2e0>)
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80020b4 <HAL_GPIO_Init+0x2e0>)
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002022:	4a24      	ldr	r2, [pc, #144]	@ (80020b4 <HAL_GPIO_Init+0x2e0>)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002028:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <HAL_GPIO_Init+0x2e0>)
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	43db      	mvns	r3, r3
 8002032:	693a      	ldr	r2, [r7, #16]
 8002034:	4013      	ands	r3, r2
 8002036:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002044:	693a      	ldr	r2, [r7, #16]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	4313      	orrs	r3, r2
 800204a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800204c:	4a19      	ldr	r2, [pc, #100]	@ (80020b4 <HAL_GPIO_Init+0x2e0>)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002052:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <HAL_GPIO_Init+0x2e0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	43db      	mvns	r3, r3
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4013      	ands	r3, r2
 8002060:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d003      	beq.n	8002076 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800206e:	693a      	ldr	r2, [r7, #16]
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4313      	orrs	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002076:	4a0f      	ldr	r2, [pc, #60]	@ (80020b4 <HAL_GPIO_Init+0x2e0>)
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	3301      	adds	r3, #1
 8002080:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	fa22 f303 	lsr.w	r3, r2, r3
 800208c:	2b00      	cmp	r3, #0
 800208e:	f47f aea9 	bne.w	8001de4 <HAL_GPIO_Init+0x10>
  }
}
 8002092:	bf00      	nop
 8002094:	bf00      	nop
 8002096:	371c      	adds	r7, #28
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	40021000 	.word	0x40021000
 80020a4:	40010000 	.word	0x40010000
 80020a8:	48000400 	.word	0x48000400
 80020ac:	48000800 	.word	0x48000800
 80020b0:	48000c00 	.word	0x48000c00
 80020b4:	40010400 	.word	0x40010400

080020b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	691a      	ldr	r2, [r3, #16]
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	4013      	ands	r3, r2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d002      	beq.n	80020d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020d0:	2301      	movs	r3, #1
 80020d2:	73fb      	strb	r3, [r7, #15]
 80020d4:	e001      	b.n	80020da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020da:	7bfb      	ldrb	r3, [r7, #15]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3714      	adds	r7, #20
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr

080020e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020f2:	4b08      	ldr	r3, [pc, #32]	@ (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020f4:	695a      	ldr	r2, [r3, #20]
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d006      	beq.n	800210c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020fe:	4a05      	ldr	r2, [pc, #20]	@ (8002114 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002100:	88fb      	ldrh	r3, [r7, #6]
 8002102:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002104:	88fb      	ldrh	r3, [r7, #6]
 8002106:	4618      	mov	r0, r3
 8002108:	f000 f806 	bl	8002118 <HAL_GPIO_EXTI_Callback>
  }
}
 800210c:	bf00      	nop
 800210e:	3708      	adds	r7, #8
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b082      	sub	sp, #8
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d101      	bne.n	8002140 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e08d      	b.n	800225c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d106      	bne.n	800215a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7ff fab7 	bl	80016c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2224      	movs	r2, #36	@ 0x24
 800215e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f022 0201 	bic.w	r2, r2, #1
 8002170:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685a      	ldr	r2, [r3, #4]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800217e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800218e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d107      	bne.n	80021a8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	e006      	b.n	80021b6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80021b4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d108      	bne.n	80021d0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	e007      	b.n	80021e0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021de:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	6812      	ldr	r2, [r2, #0]
 80021ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021f2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002202:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69d9      	ldr	r1, [r3, #28]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a1a      	ldr	r2, [r3, #32]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2220      	movs	r2, #32
 8002248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3708      	adds	r7, #8
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	461a      	mov	r2, r3
 8002270:	460b      	mov	r3, r1
 8002272:	817b      	strh	r3, [r7, #10]
 8002274:	4613      	mov	r3, r2
 8002276:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800227e:	b2db      	uxtb	r3, r3
 8002280:	2b20      	cmp	r3, #32
 8002282:	f040 80fd 	bne.w	8002480 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_I2C_Master_Transmit+0x30>
 8002290:	2302      	movs	r3, #2
 8002292:	e0f6      	b.n	8002482 <HAL_I2C_Master_Transmit+0x21e>
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2201      	movs	r2, #1
 8002298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800229c:	f7ff fc58 	bl	8001b50 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2319      	movs	r3, #25
 80022a8:	2201      	movs	r2, #1
 80022aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022ae:	68f8      	ldr	r0, [r7, #12]
 80022b0:	f000 fa0a 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e0e1      	b.n	8002482 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2221      	movs	r2, #33	@ 0x21
 80022c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2210      	movs	r2, #16
 80022ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2200      	movs	r2, #0
 80022d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	893a      	ldrh	r2, [r7, #8]
 80022de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	2bff      	cmp	r3, #255	@ 0xff
 80022ee:	d906      	bls.n	80022fe <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	22ff      	movs	r2, #255	@ 0xff
 80022f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80022f6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	e007      	b.n	800230e <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002302:	b29a      	uxth	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002308:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800230c:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002312:	2b00      	cmp	r3, #0
 8002314:	d024      	beq.n	8002360 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800231a:	781a      	ldrb	r2, [r3, #0]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	1c5a      	adds	r2, r3, #1
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002330:	b29b      	uxth	r3, r3
 8002332:	3b01      	subs	r3, #1
 8002334:	b29a      	uxth	r2, r3
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233e:	3b01      	subs	r3, #1
 8002340:	b29a      	uxth	r2, r3
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234a:	b2db      	uxtb	r3, r3
 800234c:	3301      	adds	r3, #1
 800234e:	b2da      	uxtb	r2, r3
 8002350:	8979      	ldrh	r1, [r7, #10]
 8002352:	4b4e      	ldr	r3, [pc, #312]	@ (800248c <HAL_I2C_Master_Transmit+0x228>)
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f000 fc05 	bl	8002b68 <I2C_TransferConfig>
 800235e:	e066      	b.n	800242e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002364:	b2da      	uxtb	r2, r3
 8002366:	8979      	ldrh	r1, [r7, #10]
 8002368:	4b48      	ldr	r3, [pc, #288]	@ (800248c <HAL_I2C_Master_Transmit+0x228>)
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f000 fbfa 	bl	8002b68 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002374:	e05b      	b.n	800242e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002376:	693a      	ldr	r2, [r7, #16]
 8002378:	6a39      	ldr	r1, [r7, #32]
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	f000 f9fd 	bl	800277a <I2C_WaitOnTXISFlagUntilTimeout>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d001      	beq.n	800238a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e07b      	b.n	8002482 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800238e:	781a      	ldrb	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b29a      	uxth	r2, r3
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b2:	3b01      	subs	r3, #1
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023be:	b29b      	uxth	r3, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d034      	beq.n	800242e <HAL_I2C_Master_Transmit+0x1ca>
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d130      	bne.n	800242e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	9300      	str	r3, [sp, #0]
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	2200      	movs	r2, #0
 80023d4:	2180      	movs	r1, #128	@ 0x80
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 f976 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e04d      	b.n	8002482 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2bff      	cmp	r3, #255	@ 0xff
 80023ee:	d90e      	bls.n	800240e <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	22ff      	movs	r2, #255	@ 0xff
 80023f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fa:	b2da      	uxtb	r2, r3
 80023fc:	8979      	ldrh	r1, [r7, #10]
 80023fe:	2300      	movs	r3, #0
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002406:	68f8      	ldr	r0, [r7, #12]
 8002408:	f000 fbae 	bl	8002b68 <I2C_TransferConfig>
 800240c:	e00f      	b.n	800242e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002412:	b29a      	uxth	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800241c:	b2da      	uxtb	r2, r3
 800241e:	8979      	ldrh	r1, [r7, #10]
 8002420:	2300      	movs	r3, #0
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002428:	68f8      	ldr	r0, [r7, #12]
 800242a:	f000 fb9d 	bl	8002b68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	2b00      	cmp	r3, #0
 8002436:	d19e      	bne.n	8002376 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	6a39      	ldr	r1, [r7, #32]
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 f9e3 	bl	8002808 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e01a      	b.n	8002482 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2220      	movs	r2, #32
 8002452:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6859      	ldr	r1, [r3, #4]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4b0c      	ldr	r3, [pc, #48]	@ (8002490 <HAL_I2C_Master_Transmit+0x22c>)
 8002460:	400b      	ands	r3, r1
 8002462:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2220      	movs	r2, #32
 8002468:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800247c:	2300      	movs	r3, #0
 800247e:	e000      	b.n	8002482 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002480:	2302      	movs	r3, #2
  }
}
 8002482:	4618      	mov	r0, r3
 8002484:	3718      	adds	r7, #24
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	80002000 	.word	0x80002000
 8002490:	fe00e800 	.word	0xfe00e800

08002494 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af02      	add	r7, sp, #8
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	607a      	str	r2, [r7, #4]
 800249e:	461a      	mov	r2, r3
 80024a0:	460b      	mov	r3, r1
 80024a2:	817b      	strh	r3, [r7, #10]
 80024a4:	4613      	mov	r3, r2
 80024a6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	f040 80db 	bne.w	800266c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d101      	bne.n	80024c4 <HAL_I2C_Master_Receive+0x30>
 80024c0:	2302      	movs	r3, #2
 80024c2:	e0d4      	b.n	800266e <HAL_I2C_Master_Receive+0x1da>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024cc:	f7ff fb40 	bl	8001b50 <HAL_GetTick>
 80024d0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	9300      	str	r3, [sp, #0]
 80024d6:	2319      	movs	r3, #25
 80024d8:	2201      	movs	r2, #1
 80024da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 f8f2 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0bf      	b.n	800266e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2222      	movs	r2, #34	@ 0x22
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2210      	movs	r2, #16
 80024fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	893a      	ldrh	r2, [r7, #8]
 800250e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2200      	movs	r2, #0
 8002514:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251a:	b29b      	uxth	r3, r3
 800251c:	2bff      	cmp	r3, #255	@ 0xff
 800251e:	d90e      	bls.n	800253e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2201      	movs	r2, #1
 8002524:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800252a:	b2da      	uxtb	r2, r3
 800252c:	8979      	ldrh	r1, [r7, #10]
 800252e:	4b52      	ldr	r3, [pc, #328]	@ (8002678 <HAL_I2C_Master_Receive+0x1e4>)
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f000 fb16 	bl	8002b68 <I2C_TransferConfig>
 800253c:	e06d      	b.n	800261a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254c:	b2da      	uxtb	r2, r3
 800254e:	8979      	ldrh	r1, [r7, #10]
 8002550:	4b49      	ldr	r3, [pc, #292]	@ (8002678 <HAL_I2C_Master_Receive+0x1e4>)
 8002552:	9300      	str	r3, [sp, #0]
 8002554:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002558:	68f8      	ldr	r0, [r7, #12]
 800255a:	f000 fb05 	bl	8002b68 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800255e:	e05c      	b.n	800261a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002560:	697a      	ldr	r2, [r7, #20]
 8002562:	6a39      	ldr	r1, [r7, #32]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f993 	bl	8002890 <I2C_WaitOnRXNEFlagUntilTimeout>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e07c      	b.n	800266e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002586:	1c5a      	adds	r2, r3, #1
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800259c:	b29b      	uxth	r3, r3
 800259e:	3b01      	subs	r3, #1
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d034      	beq.n	800261a <HAL_I2C_Master_Receive+0x186>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d130      	bne.n	800261a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	6a3b      	ldr	r3, [r7, #32]
 80025be:	2200      	movs	r2, #0
 80025c0:	2180      	movs	r1, #128	@ 0x80
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 f880 	bl	80026c8 <I2C_WaitOnFlagUntilTimeout>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e04d      	b.n	800266e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	2bff      	cmp	r3, #255	@ 0xff
 80025da:	d90e      	bls.n	80025fa <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	22ff      	movs	r2, #255	@ 0xff
 80025e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	8979      	ldrh	r1, [r7, #10]
 80025ea:	2300      	movs	r3, #0
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f000 fab8 	bl	8002b68 <I2C_TransferConfig>
 80025f8:	e00f      	b.n	800261a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fe:	b29a      	uxth	r2, r3
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002608:	b2da      	uxtb	r2, r3
 800260a:	8979      	ldrh	r1, [r7, #10]
 800260c:	2300      	movs	r3, #0
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 faa7 	bl	8002b68 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800261e:	b29b      	uxth	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d19d      	bne.n	8002560 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	6a39      	ldr	r1, [r7, #32]
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f8ed 	bl	8002808 <I2C_WaitOnSTOPFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e01a      	b.n	800266e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2220      	movs	r2, #32
 800263e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6859      	ldr	r1, [r3, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <HAL_I2C_Master_Receive+0x1e8>)
 800264c:	400b      	ands	r3, r1
 800264e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2220      	movs	r2, #32
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002668:	2300      	movs	r3, #0
 800266a:	e000      	b.n	800266e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800266c:	2302      	movs	r3, #2
  }
}
 800266e:	4618      	mov	r0, r3
 8002670:	3718      	adds	r7, #24
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
 8002676:	bf00      	nop
 8002678:	80002400 	.word	0x80002400
 800267c:	fe00e800 	.word	0xfe00e800

08002680 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b02      	cmp	r3, #2
 8002694:	d103      	bne.n	800269e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2200      	movs	r2, #0
 800269c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d007      	beq.n	80026bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	699a      	ldr	r2, [r3, #24]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f042 0201 	orr.w	r2, r2, #1
 80026ba:	619a      	str	r2, [r3, #24]
  }
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	603b      	str	r3, [r7, #0]
 80026d4:	4613      	mov	r3, r2
 80026d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026d8:	e03b      	b.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	6839      	ldr	r1, [r7, #0]
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f962 	bl	80029a8 <I2C_IsErrorOccurred>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e041      	b.n	8002772 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026f4:	d02d      	beq.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026f6:	f7ff fa2b 	bl	8001b50 <HAL_GetTick>
 80026fa:	4602      	mov	r2, r0
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	1ad3      	subs	r3, r2, r3
 8002700:	683a      	ldr	r2, [r7, #0]
 8002702:	429a      	cmp	r2, r3
 8002704:	d302      	bcc.n	800270c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d122      	bne.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	699a      	ldr	r2, [r3, #24]
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	4013      	ands	r3, r2
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	429a      	cmp	r2, r3
 800271a:	bf0c      	ite	eq
 800271c:	2301      	moveq	r3, #1
 800271e:	2300      	movne	r3, #0
 8002720:	b2db      	uxtb	r3, r3
 8002722:	461a      	mov	r2, r3
 8002724:	79fb      	ldrb	r3, [r7, #7]
 8002726:	429a      	cmp	r2, r3
 8002728:	d113      	bne.n	8002752 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272e:	f043 0220 	orr.w	r2, r3, #32
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2220      	movs	r2, #32
 800273a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e00f      	b.n	8002772 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	699a      	ldr	r2, [r3, #24]
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	4013      	ands	r3, r2
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	bf0c      	ite	eq
 8002762:	2301      	moveq	r3, #1
 8002764:	2300      	movne	r3, #0
 8002766:	b2db      	uxtb	r3, r3
 8002768:	461a      	mov	r2, r3
 800276a:	79fb      	ldrb	r3, [r7, #7]
 800276c:	429a      	cmp	r2, r3
 800276e:	d0b4      	beq.n	80026da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b084      	sub	sp, #16
 800277e:	af00      	add	r7, sp, #0
 8002780:	60f8      	str	r0, [r7, #12]
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002786:	e033      	b.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	68f8      	ldr	r0, [r7, #12]
 800278e:	f000 f90b 	bl	80029a8 <I2C_IsErrorOccurred>
 8002792:	4603      	mov	r3, r0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d001      	beq.n	800279c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002798:	2301      	movs	r3, #1
 800279a:	e031      	b.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a2:	d025      	beq.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027a4:	f7ff f9d4 	bl	8001b50 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d302      	bcc.n	80027ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d11a      	bne.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d013      	beq.n	80027f0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027cc:	f043 0220 	orr.w	r2, r3, #32
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2220      	movs	r2, #32
 80027d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e007      	b.n	8002800 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d1c4      	bne.n	8002788 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b084      	sub	sp, #16
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002814:	e02f      	b.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f8c4 	bl	80029a8 <I2C_IsErrorOccurred>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e02d      	b.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800282a:	f7ff f991 	bl	8001b50 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	429a      	cmp	r2, r3
 8002838:	d302      	bcc.n	8002840 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d11a      	bne.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	699b      	ldr	r3, [r3, #24]
 8002846:	f003 0320 	and.w	r3, r3, #32
 800284a:	2b20      	cmp	r3, #32
 800284c:	d013      	beq.n	8002876 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	f043 0220 	orr.w	r2, r3, #32
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e007      	b.n	8002886 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b20      	cmp	r3, #32
 8002882:	d1c8      	bne.n	8002816 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 80028a0:	e071      	b.n	8002986 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	68b9      	ldr	r1, [r7, #8]
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 f87e 	bl	80029a8 <I2C_IsErrorOccurred>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	f003 0320 	and.w	r3, r3, #32
 80028c0:	2b20      	cmp	r3, #32
 80028c2:	d13b      	bne.n	800293c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 80028c4:	7dfb      	ldrb	r3, [r7, #23]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d138      	bne.n	800293c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	f003 0304 	and.w	r3, r3, #4
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d105      	bne.n	80028e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f003 0310 	and.w	r3, r3, #16
 80028ee:	2b10      	cmp	r3, #16
 80028f0:	d121      	bne.n	8002936 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2210      	movs	r2, #16
 80028f8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2204      	movs	r2, #4
 80028fe:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2220      	movs	r2, #32
 8002906:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	4b24      	ldr	r3, [pc, #144]	@ (80029a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002914:	400b      	ands	r3, r1
 8002916:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	2220      	movs	r2, #32
 800291c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	75fb      	strb	r3, [r7, #23]
 8002934:	e002      	b.n	800293c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800293c:	f7ff f908 	bl	8001b50 <HAL_GetTick>
 8002940:	4602      	mov	r2, r0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	1ad3      	subs	r3, r2, r3
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	429a      	cmp	r2, r3
 800294a:	d302      	bcc.n	8002952 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d119      	bne.n	8002986 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002952:	7dfb      	ldrb	r3, [r7, #23]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d116      	bne.n	8002986 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b04      	cmp	r3, #4
 8002964:	d00f      	beq.n	8002986 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296a:	f043 0220 	orr.w	r2, r3, #32
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b04      	cmp	r3, #4
 8002992:	d002      	beq.n	800299a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002994:	7dfb      	ldrb	r3, [r7, #23]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d083      	beq.n	80028a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800299a:	7dfb      	ldrb	r3, [r7, #23]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3718      	adds	r7, #24
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	fe00e800 	.word	0xfe00e800

080029a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	@ 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80029c2:	2300      	movs	r3, #0
 80029c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	f003 0310 	and.w	r3, r3, #16
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d068      	beq.n	8002aa6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2210      	movs	r2, #16
 80029da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029dc:	e049      	b.n	8002a72 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d045      	beq.n	8002a72 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80029e6:	f7ff f8b3 	bl	8001b50 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	68ba      	ldr	r2, [r7, #8]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d302      	bcc.n	80029fc <I2C_IsErrorOccurred+0x54>
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d13a      	bne.n	8002a72 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a06:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002a0e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a1e:	d121      	bne.n	8002a64 <I2C_IsErrorOccurred+0xbc>
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a26:	d01d      	beq.n	8002a64 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	2b20      	cmp	r3, #32
 8002a2c:	d01a      	beq.n	8002a64 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	685a      	ldr	r2, [r3, #4]
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a3c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002a3e:	f7ff f887 	bl	8001b50 <HAL_GetTick>
 8002a42:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a44:	e00e      	b.n	8002a64 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002a46:	f7ff f883 	bl	8001b50 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b19      	cmp	r3, #25
 8002a52:	d907      	bls.n	8002a64 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	f043 0320 	orr.w	r3, r3, #32
 8002a5a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002a62:	e006      	b.n	8002a72 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	d1e9      	bne.n	8002a46 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	f003 0320 	and.w	r3, r3, #32
 8002a7c:	2b20      	cmp	r3, #32
 8002a7e:	d003      	beq.n	8002a88 <I2C_IsErrorOccurred+0xe0>
 8002a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d0aa      	beq.n	80029de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002a88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d103      	bne.n	8002a98 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2220      	movs	r2, #32
 8002a96:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	f043 0304 	orr.w	r3, r3, #4
 8002a9e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00b      	beq.n	8002ad0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ab8:	6a3b      	ldr	r3, [r7, #32]
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ac8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00b      	beq.n	8002af2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ada:	6a3b      	ldr	r3, [r7, #32]
 8002adc:	f043 0308 	orr.w	r3, r3, #8
 8002ae0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002aea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00b      	beq.n	8002b14 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f043 0302 	orr.w	r3, r3, #2
 8002b02:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002b14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d01c      	beq.n	8002b56 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f7ff fdaf 	bl	8002680 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	6859      	ldr	r1, [r3, #4]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b0d      	ldr	r3, [pc, #52]	@ (8002b64 <I2C_IsErrorOccurred+0x1bc>)
 8002b2e:	400b      	ands	r3, r1
 8002b30:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b36:	6a3b      	ldr	r3, [r7, #32]
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002b56:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3728      	adds	r7, #40	@ 0x28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	fe00e800 	.word	0xfe00e800

08002b68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	460b      	mov	r3, r1
 8002b74:	817b      	strh	r3, [r7, #10]
 8002b76:	4613      	mov	r3, r2
 8002b78:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b7a:	897b      	ldrh	r3, [r7, #10]
 8002b7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b80:	7a7b      	ldrb	r3, [r7, #9]
 8002b82:	041b      	lsls	r3, r3, #16
 8002b84:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b88:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002b8e:	6a3b      	ldr	r3, [r7, #32]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b96:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685a      	ldr	r2, [r3, #4]
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	0d5b      	lsrs	r3, r3, #21
 8002ba2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002ba6:	4b08      	ldr	r3, [pc, #32]	@ (8002bc8 <I2C_TransferConfig+0x60>)
 8002ba8:	430b      	orrs	r3, r1
 8002baa:	43db      	mvns	r3, r3
 8002bac:	ea02 0103 	and.w	r1, r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002bba:	bf00      	nop
 8002bbc:	371c      	adds	r7, #28
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	03ff63ff 	.word	0x03ff63ff

08002bcc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b20      	cmp	r3, #32
 8002be0:	d138      	bne.n	8002c54 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d101      	bne.n	8002bf0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002bec:	2302      	movs	r3, #2
 8002bee:	e032      	b.n	8002c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2224      	movs	r2, #36	@ 0x24
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f022 0201 	bic.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c1e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	430a      	orrs	r2, r1
 8002c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e000      	b.n	8002c56 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b085      	sub	sp, #20
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
 8002c6a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b20      	cmp	r3, #32
 8002c76:	d139      	bne.n	8002cec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d101      	bne.n	8002c86 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002c82:	2302      	movs	r3, #2
 8002c84:	e033      	b.n	8002cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2224      	movs	r2, #36	@ 0x24
 8002c92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f022 0201 	bic.w	r2, r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002cb4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	021b      	lsls	r3, r3, #8
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0201 	orr.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	e000      	b.n	8002cee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002cec:	2302      	movs	r3, #2
  }
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d08:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d0c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d102      	bne.n	8002d22 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	f001 b823 	b.w	8003d68 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d22:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d26:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f000 817d 	beq.w	8003032 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002d38:	4bbc      	ldr	r3, [pc, #752]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 030c 	and.w	r3, r3, #12
 8002d40:	2b04      	cmp	r3, #4
 8002d42:	d00c      	beq.n	8002d5e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d44:	4bb9      	ldr	r3, [pc, #740]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 030c 	and.w	r3, r3, #12
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d15c      	bne.n	8002e0a <HAL_RCC_OscConfig+0x10e>
 8002d50:	4bb6      	ldr	r3, [pc, #728]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d5c:	d155      	bne.n	8002e0a <HAL_RCC_OscConfig+0x10e>
 8002d5e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d62:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d66:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002d6a:	fa93 f3a3 	rbit	r3, r3
 8002d6e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d72:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	095b      	lsrs	r3, r3, #5
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	f043 0301 	orr.w	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d102      	bne.n	8002d90 <HAL_RCC_OscConfig+0x94>
 8002d8a:	4ba8      	ldr	r3, [pc, #672]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	e015      	b.n	8002dbc <HAL_RCC_OscConfig+0xc0>
 8002d90:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d94:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d98:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8002da4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002da8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8002dac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8002db0:	fa93 f3a3 	rbit	r3, r3
 8002db4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002db8:	4b9c      	ldr	r3, [pc, #624]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dbc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002dc0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8002dc4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8002dc8:	fa92 f2a2 	rbit	r2, r2
 8002dcc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8002dd0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8002dd4:	fab2 f282 	clz	r2, r2
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	f042 0220 	orr.w	r2, r2, #32
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	f002 021f 	and.w	r2, r2, #31
 8002de4:	2101      	movs	r1, #1
 8002de6:	fa01 f202 	lsl.w	r2, r1, r2
 8002dea:	4013      	ands	r3, r2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 811f 	beq.w	8003030 <HAL_RCC_OscConfig+0x334>
 8002df2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002df6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	f040 8116 	bne.w	8003030 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	f000 bfaf 	b.w	8003d68 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e0e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCC_OscConfig+0x12e>
 8002e1c:	4b83      	ldr	r3, [pc, #524]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a82      	ldr	r2, [pc, #520]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	e036      	b.n	8002e98 <HAL_RCC_OscConfig+0x19c>
 8002e2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e2e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10c      	bne.n	8002e54 <HAL_RCC_OscConfig+0x158>
 8002e3a:	4b7c      	ldr	r3, [pc, #496]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a7b      	ldr	r2, [pc, #492]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	4b79      	ldr	r3, [pc, #484]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a78      	ldr	r2, [pc, #480]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e50:	6013      	str	r3, [r2, #0]
 8002e52:	e021      	b.n	8002e98 <HAL_RCC_OscConfig+0x19c>
 8002e54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e64:	d10c      	bne.n	8002e80 <HAL_RCC_OscConfig+0x184>
 8002e66:	4b71      	ldr	r3, [pc, #452]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a70      	ldr	r2, [pc, #448]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	4b6e      	ldr	r3, [pc, #440]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a6d      	ldr	r2, [pc, #436]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e7c:	6013      	str	r3, [r2, #0]
 8002e7e:	e00b      	b.n	8002e98 <HAL_RCC_OscConfig+0x19c>
 8002e80:	4b6a      	ldr	r3, [pc, #424]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a69      	ldr	r2, [pc, #420]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	4b67      	ldr	r3, [pc, #412]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a66      	ldr	r2, [pc, #408]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e96:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e98:	4b64      	ldr	r3, [pc, #400]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9c:	f023 020f 	bic.w	r2, r3, #15
 8002ea0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ea4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	495f      	ldr	r1, [pc, #380]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d059      	beq.n	8002f76 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec2:	f7fe fe45 	bl	8001b50 <HAL_GetTick>
 8002ec6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	e00a      	b.n	8002ee2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ecc:	f7fe fe40 	bl	8001b50 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	2b64      	cmp	r3, #100	@ 0x64
 8002eda:	d902      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	f000 bf43 	b.w	8003d68 <HAL_RCC_OscConfig+0x106c>
 8002ee2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ee6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002eee:	fa93 f3a3 	rbit	r3, r3
 8002ef2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002ef6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	fab3 f383 	clz	r3, r3
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCC_OscConfig+0x218>
 8002f0e:	4b47      	ldr	r3, [pc, #284]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	e015      	b.n	8002f40 <HAL_RCC_OscConfig+0x244>
 8002f14:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f18:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002f20:	fa93 f3a3 	rbit	r3, r3
 8002f24:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002f28:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f2c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002f30:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002f34:	fa93 f3a3 	rbit	r3, r3
 8002f38:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002f3c:	4b3b      	ldr	r3, [pc, #236]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f40:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f44:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002f48:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002f4c:	fa92 f2a2 	rbit	r2, r2
 8002f50:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002f54:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002f58:	fab2 f282 	clz	r2, r2
 8002f5c:	b2d2      	uxtb	r2, r2
 8002f5e:	f042 0220 	orr.w	r2, r2, #32
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	f002 021f 	and.w	r2, r2, #31
 8002f68:	2101      	movs	r1, #1
 8002f6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d0ab      	beq.n	8002ecc <HAL_RCC_OscConfig+0x1d0>
 8002f74:	e05d      	b.n	8003032 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f76:	f7fe fdeb 	bl	8001b50 <HAL_GetTick>
 8002f7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7e:	e00a      	b.n	8002f96 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f80:	f7fe fde6 	bl	8001b50 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	2b64      	cmp	r3, #100	@ 0x64
 8002f8e:	d902      	bls.n	8002f96 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002f90:	2303      	movs	r3, #3
 8002f92:	f000 bee9 	b.w	8003d68 <HAL_RCC_OscConfig+0x106c>
 8002f96:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f9a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002fa2:	fa93 f3a3 	rbit	r3, r3
 8002fa6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002faa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	fab3 f383 	clz	r3, r3
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	095b      	lsrs	r3, r3, #5
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	f043 0301 	orr.w	r3, r3, #1
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d102      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x2cc>
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	e015      	b.n	8002ff4 <HAL_RCC_OscConfig+0x2f8>
 8002fc8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fcc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002fdc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002fe0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002fe4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002fe8:	fa93 f3a3 	rbit	r3, r3
 8002fec:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002ff0:	4b0e      	ldr	r3, [pc, #56]	@ (800302c <HAL_RCC_OscConfig+0x330>)
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002ff8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002ffc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003000:	fa92 f2a2 	rbit	r2, r2
 8003004:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8003008:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800300c:	fab2 f282 	clz	r2, r2
 8003010:	b2d2      	uxtb	r2, r2
 8003012:	f042 0220 	orr.w	r2, r2, #32
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	f002 021f 	and.w	r2, r2, #31
 800301c:	2101      	movs	r1, #1
 800301e:	fa01 f202 	lsl.w	r2, r1, r2
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ab      	bne.n	8002f80 <HAL_RCC_OscConfig+0x284>
 8003028:	e003      	b.n	8003032 <HAL_RCC_OscConfig+0x336>
 800302a:	bf00      	nop
 800302c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003036:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 817d 	beq.w	8003342 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003048:	4ba6      	ldr	r3, [pc, #664]	@ (80032e4 <HAL_RCC_OscConfig+0x5e8>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00b      	beq.n	800306c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003054:	4ba3      	ldr	r3, [pc, #652]	@ (80032e4 <HAL_RCC_OscConfig+0x5e8>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	f003 030c 	and.w	r3, r3, #12
 800305c:	2b08      	cmp	r3, #8
 800305e:	d172      	bne.n	8003146 <HAL_RCC_OscConfig+0x44a>
 8003060:	4ba0      	ldr	r3, [pc, #640]	@ (80032e4 <HAL_RCC_OscConfig+0x5e8>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003068:	2b00      	cmp	r3, #0
 800306a:	d16c      	bne.n	8003146 <HAL_RCC_OscConfig+0x44a>
 800306c:	2302      	movs	r3, #2
 800306e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003076:	fa93 f3a3 	rbit	r3, r3
 800307a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800307e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	095b      	lsrs	r3, r3, #5
 800308a:	b2db      	uxtb	r3, r3
 800308c:	f043 0301 	orr.w	r3, r3, #1
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b01      	cmp	r3, #1
 8003094:	d102      	bne.n	800309c <HAL_RCC_OscConfig+0x3a0>
 8003096:	4b93      	ldr	r3, [pc, #588]	@ (80032e4 <HAL_RCC_OscConfig+0x5e8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	e013      	b.n	80030c4 <HAL_RCC_OscConfig+0x3c8>
 800309c:	2302      	movs	r3, #2
 800309e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80030a6:	fa93 f3a3 	rbit	r3, r3
 80030aa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80030ae:	2302      	movs	r3, #2
 80030b0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80030b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80030c0:	4b88      	ldr	r3, [pc, #544]	@ (80032e4 <HAL_RCC_OscConfig+0x5e8>)
 80030c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030c4:	2202      	movs	r2, #2
 80030c6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80030ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80030ce:	fa92 f2a2 	rbit	r2, r2
 80030d2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80030d6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80030da:	fab2 f282 	clz	r2, r2
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	f042 0220 	orr.w	r2, r2, #32
 80030e4:	b2d2      	uxtb	r2, r2
 80030e6:	f002 021f 	and.w	r2, r2, #31
 80030ea:	2101      	movs	r1, #1
 80030ec:	fa01 f202 	lsl.w	r2, r1, r2
 80030f0:	4013      	ands	r3, r2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <HAL_RCC_OscConfig+0x410>
 80030f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d002      	beq.n	800310c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	f000 be2e 	b.w	8003d68 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310c:	4b75      	ldr	r3, [pc, #468]	@ (80032e4 <HAL_RCC_OscConfig+0x5e8>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003114:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003118:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	21f8      	movs	r1, #248	@ 0xf8
 8003122:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800312a:	fa91 f1a1 	rbit	r1, r1
 800312e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8003132:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8003136:	fab1 f181 	clz	r1, r1
 800313a:	b2c9      	uxtb	r1, r1
 800313c:	408b      	lsls	r3, r1
 800313e:	4969      	ldr	r1, [pc, #420]	@ (80032e4 <HAL_RCC_OscConfig+0x5e8>)
 8003140:	4313      	orrs	r3, r2
 8003142:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003144:	e0fd      	b.n	8003342 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800314a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	f000 8088 	beq.w	8003268 <HAL_RCC_OscConfig+0x56c>
 8003158:	2301      	movs	r3, #1
 800315a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800316a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003178:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	461a      	mov	r2, r3
 8003180:	2301      	movs	r3, #1
 8003182:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003184:	f7fe fce4 	bl	8001b50 <HAL_GetTick>
 8003188:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800318c:	e00a      	b.n	80031a4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800318e:	f7fe fcdf 	bl	8001b50 <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d902      	bls.n	80031a4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	f000 bde2 	b.w	8003d68 <HAL_RCC_OscConfig+0x106c>
 80031a4:	2302      	movs	r3, #2
 80031a6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80031ae:	fa93 f3a3 	rbit	r3, r3
 80031b2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80031b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031ba:	fab3 f383 	clz	r3, r3
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	095b      	lsrs	r3, r3, #5
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f043 0301 	orr.w	r3, r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d102      	bne.n	80031d4 <HAL_RCC_OscConfig+0x4d8>
 80031ce:	4b45      	ldr	r3, [pc, #276]	@ (80032e4 <HAL_RCC_OscConfig+0x5e8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	e013      	b.n	80031fc <HAL_RCC_OscConfig+0x500>
 80031d4:	2302      	movs	r3, #2
 80031d6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031da:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80031e6:	2302      	movs	r3, #2
 80031e8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80031ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80031f0:	fa93 f3a3 	rbit	r3, r3
 80031f4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80031f8:	4b3a      	ldr	r3, [pc, #232]	@ (80032e4 <HAL_RCC_OscConfig+0x5e8>)
 80031fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fc:	2202      	movs	r2, #2
 80031fe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8003202:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003206:	fa92 f2a2 	rbit	r2, r2
 800320a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800320e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8003212:	fab2 f282 	clz	r2, r2
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	f042 0220 	orr.w	r2, r2, #32
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	f002 021f 	and.w	r2, r2, #31
 8003222:	2101      	movs	r1, #1
 8003224:	fa01 f202 	lsl.w	r2, r1, r2
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0af      	beq.n	800318e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800322e:	4b2d      	ldr	r3, [pc, #180]	@ (80032e4 <HAL_RCC_OscConfig+0x5e8>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003236:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800323a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	21f8      	movs	r1, #248	@ 0xf8
 8003244:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003248:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800324c:	fa91 f1a1 	rbit	r1, r1
 8003250:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003254:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003258:	fab1 f181 	clz	r1, r1
 800325c:	b2c9      	uxtb	r1, r1
 800325e:	408b      	lsls	r3, r1
 8003260:	4920      	ldr	r1, [pc, #128]	@ (80032e4 <HAL_RCC_OscConfig+0x5e8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	600b      	str	r3, [r1, #0]
 8003266:	e06c      	b.n	8003342 <HAL_RCC_OscConfig+0x646>
 8003268:	2301      	movs	r3, #1
 800326a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8003272:	fa93 f3a3 	rbit	r3, r3
 8003276:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800327a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003288:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	461a      	mov	r2, r3
 8003290:	2300      	movs	r3, #0
 8003292:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fe fc5c 	bl	8001b50 <HAL_GetTick>
 8003298:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800329c:	e00a      	b.n	80032b4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800329e:	f7fe fc57 	bl	8001b50 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032a8:	1ad3      	subs	r3, r2, r3
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d902      	bls.n	80032b4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	f000 bd5a 	b.w	8003d68 <HAL_RCC_OscConfig+0x106c>
 80032b4:	2302      	movs	r3, #2
 80032b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80032be:	fa93 f3a3 	rbit	r3, r3
 80032c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80032c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ca:	fab3 f383 	clz	r3, r3
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	095b      	lsrs	r3, r3, #5
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	f043 0301 	orr.w	r3, r3, #1
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d104      	bne.n	80032e8 <HAL_RCC_OscConfig+0x5ec>
 80032de:	4b01      	ldr	r3, [pc, #4]	@ (80032e4 <HAL_RCC_OscConfig+0x5e8>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	e015      	b.n	8003310 <HAL_RCC_OscConfig+0x614>
 80032e4:	40021000 	.word	0x40021000
 80032e8:	2302      	movs	r3, #2
 80032ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80032fa:	2302      	movs	r3, #2
 80032fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003300:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003304:	fa93 f3a3 	rbit	r3, r3
 8003308:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800330c:	4bc8      	ldr	r3, [pc, #800]	@ (8003630 <HAL_RCC_OscConfig+0x934>)
 800330e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003310:	2202      	movs	r2, #2
 8003312:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8003316:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800331a:	fa92 f2a2 	rbit	r2, r2
 800331e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8003322:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8003326:	fab2 f282 	clz	r2, r2
 800332a:	b2d2      	uxtb	r2, r2
 800332c:	f042 0220 	orr.w	r2, r2, #32
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	f002 021f 	and.w	r2, r2, #31
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f202 	lsl.w	r2, r1, r2
 800333c:	4013      	ands	r3, r2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1ad      	bne.n	800329e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003342:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003346:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	f000 8110 	beq.w	8003578 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003358:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800335c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d079      	beq.n	800345c <HAL_RCC_OscConfig+0x760>
 8003368:	2301      	movs	r3, #1
 800336a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003372:	fa93 f3a3 	rbit	r3, r3
 8003376:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800337a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800337e:	fab3 f383 	clz	r3, r3
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	4bab      	ldr	r3, [pc, #684]	@ (8003634 <HAL_RCC_OscConfig+0x938>)
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	461a      	mov	r2, r3
 800338e:	2301      	movs	r3, #1
 8003390:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003392:	f7fe fbdd 	bl	8001b50 <HAL_GetTick>
 8003396:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800339a:	e00a      	b.n	80033b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800339c:	f7fe fbd8 	bl	8001b50 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	2b02      	cmp	r3, #2
 80033aa:	d902      	bls.n	80033b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	f000 bcdb 	b.w	8003d68 <HAL_RCC_OscConfig+0x106c>
 80033b2:	2302      	movs	r3, #2
 80033b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80033c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80033cc:	2202      	movs	r2, #2
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	fa93 f2a3 	rbit	r2, r3
 80033de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80033f0:	2202      	movs	r2, #2
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	fa93 f2a3 	rbit	r2, r3
 8003402:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003406:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800340a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800340c:	4b88      	ldr	r3, [pc, #544]	@ (8003630 <HAL_RCC_OscConfig+0x934>)
 800340e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003414:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003418:	2102      	movs	r1, #2
 800341a:	6019      	str	r1, [r3, #0]
 800341c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003420:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	fa93 f1a3 	rbit	r1, r3
 800342a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003432:	6019      	str	r1, [r3, #0]
  return result;
 8003434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003438:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003448:	b2db      	uxtb	r3, r3
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2101      	movs	r1, #1
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	4013      	ands	r3, r2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d0a0      	beq.n	800339c <HAL_RCC_OscConfig+0x6a0>
 800345a:	e08d      	b.n	8003578 <HAL_RCC_OscConfig+0x87c>
 800345c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003460:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003464:	2201      	movs	r2, #1
 8003466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800346c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	fa93 f2a3 	rbit	r2, r3
 8003476:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800347a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800347e:	601a      	str	r2, [r3, #0]
  return result;
 8003480:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003484:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003488:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	4b68      	ldr	r3, [pc, #416]	@ (8003634 <HAL_RCC_OscConfig+0x938>)
 8003494:	4413      	add	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	461a      	mov	r2, r3
 800349a:	2300      	movs	r3, #0
 800349c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800349e:	f7fe fb57 	bl	8001b50 <HAL_GetTick>
 80034a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a6:	e00a      	b.n	80034be <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034a8:	f7fe fb52 	bl	8001b50 <HAL_GetTick>
 80034ac:	4602      	mov	r2, r0
 80034ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80034b2:	1ad3      	subs	r3, r2, r3
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	d902      	bls.n	80034be <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80034b8:	2303      	movs	r3, #3
 80034ba:	f000 bc55 	b.w	8003d68 <HAL_RCC_OscConfig+0x106c>
 80034be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034c2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80034c6:	2202      	movs	r2, #2
 80034c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	fa93 f2a3 	rbit	r2, r3
 80034d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034dc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80034e0:	601a      	str	r2, [r3, #0]
 80034e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80034ea:	2202      	movs	r2, #2
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	fa93 f2a3 	rbit	r2, r3
 80034fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003500:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003504:	601a      	str	r2, [r3, #0]
 8003506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800350a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800350e:	2202      	movs	r2, #2
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003516:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	fa93 f2a3 	rbit	r2, r3
 8003520:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003524:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003528:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800352a:	4b41      	ldr	r3, [pc, #260]	@ (8003630 <HAL_RCC_OscConfig+0x934>)
 800352c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800352e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003532:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003536:	2102      	movs	r1, #2
 8003538:	6019      	str	r1, [r3, #0]
 800353a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800353e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	fa93 f1a3 	rbit	r1, r3
 8003548:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800354c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003550:	6019      	str	r1, [r3, #0]
  return result;
 8003552:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003556:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	fab3 f383 	clz	r3, r3
 8003560:	b2db      	uxtb	r3, r3
 8003562:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003566:	b2db      	uxtb	r3, r3
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	2101      	movs	r1, #1
 800356e:	fa01 f303 	lsl.w	r3, r1, r3
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d197      	bne.n	80034a8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003578:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800357c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	f000 81a1 	beq.w	80038d0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800358e:	2300      	movs	r3, #0
 8003590:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003594:	4b26      	ldr	r3, [pc, #152]	@ (8003630 <HAL_RCC_OscConfig+0x934>)
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d116      	bne.n	80035ce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035a0:	4b23      	ldr	r3, [pc, #140]	@ (8003630 <HAL_RCC_OscConfig+0x934>)
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	4a22      	ldr	r2, [pc, #136]	@ (8003630 <HAL_RCC_OscConfig+0x934>)
 80035a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035aa:	61d3      	str	r3, [r2, #28]
 80035ac:	4b20      	ldr	r3, [pc, #128]	@ (8003630 <HAL_RCC_OscConfig+0x934>)
 80035ae:	69db      	ldr	r3, [r3, #28]
 80035b0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80035b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035c2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80035c6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80035c8:	2301      	movs	r3, #1
 80035ca:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003638 <HAL_RCC_OscConfig+0x93c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d11a      	bne.n	8003610 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035da:	4b17      	ldr	r3, [pc, #92]	@ (8003638 <HAL_RCC_OscConfig+0x93c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a16      	ldr	r2, [pc, #88]	@ (8003638 <HAL_RCC_OscConfig+0x93c>)
 80035e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e6:	f7fe fab3 	bl	8001b50 <HAL_GetTick>
 80035ea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	e009      	b.n	8003604 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fe faae 	bl	8001b50 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b64      	cmp	r3, #100	@ 0x64
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e3b1      	b.n	8003d68 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003604:	4b0c      	ldr	r3, [pc, #48]	@ (8003638 <HAL_RCC_OscConfig+0x93c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ef      	beq.n	80035f0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003610:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003614:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d10d      	bne.n	800363c <HAL_RCC_OscConfig+0x940>
 8003620:	4b03      	ldr	r3, [pc, #12]	@ (8003630 <HAL_RCC_OscConfig+0x934>)
 8003622:	6a1b      	ldr	r3, [r3, #32]
 8003624:	4a02      	ldr	r2, [pc, #8]	@ (8003630 <HAL_RCC_OscConfig+0x934>)
 8003626:	f043 0301 	orr.w	r3, r3, #1
 800362a:	6213      	str	r3, [r2, #32]
 800362c:	e03c      	b.n	80036a8 <HAL_RCC_OscConfig+0x9ac>
 800362e:	bf00      	nop
 8003630:	40021000 	.word	0x40021000
 8003634:	10908120 	.word	0x10908120
 8003638:	40007000 	.word	0x40007000
 800363c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003640:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10c      	bne.n	8003666 <HAL_RCC_OscConfig+0x96a>
 800364c:	4bc1      	ldr	r3, [pc, #772]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4ac0      	ldr	r2, [pc, #768]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	6213      	str	r3, [r2, #32]
 8003658:	4bbe      	ldr	r3, [pc, #760]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 800365a:	6a1b      	ldr	r3, [r3, #32]
 800365c:	4abd      	ldr	r2, [pc, #756]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 800365e:	f023 0304 	bic.w	r3, r3, #4
 8003662:	6213      	str	r3, [r2, #32]
 8003664:	e020      	b.n	80036a8 <HAL_RCC_OscConfig+0x9ac>
 8003666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	2b05      	cmp	r3, #5
 8003674:	d10c      	bne.n	8003690 <HAL_RCC_OscConfig+0x994>
 8003676:	4bb7      	ldr	r3, [pc, #732]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	4ab6      	ldr	r2, [pc, #728]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 800367c:	f043 0304 	orr.w	r3, r3, #4
 8003680:	6213      	str	r3, [r2, #32]
 8003682:	4bb4      	ldr	r3, [pc, #720]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4ab3      	ldr	r2, [pc, #716]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 8003688:	f043 0301 	orr.w	r3, r3, #1
 800368c:	6213      	str	r3, [r2, #32]
 800368e:	e00b      	b.n	80036a8 <HAL_RCC_OscConfig+0x9ac>
 8003690:	4bb0      	ldr	r3, [pc, #704]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4aaf      	ldr	r2, [pc, #700]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 8003696:	f023 0301 	bic.w	r3, r3, #1
 800369a:	6213      	str	r3, [r2, #32]
 800369c:	4bad      	ldr	r3, [pc, #692]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	4aac      	ldr	r2, [pc, #688]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 80036a2:	f023 0304 	bic.w	r3, r3, #4
 80036a6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f000 8081 	beq.w	80037bc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ba:	f7fe fa49 	bl	8001b50 <HAL_GetTick>
 80036be:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c2:	e00b      	b.n	80036dc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fe fa44 	bl	8001b50 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e345      	b.n	8003d68 <HAL_RCC_OscConfig+0x106c>
 80036dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80036e4:	2202      	movs	r2, #2
 80036e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036ec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	fa93 f2a3 	rbit	r2, r3
 80036f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80036fe:	601a      	str	r2, [r3, #0]
 8003700:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003704:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003708:	2202      	movs	r2, #2
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003710:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	fa93 f2a3 	rbit	r2, r3
 800371a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800371e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003722:	601a      	str	r2, [r3, #0]
  return result;
 8003724:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003728:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800372c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372e:	fab3 f383 	clz	r3, r3
 8003732:	b2db      	uxtb	r3, r3
 8003734:	095b      	lsrs	r3, r3, #5
 8003736:	b2db      	uxtb	r3, r3
 8003738:	f043 0302 	orr.w	r3, r3, #2
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d102      	bne.n	8003748 <HAL_RCC_OscConfig+0xa4c>
 8003742:	4b84      	ldr	r3, [pc, #528]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	e013      	b.n	8003770 <HAL_RCC_OscConfig+0xa74>
 8003748:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800374c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003750:	2202      	movs	r2, #2
 8003752:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003754:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003758:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	fa93 f2a3 	rbit	r2, r3
 8003762:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003766:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	4b79      	ldr	r3, [pc, #484]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003774:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003778:	2102      	movs	r1, #2
 800377a:	6011      	str	r1, [r2, #0]
 800377c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003780:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003784:	6812      	ldr	r2, [r2, #0]
 8003786:	fa92 f1a2 	rbit	r1, r2
 800378a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800378e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003792:	6011      	str	r1, [r2, #0]
  return result;
 8003794:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003798:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800379c:	6812      	ldr	r2, [r2, #0]
 800379e:	fab2 f282 	clz	r2, r2
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037a8:	b2d2      	uxtb	r2, r2
 80037aa:	f002 021f 	and.w	r2, r2, #31
 80037ae:	2101      	movs	r1, #1
 80037b0:	fa01 f202 	lsl.w	r2, r1, r2
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d084      	beq.n	80036c4 <HAL_RCC_OscConfig+0x9c8>
 80037ba:	e07f      	b.n	80038bc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037bc:	f7fe f9c8 	bl	8001b50 <HAL_GetTick>
 80037c0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c4:	e00b      	b.n	80037de <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c6:	f7fe f9c3 	bl	8001b50 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e2c4      	b.n	8003d68 <HAL_RCC_OscConfig+0x106c>
 80037de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037e2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80037e6:	2202      	movs	r2, #2
 80037e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	fa93 f2a3 	rbit	r2, r3
 80037f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037fc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003806:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800380a:	2202      	movs	r2, #2
 800380c:	601a      	str	r2, [r3, #0]
 800380e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003812:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	fa93 f2a3 	rbit	r2, r3
 800381c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003820:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003824:	601a      	str	r2, [r3, #0]
  return result;
 8003826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800382a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800382e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003830:	fab3 f383 	clz	r3, r3
 8003834:	b2db      	uxtb	r3, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f043 0302 	orr.w	r3, r3, #2
 800383e:	b2db      	uxtb	r3, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d102      	bne.n	800384a <HAL_RCC_OscConfig+0xb4e>
 8003844:	4b43      	ldr	r3, [pc, #268]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 8003846:	6a1b      	ldr	r3, [r3, #32]
 8003848:	e013      	b.n	8003872 <HAL_RCC_OscConfig+0xb76>
 800384a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800384e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003852:	2202      	movs	r2, #2
 8003854:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003856:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800385a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	fa93 f2a3 	rbit	r2, r3
 8003864:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003868:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800386c:	601a      	str	r2, [r3, #0]
 800386e:	4b39      	ldr	r3, [pc, #228]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 8003870:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003872:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003876:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800387a:	2102      	movs	r1, #2
 800387c:	6011      	str	r1, [r2, #0]
 800387e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003882:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003886:	6812      	ldr	r2, [r2, #0]
 8003888:	fa92 f1a2 	rbit	r1, r2
 800388c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003890:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003894:	6011      	str	r1, [r2, #0]
  return result;
 8003896:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800389a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	fab2 f282 	clz	r2, r2
 80038a4:	b2d2      	uxtb	r2, r2
 80038a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	f002 021f 	and.w	r2, r2, #31
 80038b0:	2101      	movs	r1, #1
 80038b2:	fa01 f202 	lsl.w	r2, r1, r2
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d184      	bne.n	80037c6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038bc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d105      	bne.n	80038d0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c4:	4b23      	ldr	r3, [pc, #140]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	4a22      	ldr	r2, [pc, #136]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 80038ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038ce:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038d4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	69db      	ldr	r3, [r3, #28]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8242 	beq.w	8003d66 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003954 <HAL_RCC_OscConfig+0xc58>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b08      	cmp	r3, #8
 80038ec:	f000 8213 	beq.w	8003d16 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	f040 8162 	bne.w	8003bc6 <HAL_RCC_OscConfig+0xeca>
 8003902:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003906:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800390a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800390e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003910:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003914:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	fa93 f2a3 	rbit	r2, r3
 800391e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003922:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003926:	601a      	str	r2, [r3, #0]
  return result;
 8003928:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800392c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003930:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003932:	fab3 f383 	clz	r3, r3
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800393c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	461a      	mov	r2, r3
 8003944:	2300      	movs	r3, #0
 8003946:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003948:	f7fe f902 	bl	8001b50 <HAL_GetTick>
 800394c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003950:	e00c      	b.n	800396c <HAL_RCC_OscConfig+0xc70>
 8003952:	bf00      	nop
 8003954:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003958:	f7fe f8fa 	bl	8001b50 <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	2b02      	cmp	r3, #2
 8003966:	d901      	bls.n	800396c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003968:	2303      	movs	r3, #3
 800396a:	e1fd      	b.n	8003d68 <HAL_RCC_OscConfig+0x106c>
 800396c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003970:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003974:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003978:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800397e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	fa93 f2a3 	rbit	r2, r3
 8003988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003990:	601a      	str	r2, [r3, #0]
  return result;
 8003992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003996:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800399a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800399c:	fab3 f383 	clz	r3, r3
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d102      	bne.n	80039b6 <HAL_RCC_OscConfig+0xcba>
 80039b0:	4bb0      	ldr	r3, [pc, #704]	@ (8003c74 <HAL_RCC_OscConfig+0xf78>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	e027      	b.n	8003a06 <HAL_RCC_OscConfig+0xd0a>
 80039b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80039be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039c8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	fa93 f2a3 	rbit	r2, r3
 80039d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80039da:	601a      	str	r2, [r3, #0]
 80039dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039e0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80039e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	fa93 f2a3 	rbit	r2, r3
 80039f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039fc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	4b9c      	ldr	r3, [pc, #624]	@ (8003c74 <HAL_RCC_OscConfig+0xf78>)
 8003a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a06:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a0a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003a0e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003a12:	6011      	str	r1, [r2, #0]
 8003a14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a18:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	fa92 f1a2 	rbit	r1, r2
 8003a22:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a26:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003a2a:	6011      	str	r1, [r2, #0]
  return result;
 8003a2c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a30:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	fab2 f282 	clz	r2, r2
 8003a3a:	b2d2      	uxtb	r2, r2
 8003a3c:	f042 0220 	orr.w	r2, r2, #32
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	f002 021f 	and.w	r2, r2, #31
 8003a46:	2101      	movs	r1, #1
 8003a48:	fa01 f202 	lsl.w	r2, r1, r2
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d182      	bne.n	8003958 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a52:	4b88      	ldr	r3, [pc, #544]	@ (8003c74 <HAL_RCC_OscConfig+0xf78>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003a5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003a66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	430b      	orrs	r3, r1
 8003a74:	497f      	ldr	r1, [pc, #508]	@ (8003c74 <HAL_RCC_OscConfig+0xf78>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	604b      	str	r3, [r1, #4]
 8003a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a7e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003a82:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003a86:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	fa93 f2a3 	rbit	r2, r3
 8003a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003a9e:	601a      	str	r2, [r3, #0]
  return result;
 8003aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003aa8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aaa:	fab3 f383 	clz	r3, r3
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ab4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	461a      	mov	r2, r3
 8003abc:	2301      	movs	r3, #1
 8003abe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fe f846 	bl	8001b50 <HAL_GetTick>
 8003ac4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ac8:	e009      	b.n	8003ade <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aca:	f7fe f841 	bl	8001b50 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e144      	b.n	8003d68 <HAL_RCC_OscConfig+0x106c>
 8003ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ae2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003ae6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003aea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003af0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	fa93 f2a3 	rbit	r2, r3
 8003afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003b02:	601a      	str	r2, [r3, #0]
  return result;
 8003b04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b08:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003b0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b0e:	fab3 f383 	clz	r3, r3
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	095b      	lsrs	r3, r3, #5
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d102      	bne.n	8003b28 <HAL_RCC_OscConfig+0xe2c>
 8003b22:	4b54      	ldr	r3, [pc, #336]	@ (8003c74 <HAL_RCC_OscConfig+0xf78>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	e027      	b.n	8003b78 <HAL_RCC_OscConfig+0xe7c>
 8003b28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b2c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003b30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b3a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	fa93 f2a3 	rbit	r2, r3
 8003b44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b48:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003b4c:	601a      	str	r2, [r3, #0]
 8003b4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b52:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003b56:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003b5a:	601a      	str	r2, [r3, #0]
 8003b5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b60:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	fa93 f2a3 	rbit	r2, r3
 8003b6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b6e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	4b3f      	ldr	r3, [pc, #252]	@ (8003c74 <HAL_RCC_OscConfig+0xf78>)
 8003b76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b7c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003b80:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003b84:	6011      	str	r1, [r2, #0]
 8003b86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b8a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	fa92 f1a2 	rbit	r1, r2
 8003b94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b98:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003b9c:	6011      	str	r1, [r2, #0]
  return result;
 8003b9e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ba2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	fab2 f282 	clz	r2, r2
 8003bac:	b2d2      	uxtb	r2, r2
 8003bae:	f042 0220 	orr.w	r2, r2, #32
 8003bb2:	b2d2      	uxtb	r2, r2
 8003bb4:	f002 021f 	and.w	r2, r2, #31
 8003bb8:	2101      	movs	r1, #1
 8003bba:	fa01 f202 	lsl.w	r2, r1, r2
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d082      	beq.n	8003aca <HAL_RCC_OscConfig+0xdce>
 8003bc4:	e0cf      	b.n	8003d66 <HAL_RCC_OscConfig+0x106a>
 8003bc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003bce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	fa93 f2a3 	rbit	r2, r3
 8003be2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003be6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003bea:	601a      	str	r2, [r3, #0]
  return result;
 8003bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bf0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003bf4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003c00:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	461a      	mov	r2, r3
 8003c08:	2300      	movs	r3, #0
 8003c0a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c0c:	f7fd ffa0 	bl	8001b50 <HAL_GetTick>
 8003c10:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c14:	e009      	b.n	8003c2a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c16:	f7fd ff9b 	bl	8001b50 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e09e      	b.n	8003d68 <HAL_RCC_OscConfig+0x106c>
 8003c2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003c32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c3c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	fa93 f2a3 	rbit	r2, r3
 8003c46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c4a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003c4e:	601a      	str	r2, [r3, #0]
  return result;
 8003c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c54:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003c58:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c5a:	fab3 f383 	clz	r3, r3
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	095b      	lsrs	r3, r3, #5
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d104      	bne.n	8003c78 <HAL_RCC_OscConfig+0xf7c>
 8003c6e:	4b01      	ldr	r3, [pc, #4]	@ (8003c74 <HAL_RCC_OscConfig+0xf78>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	e029      	b.n	8003cc8 <HAL_RCC_OscConfig+0xfcc>
 8003c74:	40021000 	.word	0x40021000
 8003c78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c7c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003c80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c84:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	fa93 f2a3 	rbit	r2, r3
 8003c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c98:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003ca6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cb0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	fa93 f2a3 	rbit	r2, r3
 8003cba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003cbe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003cc2:	601a      	str	r2, [r3, #0]
 8003cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8003d74 <HAL_RCC_OscConfig+0x1078>)
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cc8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ccc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003cd0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003cd4:	6011      	str	r1, [r2, #0]
 8003cd6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cda:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	fa92 f1a2 	rbit	r1, r2
 8003ce4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003ce8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003cec:	6011      	str	r1, [r2, #0]
  return result;
 8003cee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cf2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	fab2 f282 	clz	r2, r2
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	f042 0220 	orr.w	r2, r2, #32
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	f002 021f 	and.w	r2, r2, #31
 8003d08:	2101      	movs	r1, #1
 8003d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d0e:	4013      	ands	r3, r2
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d180      	bne.n	8003c16 <HAL_RCC_OscConfig+0xf1a>
 8003d14:	e027      	b.n	8003d66 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d1a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	69db      	ldr	r3, [r3, #28]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e01e      	b.n	8003d68 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d2a:	4b12      	ldr	r3, [pc, #72]	@ (8003d74 <HAL_RCC_OscConfig+0x1078>)
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003d36:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d3e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d10b      	bne.n	8003d62 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003d4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003d4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d56:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d001      	beq.n	8003d66 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e000      	b.n	8003d68 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000

08003d78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b09e      	sub	sp, #120	@ 0x78
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e162      	b.n	8004056 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d90:	4b90      	ldr	r3, [pc, #576]	@ (8003fd4 <HAL_RCC_ClockConfig+0x25c>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0307 	and.w	r3, r3, #7
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d910      	bls.n	8003dc0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d9e:	4b8d      	ldr	r3, [pc, #564]	@ (8003fd4 <HAL_RCC_ClockConfig+0x25c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f023 0207 	bic.w	r2, r3, #7
 8003da6:	498b      	ldr	r1, [pc, #556]	@ (8003fd4 <HAL_RCC_ClockConfig+0x25c>)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dae:	4b89      	ldr	r3, [pc, #548]	@ (8003fd4 <HAL_RCC_ClockConfig+0x25c>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d001      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e14a      	b.n	8004056 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0302 	and.w	r3, r3, #2
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d008      	beq.n	8003dde <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dcc:	4b82      	ldr	r3, [pc, #520]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	497f      	ldr	r1, [pc, #508]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 80dc 	beq.w	8003fa4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d13c      	bne.n	8003e6e <HAL_RCC_ClockConfig+0xf6>
 8003df4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003df8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003dfc:	fa93 f3a3 	rbit	r3, r3
 8003e00:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003e02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e04:	fab3 f383 	clz	r3, r3
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	095b      	lsrs	r3, r3, #5
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	f043 0301 	orr.w	r3, r3, #1
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d102      	bne.n	8003e1e <HAL_RCC_ClockConfig+0xa6>
 8003e18:	4b6f      	ldr	r3, [pc, #444]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	e00f      	b.n	8003e3e <HAL_RCC_ClockConfig+0xc6>
 8003e1e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e22:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003e26:	fa93 f3a3 	rbit	r3, r3
 8003e2a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003e30:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e34:	fa93 f3a3 	rbit	r3, r3
 8003e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e3a:	4b67      	ldr	r3, [pc, #412]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003e42:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e46:	fa92 f2a2 	rbit	r2, r2
 8003e4a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003e4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003e4e:	fab2 f282 	clz	r2, r2
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	f042 0220 	orr.w	r2, r2, #32
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	f002 021f 	and.w	r2, r2, #31
 8003e5e:	2101      	movs	r1, #1
 8003e60:	fa01 f202 	lsl.w	r2, r1, r2
 8003e64:	4013      	ands	r3, r2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d17b      	bne.n	8003f62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e0f3      	b.n	8004056 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d13c      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x178>
 8003e76:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003e7a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e7c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e7e:	fa93 f3a3 	rbit	r3, r3
 8003e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f043 0301 	orr.w	r3, r3, #1
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d102      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x128>
 8003e9a:	4b4f      	ldr	r3, [pc, #316]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	e00f      	b.n	8003ec0 <HAL_RCC_ClockConfig+0x148>
 8003ea0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ea4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	647b      	str	r3, [r7, #68]	@ 0x44
 8003eae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003eb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8003eb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eb6:	fa93 f3a3 	rbit	r3, r3
 8003eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ebc:	4b46      	ldr	r3, [pc, #280]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ec4:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003ec6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ec8:	fa92 f2a2 	rbit	r2, r2
 8003ecc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8003ece:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ed0:	fab2 f282 	clz	r2, r2
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	f042 0220 	orr.w	r2, r2, #32
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	f002 021f 	and.w	r2, r2, #31
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d13a      	bne.n	8003f62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e0b2      	b.n	8004056 <HAL_RCC_ClockConfig+0x2de>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003efc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efe:	fab3 f383 	clz	r3, r3
 8003f02:	b2db      	uxtb	r3, r3
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d102      	bne.n	8003f18 <HAL_RCC_ClockConfig+0x1a0>
 8003f12:	4b31      	ldr	r3, [pc, #196]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	e00d      	b.n	8003f34 <HAL_RCC_ClockConfig+0x1bc>
 8003f18:	2302      	movs	r3, #2
 8003f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1e:	fa93 f3a3 	rbit	r3, r3
 8003f22:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f24:	2302      	movs	r3, #2
 8003f26:	623b      	str	r3, [r7, #32]
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	fa93 f3a3 	rbit	r3, r3
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	4b29      	ldr	r3, [pc, #164]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	2202      	movs	r2, #2
 8003f36:	61ba      	str	r2, [r7, #24]
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	fa92 f2a2 	rbit	r2, r2
 8003f3e:	617a      	str	r2, [r7, #20]
  return result;
 8003f40:	697a      	ldr	r2, [r7, #20]
 8003f42:	fab2 f282 	clz	r2, r2
 8003f46:	b2d2      	uxtb	r2, r2
 8003f48:	f042 0220 	orr.w	r2, r2, #32
 8003f4c:	b2d2      	uxtb	r2, r2
 8003f4e:	f002 021f 	and.w	r2, r2, #31
 8003f52:	2101      	movs	r1, #1
 8003f54:	fa01 f202 	lsl.w	r2, r1, r2
 8003f58:	4013      	ands	r3, r2
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d101      	bne.n	8003f62 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	e079      	b.n	8004056 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f62:	4b1d      	ldr	r3, [pc, #116]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f023 0203 	bic.w	r2, r3, #3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	491a      	ldr	r1, [pc, #104]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f70:	4313      	orrs	r3, r2
 8003f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f74:	f7fd fdec 	bl	8001b50 <HAL_GetTick>
 8003f78:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f7a:	e00a      	b.n	8003f92 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f7c:	f7fd fde8 	bl	8001b50 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e061      	b.n	8004056 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f92:	4b11      	ldr	r3, [pc, #68]	@ (8003fd8 <HAL_RCC_ClockConfig+0x260>)
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f003 020c 	and.w	r2, r3, #12
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d1eb      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd4 <HAL_RCC_ClockConfig+0x25c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0307 	and.w	r3, r3, #7
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d214      	bcs.n	8003fdc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fb2:	4b08      	ldr	r3, [pc, #32]	@ (8003fd4 <HAL_RCC_ClockConfig+0x25c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f023 0207 	bic.w	r2, r3, #7
 8003fba:	4906      	ldr	r1, [pc, #24]	@ (8003fd4 <HAL_RCC_ClockConfig+0x25c>)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b04      	ldr	r3, [pc, #16]	@ (8003fd4 <HAL_RCC_ClockConfig+0x25c>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0307 	and.w	r3, r3, #7
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d005      	beq.n	8003fdc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e040      	b.n	8004056 <HAL_RCC_ClockConfig+0x2de>
 8003fd4:	40022000 	.word	0x40022000
 8003fd8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d008      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	@ (8004060 <HAL_RCC_ClockConfig+0x2e8>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	491a      	ldr	r1, [pc, #104]	@ (8004060 <HAL_RCC_ClockConfig+0x2e8>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d009      	beq.n	800401a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004006:	4b16      	ldr	r3, [pc, #88]	@ (8004060 <HAL_RCC_ClockConfig+0x2e8>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4912      	ldr	r1, [pc, #72]	@ (8004060 <HAL_RCC_ClockConfig+0x2e8>)
 8004016:	4313      	orrs	r3, r2
 8004018:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800401a:	f000 f829 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 800401e:	4601      	mov	r1, r0
 8004020:	4b0f      	ldr	r3, [pc, #60]	@ (8004060 <HAL_RCC_ClockConfig+0x2e8>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004028:	22f0      	movs	r2, #240	@ 0xf0
 800402a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	fa92 f2a2 	rbit	r2, r2
 8004032:	60fa      	str	r2, [r7, #12]
  return result;
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	fab2 f282 	clz	r2, r2
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	40d3      	lsrs	r3, r2
 800403e:	4a09      	ldr	r2, [pc, #36]	@ (8004064 <HAL_RCC_ClockConfig+0x2ec>)
 8004040:	5cd3      	ldrb	r3, [r2, r3]
 8004042:	fa21 f303 	lsr.w	r3, r1, r3
 8004046:	4a08      	ldr	r2, [pc, #32]	@ (8004068 <HAL_RCC_ClockConfig+0x2f0>)
 8004048:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800404a:	4b08      	ldr	r3, [pc, #32]	@ (800406c <HAL_RCC_ClockConfig+0x2f4>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7fd fd3a 	bl	8001ac8 <HAL_InitTick>
  
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3778      	adds	r7, #120	@ 0x78
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40021000 	.word	0x40021000
 8004064:	08009428 	.word	0x08009428
 8004068:	20000000 	.word	0x20000000
 800406c:	20000004 	.word	0x20000004

08004070 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	2300      	movs	r3, #0
 800407c:	60bb      	str	r3, [r7, #8]
 800407e:	2300      	movs	r3, #0
 8004080:	617b      	str	r3, [r7, #20]
 8004082:	2300      	movs	r3, #0
 8004084:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004086:	2300      	movs	r3, #0
 8004088:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800408a:	4b1e      	ldr	r3, [pc, #120]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x94>)
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 030c 	and.w	r3, r3, #12
 8004096:	2b04      	cmp	r3, #4
 8004098:	d002      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0x30>
 800409a:	2b08      	cmp	r3, #8
 800409c:	d003      	beq.n	80040a6 <HAL_RCC_GetSysClockFreq+0x36>
 800409e:	e026      	b.n	80040ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80040a0:	4b19      	ldr	r3, [pc, #100]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x98>)
 80040a2:	613b      	str	r3, [r7, #16]
      break;
 80040a4:	e026      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	0c9b      	lsrs	r3, r3, #18
 80040aa:	f003 030f 	and.w	r3, r3, #15
 80040ae:	4a17      	ldr	r2, [pc, #92]	@ (800410c <HAL_RCC_GetSysClockFreq+0x9c>)
 80040b0:	5cd3      	ldrb	r3, [r2, r3]
 80040b2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80040b4:	4b13      	ldr	r3, [pc, #76]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x94>)
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	4a14      	ldr	r2, [pc, #80]	@ (8004110 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040be:	5cd3      	ldrb	r3, [r2, r3]
 80040c0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80040cc:	4a0e      	ldr	r2, [pc, #56]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x98>)
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	e004      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a0c      	ldr	r2, [pc, #48]	@ (8004114 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	613b      	str	r3, [r7, #16]
      break;
 80040ec:	e002      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040ee:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x98>)
 80040f0:	613b      	str	r3, [r7, #16]
      break;
 80040f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f4:	693b      	ldr	r3, [r7, #16]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	007a1200 	.word	0x007a1200
 800410c:	08009440 	.word	0x08009440
 8004110:	08009450 	.word	0x08009450
 8004114:	003d0900 	.word	0x003d0900

08004118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800411c:	4b03      	ldr	r3, [pc, #12]	@ (800412c <HAL_RCC_GetHCLKFreq+0x14>)
 800411e:	681b      	ldr	r3, [r3, #0]
}
 8004120:	4618      	mov	r0, r3
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000000 	.word	0x20000000

08004130 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b082      	sub	sp, #8
 8004134:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004136:	f7ff ffef 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 800413a:	4601      	mov	r1, r0
 800413c:	4b0b      	ldr	r3, [pc, #44]	@ (800416c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004144:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004148:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	fa92 f2a2 	rbit	r2, r2
 8004150:	603a      	str	r2, [r7, #0]
  return result;
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	fab2 f282 	clz	r2, r2
 8004158:	b2d2      	uxtb	r2, r2
 800415a:	40d3      	lsrs	r3, r2
 800415c:	4a04      	ldr	r2, [pc, #16]	@ (8004170 <HAL_RCC_GetPCLK1Freq+0x40>)
 800415e:	5cd3      	ldrb	r3, [r2, r3]
 8004160:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40021000 	.word	0x40021000
 8004170:	08009438 	.word	0x08009438

08004174 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800417a:	f7ff ffcd 	bl	8004118 <HAL_RCC_GetHCLKFreq>
 800417e:	4601      	mov	r1, r0
 8004180:	4b0b      	ldr	r3, [pc, #44]	@ (80041b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004188:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800418c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	fa92 f2a2 	rbit	r2, r2
 8004194:	603a      	str	r2, [r7, #0]
  return result;
 8004196:	683a      	ldr	r2, [r7, #0]
 8004198:	fab2 f282 	clz	r2, r2
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	40d3      	lsrs	r3, r2
 80041a0:	4a04      	ldr	r2, [pc, #16]	@ (80041b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80041a2:	5cd3      	ldrb	r3, [r2, r3]
 80041a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80041a8:	4618      	mov	r0, r3
 80041aa:	3708      	adds	r7, #8
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	40021000 	.word	0x40021000
 80041b4:	08009438 	.word	0x08009438

080041b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b092      	sub	sp, #72	@ 0x48
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80041c4:	2300      	movs	r3, #0
 80041c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80041c8:	2300      	movs	r3, #0
 80041ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80d4 	beq.w	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041dc:	4b4e      	ldr	r3, [pc, #312]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041de:	69db      	ldr	r3, [r3, #28]
 80041e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d10e      	bne.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	4a4a      	ldr	r2, [pc, #296]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	61d3      	str	r3, [r2, #28]
 80041f4:	4b48      	ldr	r3, [pc, #288]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041fc:	60bb      	str	r3, [r7, #8]
 80041fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004200:	2301      	movs	r3, #1
 8004202:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004206:	4b45      	ldr	r3, [pc, #276]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800420e:	2b00      	cmp	r3, #0
 8004210:	d118      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004212:	4b42      	ldr	r3, [pc, #264]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a41      	ldr	r2, [pc, #260]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004218:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800421c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800421e:	f7fd fc97 	bl	8001b50 <HAL_GetTick>
 8004222:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004224:	e008      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004226:	f7fd fc93 	bl	8001b50 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b64      	cmp	r3, #100	@ 0x64
 8004232:	d901      	bls.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e14b      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004238:	4b38      	ldr	r3, [pc, #224]	@ (800431c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004244:	4b34      	ldr	r3, [pc, #208]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800424c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800424e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004250:	2b00      	cmp	r3, #0
 8004252:	f000 8084 	beq.w	800435e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800425e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004260:	429a      	cmp	r2, r3
 8004262:	d07c      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004264:	4b2c      	ldr	r3, [pc, #176]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004266:	6a1b      	ldr	r3, [r3, #32]
 8004268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800426c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800426e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004272:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004276:	fa93 f3a3 	rbit	r3, r3
 800427a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800427c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800427e:	fab3 f383 	clz	r3, r3
 8004282:	b2db      	uxtb	r3, r3
 8004284:	461a      	mov	r2, r3
 8004286:	4b26      	ldr	r3, [pc, #152]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004288:	4413      	add	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	461a      	mov	r2, r3
 800428e:	2301      	movs	r3, #1
 8004290:	6013      	str	r3, [r2, #0]
 8004292:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004296:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800429a:	fa93 f3a3 	rbit	r3, r3
 800429e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80042a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042a2:	fab3 f383 	clz	r3, r3
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	461a      	mov	r2, r3
 80042aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	461a      	mov	r2, r3
 80042b2:	2300      	movs	r3, #0
 80042b4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80042b6:	4a18      	ldr	r2, [pc, #96]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80042b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ba:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80042bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d04b      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c6:	f7fd fc43 	bl	8001b50 <HAL_GetTick>
 80042ca:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042cc:	e00a      	b.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ce:	f7fd fc3f 	bl	8001b50 <HAL_GetTick>
 80042d2:	4602      	mov	r2, r0
 80042d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042dc:	4293      	cmp	r3, r2
 80042de:	d901      	bls.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e0f5      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80042e4:	2302      	movs	r3, #2
 80042e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80042f0:	2302      	movs	r3, #2
 80042f2:	623b      	str	r3, [r7, #32]
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	fa93 f3a3 	rbit	r3, r3
 80042fa:	61fb      	str	r3, [r7, #28]
  return result;
 80042fc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042fe:	fab3 f383 	clz	r3, r3
 8004302:	b2db      	uxtb	r3, r3
 8004304:	095b      	lsrs	r3, r3, #5
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f043 0302 	orr.w	r3, r3, #2
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d108      	bne.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004312:	4b01      	ldr	r3, [pc, #4]	@ (8004318 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	e00d      	b.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004318:	40021000 	.word	0x40021000
 800431c:	40007000 	.word	0x40007000
 8004320:	10908100 	.word	0x10908100
 8004324:	2302      	movs	r3, #2
 8004326:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	fa93 f3a3 	rbit	r3, r3
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	4b69      	ldr	r3, [pc, #420]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004334:	2202      	movs	r2, #2
 8004336:	613a      	str	r2, [r7, #16]
 8004338:	693a      	ldr	r2, [r7, #16]
 800433a:	fa92 f2a2 	rbit	r2, r2
 800433e:	60fa      	str	r2, [r7, #12]
  return result;
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	fab2 f282 	clz	r2, r2
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800434c:	b2d2      	uxtb	r2, r2
 800434e:	f002 021f 	and.w	r2, r2, #31
 8004352:	2101      	movs	r1, #1
 8004354:	fa01 f202 	lsl.w	r2, r1, r2
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0b7      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800435e:	4b5e      	ldr	r3, [pc, #376]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	495b      	ldr	r1, [pc, #364]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800436c:	4313      	orrs	r3, r2
 800436e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004370:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004374:	2b01      	cmp	r3, #1
 8004376:	d105      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004378:	4b57      	ldr	r3, [pc, #348]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800437a:	69db      	ldr	r3, [r3, #28]
 800437c:	4a56      	ldr	r2, [pc, #344]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800437e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004382:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004390:	4b51      	ldr	r3, [pc, #324]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004394:	f023 0203 	bic.w	r2, r3, #3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	494e      	ldr	r1, [pc, #312]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800439e:	4313      	orrs	r3, r2
 80043a0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0320 	and.w	r3, r3, #32
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d008      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80043ae:	4b4a      	ldr	r3, [pc, #296]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043b2:	f023 0210 	bic.w	r2, r3, #16
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	4947      	ldr	r1, [pc, #284]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80043cc:	4b42      	ldr	r3, [pc, #264]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d8:	493f      	ldr	r1, [pc, #252]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043da:	4313      	orrs	r3, r2
 80043dc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d008      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80043ea:	4b3b      	ldr	r3, [pc, #236]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	f023 0220 	bic.w	r2, r3, #32
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	4938      	ldr	r1, [pc, #224]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d008      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004408:	4b33      	ldr	r3, [pc, #204]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800440a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	695b      	ldr	r3, [r3, #20]
 8004414:	4930      	ldr	r1, [pc, #192]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004416:	4313      	orrs	r3, r2
 8004418:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004422:	2b00      	cmp	r3, #0
 8004424:	d008      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004426:	4b2c      	ldr	r3, [pc, #176]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	4929      	ldr	r1, [pc, #164]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004440:	2b00      	cmp	r3, #0
 8004442:	d008      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004444:	4b24      	ldr	r3, [pc, #144]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004448:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	4921      	ldr	r1, [pc, #132]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004452:	4313      	orrs	r3, r2
 8004454:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d008      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004462:	4b1d      	ldr	r3, [pc, #116]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004466:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	491a      	ldr	r1, [pc, #104]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004470:	4313      	orrs	r3, r2
 8004472:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004480:	4b15      	ldr	r3, [pc, #84]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004484:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800448c:	4912      	ldr	r1, [pc, #72]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800448e:	4313      	orrs	r3, r2
 8004490:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d008      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800449e:	4b0e      	ldr	r3, [pc, #56]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044a2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044aa:	490b      	ldr	r1, [pc, #44]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80044bc:	4b06      	ldr	r3, [pc, #24]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c8:	4903      	ldr	r1, [pc, #12]	@ (80044d8 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80044ce:	2300      	movs	r3, #0
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3748      	adds	r7, #72	@ 0x48
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000

080044dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e040      	b.n	8004570 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d106      	bne.n	8004504 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	f7fd f944 	bl	800178c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2224      	movs	r2, #36	@ 0x24
 8004508:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 0201 	bic.w	r2, r2, #1
 8004518:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f9e8 	bl	80048f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f8af 	bl	800468c <UART_SetConfig>
 800452e:	4603      	mov	r3, r0
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e01b      	b.n	8004570 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004546:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004556:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f042 0201 	orr.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fa67 	bl	8004a3c <UART_CheckIdleState>
 800456e:	4603      	mov	r3, r0
}
 8004570:	4618      	mov	r0, r3
 8004572:	3708      	adds	r7, #8
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}

08004578 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	@ 0x28
 800457c:	af02      	add	r7, sp, #8
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	603b      	str	r3, [r7, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800458c:	2b20      	cmp	r3, #32
 800458e:	d177      	bne.n	8004680 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <HAL_UART_Transmit+0x24>
 8004596:	88fb      	ldrh	r3, [r7, #6]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d101      	bne.n	80045a0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e070      	b.n	8004682 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2221      	movs	r2, #33	@ 0x21
 80045ac:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ae:	f7fd facf 	bl	8001b50 <HAL_GetTick>
 80045b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	88fa      	ldrh	r2, [r7, #6]
 80045b8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	88fa      	ldrh	r2, [r7, #6]
 80045c0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045cc:	d108      	bne.n	80045e0 <HAL_UART_Transmit+0x68>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d104      	bne.n	80045e0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	61bb      	str	r3, [r7, #24]
 80045de:	e003      	b.n	80045e8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80045e8:	e02f      	b.n	800464a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2200      	movs	r2, #0
 80045f2:	2180      	movs	r1, #128	@ 0x80
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fac9 	bl	8004b8c <UART_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d004      	beq.n	800460a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2220      	movs	r2, #32
 8004604:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	e03b      	b.n	8004682 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10b      	bne.n	8004628 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	881a      	ldrh	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800461c:	b292      	uxth	r2, r2
 800461e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004620:	69bb      	ldr	r3, [r7, #24]
 8004622:	3302      	adds	r3, #2
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	e007      	b.n	8004638 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	781a      	ldrb	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3301      	adds	r3, #1
 8004636:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800463e:	b29b      	uxth	r3, r3
 8004640:	3b01      	subs	r3, #1
 8004642:	b29a      	uxth	r2, r3
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004650:	b29b      	uxth	r3, r3
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1c9      	bne.n	80045ea <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	9300      	str	r3, [sp, #0]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	2200      	movs	r2, #0
 800465e:	2140      	movs	r1, #64	@ 0x40
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 fa93 	bl	8004b8c <UART_WaitOnFlagUntilTimeout>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d004      	beq.n	8004676 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2220      	movs	r2, #32
 8004670:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e005      	b.n	8004682 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2220      	movs	r2, #32
 800467a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800467c:	2300      	movs	r3, #0
 800467e:	e000      	b.n	8004682 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004680:	2302      	movs	r3, #2
  }
}
 8004682:	4618      	mov	r0, r3
 8004684:	3720      	adds	r7, #32
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
	...

0800468c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b088      	sub	sp, #32
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004694:	2300      	movs	r3, #0
 8004696:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	689a      	ldr	r2, [r3, #8]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	691b      	ldr	r3, [r3, #16]
 80046a0:	431a      	orrs	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	431a      	orrs	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4b8a      	ldr	r3, [pc, #552]	@ (80048e0 <UART_SetConfig+0x254>)
 80046b8:	4013      	ands	r3, r2
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	6812      	ldr	r2, [r2, #0]
 80046be:	6979      	ldr	r1, [r7, #20]
 80046c0:	430b      	orrs	r3, r1
 80046c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	430a      	orrs	r2, r1
 80046d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	699b      	ldr	r3, [r3, #24]
 80046de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	430a      	orrs	r2, r1
 80046fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a78      	ldr	r2, [pc, #480]	@ (80048e4 <UART_SetConfig+0x258>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d120      	bne.n	800474a <UART_SetConfig+0xbe>
 8004708:	4b77      	ldr	r3, [pc, #476]	@ (80048e8 <UART_SetConfig+0x25c>)
 800470a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	2b03      	cmp	r3, #3
 8004712:	d817      	bhi.n	8004744 <UART_SetConfig+0xb8>
 8004714:	a201      	add	r2, pc, #4	@ (adr r2, 800471c <UART_SetConfig+0x90>)
 8004716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471a:	bf00      	nop
 800471c:	0800472d 	.word	0x0800472d
 8004720:	08004739 	.word	0x08004739
 8004724:	0800473f 	.word	0x0800473f
 8004728:	08004733 	.word	0x08004733
 800472c:	2300      	movs	r3, #0
 800472e:	77fb      	strb	r3, [r7, #31]
 8004730:	e01d      	b.n	800476e <UART_SetConfig+0xe2>
 8004732:	2302      	movs	r3, #2
 8004734:	77fb      	strb	r3, [r7, #31]
 8004736:	e01a      	b.n	800476e <UART_SetConfig+0xe2>
 8004738:	2304      	movs	r3, #4
 800473a:	77fb      	strb	r3, [r7, #31]
 800473c:	e017      	b.n	800476e <UART_SetConfig+0xe2>
 800473e:	2308      	movs	r3, #8
 8004740:	77fb      	strb	r3, [r7, #31]
 8004742:	e014      	b.n	800476e <UART_SetConfig+0xe2>
 8004744:	2310      	movs	r3, #16
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e011      	b.n	800476e <UART_SetConfig+0xe2>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a67      	ldr	r2, [pc, #412]	@ (80048ec <UART_SetConfig+0x260>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d102      	bne.n	800475a <UART_SetConfig+0xce>
 8004754:	2300      	movs	r3, #0
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e009      	b.n	800476e <UART_SetConfig+0xe2>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a64      	ldr	r2, [pc, #400]	@ (80048f0 <UART_SetConfig+0x264>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d102      	bne.n	800476a <UART_SetConfig+0xde>
 8004764:	2300      	movs	r3, #0
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e001      	b.n	800476e <UART_SetConfig+0xe2>
 800476a:	2310      	movs	r3, #16
 800476c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	69db      	ldr	r3, [r3, #28]
 8004772:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004776:	d15a      	bne.n	800482e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004778:	7ffb      	ldrb	r3, [r7, #31]
 800477a:	2b08      	cmp	r3, #8
 800477c:	d827      	bhi.n	80047ce <UART_SetConfig+0x142>
 800477e:	a201      	add	r2, pc, #4	@ (adr r2, 8004784 <UART_SetConfig+0xf8>)
 8004780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004784:	080047a9 	.word	0x080047a9
 8004788:	080047b1 	.word	0x080047b1
 800478c:	080047b9 	.word	0x080047b9
 8004790:	080047cf 	.word	0x080047cf
 8004794:	080047bf 	.word	0x080047bf
 8004798:	080047cf 	.word	0x080047cf
 800479c:	080047cf 	.word	0x080047cf
 80047a0:	080047cf 	.word	0x080047cf
 80047a4:	080047c7 	.word	0x080047c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047a8:	f7ff fcc2 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 80047ac:	61b8      	str	r0, [r7, #24]
        break;
 80047ae:	e013      	b.n	80047d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b0:	f7ff fce0 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 80047b4:	61b8      	str	r0, [r7, #24]
        break;
 80047b6:	e00f      	b.n	80047d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047b8:	4b4e      	ldr	r3, [pc, #312]	@ (80048f4 <UART_SetConfig+0x268>)
 80047ba:	61bb      	str	r3, [r7, #24]
        break;
 80047bc:	e00c      	b.n	80047d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047be:	f7ff fc57 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 80047c2:	61b8      	str	r0, [r7, #24]
        break;
 80047c4:	e008      	b.n	80047d8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047ca:	61bb      	str	r3, [r7, #24]
        break;
 80047cc:	e004      	b.n	80047d8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	77bb      	strb	r3, [r7, #30]
        break;
 80047d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d074      	beq.n	80048c8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	005a      	lsls	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	441a      	add	r2, r3
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	2b0f      	cmp	r3, #15
 80047f8:	d916      	bls.n	8004828 <UART_SetConfig+0x19c>
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004800:	d212      	bcs.n	8004828 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	b29b      	uxth	r3, r3
 8004806:	f023 030f 	bic.w	r3, r3, #15
 800480a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	085b      	lsrs	r3, r3, #1
 8004810:	b29b      	uxth	r3, r3
 8004812:	f003 0307 	and.w	r3, r3, #7
 8004816:	b29a      	uxth	r2, r3
 8004818:	89fb      	ldrh	r3, [r7, #14]
 800481a:	4313      	orrs	r3, r2
 800481c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	89fa      	ldrh	r2, [r7, #14]
 8004824:	60da      	str	r2, [r3, #12]
 8004826:	e04f      	b.n	80048c8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	77bb      	strb	r3, [r7, #30]
 800482c:	e04c      	b.n	80048c8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800482e:	7ffb      	ldrb	r3, [r7, #31]
 8004830:	2b08      	cmp	r3, #8
 8004832:	d828      	bhi.n	8004886 <UART_SetConfig+0x1fa>
 8004834:	a201      	add	r2, pc, #4	@ (adr r2, 800483c <UART_SetConfig+0x1b0>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	08004861 	.word	0x08004861
 8004840:	08004869 	.word	0x08004869
 8004844:	08004871 	.word	0x08004871
 8004848:	08004887 	.word	0x08004887
 800484c:	08004877 	.word	0x08004877
 8004850:	08004887 	.word	0x08004887
 8004854:	08004887 	.word	0x08004887
 8004858:	08004887 	.word	0x08004887
 800485c:	0800487f 	.word	0x0800487f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004860:	f7ff fc66 	bl	8004130 <HAL_RCC_GetPCLK1Freq>
 8004864:	61b8      	str	r0, [r7, #24]
        break;
 8004866:	e013      	b.n	8004890 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004868:	f7ff fc84 	bl	8004174 <HAL_RCC_GetPCLK2Freq>
 800486c:	61b8      	str	r0, [r7, #24]
        break;
 800486e:	e00f      	b.n	8004890 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004870:	4b20      	ldr	r3, [pc, #128]	@ (80048f4 <UART_SetConfig+0x268>)
 8004872:	61bb      	str	r3, [r7, #24]
        break;
 8004874:	e00c      	b.n	8004890 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004876:	f7ff fbfb 	bl	8004070 <HAL_RCC_GetSysClockFreq>
 800487a:	61b8      	str	r0, [r7, #24]
        break;
 800487c:	e008      	b.n	8004890 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800487e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004882:	61bb      	str	r3, [r7, #24]
        break;
 8004884:	e004      	b.n	8004890 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	77bb      	strb	r3, [r7, #30]
        break;
 800488e:	bf00      	nop
    }

    if (pclk != 0U)
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d018      	beq.n	80048c8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	085a      	lsrs	r2, r3, #1
 800489c:	69bb      	ldr	r3, [r7, #24]
 800489e:	441a      	add	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	2b0f      	cmp	r3, #15
 80048ae:	d909      	bls.n	80048c4 <UART_SetConfig+0x238>
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048b6:	d205      	bcs.n	80048c4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	e001      	b.n	80048c8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80048d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	efff69f3 	.word	0xefff69f3
 80048e4:	40013800 	.word	0x40013800
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40004400 	.word	0x40004400
 80048f0:	40004800 	.word	0x40004800
 80048f4:	007a1200 	.word	0x007a1200

080048f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496a:	f003 0304 	and.w	r3, r3, #4
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	430a      	orrs	r2, r1
 8004986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ae:	f003 0320 	and.w	r3, r3, #32
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01a      	beq.n	8004a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	430a      	orrs	r2, r1
 80049ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80049f6:	d10a      	bne.n	8004a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	605a      	str	r2, [r3, #4]
  }
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b098      	sub	sp, #96	@ 0x60
 8004a40:	af02      	add	r7, sp, #8
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a4c:	f7fd f880 	bl	8001b50 <HAL_GetTick>
 8004a50:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0308 	and.w	r3, r3, #8
 8004a5c:	2b08      	cmp	r3, #8
 8004a5e:	d12e      	bne.n	8004abe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a60:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f88c 	bl	8004b8c <UART_WaitOnFlagUntilTimeout>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d021      	beq.n	8004abe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a82:	e853 3f00 	ldrex	r3, [r3]
 8004a86:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a9a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a9c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aa0:	e841 2300 	strex	r3, r2, [r1]
 8004aa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1e6      	bne.n	8004a7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2220      	movs	r2, #32
 8004ab0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e062      	b.n	8004b84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f003 0304 	and.w	r3, r3, #4
 8004ac8:	2b04      	cmp	r3, #4
 8004aca:	d149      	bne.n	8004b60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004acc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 f856 	bl	8004b8c <UART_WaitOnFlagUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d03c      	beq.n	8004b60 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	623b      	str	r3, [r7, #32]
   return(result);
 8004af4:	6a3b      	ldr	r3, [r7, #32]
 8004af6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	461a      	mov	r2, r3
 8004b02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b0c:	e841 2300 	strex	r3, r2, [r1]
 8004b10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004b12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1e6      	bne.n	8004ae6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3308      	adds	r3, #8
 8004b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	e853 3f00 	ldrex	r3, [r3]
 8004b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f023 0301 	bic.w	r3, r3, #1
 8004b2e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3308      	adds	r3, #8
 8004b36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004b38:	61fa      	str	r2, [r7, #28]
 8004b3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3c:	69b9      	ldr	r1, [r7, #24]
 8004b3e:	69fa      	ldr	r2, [r7, #28]
 8004b40:	e841 2300 	strex	r3, r2, [r1]
 8004b44:	617b      	str	r3, [r7, #20]
   return(result);
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d1e5      	bne.n	8004b18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e011      	b.n	8004b84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004b82:	2300      	movs	r3, #0
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3758      	adds	r7, #88	@ 0x58
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}

08004b8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	60f8      	str	r0, [r7, #12]
 8004b94:	60b9      	str	r1, [r7, #8]
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b9c:	e04f      	b.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d04b      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ba6:	f7fc ffd3 	bl	8001b50 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d302      	bcc.n	8004bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8004bb6:	69bb      	ldr	r3, [r7, #24]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d101      	bne.n	8004bc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e04e      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d037      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b80      	cmp	r3, #128	@ 0x80
 8004bd2:	d034      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b40      	cmp	r3, #64	@ 0x40
 8004bd8:	d031      	beq.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d110      	bne.n	8004c0a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2208      	movs	r2, #8
 8004bee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f838 	bl	8004c66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2208      	movs	r2, #8
 8004bfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e029      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c14:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c18:	d111      	bne.n	8004c3e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004c22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 f81e 	bl	8004c66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e00f      	b.n	8004c5e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	4013      	ands	r3, r2
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	bf0c      	ite	eq
 8004c4e:	2301      	moveq	r3, #1
 8004c50:	2300      	movne	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	461a      	mov	r2, r3
 8004c56:	79fb      	ldrb	r3, [r7, #7]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d0a0      	beq.n	8004b9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}

08004c66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c66:	b480      	push	{r7}
 8004c68:	b095      	sub	sp, #84	@ 0x54
 8004c6a:	af00      	add	r7, sp, #0
 8004c6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c7e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c8c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c8e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c92:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e6      	bne.n	8004c6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	f023 0301 	bic.w	r3, r3, #1
 8004cb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3308      	adds	r3, #8
 8004cbe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cc8:	e841 2300 	strex	r3, r2, [r1]
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1e5      	bne.n	8004ca0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d118      	bne.n	8004d0e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cea:	68bb      	ldr	r3, [r7, #8]
 8004cec:	f023 0310 	bic.w	r3, r3, #16
 8004cf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	6979      	ldr	r1, [r7, #20]
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	613b      	str	r3, [r7, #16]
   return(result);
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e6      	bne.n	8004cdc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d22:	bf00      	nop
 8004d24:	3754      	adds	r7, #84	@ 0x54
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <__cvt>:
 8004d2e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d32:	ec57 6b10 	vmov	r6, r7, d0
 8004d36:	2f00      	cmp	r7, #0
 8004d38:	460c      	mov	r4, r1
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	463b      	mov	r3, r7
 8004d3e:	bfbb      	ittet	lt
 8004d40:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004d44:	461f      	movlt	r7, r3
 8004d46:	2300      	movge	r3, #0
 8004d48:	232d      	movlt	r3, #45	@ 0x2d
 8004d4a:	700b      	strb	r3, [r1, #0]
 8004d4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004d4e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004d52:	4691      	mov	r9, r2
 8004d54:	f023 0820 	bic.w	r8, r3, #32
 8004d58:	bfbc      	itt	lt
 8004d5a:	4632      	movlt	r2, r6
 8004d5c:	4616      	movlt	r6, r2
 8004d5e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004d62:	d005      	beq.n	8004d70 <__cvt+0x42>
 8004d64:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004d68:	d100      	bne.n	8004d6c <__cvt+0x3e>
 8004d6a:	3401      	adds	r4, #1
 8004d6c:	2102      	movs	r1, #2
 8004d6e:	e000      	b.n	8004d72 <__cvt+0x44>
 8004d70:	2103      	movs	r1, #3
 8004d72:	ab03      	add	r3, sp, #12
 8004d74:	9301      	str	r3, [sp, #4]
 8004d76:	ab02      	add	r3, sp, #8
 8004d78:	9300      	str	r3, [sp, #0]
 8004d7a:	ec47 6b10 	vmov	d0, r6, r7
 8004d7e:	4653      	mov	r3, sl
 8004d80:	4622      	mov	r2, r4
 8004d82:	f001 f875 	bl	8005e70 <_dtoa_r>
 8004d86:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004d8a:	4605      	mov	r5, r0
 8004d8c:	d119      	bne.n	8004dc2 <__cvt+0x94>
 8004d8e:	f019 0f01 	tst.w	r9, #1
 8004d92:	d00e      	beq.n	8004db2 <__cvt+0x84>
 8004d94:	eb00 0904 	add.w	r9, r0, r4
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	4630      	mov	r0, r6
 8004d9e:	4639      	mov	r1, r7
 8004da0:	f7fb fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 8004da4:	b108      	cbz	r0, 8004daa <__cvt+0x7c>
 8004da6:	f8cd 900c 	str.w	r9, [sp, #12]
 8004daa:	2230      	movs	r2, #48	@ 0x30
 8004dac:	9b03      	ldr	r3, [sp, #12]
 8004dae:	454b      	cmp	r3, r9
 8004db0:	d31e      	bcc.n	8004df0 <__cvt+0xc2>
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004db6:	1b5b      	subs	r3, r3, r5
 8004db8:	4628      	mov	r0, r5
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	b004      	add	sp, #16
 8004dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004dc6:	eb00 0904 	add.w	r9, r0, r4
 8004dca:	d1e5      	bne.n	8004d98 <__cvt+0x6a>
 8004dcc:	7803      	ldrb	r3, [r0, #0]
 8004dce:	2b30      	cmp	r3, #48	@ 0x30
 8004dd0:	d10a      	bne.n	8004de8 <__cvt+0xba>
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	4630      	mov	r0, r6
 8004dd8:	4639      	mov	r1, r7
 8004dda:	f7fb fe75 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dde:	b918      	cbnz	r0, 8004de8 <__cvt+0xba>
 8004de0:	f1c4 0401 	rsb	r4, r4, #1
 8004de4:	f8ca 4000 	str.w	r4, [sl]
 8004de8:	f8da 3000 	ldr.w	r3, [sl]
 8004dec:	4499      	add	r9, r3
 8004dee:	e7d3      	b.n	8004d98 <__cvt+0x6a>
 8004df0:	1c59      	adds	r1, r3, #1
 8004df2:	9103      	str	r1, [sp, #12]
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e7d9      	b.n	8004dac <__cvt+0x7e>

08004df8 <__exponent>:
 8004df8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dfa:	2900      	cmp	r1, #0
 8004dfc:	bfba      	itte	lt
 8004dfe:	4249      	neglt	r1, r1
 8004e00:	232d      	movlt	r3, #45	@ 0x2d
 8004e02:	232b      	movge	r3, #43	@ 0x2b
 8004e04:	2909      	cmp	r1, #9
 8004e06:	7002      	strb	r2, [r0, #0]
 8004e08:	7043      	strb	r3, [r0, #1]
 8004e0a:	dd29      	ble.n	8004e60 <__exponent+0x68>
 8004e0c:	f10d 0307 	add.w	r3, sp, #7
 8004e10:	461d      	mov	r5, r3
 8004e12:	270a      	movs	r7, #10
 8004e14:	461a      	mov	r2, r3
 8004e16:	fbb1 f6f7 	udiv	r6, r1, r7
 8004e1a:	fb07 1416 	mls	r4, r7, r6, r1
 8004e1e:	3430      	adds	r4, #48	@ 0x30
 8004e20:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004e24:	460c      	mov	r4, r1
 8004e26:	2c63      	cmp	r4, #99	@ 0x63
 8004e28:	f103 33ff 	add.w	r3, r3, #4294967295
 8004e2c:	4631      	mov	r1, r6
 8004e2e:	dcf1      	bgt.n	8004e14 <__exponent+0x1c>
 8004e30:	3130      	adds	r1, #48	@ 0x30
 8004e32:	1e94      	subs	r4, r2, #2
 8004e34:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004e38:	1c41      	adds	r1, r0, #1
 8004e3a:	4623      	mov	r3, r4
 8004e3c:	42ab      	cmp	r3, r5
 8004e3e:	d30a      	bcc.n	8004e56 <__exponent+0x5e>
 8004e40:	f10d 0309 	add.w	r3, sp, #9
 8004e44:	1a9b      	subs	r3, r3, r2
 8004e46:	42ac      	cmp	r4, r5
 8004e48:	bf88      	it	hi
 8004e4a:	2300      	movhi	r3, #0
 8004e4c:	3302      	adds	r3, #2
 8004e4e:	4403      	add	r3, r0
 8004e50:	1a18      	subs	r0, r3, r0
 8004e52:	b003      	add	sp, #12
 8004e54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e56:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004e5a:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004e5e:	e7ed      	b.n	8004e3c <__exponent+0x44>
 8004e60:	2330      	movs	r3, #48	@ 0x30
 8004e62:	3130      	adds	r1, #48	@ 0x30
 8004e64:	7083      	strb	r3, [r0, #2]
 8004e66:	70c1      	strb	r1, [r0, #3]
 8004e68:	1d03      	adds	r3, r0, #4
 8004e6a:	e7f1      	b.n	8004e50 <__exponent+0x58>

08004e6c <_printf_float>:
 8004e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e70:	b08d      	sub	sp, #52	@ 0x34
 8004e72:	460c      	mov	r4, r1
 8004e74:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004e78:	4616      	mov	r6, r2
 8004e7a:	461f      	mov	r7, r3
 8004e7c:	4605      	mov	r5, r0
 8004e7e:	f000 feef 	bl	8005c60 <_localeconv_r>
 8004e82:	6803      	ldr	r3, [r0, #0]
 8004e84:	9304      	str	r3, [sp, #16]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fb f9f2 	bl	8000270 <strlen>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004e90:	f8d8 3000 	ldr.w	r3, [r8]
 8004e94:	9005      	str	r0, [sp, #20]
 8004e96:	3307      	adds	r3, #7
 8004e98:	f023 0307 	bic.w	r3, r3, #7
 8004e9c:	f103 0208 	add.w	r2, r3, #8
 8004ea0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004ea4:	f8d4 b000 	ldr.w	fp, [r4]
 8004ea8:	f8c8 2000 	str.w	r2, [r8]
 8004eac:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004eb0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004eb4:	9307      	str	r3, [sp, #28]
 8004eb6:	f8cd 8018 	str.w	r8, [sp, #24]
 8004eba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004ebe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ec2:	4b9c      	ldr	r3, [pc, #624]	@ (8005134 <_printf_float+0x2c8>)
 8004ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec8:	f7fb fe30 	bl	8000b2c <__aeabi_dcmpun>
 8004ecc:	bb70      	cbnz	r0, 8004f2c <_printf_float+0xc0>
 8004ece:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ed2:	4b98      	ldr	r3, [pc, #608]	@ (8005134 <_printf_float+0x2c8>)
 8004ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed8:	f7fb fe0a 	bl	8000af0 <__aeabi_dcmple>
 8004edc:	bb30      	cbnz	r0, 8004f2c <_printf_float+0xc0>
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	f7fb fdf9 	bl	8000adc <__aeabi_dcmplt>
 8004eea:	b110      	cbz	r0, 8004ef2 <_printf_float+0x86>
 8004eec:	232d      	movs	r3, #45	@ 0x2d
 8004eee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ef2:	4a91      	ldr	r2, [pc, #580]	@ (8005138 <_printf_float+0x2cc>)
 8004ef4:	4b91      	ldr	r3, [pc, #580]	@ (800513c <_printf_float+0x2d0>)
 8004ef6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004efa:	bf94      	ite	ls
 8004efc:	4690      	movls	r8, r2
 8004efe:	4698      	movhi	r8, r3
 8004f00:	2303      	movs	r3, #3
 8004f02:	6123      	str	r3, [r4, #16]
 8004f04:	f02b 0304 	bic.w	r3, fp, #4
 8004f08:	6023      	str	r3, [r4, #0]
 8004f0a:	f04f 0900 	mov.w	r9, #0
 8004f0e:	9700      	str	r7, [sp, #0]
 8004f10:	4633      	mov	r3, r6
 8004f12:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004f14:	4621      	mov	r1, r4
 8004f16:	4628      	mov	r0, r5
 8004f18:	f000 f9d2 	bl	80052c0 <_printf_common>
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	f040 808d 	bne.w	800503c <_printf_float+0x1d0>
 8004f22:	f04f 30ff 	mov.w	r0, #4294967295
 8004f26:	b00d      	add	sp, #52	@ 0x34
 8004f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	464b      	mov	r3, r9
 8004f30:	4640      	mov	r0, r8
 8004f32:	4649      	mov	r1, r9
 8004f34:	f7fb fdfa 	bl	8000b2c <__aeabi_dcmpun>
 8004f38:	b140      	cbz	r0, 8004f4c <_printf_float+0xe0>
 8004f3a:	464b      	mov	r3, r9
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	bfbc      	itt	lt
 8004f40:	232d      	movlt	r3, #45	@ 0x2d
 8004f42:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004f46:	4a7e      	ldr	r2, [pc, #504]	@ (8005140 <_printf_float+0x2d4>)
 8004f48:	4b7e      	ldr	r3, [pc, #504]	@ (8005144 <_printf_float+0x2d8>)
 8004f4a:	e7d4      	b.n	8004ef6 <_printf_float+0x8a>
 8004f4c:	6863      	ldr	r3, [r4, #4]
 8004f4e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004f52:	9206      	str	r2, [sp, #24]
 8004f54:	1c5a      	adds	r2, r3, #1
 8004f56:	d13b      	bne.n	8004fd0 <_printf_float+0x164>
 8004f58:	2306      	movs	r3, #6
 8004f5a:	6063      	str	r3, [r4, #4]
 8004f5c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004f60:	2300      	movs	r3, #0
 8004f62:	6022      	str	r2, [r4, #0]
 8004f64:	9303      	str	r3, [sp, #12]
 8004f66:	ab0a      	add	r3, sp, #40	@ 0x28
 8004f68:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004f6c:	ab09      	add	r3, sp, #36	@ 0x24
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	6861      	ldr	r1, [r4, #4]
 8004f72:	ec49 8b10 	vmov	d0, r8, r9
 8004f76:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004f7a:	4628      	mov	r0, r5
 8004f7c:	f7ff fed7 	bl	8004d2e <__cvt>
 8004f80:	9b06      	ldr	r3, [sp, #24]
 8004f82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f84:	2b47      	cmp	r3, #71	@ 0x47
 8004f86:	4680      	mov	r8, r0
 8004f88:	d129      	bne.n	8004fde <_printf_float+0x172>
 8004f8a:	1cc8      	adds	r0, r1, #3
 8004f8c:	db02      	blt.n	8004f94 <_printf_float+0x128>
 8004f8e:	6863      	ldr	r3, [r4, #4]
 8004f90:	4299      	cmp	r1, r3
 8004f92:	dd41      	ble.n	8005018 <_printf_float+0x1ac>
 8004f94:	f1aa 0a02 	sub.w	sl, sl, #2
 8004f98:	fa5f fa8a 	uxtb.w	sl, sl
 8004f9c:	3901      	subs	r1, #1
 8004f9e:	4652      	mov	r2, sl
 8004fa0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004fa4:	9109      	str	r1, [sp, #36]	@ 0x24
 8004fa6:	f7ff ff27 	bl	8004df8 <__exponent>
 8004faa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004fac:	1813      	adds	r3, r2, r0
 8004fae:	2a01      	cmp	r2, #1
 8004fb0:	4681      	mov	r9, r0
 8004fb2:	6123      	str	r3, [r4, #16]
 8004fb4:	dc02      	bgt.n	8004fbc <_printf_float+0x150>
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	07d2      	lsls	r2, r2, #31
 8004fba:	d501      	bpl.n	8004fc0 <_printf_float+0x154>
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	6123      	str	r3, [r4, #16]
 8004fc0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0a2      	beq.n	8004f0e <_printf_float+0xa2>
 8004fc8:	232d      	movs	r3, #45	@ 0x2d
 8004fca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fce:	e79e      	b.n	8004f0e <_printf_float+0xa2>
 8004fd0:	9a06      	ldr	r2, [sp, #24]
 8004fd2:	2a47      	cmp	r2, #71	@ 0x47
 8004fd4:	d1c2      	bne.n	8004f5c <_printf_float+0xf0>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d1c0      	bne.n	8004f5c <_printf_float+0xf0>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e7bd      	b.n	8004f5a <_printf_float+0xee>
 8004fde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004fe2:	d9db      	bls.n	8004f9c <_printf_float+0x130>
 8004fe4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004fe8:	d118      	bne.n	800501c <_printf_float+0x1b0>
 8004fea:	2900      	cmp	r1, #0
 8004fec:	6863      	ldr	r3, [r4, #4]
 8004fee:	dd0b      	ble.n	8005008 <_printf_float+0x19c>
 8004ff0:	6121      	str	r1, [r4, #16]
 8004ff2:	b913      	cbnz	r3, 8004ffa <_printf_float+0x18e>
 8004ff4:	6822      	ldr	r2, [r4, #0]
 8004ff6:	07d0      	lsls	r0, r2, #31
 8004ff8:	d502      	bpl.n	8005000 <_printf_float+0x194>
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	440b      	add	r3, r1
 8004ffe:	6123      	str	r3, [r4, #16]
 8005000:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005002:	f04f 0900 	mov.w	r9, #0
 8005006:	e7db      	b.n	8004fc0 <_printf_float+0x154>
 8005008:	b913      	cbnz	r3, 8005010 <_printf_float+0x1a4>
 800500a:	6822      	ldr	r2, [r4, #0]
 800500c:	07d2      	lsls	r2, r2, #31
 800500e:	d501      	bpl.n	8005014 <_printf_float+0x1a8>
 8005010:	3302      	adds	r3, #2
 8005012:	e7f4      	b.n	8004ffe <_printf_float+0x192>
 8005014:	2301      	movs	r3, #1
 8005016:	e7f2      	b.n	8004ffe <_printf_float+0x192>
 8005018:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800501c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800501e:	4299      	cmp	r1, r3
 8005020:	db05      	blt.n	800502e <_printf_float+0x1c2>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	6121      	str	r1, [r4, #16]
 8005026:	07d8      	lsls	r0, r3, #31
 8005028:	d5ea      	bpl.n	8005000 <_printf_float+0x194>
 800502a:	1c4b      	adds	r3, r1, #1
 800502c:	e7e7      	b.n	8004ffe <_printf_float+0x192>
 800502e:	2900      	cmp	r1, #0
 8005030:	bfd4      	ite	le
 8005032:	f1c1 0202 	rsble	r2, r1, #2
 8005036:	2201      	movgt	r2, #1
 8005038:	4413      	add	r3, r2
 800503a:	e7e0      	b.n	8004ffe <_printf_float+0x192>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	055a      	lsls	r2, r3, #21
 8005040:	d407      	bmi.n	8005052 <_printf_float+0x1e6>
 8005042:	6923      	ldr	r3, [r4, #16]
 8005044:	4642      	mov	r2, r8
 8005046:	4631      	mov	r1, r6
 8005048:	4628      	mov	r0, r5
 800504a:	47b8      	blx	r7
 800504c:	3001      	adds	r0, #1
 800504e:	d12b      	bne.n	80050a8 <_printf_float+0x23c>
 8005050:	e767      	b.n	8004f22 <_printf_float+0xb6>
 8005052:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005056:	f240 80dd 	bls.w	8005214 <_printf_float+0x3a8>
 800505a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800505e:	2200      	movs	r2, #0
 8005060:	2300      	movs	r3, #0
 8005062:	f7fb fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 8005066:	2800      	cmp	r0, #0
 8005068:	d033      	beq.n	80050d2 <_printf_float+0x266>
 800506a:	4a37      	ldr	r2, [pc, #220]	@ (8005148 <_printf_float+0x2dc>)
 800506c:	2301      	movs	r3, #1
 800506e:	4631      	mov	r1, r6
 8005070:	4628      	mov	r0, r5
 8005072:	47b8      	blx	r7
 8005074:	3001      	adds	r0, #1
 8005076:	f43f af54 	beq.w	8004f22 <_printf_float+0xb6>
 800507a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800507e:	4543      	cmp	r3, r8
 8005080:	db02      	blt.n	8005088 <_printf_float+0x21c>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	07d8      	lsls	r0, r3, #31
 8005086:	d50f      	bpl.n	80050a8 <_printf_float+0x23c>
 8005088:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800508c:	4631      	mov	r1, r6
 800508e:	4628      	mov	r0, r5
 8005090:	47b8      	blx	r7
 8005092:	3001      	adds	r0, #1
 8005094:	f43f af45 	beq.w	8004f22 <_printf_float+0xb6>
 8005098:	f04f 0900 	mov.w	r9, #0
 800509c:	f108 38ff 	add.w	r8, r8, #4294967295
 80050a0:	f104 0a1a 	add.w	sl, r4, #26
 80050a4:	45c8      	cmp	r8, r9
 80050a6:	dc09      	bgt.n	80050bc <_printf_float+0x250>
 80050a8:	6823      	ldr	r3, [r4, #0]
 80050aa:	079b      	lsls	r3, r3, #30
 80050ac:	f100 8103 	bmi.w	80052b6 <_printf_float+0x44a>
 80050b0:	68e0      	ldr	r0, [r4, #12]
 80050b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80050b4:	4298      	cmp	r0, r3
 80050b6:	bfb8      	it	lt
 80050b8:	4618      	movlt	r0, r3
 80050ba:	e734      	b.n	8004f26 <_printf_float+0xba>
 80050bc:	2301      	movs	r3, #1
 80050be:	4652      	mov	r2, sl
 80050c0:	4631      	mov	r1, r6
 80050c2:	4628      	mov	r0, r5
 80050c4:	47b8      	blx	r7
 80050c6:	3001      	adds	r0, #1
 80050c8:	f43f af2b 	beq.w	8004f22 <_printf_float+0xb6>
 80050cc:	f109 0901 	add.w	r9, r9, #1
 80050d0:	e7e8      	b.n	80050a4 <_printf_float+0x238>
 80050d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	dc39      	bgt.n	800514c <_printf_float+0x2e0>
 80050d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005148 <_printf_float+0x2dc>)
 80050da:	2301      	movs	r3, #1
 80050dc:	4631      	mov	r1, r6
 80050de:	4628      	mov	r0, r5
 80050e0:	47b8      	blx	r7
 80050e2:	3001      	adds	r0, #1
 80050e4:	f43f af1d 	beq.w	8004f22 <_printf_float+0xb6>
 80050e8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80050ec:	ea59 0303 	orrs.w	r3, r9, r3
 80050f0:	d102      	bne.n	80050f8 <_printf_float+0x28c>
 80050f2:	6823      	ldr	r3, [r4, #0]
 80050f4:	07d9      	lsls	r1, r3, #31
 80050f6:	d5d7      	bpl.n	80050a8 <_printf_float+0x23c>
 80050f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050fc:	4631      	mov	r1, r6
 80050fe:	4628      	mov	r0, r5
 8005100:	47b8      	blx	r7
 8005102:	3001      	adds	r0, #1
 8005104:	f43f af0d 	beq.w	8004f22 <_printf_float+0xb6>
 8005108:	f04f 0a00 	mov.w	sl, #0
 800510c:	f104 0b1a 	add.w	fp, r4, #26
 8005110:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005112:	425b      	negs	r3, r3
 8005114:	4553      	cmp	r3, sl
 8005116:	dc01      	bgt.n	800511c <_printf_float+0x2b0>
 8005118:	464b      	mov	r3, r9
 800511a:	e793      	b.n	8005044 <_printf_float+0x1d8>
 800511c:	2301      	movs	r3, #1
 800511e:	465a      	mov	r2, fp
 8005120:	4631      	mov	r1, r6
 8005122:	4628      	mov	r0, r5
 8005124:	47b8      	blx	r7
 8005126:	3001      	adds	r0, #1
 8005128:	f43f aefb 	beq.w	8004f22 <_printf_float+0xb6>
 800512c:	f10a 0a01 	add.w	sl, sl, #1
 8005130:	e7ee      	b.n	8005110 <_printf_float+0x2a4>
 8005132:	bf00      	nop
 8005134:	7fefffff 	.word	0x7fefffff
 8005138:	08009460 	.word	0x08009460
 800513c:	08009464 	.word	0x08009464
 8005140:	08009468 	.word	0x08009468
 8005144:	0800946c 	.word	0x0800946c
 8005148:	08009470 	.word	0x08009470
 800514c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800514e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005152:	4553      	cmp	r3, sl
 8005154:	bfa8      	it	ge
 8005156:	4653      	movge	r3, sl
 8005158:	2b00      	cmp	r3, #0
 800515a:	4699      	mov	r9, r3
 800515c:	dc36      	bgt.n	80051cc <_printf_float+0x360>
 800515e:	f04f 0b00 	mov.w	fp, #0
 8005162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005166:	f104 021a 	add.w	r2, r4, #26
 800516a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800516c:	9306      	str	r3, [sp, #24]
 800516e:	eba3 0309 	sub.w	r3, r3, r9
 8005172:	455b      	cmp	r3, fp
 8005174:	dc31      	bgt.n	80051da <_printf_float+0x36e>
 8005176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005178:	459a      	cmp	sl, r3
 800517a:	dc3a      	bgt.n	80051f2 <_printf_float+0x386>
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	07da      	lsls	r2, r3, #31
 8005180:	d437      	bmi.n	80051f2 <_printf_float+0x386>
 8005182:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005184:	ebaa 0903 	sub.w	r9, sl, r3
 8005188:	9b06      	ldr	r3, [sp, #24]
 800518a:	ebaa 0303 	sub.w	r3, sl, r3
 800518e:	4599      	cmp	r9, r3
 8005190:	bfa8      	it	ge
 8005192:	4699      	movge	r9, r3
 8005194:	f1b9 0f00 	cmp.w	r9, #0
 8005198:	dc33      	bgt.n	8005202 <_printf_float+0x396>
 800519a:	f04f 0800 	mov.w	r8, #0
 800519e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051a2:	f104 0b1a 	add.w	fp, r4, #26
 80051a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80051a8:	ebaa 0303 	sub.w	r3, sl, r3
 80051ac:	eba3 0309 	sub.w	r3, r3, r9
 80051b0:	4543      	cmp	r3, r8
 80051b2:	f77f af79 	ble.w	80050a8 <_printf_float+0x23c>
 80051b6:	2301      	movs	r3, #1
 80051b8:	465a      	mov	r2, fp
 80051ba:	4631      	mov	r1, r6
 80051bc:	4628      	mov	r0, r5
 80051be:	47b8      	blx	r7
 80051c0:	3001      	adds	r0, #1
 80051c2:	f43f aeae 	beq.w	8004f22 <_printf_float+0xb6>
 80051c6:	f108 0801 	add.w	r8, r8, #1
 80051ca:	e7ec      	b.n	80051a6 <_printf_float+0x33a>
 80051cc:	4642      	mov	r2, r8
 80051ce:	4631      	mov	r1, r6
 80051d0:	4628      	mov	r0, r5
 80051d2:	47b8      	blx	r7
 80051d4:	3001      	adds	r0, #1
 80051d6:	d1c2      	bne.n	800515e <_printf_float+0x2f2>
 80051d8:	e6a3      	b.n	8004f22 <_printf_float+0xb6>
 80051da:	2301      	movs	r3, #1
 80051dc:	4631      	mov	r1, r6
 80051de:	4628      	mov	r0, r5
 80051e0:	9206      	str	r2, [sp, #24]
 80051e2:	47b8      	blx	r7
 80051e4:	3001      	adds	r0, #1
 80051e6:	f43f ae9c 	beq.w	8004f22 <_printf_float+0xb6>
 80051ea:	9a06      	ldr	r2, [sp, #24]
 80051ec:	f10b 0b01 	add.w	fp, fp, #1
 80051f0:	e7bb      	b.n	800516a <_printf_float+0x2fe>
 80051f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051f6:	4631      	mov	r1, r6
 80051f8:	4628      	mov	r0, r5
 80051fa:	47b8      	blx	r7
 80051fc:	3001      	adds	r0, #1
 80051fe:	d1c0      	bne.n	8005182 <_printf_float+0x316>
 8005200:	e68f      	b.n	8004f22 <_printf_float+0xb6>
 8005202:	9a06      	ldr	r2, [sp, #24]
 8005204:	464b      	mov	r3, r9
 8005206:	4442      	add	r2, r8
 8005208:	4631      	mov	r1, r6
 800520a:	4628      	mov	r0, r5
 800520c:	47b8      	blx	r7
 800520e:	3001      	adds	r0, #1
 8005210:	d1c3      	bne.n	800519a <_printf_float+0x32e>
 8005212:	e686      	b.n	8004f22 <_printf_float+0xb6>
 8005214:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005218:	f1ba 0f01 	cmp.w	sl, #1
 800521c:	dc01      	bgt.n	8005222 <_printf_float+0x3b6>
 800521e:	07db      	lsls	r3, r3, #31
 8005220:	d536      	bpl.n	8005290 <_printf_float+0x424>
 8005222:	2301      	movs	r3, #1
 8005224:	4642      	mov	r2, r8
 8005226:	4631      	mov	r1, r6
 8005228:	4628      	mov	r0, r5
 800522a:	47b8      	blx	r7
 800522c:	3001      	adds	r0, #1
 800522e:	f43f ae78 	beq.w	8004f22 <_printf_float+0xb6>
 8005232:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005236:	4631      	mov	r1, r6
 8005238:	4628      	mov	r0, r5
 800523a:	47b8      	blx	r7
 800523c:	3001      	adds	r0, #1
 800523e:	f43f ae70 	beq.w	8004f22 <_printf_float+0xb6>
 8005242:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005246:	2200      	movs	r2, #0
 8005248:	2300      	movs	r3, #0
 800524a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800524e:	f7fb fc3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005252:	b9c0      	cbnz	r0, 8005286 <_printf_float+0x41a>
 8005254:	4653      	mov	r3, sl
 8005256:	f108 0201 	add.w	r2, r8, #1
 800525a:	4631      	mov	r1, r6
 800525c:	4628      	mov	r0, r5
 800525e:	47b8      	blx	r7
 8005260:	3001      	adds	r0, #1
 8005262:	d10c      	bne.n	800527e <_printf_float+0x412>
 8005264:	e65d      	b.n	8004f22 <_printf_float+0xb6>
 8005266:	2301      	movs	r3, #1
 8005268:	465a      	mov	r2, fp
 800526a:	4631      	mov	r1, r6
 800526c:	4628      	mov	r0, r5
 800526e:	47b8      	blx	r7
 8005270:	3001      	adds	r0, #1
 8005272:	f43f ae56 	beq.w	8004f22 <_printf_float+0xb6>
 8005276:	f108 0801 	add.w	r8, r8, #1
 800527a:	45d0      	cmp	r8, sl
 800527c:	dbf3      	blt.n	8005266 <_printf_float+0x3fa>
 800527e:	464b      	mov	r3, r9
 8005280:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005284:	e6df      	b.n	8005046 <_printf_float+0x1da>
 8005286:	f04f 0800 	mov.w	r8, #0
 800528a:	f104 0b1a 	add.w	fp, r4, #26
 800528e:	e7f4      	b.n	800527a <_printf_float+0x40e>
 8005290:	2301      	movs	r3, #1
 8005292:	4642      	mov	r2, r8
 8005294:	e7e1      	b.n	800525a <_printf_float+0x3ee>
 8005296:	2301      	movs	r3, #1
 8005298:	464a      	mov	r2, r9
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	f43f ae3e 	beq.w	8004f22 <_printf_float+0xb6>
 80052a6:	f108 0801 	add.w	r8, r8, #1
 80052aa:	68e3      	ldr	r3, [r4, #12]
 80052ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80052ae:	1a5b      	subs	r3, r3, r1
 80052b0:	4543      	cmp	r3, r8
 80052b2:	dcf0      	bgt.n	8005296 <_printf_float+0x42a>
 80052b4:	e6fc      	b.n	80050b0 <_printf_float+0x244>
 80052b6:	f04f 0800 	mov.w	r8, #0
 80052ba:	f104 0919 	add.w	r9, r4, #25
 80052be:	e7f4      	b.n	80052aa <_printf_float+0x43e>

080052c0 <_printf_common>:
 80052c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	4616      	mov	r6, r2
 80052c6:	4698      	mov	r8, r3
 80052c8:	688a      	ldr	r2, [r1, #8]
 80052ca:	690b      	ldr	r3, [r1, #16]
 80052cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80052d0:	4293      	cmp	r3, r2
 80052d2:	bfb8      	it	lt
 80052d4:	4613      	movlt	r3, r2
 80052d6:	6033      	str	r3, [r6, #0]
 80052d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80052dc:	4607      	mov	r7, r0
 80052de:	460c      	mov	r4, r1
 80052e0:	b10a      	cbz	r2, 80052e6 <_printf_common+0x26>
 80052e2:	3301      	adds	r3, #1
 80052e4:	6033      	str	r3, [r6, #0]
 80052e6:	6823      	ldr	r3, [r4, #0]
 80052e8:	0699      	lsls	r1, r3, #26
 80052ea:	bf42      	ittt	mi
 80052ec:	6833      	ldrmi	r3, [r6, #0]
 80052ee:	3302      	addmi	r3, #2
 80052f0:	6033      	strmi	r3, [r6, #0]
 80052f2:	6825      	ldr	r5, [r4, #0]
 80052f4:	f015 0506 	ands.w	r5, r5, #6
 80052f8:	d106      	bne.n	8005308 <_printf_common+0x48>
 80052fa:	f104 0a19 	add.w	sl, r4, #25
 80052fe:	68e3      	ldr	r3, [r4, #12]
 8005300:	6832      	ldr	r2, [r6, #0]
 8005302:	1a9b      	subs	r3, r3, r2
 8005304:	42ab      	cmp	r3, r5
 8005306:	dc26      	bgt.n	8005356 <_printf_common+0x96>
 8005308:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800530c:	6822      	ldr	r2, [r4, #0]
 800530e:	3b00      	subs	r3, #0
 8005310:	bf18      	it	ne
 8005312:	2301      	movne	r3, #1
 8005314:	0692      	lsls	r2, r2, #26
 8005316:	d42b      	bmi.n	8005370 <_printf_common+0xb0>
 8005318:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800531c:	4641      	mov	r1, r8
 800531e:	4638      	mov	r0, r7
 8005320:	47c8      	blx	r9
 8005322:	3001      	adds	r0, #1
 8005324:	d01e      	beq.n	8005364 <_printf_common+0xa4>
 8005326:	6823      	ldr	r3, [r4, #0]
 8005328:	6922      	ldr	r2, [r4, #16]
 800532a:	f003 0306 	and.w	r3, r3, #6
 800532e:	2b04      	cmp	r3, #4
 8005330:	bf02      	ittt	eq
 8005332:	68e5      	ldreq	r5, [r4, #12]
 8005334:	6833      	ldreq	r3, [r6, #0]
 8005336:	1aed      	subeq	r5, r5, r3
 8005338:	68a3      	ldr	r3, [r4, #8]
 800533a:	bf0c      	ite	eq
 800533c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005340:	2500      	movne	r5, #0
 8005342:	4293      	cmp	r3, r2
 8005344:	bfc4      	itt	gt
 8005346:	1a9b      	subgt	r3, r3, r2
 8005348:	18ed      	addgt	r5, r5, r3
 800534a:	2600      	movs	r6, #0
 800534c:	341a      	adds	r4, #26
 800534e:	42b5      	cmp	r5, r6
 8005350:	d11a      	bne.n	8005388 <_printf_common+0xc8>
 8005352:	2000      	movs	r0, #0
 8005354:	e008      	b.n	8005368 <_printf_common+0xa8>
 8005356:	2301      	movs	r3, #1
 8005358:	4652      	mov	r2, sl
 800535a:	4641      	mov	r1, r8
 800535c:	4638      	mov	r0, r7
 800535e:	47c8      	blx	r9
 8005360:	3001      	adds	r0, #1
 8005362:	d103      	bne.n	800536c <_printf_common+0xac>
 8005364:	f04f 30ff 	mov.w	r0, #4294967295
 8005368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800536c:	3501      	adds	r5, #1
 800536e:	e7c6      	b.n	80052fe <_printf_common+0x3e>
 8005370:	18e1      	adds	r1, r4, r3
 8005372:	1c5a      	adds	r2, r3, #1
 8005374:	2030      	movs	r0, #48	@ 0x30
 8005376:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800537a:	4422      	add	r2, r4
 800537c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005380:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005384:	3302      	adds	r3, #2
 8005386:	e7c7      	b.n	8005318 <_printf_common+0x58>
 8005388:	2301      	movs	r3, #1
 800538a:	4622      	mov	r2, r4
 800538c:	4641      	mov	r1, r8
 800538e:	4638      	mov	r0, r7
 8005390:	47c8      	blx	r9
 8005392:	3001      	adds	r0, #1
 8005394:	d0e6      	beq.n	8005364 <_printf_common+0xa4>
 8005396:	3601      	adds	r6, #1
 8005398:	e7d9      	b.n	800534e <_printf_common+0x8e>
	...

0800539c <_printf_i>:
 800539c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053a0:	7e0f      	ldrb	r7, [r1, #24]
 80053a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053a4:	2f78      	cmp	r7, #120	@ 0x78
 80053a6:	4691      	mov	r9, r2
 80053a8:	4680      	mov	r8, r0
 80053aa:	460c      	mov	r4, r1
 80053ac:	469a      	mov	sl, r3
 80053ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053b2:	d807      	bhi.n	80053c4 <_printf_i+0x28>
 80053b4:	2f62      	cmp	r7, #98	@ 0x62
 80053b6:	d80a      	bhi.n	80053ce <_printf_i+0x32>
 80053b8:	2f00      	cmp	r7, #0
 80053ba:	f000 80d2 	beq.w	8005562 <_printf_i+0x1c6>
 80053be:	2f58      	cmp	r7, #88	@ 0x58
 80053c0:	f000 80b9 	beq.w	8005536 <_printf_i+0x19a>
 80053c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80053c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80053cc:	e03a      	b.n	8005444 <_printf_i+0xa8>
 80053ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80053d2:	2b15      	cmp	r3, #21
 80053d4:	d8f6      	bhi.n	80053c4 <_printf_i+0x28>
 80053d6:	a101      	add	r1, pc, #4	@ (adr r1, 80053dc <_printf_i+0x40>)
 80053d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053dc:	08005435 	.word	0x08005435
 80053e0:	08005449 	.word	0x08005449
 80053e4:	080053c5 	.word	0x080053c5
 80053e8:	080053c5 	.word	0x080053c5
 80053ec:	080053c5 	.word	0x080053c5
 80053f0:	080053c5 	.word	0x080053c5
 80053f4:	08005449 	.word	0x08005449
 80053f8:	080053c5 	.word	0x080053c5
 80053fc:	080053c5 	.word	0x080053c5
 8005400:	080053c5 	.word	0x080053c5
 8005404:	080053c5 	.word	0x080053c5
 8005408:	08005549 	.word	0x08005549
 800540c:	08005473 	.word	0x08005473
 8005410:	08005503 	.word	0x08005503
 8005414:	080053c5 	.word	0x080053c5
 8005418:	080053c5 	.word	0x080053c5
 800541c:	0800556b 	.word	0x0800556b
 8005420:	080053c5 	.word	0x080053c5
 8005424:	08005473 	.word	0x08005473
 8005428:	080053c5 	.word	0x080053c5
 800542c:	080053c5 	.word	0x080053c5
 8005430:	0800550b 	.word	0x0800550b
 8005434:	6833      	ldr	r3, [r6, #0]
 8005436:	1d1a      	adds	r2, r3, #4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6032      	str	r2, [r6, #0]
 800543c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005440:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005444:	2301      	movs	r3, #1
 8005446:	e09d      	b.n	8005584 <_printf_i+0x1e8>
 8005448:	6833      	ldr	r3, [r6, #0]
 800544a:	6820      	ldr	r0, [r4, #0]
 800544c:	1d19      	adds	r1, r3, #4
 800544e:	6031      	str	r1, [r6, #0]
 8005450:	0606      	lsls	r6, r0, #24
 8005452:	d501      	bpl.n	8005458 <_printf_i+0xbc>
 8005454:	681d      	ldr	r5, [r3, #0]
 8005456:	e003      	b.n	8005460 <_printf_i+0xc4>
 8005458:	0645      	lsls	r5, r0, #25
 800545a:	d5fb      	bpl.n	8005454 <_printf_i+0xb8>
 800545c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005460:	2d00      	cmp	r5, #0
 8005462:	da03      	bge.n	800546c <_printf_i+0xd0>
 8005464:	232d      	movs	r3, #45	@ 0x2d
 8005466:	426d      	negs	r5, r5
 8005468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800546c:	4859      	ldr	r0, [pc, #356]	@ (80055d4 <_printf_i+0x238>)
 800546e:	230a      	movs	r3, #10
 8005470:	e011      	b.n	8005496 <_printf_i+0xfa>
 8005472:	6821      	ldr	r1, [r4, #0]
 8005474:	6833      	ldr	r3, [r6, #0]
 8005476:	0608      	lsls	r0, r1, #24
 8005478:	f853 5b04 	ldr.w	r5, [r3], #4
 800547c:	d402      	bmi.n	8005484 <_printf_i+0xe8>
 800547e:	0649      	lsls	r1, r1, #25
 8005480:	bf48      	it	mi
 8005482:	b2ad      	uxthmi	r5, r5
 8005484:	2f6f      	cmp	r7, #111	@ 0x6f
 8005486:	4853      	ldr	r0, [pc, #332]	@ (80055d4 <_printf_i+0x238>)
 8005488:	6033      	str	r3, [r6, #0]
 800548a:	bf14      	ite	ne
 800548c:	230a      	movne	r3, #10
 800548e:	2308      	moveq	r3, #8
 8005490:	2100      	movs	r1, #0
 8005492:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005496:	6866      	ldr	r6, [r4, #4]
 8005498:	60a6      	str	r6, [r4, #8]
 800549a:	2e00      	cmp	r6, #0
 800549c:	bfa2      	ittt	ge
 800549e:	6821      	ldrge	r1, [r4, #0]
 80054a0:	f021 0104 	bicge.w	r1, r1, #4
 80054a4:	6021      	strge	r1, [r4, #0]
 80054a6:	b90d      	cbnz	r5, 80054ac <_printf_i+0x110>
 80054a8:	2e00      	cmp	r6, #0
 80054aa:	d04b      	beq.n	8005544 <_printf_i+0x1a8>
 80054ac:	4616      	mov	r6, r2
 80054ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80054b2:	fb03 5711 	mls	r7, r3, r1, r5
 80054b6:	5dc7      	ldrb	r7, [r0, r7]
 80054b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80054bc:	462f      	mov	r7, r5
 80054be:	42bb      	cmp	r3, r7
 80054c0:	460d      	mov	r5, r1
 80054c2:	d9f4      	bls.n	80054ae <_printf_i+0x112>
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d10b      	bne.n	80054e0 <_printf_i+0x144>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	07df      	lsls	r7, r3, #31
 80054cc:	d508      	bpl.n	80054e0 <_printf_i+0x144>
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	6861      	ldr	r1, [r4, #4]
 80054d2:	4299      	cmp	r1, r3
 80054d4:	bfde      	ittt	le
 80054d6:	2330      	movle	r3, #48	@ 0x30
 80054d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80054dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80054e0:	1b92      	subs	r2, r2, r6
 80054e2:	6122      	str	r2, [r4, #16]
 80054e4:	f8cd a000 	str.w	sl, [sp]
 80054e8:	464b      	mov	r3, r9
 80054ea:	aa03      	add	r2, sp, #12
 80054ec:	4621      	mov	r1, r4
 80054ee:	4640      	mov	r0, r8
 80054f0:	f7ff fee6 	bl	80052c0 <_printf_common>
 80054f4:	3001      	adds	r0, #1
 80054f6:	d14a      	bne.n	800558e <_printf_i+0x1f2>
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	b004      	add	sp, #16
 80054fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005502:	6823      	ldr	r3, [r4, #0]
 8005504:	f043 0320 	orr.w	r3, r3, #32
 8005508:	6023      	str	r3, [r4, #0]
 800550a:	4833      	ldr	r0, [pc, #204]	@ (80055d8 <_printf_i+0x23c>)
 800550c:	2778      	movs	r7, #120	@ 0x78
 800550e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005512:	6823      	ldr	r3, [r4, #0]
 8005514:	6831      	ldr	r1, [r6, #0]
 8005516:	061f      	lsls	r7, r3, #24
 8005518:	f851 5b04 	ldr.w	r5, [r1], #4
 800551c:	d402      	bmi.n	8005524 <_printf_i+0x188>
 800551e:	065f      	lsls	r7, r3, #25
 8005520:	bf48      	it	mi
 8005522:	b2ad      	uxthmi	r5, r5
 8005524:	6031      	str	r1, [r6, #0]
 8005526:	07d9      	lsls	r1, r3, #31
 8005528:	bf44      	itt	mi
 800552a:	f043 0320 	orrmi.w	r3, r3, #32
 800552e:	6023      	strmi	r3, [r4, #0]
 8005530:	b11d      	cbz	r5, 800553a <_printf_i+0x19e>
 8005532:	2310      	movs	r3, #16
 8005534:	e7ac      	b.n	8005490 <_printf_i+0xf4>
 8005536:	4827      	ldr	r0, [pc, #156]	@ (80055d4 <_printf_i+0x238>)
 8005538:	e7e9      	b.n	800550e <_printf_i+0x172>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	f023 0320 	bic.w	r3, r3, #32
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	e7f6      	b.n	8005532 <_printf_i+0x196>
 8005544:	4616      	mov	r6, r2
 8005546:	e7bd      	b.n	80054c4 <_printf_i+0x128>
 8005548:	6833      	ldr	r3, [r6, #0]
 800554a:	6825      	ldr	r5, [r4, #0]
 800554c:	6961      	ldr	r1, [r4, #20]
 800554e:	1d18      	adds	r0, r3, #4
 8005550:	6030      	str	r0, [r6, #0]
 8005552:	062e      	lsls	r6, r5, #24
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	d501      	bpl.n	800555c <_printf_i+0x1c0>
 8005558:	6019      	str	r1, [r3, #0]
 800555a:	e002      	b.n	8005562 <_printf_i+0x1c6>
 800555c:	0668      	lsls	r0, r5, #25
 800555e:	d5fb      	bpl.n	8005558 <_printf_i+0x1bc>
 8005560:	8019      	strh	r1, [r3, #0]
 8005562:	2300      	movs	r3, #0
 8005564:	6123      	str	r3, [r4, #16]
 8005566:	4616      	mov	r6, r2
 8005568:	e7bc      	b.n	80054e4 <_printf_i+0x148>
 800556a:	6833      	ldr	r3, [r6, #0]
 800556c:	1d1a      	adds	r2, r3, #4
 800556e:	6032      	str	r2, [r6, #0]
 8005570:	681e      	ldr	r6, [r3, #0]
 8005572:	6862      	ldr	r2, [r4, #4]
 8005574:	2100      	movs	r1, #0
 8005576:	4630      	mov	r0, r6
 8005578:	f7fa fe2a 	bl	80001d0 <memchr>
 800557c:	b108      	cbz	r0, 8005582 <_printf_i+0x1e6>
 800557e:	1b80      	subs	r0, r0, r6
 8005580:	6060      	str	r0, [r4, #4]
 8005582:	6863      	ldr	r3, [r4, #4]
 8005584:	6123      	str	r3, [r4, #16]
 8005586:	2300      	movs	r3, #0
 8005588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800558c:	e7aa      	b.n	80054e4 <_printf_i+0x148>
 800558e:	6923      	ldr	r3, [r4, #16]
 8005590:	4632      	mov	r2, r6
 8005592:	4649      	mov	r1, r9
 8005594:	4640      	mov	r0, r8
 8005596:	47d0      	blx	sl
 8005598:	3001      	adds	r0, #1
 800559a:	d0ad      	beq.n	80054f8 <_printf_i+0x15c>
 800559c:	6823      	ldr	r3, [r4, #0]
 800559e:	079b      	lsls	r3, r3, #30
 80055a0:	d413      	bmi.n	80055ca <_printf_i+0x22e>
 80055a2:	68e0      	ldr	r0, [r4, #12]
 80055a4:	9b03      	ldr	r3, [sp, #12]
 80055a6:	4298      	cmp	r0, r3
 80055a8:	bfb8      	it	lt
 80055aa:	4618      	movlt	r0, r3
 80055ac:	e7a6      	b.n	80054fc <_printf_i+0x160>
 80055ae:	2301      	movs	r3, #1
 80055b0:	4632      	mov	r2, r6
 80055b2:	4649      	mov	r1, r9
 80055b4:	4640      	mov	r0, r8
 80055b6:	47d0      	blx	sl
 80055b8:	3001      	adds	r0, #1
 80055ba:	d09d      	beq.n	80054f8 <_printf_i+0x15c>
 80055bc:	3501      	adds	r5, #1
 80055be:	68e3      	ldr	r3, [r4, #12]
 80055c0:	9903      	ldr	r1, [sp, #12]
 80055c2:	1a5b      	subs	r3, r3, r1
 80055c4:	42ab      	cmp	r3, r5
 80055c6:	dcf2      	bgt.n	80055ae <_printf_i+0x212>
 80055c8:	e7eb      	b.n	80055a2 <_printf_i+0x206>
 80055ca:	2500      	movs	r5, #0
 80055cc:	f104 0619 	add.w	r6, r4, #25
 80055d0:	e7f5      	b.n	80055be <_printf_i+0x222>
 80055d2:	bf00      	nop
 80055d4:	08009472 	.word	0x08009472
 80055d8:	08009483 	.word	0x08009483

080055dc <_scanf_float>:
 80055dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055e0:	b087      	sub	sp, #28
 80055e2:	4617      	mov	r7, r2
 80055e4:	9303      	str	r3, [sp, #12]
 80055e6:	688b      	ldr	r3, [r1, #8]
 80055e8:	1e5a      	subs	r2, r3, #1
 80055ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80055ee:	bf81      	itttt	hi
 80055f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80055f4:	eb03 0b05 	addhi.w	fp, r3, r5
 80055f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80055fc:	608b      	strhi	r3, [r1, #8]
 80055fe:	680b      	ldr	r3, [r1, #0]
 8005600:	460a      	mov	r2, r1
 8005602:	f04f 0500 	mov.w	r5, #0
 8005606:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800560a:	f842 3b1c 	str.w	r3, [r2], #28
 800560e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005612:	4680      	mov	r8, r0
 8005614:	460c      	mov	r4, r1
 8005616:	bf98      	it	ls
 8005618:	f04f 0b00 	movls.w	fp, #0
 800561c:	9201      	str	r2, [sp, #4]
 800561e:	4616      	mov	r6, r2
 8005620:	46aa      	mov	sl, r5
 8005622:	46a9      	mov	r9, r5
 8005624:	9502      	str	r5, [sp, #8]
 8005626:	68a2      	ldr	r2, [r4, #8]
 8005628:	b152      	cbz	r2, 8005640 <_scanf_float+0x64>
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	2b4e      	cmp	r3, #78	@ 0x4e
 8005630:	d864      	bhi.n	80056fc <_scanf_float+0x120>
 8005632:	2b40      	cmp	r3, #64	@ 0x40
 8005634:	d83c      	bhi.n	80056b0 <_scanf_float+0xd4>
 8005636:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800563a:	b2c8      	uxtb	r0, r1
 800563c:	280e      	cmp	r0, #14
 800563e:	d93a      	bls.n	80056b6 <_scanf_float+0xda>
 8005640:	f1b9 0f00 	cmp.w	r9, #0
 8005644:	d003      	beq.n	800564e <_scanf_float+0x72>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005652:	f1ba 0f01 	cmp.w	sl, #1
 8005656:	f200 8117 	bhi.w	8005888 <_scanf_float+0x2ac>
 800565a:	9b01      	ldr	r3, [sp, #4]
 800565c:	429e      	cmp	r6, r3
 800565e:	f200 8108 	bhi.w	8005872 <_scanf_float+0x296>
 8005662:	2001      	movs	r0, #1
 8005664:	b007      	add	sp, #28
 8005666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800566e:	2a0d      	cmp	r2, #13
 8005670:	d8e6      	bhi.n	8005640 <_scanf_float+0x64>
 8005672:	a101      	add	r1, pc, #4	@ (adr r1, 8005678 <_scanf_float+0x9c>)
 8005674:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005678:	080057bf 	.word	0x080057bf
 800567c:	08005641 	.word	0x08005641
 8005680:	08005641 	.word	0x08005641
 8005684:	08005641 	.word	0x08005641
 8005688:	0800581f 	.word	0x0800581f
 800568c:	080057f7 	.word	0x080057f7
 8005690:	08005641 	.word	0x08005641
 8005694:	08005641 	.word	0x08005641
 8005698:	080057cd 	.word	0x080057cd
 800569c:	08005641 	.word	0x08005641
 80056a0:	08005641 	.word	0x08005641
 80056a4:	08005641 	.word	0x08005641
 80056a8:	08005641 	.word	0x08005641
 80056ac:	08005785 	.word	0x08005785
 80056b0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80056b4:	e7db      	b.n	800566e <_scanf_float+0x92>
 80056b6:	290e      	cmp	r1, #14
 80056b8:	d8c2      	bhi.n	8005640 <_scanf_float+0x64>
 80056ba:	a001      	add	r0, pc, #4	@ (adr r0, 80056c0 <_scanf_float+0xe4>)
 80056bc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80056c0:	08005775 	.word	0x08005775
 80056c4:	08005641 	.word	0x08005641
 80056c8:	08005775 	.word	0x08005775
 80056cc:	0800580b 	.word	0x0800580b
 80056d0:	08005641 	.word	0x08005641
 80056d4:	0800571d 	.word	0x0800571d
 80056d8:	0800575b 	.word	0x0800575b
 80056dc:	0800575b 	.word	0x0800575b
 80056e0:	0800575b 	.word	0x0800575b
 80056e4:	0800575b 	.word	0x0800575b
 80056e8:	0800575b 	.word	0x0800575b
 80056ec:	0800575b 	.word	0x0800575b
 80056f0:	0800575b 	.word	0x0800575b
 80056f4:	0800575b 	.word	0x0800575b
 80056f8:	0800575b 	.word	0x0800575b
 80056fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80056fe:	d809      	bhi.n	8005714 <_scanf_float+0x138>
 8005700:	2b60      	cmp	r3, #96	@ 0x60
 8005702:	d8b2      	bhi.n	800566a <_scanf_float+0x8e>
 8005704:	2b54      	cmp	r3, #84	@ 0x54
 8005706:	d07b      	beq.n	8005800 <_scanf_float+0x224>
 8005708:	2b59      	cmp	r3, #89	@ 0x59
 800570a:	d199      	bne.n	8005640 <_scanf_float+0x64>
 800570c:	2d07      	cmp	r5, #7
 800570e:	d197      	bne.n	8005640 <_scanf_float+0x64>
 8005710:	2508      	movs	r5, #8
 8005712:	e02c      	b.n	800576e <_scanf_float+0x192>
 8005714:	2b74      	cmp	r3, #116	@ 0x74
 8005716:	d073      	beq.n	8005800 <_scanf_float+0x224>
 8005718:	2b79      	cmp	r3, #121	@ 0x79
 800571a:	e7f6      	b.n	800570a <_scanf_float+0x12e>
 800571c:	6821      	ldr	r1, [r4, #0]
 800571e:	05c8      	lsls	r0, r1, #23
 8005720:	d51b      	bpl.n	800575a <_scanf_float+0x17e>
 8005722:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8005726:	6021      	str	r1, [r4, #0]
 8005728:	f109 0901 	add.w	r9, r9, #1
 800572c:	f1bb 0f00 	cmp.w	fp, #0
 8005730:	d003      	beq.n	800573a <_scanf_float+0x15e>
 8005732:	3201      	adds	r2, #1
 8005734:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005738:	60a2      	str	r2, [r4, #8]
 800573a:	68a3      	ldr	r3, [r4, #8]
 800573c:	3b01      	subs	r3, #1
 800573e:	60a3      	str	r3, [r4, #8]
 8005740:	6923      	ldr	r3, [r4, #16]
 8005742:	3301      	adds	r3, #1
 8005744:	6123      	str	r3, [r4, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3b01      	subs	r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	f340 8087 	ble.w	8005860 <_scanf_float+0x284>
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	3301      	adds	r3, #1
 8005756:	603b      	str	r3, [r7, #0]
 8005758:	e765      	b.n	8005626 <_scanf_float+0x4a>
 800575a:	eb1a 0105 	adds.w	r1, sl, r5
 800575e:	f47f af6f 	bne.w	8005640 <_scanf_float+0x64>
 8005762:	6822      	ldr	r2, [r4, #0]
 8005764:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005768:	6022      	str	r2, [r4, #0]
 800576a:	460d      	mov	r5, r1
 800576c:	468a      	mov	sl, r1
 800576e:	f806 3b01 	strb.w	r3, [r6], #1
 8005772:	e7e2      	b.n	800573a <_scanf_float+0x15e>
 8005774:	6822      	ldr	r2, [r4, #0]
 8005776:	0610      	lsls	r0, r2, #24
 8005778:	f57f af62 	bpl.w	8005640 <_scanf_float+0x64>
 800577c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005780:	6022      	str	r2, [r4, #0]
 8005782:	e7f4      	b.n	800576e <_scanf_float+0x192>
 8005784:	f1ba 0f00 	cmp.w	sl, #0
 8005788:	d10e      	bne.n	80057a8 <_scanf_float+0x1cc>
 800578a:	f1b9 0f00 	cmp.w	r9, #0
 800578e:	d10e      	bne.n	80057ae <_scanf_float+0x1d2>
 8005790:	6822      	ldr	r2, [r4, #0]
 8005792:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005796:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800579a:	d108      	bne.n	80057ae <_scanf_float+0x1d2>
 800579c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80057a0:	6022      	str	r2, [r4, #0]
 80057a2:	f04f 0a01 	mov.w	sl, #1
 80057a6:	e7e2      	b.n	800576e <_scanf_float+0x192>
 80057a8:	f1ba 0f02 	cmp.w	sl, #2
 80057ac:	d055      	beq.n	800585a <_scanf_float+0x27e>
 80057ae:	2d01      	cmp	r5, #1
 80057b0:	d002      	beq.n	80057b8 <_scanf_float+0x1dc>
 80057b2:	2d04      	cmp	r5, #4
 80057b4:	f47f af44 	bne.w	8005640 <_scanf_float+0x64>
 80057b8:	3501      	adds	r5, #1
 80057ba:	b2ed      	uxtb	r5, r5
 80057bc:	e7d7      	b.n	800576e <_scanf_float+0x192>
 80057be:	f1ba 0f01 	cmp.w	sl, #1
 80057c2:	f47f af3d 	bne.w	8005640 <_scanf_float+0x64>
 80057c6:	f04f 0a02 	mov.w	sl, #2
 80057ca:	e7d0      	b.n	800576e <_scanf_float+0x192>
 80057cc:	b97d      	cbnz	r5, 80057ee <_scanf_float+0x212>
 80057ce:	f1b9 0f00 	cmp.w	r9, #0
 80057d2:	f47f af38 	bne.w	8005646 <_scanf_float+0x6a>
 80057d6:	6822      	ldr	r2, [r4, #0]
 80057d8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80057dc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80057e0:	f040 8108 	bne.w	80059f4 <_scanf_float+0x418>
 80057e4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80057e8:	6022      	str	r2, [r4, #0]
 80057ea:	2501      	movs	r5, #1
 80057ec:	e7bf      	b.n	800576e <_scanf_float+0x192>
 80057ee:	2d03      	cmp	r5, #3
 80057f0:	d0e2      	beq.n	80057b8 <_scanf_float+0x1dc>
 80057f2:	2d05      	cmp	r5, #5
 80057f4:	e7de      	b.n	80057b4 <_scanf_float+0x1d8>
 80057f6:	2d02      	cmp	r5, #2
 80057f8:	f47f af22 	bne.w	8005640 <_scanf_float+0x64>
 80057fc:	2503      	movs	r5, #3
 80057fe:	e7b6      	b.n	800576e <_scanf_float+0x192>
 8005800:	2d06      	cmp	r5, #6
 8005802:	f47f af1d 	bne.w	8005640 <_scanf_float+0x64>
 8005806:	2507      	movs	r5, #7
 8005808:	e7b1      	b.n	800576e <_scanf_float+0x192>
 800580a:	6822      	ldr	r2, [r4, #0]
 800580c:	0591      	lsls	r1, r2, #22
 800580e:	f57f af17 	bpl.w	8005640 <_scanf_float+0x64>
 8005812:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005816:	6022      	str	r2, [r4, #0]
 8005818:	f8cd 9008 	str.w	r9, [sp, #8]
 800581c:	e7a7      	b.n	800576e <_scanf_float+0x192>
 800581e:	6822      	ldr	r2, [r4, #0]
 8005820:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005824:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005828:	d006      	beq.n	8005838 <_scanf_float+0x25c>
 800582a:	0550      	lsls	r0, r2, #21
 800582c:	f57f af08 	bpl.w	8005640 <_scanf_float+0x64>
 8005830:	f1b9 0f00 	cmp.w	r9, #0
 8005834:	f000 80de 	beq.w	80059f4 <_scanf_float+0x418>
 8005838:	0591      	lsls	r1, r2, #22
 800583a:	bf58      	it	pl
 800583c:	9902      	ldrpl	r1, [sp, #8]
 800583e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005842:	bf58      	it	pl
 8005844:	eba9 0101 	subpl.w	r1, r9, r1
 8005848:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800584c:	bf58      	it	pl
 800584e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005852:	6022      	str	r2, [r4, #0]
 8005854:	f04f 0900 	mov.w	r9, #0
 8005858:	e789      	b.n	800576e <_scanf_float+0x192>
 800585a:	f04f 0a03 	mov.w	sl, #3
 800585e:	e786      	b.n	800576e <_scanf_float+0x192>
 8005860:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005864:	4639      	mov	r1, r7
 8005866:	4640      	mov	r0, r8
 8005868:	4798      	blx	r3
 800586a:	2800      	cmp	r0, #0
 800586c:	f43f aedb 	beq.w	8005626 <_scanf_float+0x4a>
 8005870:	e6e6      	b.n	8005640 <_scanf_float+0x64>
 8005872:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005876:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800587a:	463a      	mov	r2, r7
 800587c:	4640      	mov	r0, r8
 800587e:	4798      	blx	r3
 8005880:	6923      	ldr	r3, [r4, #16]
 8005882:	3b01      	subs	r3, #1
 8005884:	6123      	str	r3, [r4, #16]
 8005886:	e6e8      	b.n	800565a <_scanf_float+0x7e>
 8005888:	1e6b      	subs	r3, r5, #1
 800588a:	2b06      	cmp	r3, #6
 800588c:	d824      	bhi.n	80058d8 <_scanf_float+0x2fc>
 800588e:	2d02      	cmp	r5, #2
 8005890:	d836      	bhi.n	8005900 <_scanf_float+0x324>
 8005892:	9b01      	ldr	r3, [sp, #4]
 8005894:	429e      	cmp	r6, r3
 8005896:	f67f aee4 	bls.w	8005662 <_scanf_float+0x86>
 800589a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800589e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058a2:	463a      	mov	r2, r7
 80058a4:	4640      	mov	r0, r8
 80058a6:	4798      	blx	r3
 80058a8:	6923      	ldr	r3, [r4, #16]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	6123      	str	r3, [r4, #16]
 80058ae:	e7f0      	b.n	8005892 <_scanf_float+0x2b6>
 80058b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80058b8:	463a      	mov	r2, r7
 80058ba:	4640      	mov	r0, r8
 80058bc:	4798      	blx	r3
 80058be:	6923      	ldr	r3, [r4, #16]
 80058c0:	3b01      	subs	r3, #1
 80058c2:	6123      	str	r3, [r4, #16]
 80058c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058c8:	fa5f fa8a 	uxtb.w	sl, sl
 80058cc:	f1ba 0f02 	cmp.w	sl, #2
 80058d0:	d1ee      	bne.n	80058b0 <_scanf_float+0x2d4>
 80058d2:	3d03      	subs	r5, #3
 80058d4:	b2ed      	uxtb	r5, r5
 80058d6:	1b76      	subs	r6, r6, r5
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	05da      	lsls	r2, r3, #23
 80058dc:	d530      	bpl.n	8005940 <_scanf_float+0x364>
 80058de:	055b      	lsls	r3, r3, #21
 80058e0:	d511      	bpl.n	8005906 <_scanf_float+0x32a>
 80058e2:	9b01      	ldr	r3, [sp, #4]
 80058e4:	429e      	cmp	r6, r3
 80058e6:	f67f aebc 	bls.w	8005662 <_scanf_float+0x86>
 80058ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80058ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058f2:	463a      	mov	r2, r7
 80058f4:	4640      	mov	r0, r8
 80058f6:	4798      	blx	r3
 80058f8:	6923      	ldr	r3, [r4, #16]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	6123      	str	r3, [r4, #16]
 80058fe:	e7f0      	b.n	80058e2 <_scanf_float+0x306>
 8005900:	46aa      	mov	sl, r5
 8005902:	46b3      	mov	fp, r6
 8005904:	e7de      	b.n	80058c4 <_scanf_float+0x2e8>
 8005906:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800590a:	6923      	ldr	r3, [r4, #16]
 800590c:	2965      	cmp	r1, #101	@ 0x65
 800590e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005912:	f106 35ff 	add.w	r5, r6, #4294967295
 8005916:	6123      	str	r3, [r4, #16]
 8005918:	d00c      	beq.n	8005934 <_scanf_float+0x358>
 800591a:	2945      	cmp	r1, #69	@ 0x45
 800591c:	d00a      	beq.n	8005934 <_scanf_float+0x358>
 800591e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005922:	463a      	mov	r2, r7
 8005924:	4640      	mov	r0, r8
 8005926:	4798      	blx	r3
 8005928:	6923      	ldr	r3, [r4, #16]
 800592a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800592e:	3b01      	subs	r3, #1
 8005930:	1eb5      	subs	r5, r6, #2
 8005932:	6123      	str	r3, [r4, #16]
 8005934:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005938:	463a      	mov	r2, r7
 800593a:	4640      	mov	r0, r8
 800593c:	4798      	blx	r3
 800593e:	462e      	mov	r6, r5
 8005940:	6822      	ldr	r2, [r4, #0]
 8005942:	f012 0210 	ands.w	r2, r2, #16
 8005946:	d001      	beq.n	800594c <_scanf_float+0x370>
 8005948:	2000      	movs	r0, #0
 800594a:	e68b      	b.n	8005664 <_scanf_float+0x88>
 800594c:	7032      	strb	r2, [r6, #0]
 800594e:	6823      	ldr	r3, [r4, #0]
 8005950:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005954:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005958:	d11c      	bne.n	8005994 <_scanf_float+0x3b8>
 800595a:	9b02      	ldr	r3, [sp, #8]
 800595c:	454b      	cmp	r3, r9
 800595e:	eba3 0209 	sub.w	r2, r3, r9
 8005962:	d123      	bne.n	80059ac <_scanf_float+0x3d0>
 8005964:	9901      	ldr	r1, [sp, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	4640      	mov	r0, r8
 800596a:	f002 fbf9 	bl	8008160 <_strtod_r>
 800596e:	9b03      	ldr	r3, [sp, #12]
 8005970:	6821      	ldr	r1, [r4, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f011 0f02 	tst.w	r1, #2
 8005978:	ec57 6b10 	vmov	r6, r7, d0
 800597c:	f103 0204 	add.w	r2, r3, #4
 8005980:	d01f      	beq.n	80059c2 <_scanf_float+0x3e6>
 8005982:	9903      	ldr	r1, [sp, #12]
 8005984:	600a      	str	r2, [r1, #0]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	e9c3 6700 	strd	r6, r7, [r3]
 800598c:	68e3      	ldr	r3, [r4, #12]
 800598e:	3301      	adds	r3, #1
 8005990:	60e3      	str	r3, [r4, #12]
 8005992:	e7d9      	b.n	8005948 <_scanf_float+0x36c>
 8005994:	9b04      	ldr	r3, [sp, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d0e4      	beq.n	8005964 <_scanf_float+0x388>
 800599a:	9905      	ldr	r1, [sp, #20]
 800599c:	230a      	movs	r3, #10
 800599e:	3101      	adds	r1, #1
 80059a0:	4640      	mov	r0, r8
 80059a2:	f002 fc5d 	bl	8008260 <_strtol_r>
 80059a6:	9b04      	ldr	r3, [sp, #16]
 80059a8:	9e05      	ldr	r6, [sp, #20]
 80059aa:	1ac2      	subs	r2, r0, r3
 80059ac:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80059b0:	429e      	cmp	r6, r3
 80059b2:	bf28      	it	cs
 80059b4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80059b8:	4910      	ldr	r1, [pc, #64]	@ (80059fc <_scanf_float+0x420>)
 80059ba:	4630      	mov	r0, r6
 80059bc:	f000 f8e4 	bl	8005b88 <siprintf>
 80059c0:	e7d0      	b.n	8005964 <_scanf_float+0x388>
 80059c2:	f011 0f04 	tst.w	r1, #4
 80059c6:	9903      	ldr	r1, [sp, #12]
 80059c8:	600a      	str	r2, [r1, #0]
 80059ca:	d1dc      	bne.n	8005986 <_scanf_float+0x3aa>
 80059cc:	681d      	ldr	r5, [r3, #0]
 80059ce:	4632      	mov	r2, r6
 80059d0:	463b      	mov	r3, r7
 80059d2:	4630      	mov	r0, r6
 80059d4:	4639      	mov	r1, r7
 80059d6:	f7fb f8a9 	bl	8000b2c <__aeabi_dcmpun>
 80059da:	b128      	cbz	r0, 80059e8 <_scanf_float+0x40c>
 80059dc:	4808      	ldr	r0, [pc, #32]	@ (8005a00 <_scanf_float+0x424>)
 80059de:	f000 f9b7 	bl	8005d50 <nanf>
 80059e2:	ed85 0a00 	vstr	s0, [r5]
 80059e6:	e7d1      	b.n	800598c <_scanf_float+0x3b0>
 80059e8:	4630      	mov	r0, r6
 80059ea:	4639      	mov	r1, r7
 80059ec:	f7fb f8fc 	bl	8000be8 <__aeabi_d2f>
 80059f0:	6028      	str	r0, [r5, #0]
 80059f2:	e7cb      	b.n	800598c <_scanf_float+0x3b0>
 80059f4:	f04f 0900 	mov.w	r9, #0
 80059f8:	e629      	b.n	800564e <_scanf_float+0x72>
 80059fa:	bf00      	nop
 80059fc:	08009494 	.word	0x08009494
 8005a00:	0800982d 	.word	0x0800982d

08005a04 <std>:
 8005a04:	2300      	movs	r3, #0
 8005a06:	b510      	push	{r4, lr}
 8005a08:	4604      	mov	r4, r0
 8005a0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a12:	6083      	str	r3, [r0, #8]
 8005a14:	8181      	strh	r1, [r0, #12]
 8005a16:	6643      	str	r3, [r0, #100]	@ 0x64
 8005a18:	81c2      	strh	r2, [r0, #14]
 8005a1a:	6183      	str	r3, [r0, #24]
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	2208      	movs	r2, #8
 8005a20:	305c      	adds	r0, #92	@ 0x5c
 8005a22:	f000 f914 	bl	8005c4e <memset>
 8005a26:	4b0d      	ldr	r3, [pc, #52]	@ (8005a5c <std+0x58>)
 8005a28:	6263      	str	r3, [r4, #36]	@ 0x24
 8005a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a60 <std+0x5c>)
 8005a2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005a64 <std+0x60>)
 8005a30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005a32:	4b0d      	ldr	r3, [pc, #52]	@ (8005a68 <std+0x64>)
 8005a34:	6323      	str	r3, [r4, #48]	@ 0x30
 8005a36:	4b0d      	ldr	r3, [pc, #52]	@ (8005a6c <std+0x68>)
 8005a38:	6224      	str	r4, [r4, #32]
 8005a3a:	429c      	cmp	r4, r3
 8005a3c:	d006      	beq.n	8005a4c <std+0x48>
 8005a3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005a42:	4294      	cmp	r4, r2
 8005a44:	d002      	beq.n	8005a4c <std+0x48>
 8005a46:	33d0      	adds	r3, #208	@ 0xd0
 8005a48:	429c      	cmp	r4, r3
 8005a4a:	d105      	bne.n	8005a58 <std+0x54>
 8005a4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a54:	f000 b978 	b.w	8005d48 <__retarget_lock_init_recursive>
 8005a58:	bd10      	pop	{r4, pc}
 8005a5a:	bf00      	nop
 8005a5c:	08005bc9 	.word	0x08005bc9
 8005a60:	08005beb 	.word	0x08005beb
 8005a64:	08005c23 	.word	0x08005c23
 8005a68:	08005c47 	.word	0x08005c47
 8005a6c:	20000340 	.word	0x20000340

08005a70 <stdio_exit_handler>:
 8005a70:	4a02      	ldr	r2, [pc, #8]	@ (8005a7c <stdio_exit_handler+0xc>)
 8005a72:	4903      	ldr	r1, [pc, #12]	@ (8005a80 <stdio_exit_handler+0x10>)
 8005a74:	4803      	ldr	r0, [pc, #12]	@ (8005a84 <stdio_exit_handler+0x14>)
 8005a76:	f000 b869 	b.w	8005b4c <_fwalk_sglue>
 8005a7a:	bf00      	nop
 8005a7c:	2000000c 	.word	0x2000000c
 8005a80:	0800861d 	.word	0x0800861d
 8005a84:	2000001c 	.word	0x2000001c

08005a88 <cleanup_stdio>:
 8005a88:	6841      	ldr	r1, [r0, #4]
 8005a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005abc <cleanup_stdio+0x34>)
 8005a8c:	4299      	cmp	r1, r3
 8005a8e:	b510      	push	{r4, lr}
 8005a90:	4604      	mov	r4, r0
 8005a92:	d001      	beq.n	8005a98 <cleanup_stdio+0x10>
 8005a94:	f002 fdc2 	bl	800861c <_fflush_r>
 8005a98:	68a1      	ldr	r1, [r4, #8]
 8005a9a:	4b09      	ldr	r3, [pc, #36]	@ (8005ac0 <cleanup_stdio+0x38>)
 8005a9c:	4299      	cmp	r1, r3
 8005a9e:	d002      	beq.n	8005aa6 <cleanup_stdio+0x1e>
 8005aa0:	4620      	mov	r0, r4
 8005aa2:	f002 fdbb 	bl	800861c <_fflush_r>
 8005aa6:	68e1      	ldr	r1, [r4, #12]
 8005aa8:	4b06      	ldr	r3, [pc, #24]	@ (8005ac4 <cleanup_stdio+0x3c>)
 8005aaa:	4299      	cmp	r1, r3
 8005aac:	d004      	beq.n	8005ab8 <cleanup_stdio+0x30>
 8005aae:	4620      	mov	r0, r4
 8005ab0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ab4:	f002 bdb2 	b.w	800861c <_fflush_r>
 8005ab8:	bd10      	pop	{r4, pc}
 8005aba:	bf00      	nop
 8005abc:	20000340 	.word	0x20000340
 8005ac0:	200003a8 	.word	0x200003a8
 8005ac4:	20000410 	.word	0x20000410

08005ac8 <global_stdio_init.part.0>:
 8005ac8:	b510      	push	{r4, lr}
 8005aca:	4b0b      	ldr	r3, [pc, #44]	@ (8005af8 <global_stdio_init.part.0+0x30>)
 8005acc:	4c0b      	ldr	r4, [pc, #44]	@ (8005afc <global_stdio_init.part.0+0x34>)
 8005ace:	4a0c      	ldr	r2, [pc, #48]	@ (8005b00 <global_stdio_init.part.0+0x38>)
 8005ad0:	601a      	str	r2, [r3, #0]
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	2104      	movs	r1, #4
 8005ad8:	f7ff ff94 	bl	8005a04 <std>
 8005adc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	2109      	movs	r1, #9
 8005ae4:	f7ff ff8e 	bl	8005a04 <std>
 8005ae8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005aec:	2202      	movs	r2, #2
 8005aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005af2:	2112      	movs	r1, #18
 8005af4:	f7ff bf86 	b.w	8005a04 <std>
 8005af8:	20000478 	.word	0x20000478
 8005afc:	20000340 	.word	0x20000340
 8005b00:	08005a71 	.word	0x08005a71

08005b04 <__sfp_lock_acquire>:
 8005b04:	4801      	ldr	r0, [pc, #4]	@ (8005b0c <__sfp_lock_acquire+0x8>)
 8005b06:	f000 b920 	b.w	8005d4a <__retarget_lock_acquire_recursive>
 8005b0a:	bf00      	nop
 8005b0c:	20000481 	.word	0x20000481

08005b10 <__sfp_lock_release>:
 8005b10:	4801      	ldr	r0, [pc, #4]	@ (8005b18 <__sfp_lock_release+0x8>)
 8005b12:	f000 b91b 	b.w	8005d4c <__retarget_lock_release_recursive>
 8005b16:	bf00      	nop
 8005b18:	20000481 	.word	0x20000481

08005b1c <__sinit>:
 8005b1c:	b510      	push	{r4, lr}
 8005b1e:	4604      	mov	r4, r0
 8005b20:	f7ff fff0 	bl	8005b04 <__sfp_lock_acquire>
 8005b24:	6a23      	ldr	r3, [r4, #32]
 8005b26:	b11b      	cbz	r3, 8005b30 <__sinit+0x14>
 8005b28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b2c:	f7ff bff0 	b.w	8005b10 <__sfp_lock_release>
 8005b30:	4b04      	ldr	r3, [pc, #16]	@ (8005b44 <__sinit+0x28>)
 8005b32:	6223      	str	r3, [r4, #32]
 8005b34:	4b04      	ldr	r3, [pc, #16]	@ (8005b48 <__sinit+0x2c>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1f5      	bne.n	8005b28 <__sinit+0xc>
 8005b3c:	f7ff ffc4 	bl	8005ac8 <global_stdio_init.part.0>
 8005b40:	e7f2      	b.n	8005b28 <__sinit+0xc>
 8005b42:	bf00      	nop
 8005b44:	08005a89 	.word	0x08005a89
 8005b48:	20000478 	.word	0x20000478

08005b4c <_fwalk_sglue>:
 8005b4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b50:	4607      	mov	r7, r0
 8005b52:	4688      	mov	r8, r1
 8005b54:	4614      	mov	r4, r2
 8005b56:	2600      	movs	r6, #0
 8005b58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b5c:	f1b9 0901 	subs.w	r9, r9, #1
 8005b60:	d505      	bpl.n	8005b6e <_fwalk_sglue+0x22>
 8005b62:	6824      	ldr	r4, [r4, #0]
 8005b64:	2c00      	cmp	r4, #0
 8005b66:	d1f7      	bne.n	8005b58 <_fwalk_sglue+0xc>
 8005b68:	4630      	mov	r0, r6
 8005b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b6e:	89ab      	ldrh	r3, [r5, #12]
 8005b70:	2b01      	cmp	r3, #1
 8005b72:	d907      	bls.n	8005b84 <_fwalk_sglue+0x38>
 8005b74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	d003      	beq.n	8005b84 <_fwalk_sglue+0x38>
 8005b7c:	4629      	mov	r1, r5
 8005b7e:	4638      	mov	r0, r7
 8005b80:	47c0      	blx	r8
 8005b82:	4306      	orrs	r6, r0
 8005b84:	3568      	adds	r5, #104	@ 0x68
 8005b86:	e7e9      	b.n	8005b5c <_fwalk_sglue+0x10>

08005b88 <siprintf>:
 8005b88:	b40e      	push	{r1, r2, r3}
 8005b8a:	b500      	push	{lr}
 8005b8c:	b09c      	sub	sp, #112	@ 0x70
 8005b8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8005b90:	9002      	str	r0, [sp, #8]
 8005b92:	9006      	str	r0, [sp, #24]
 8005b94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005b98:	4809      	ldr	r0, [pc, #36]	@ (8005bc0 <siprintf+0x38>)
 8005b9a:	9107      	str	r1, [sp, #28]
 8005b9c:	9104      	str	r1, [sp, #16]
 8005b9e:	4909      	ldr	r1, [pc, #36]	@ (8005bc4 <siprintf+0x3c>)
 8005ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ba4:	9105      	str	r1, [sp, #20]
 8005ba6:	6800      	ldr	r0, [r0, #0]
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	a902      	add	r1, sp, #8
 8005bac:	f002 fbb6 	bl	800831c <_svfiprintf_r>
 8005bb0:	9b02      	ldr	r3, [sp, #8]
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	701a      	strb	r2, [r3, #0]
 8005bb6:	b01c      	add	sp, #112	@ 0x70
 8005bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bbc:	b003      	add	sp, #12
 8005bbe:	4770      	bx	lr
 8005bc0:	20000018 	.word	0x20000018
 8005bc4:	ffff0208 	.word	0xffff0208

08005bc8 <__sread>:
 8005bc8:	b510      	push	{r4, lr}
 8005bca:	460c      	mov	r4, r1
 8005bcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bd0:	f000 f86c 	bl	8005cac <_read_r>
 8005bd4:	2800      	cmp	r0, #0
 8005bd6:	bfab      	itete	ge
 8005bd8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005bda:	89a3      	ldrhlt	r3, [r4, #12]
 8005bdc:	181b      	addge	r3, r3, r0
 8005bde:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005be2:	bfac      	ite	ge
 8005be4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005be6:	81a3      	strhlt	r3, [r4, #12]
 8005be8:	bd10      	pop	{r4, pc}

08005bea <__swrite>:
 8005bea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bee:	461f      	mov	r7, r3
 8005bf0:	898b      	ldrh	r3, [r1, #12]
 8005bf2:	05db      	lsls	r3, r3, #23
 8005bf4:	4605      	mov	r5, r0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	d505      	bpl.n	8005c08 <__swrite+0x1e>
 8005bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c00:	2302      	movs	r3, #2
 8005c02:	2200      	movs	r2, #0
 8005c04:	f000 f840 	bl	8005c88 <_lseek_r>
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005c12:	81a3      	strh	r3, [r4, #12]
 8005c14:	4632      	mov	r2, r6
 8005c16:	463b      	mov	r3, r7
 8005c18:	4628      	mov	r0, r5
 8005c1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c1e:	f000 b857 	b.w	8005cd0 <_write_r>

08005c22 <__sseek>:
 8005c22:	b510      	push	{r4, lr}
 8005c24:	460c      	mov	r4, r1
 8005c26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c2a:	f000 f82d 	bl	8005c88 <_lseek_r>
 8005c2e:	1c43      	adds	r3, r0, #1
 8005c30:	89a3      	ldrh	r3, [r4, #12]
 8005c32:	bf15      	itete	ne
 8005c34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005c36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005c3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005c3e:	81a3      	strheq	r3, [r4, #12]
 8005c40:	bf18      	it	ne
 8005c42:	81a3      	strhne	r3, [r4, #12]
 8005c44:	bd10      	pop	{r4, pc}

08005c46 <__sclose>:
 8005c46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c4a:	f000 b80d 	b.w	8005c68 <_close_r>

08005c4e <memset>:
 8005c4e:	4402      	add	r2, r0
 8005c50:	4603      	mov	r3, r0
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d100      	bne.n	8005c58 <memset+0xa>
 8005c56:	4770      	bx	lr
 8005c58:	f803 1b01 	strb.w	r1, [r3], #1
 8005c5c:	e7f9      	b.n	8005c52 <memset+0x4>
	...

08005c60 <_localeconv_r>:
 8005c60:	4800      	ldr	r0, [pc, #0]	@ (8005c64 <_localeconv_r+0x4>)
 8005c62:	4770      	bx	lr
 8005c64:	20000158 	.word	0x20000158

08005c68 <_close_r>:
 8005c68:	b538      	push	{r3, r4, r5, lr}
 8005c6a:	4d06      	ldr	r5, [pc, #24]	@ (8005c84 <_close_r+0x1c>)
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	4604      	mov	r4, r0
 8005c70:	4608      	mov	r0, r1
 8005c72:	602b      	str	r3, [r5, #0]
 8005c74:	f7fb fe6c 	bl	8001950 <_close>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d102      	bne.n	8005c82 <_close_r+0x1a>
 8005c7c:	682b      	ldr	r3, [r5, #0]
 8005c7e:	b103      	cbz	r3, 8005c82 <_close_r+0x1a>
 8005c80:	6023      	str	r3, [r4, #0]
 8005c82:	bd38      	pop	{r3, r4, r5, pc}
 8005c84:	2000047c 	.word	0x2000047c

08005c88 <_lseek_r>:
 8005c88:	b538      	push	{r3, r4, r5, lr}
 8005c8a:	4d07      	ldr	r5, [pc, #28]	@ (8005ca8 <_lseek_r+0x20>)
 8005c8c:	4604      	mov	r4, r0
 8005c8e:	4608      	mov	r0, r1
 8005c90:	4611      	mov	r1, r2
 8005c92:	2200      	movs	r2, #0
 8005c94:	602a      	str	r2, [r5, #0]
 8005c96:	461a      	mov	r2, r3
 8005c98:	f7fb fe81 	bl	800199e <_lseek>
 8005c9c:	1c43      	adds	r3, r0, #1
 8005c9e:	d102      	bne.n	8005ca6 <_lseek_r+0x1e>
 8005ca0:	682b      	ldr	r3, [r5, #0]
 8005ca2:	b103      	cbz	r3, 8005ca6 <_lseek_r+0x1e>
 8005ca4:	6023      	str	r3, [r4, #0]
 8005ca6:	bd38      	pop	{r3, r4, r5, pc}
 8005ca8:	2000047c 	.word	0x2000047c

08005cac <_read_r>:
 8005cac:	b538      	push	{r3, r4, r5, lr}
 8005cae:	4d07      	ldr	r5, [pc, #28]	@ (8005ccc <_read_r+0x20>)
 8005cb0:	4604      	mov	r4, r0
 8005cb2:	4608      	mov	r0, r1
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	602a      	str	r2, [r5, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	f7fb fe0f 	bl	80018de <_read>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d102      	bne.n	8005cca <_read_r+0x1e>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	b103      	cbz	r3, 8005cca <_read_r+0x1e>
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	2000047c 	.word	0x2000047c

08005cd0 <_write_r>:
 8005cd0:	b538      	push	{r3, r4, r5, lr}
 8005cd2:	4d07      	ldr	r5, [pc, #28]	@ (8005cf0 <_write_r+0x20>)
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	4608      	mov	r0, r1
 8005cd8:	4611      	mov	r1, r2
 8005cda:	2200      	movs	r2, #0
 8005cdc:	602a      	str	r2, [r5, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	f7fb fe1a 	bl	8001918 <_write>
 8005ce4:	1c43      	adds	r3, r0, #1
 8005ce6:	d102      	bne.n	8005cee <_write_r+0x1e>
 8005ce8:	682b      	ldr	r3, [r5, #0]
 8005cea:	b103      	cbz	r3, 8005cee <_write_r+0x1e>
 8005cec:	6023      	str	r3, [r4, #0]
 8005cee:	bd38      	pop	{r3, r4, r5, pc}
 8005cf0:	2000047c 	.word	0x2000047c

08005cf4 <__errno>:
 8005cf4:	4b01      	ldr	r3, [pc, #4]	@ (8005cfc <__errno+0x8>)
 8005cf6:	6818      	ldr	r0, [r3, #0]
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	20000018 	.word	0x20000018

08005d00 <__libc_init_array>:
 8005d00:	b570      	push	{r4, r5, r6, lr}
 8005d02:	4d0d      	ldr	r5, [pc, #52]	@ (8005d38 <__libc_init_array+0x38>)
 8005d04:	4c0d      	ldr	r4, [pc, #52]	@ (8005d3c <__libc_init_array+0x3c>)
 8005d06:	1b64      	subs	r4, r4, r5
 8005d08:	10a4      	asrs	r4, r4, #2
 8005d0a:	2600      	movs	r6, #0
 8005d0c:	42a6      	cmp	r6, r4
 8005d0e:	d109      	bne.n	8005d24 <__libc_init_array+0x24>
 8005d10:	4d0b      	ldr	r5, [pc, #44]	@ (8005d40 <__libc_init_array+0x40>)
 8005d12:	4c0c      	ldr	r4, [pc, #48]	@ (8005d44 <__libc_init_array+0x44>)
 8005d14:	f003 fb72 	bl	80093fc <_init>
 8005d18:	1b64      	subs	r4, r4, r5
 8005d1a:	10a4      	asrs	r4, r4, #2
 8005d1c:	2600      	movs	r6, #0
 8005d1e:	42a6      	cmp	r6, r4
 8005d20:	d105      	bne.n	8005d2e <__libc_init_array+0x2e>
 8005d22:	bd70      	pop	{r4, r5, r6, pc}
 8005d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d28:	4798      	blx	r3
 8005d2a:	3601      	adds	r6, #1
 8005d2c:	e7ee      	b.n	8005d0c <__libc_init_array+0xc>
 8005d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d32:	4798      	blx	r3
 8005d34:	3601      	adds	r6, #1
 8005d36:	e7f2      	b.n	8005d1e <__libc_init_array+0x1e>
 8005d38:	08009898 	.word	0x08009898
 8005d3c:	08009898 	.word	0x08009898
 8005d40:	08009898 	.word	0x08009898
 8005d44:	0800989c 	.word	0x0800989c

08005d48 <__retarget_lock_init_recursive>:
 8005d48:	4770      	bx	lr

08005d4a <__retarget_lock_acquire_recursive>:
 8005d4a:	4770      	bx	lr

08005d4c <__retarget_lock_release_recursive>:
 8005d4c:	4770      	bx	lr
	...

08005d50 <nanf>:
 8005d50:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005d58 <nanf+0x8>
 8005d54:	4770      	bx	lr
 8005d56:	bf00      	nop
 8005d58:	7fc00000 	.word	0x7fc00000

08005d5c <quorem>:
 8005d5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d60:	6903      	ldr	r3, [r0, #16]
 8005d62:	690c      	ldr	r4, [r1, #16]
 8005d64:	42a3      	cmp	r3, r4
 8005d66:	4607      	mov	r7, r0
 8005d68:	db7e      	blt.n	8005e68 <quorem+0x10c>
 8005d6a:	3c01      	subs	r4, #1
 8005d6c:	f101 0814 	add.w	r8, r1, #20
 8005d70:	00a3      	lsls	r3, r4, #2
 8005d72:	f100 0514 	add.w	r5, r0, #20
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d7c:	9301      	str	r3, [sp, #4]
 8005d7e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005d82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d86:	3301      	adds	r3, #1
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005d8e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005d92:	d32e      	bcc.n	8005df2 <quorem+0x96>
 8005d94:	f04f 0a00 	mov.w	sl, #0
 8005d98:	46c4      	mov	ip, r8
 8005d9a:	46ae      	mov	lr, r5
 8005d9c:	46d3      	mov	fp, sl
 8005d9e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005da2:	b298      	uxth	r0, r3
 8005da4:	fb06 a000 	mla	r0, r6, r0, sl
 8005da8:	0c02      	lsrs	r2, r0, #16
 8005daa:	0c1b      	lsrs	r3, r3, #16
 8005dac:	fb06 2303 	mla	r3, r6, r3, r2
 8005db0:	f8de 2000 	ldr.w	r2, [lr]
 8005db4:	b280      	uxth	r0, r0
 8005db6:	b292      	uxth	r2, r2
 8005db8:	1a12      	subs	r2, r2, r0
 8005dba:	445a      	add	r2, fp
 8005dbc:	f8de 0000 	ldr.w	r0, [lr]
 8005dc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005dca:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005dce:	b292      	uxth	r2, r2
 8005dd0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005dd4:	45e1      	cmp	r9, ip
 8005dd6:	f84e 2b04 	str.w	r2, [lr], #4
 8005dda:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005dde:	d2de      	bcs.n	8005d9e <quorem+0x42>
 8005de0:	9b00      	ldr	r3, [sp, #0]
 8005de2:	58eb      	ldr	r3, [r5, r3]
 8005de4:	b92b      	cbnz	r3, 8005df2 <quorem+0x96>
 8005de6:	9b01      	ldr	r3, [sp, #4]
 8005de8:	3b04      	subs	r3, #4
 8005dea:	429d      	cmp	r5, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	d32f      	bcc.n	8005e50 <quorem+0xf4>
 8005df0:	613c      	str	r4, [r7, #16]
 8005df2:	4638      	mov	r0, r7
 8005df4:	f001 f9c4 	bl	8007180 <__mcmp>
 8005df8:	2800      	cmp	r0, #0
 8005dfa:	db25      	blt.n	8005e48 <quorem+0xec>
 8005dfc:	4629      	mov	r1, r5
 8005dfe:	2000      	movs	r0, #0
 8005e00:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e04:	f8d1 c000 	ldr.w	ip, [r1]
 8005e08:	fa1f fe82 	uxth.w	lr, r2
 8005e0c:	fa1f f38c 	uxth.w	r3, ip
 8005e10:	eba3 030e 	sub.w	r3, r3, lr
 8005e14:	4403      	add	r3, r0
 8005e16:	0c12      	lsrs	r2, r2, #16
 8005e18:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005e1c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e26:	45c1      	cmp	r9, r8
 8005e28:	f841 3b04 	str.w	r3, [r1], #4
 8005e2c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005e30:	d2e6      	bcs.n	8005e00 <quorem+0xa4>
 8005e32:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e3a:	b922      	cbnz	r2, 8005e46 <quorem+0xea>
 8005e3c:	3b04      	subs	r3, #4
 8005e3e:	429d      	cmp	r5, r3
 8005e40:	461a      	mov	r2, r3
 8005e42:	d30b      	bcc.n	8005e5c <quorem+0x100>
 8005e44:	613c      	str	r4, [r7, #16]
 8005e46:	3601      	adds	r6, #1
 8005e48:	4630      	mov	r0, r6
 8005e4a:	b003      	add	sp, #12
 8005e4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e50:	6812      	ldr	r2, [r2, #0]
 8005e52:	3b04      	subs	r3, #4
 8005e54:	2a00      	cmp	r2, #0
 8005e56:	d1cb      	bne.n	8005df0 <quorem+0x94>
 8005e58:	3c01      	subs	r4, #1
 8005e5a:	e7c6      	b.n	8005dea <quorem+0x8e>
 8005e5c:	6812      	ldr	r2, [r2, #0]
 8005e5e:	3b04      	subs	r3, #4
 8005e60:	2a00      	cmp	r2, #0
 8005e62:	d1ef      	bne.n	8005e44 <quorem+0xe8>
 8005e64:	3c01      	subs	r4, #1
 8005e66:	e7ea      	b.n	8005e3e <quorem+0xe2>
 8005e68:	2000      	movs	r0, #0
 8005e6a:	e7ee      	b.n	8005e4a <quorem+0xee>
 8005e6c:	0000      	movs	r0, r0
	...

08005e70 <_dtoa_r>:
 8005e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e74:	69c7      	ldr	r7, [r0, #28]
 8005e76:	b099      	sub	sp, #100	@ 0x64
 8005e78:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005e7c:	ec55 4b10 	vmov	r4, r5, d0
 8005e80:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005e82:	9109      	str	r1, [sp, #36]	@ 0x24
 8005e84:	4683      	mov	fp, r0
 8005e86:	920e      	str	r2, [sp, #56]	@ 0x38
 8005e88:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e8a:	b97f      	cbnz	r7, 8005eac <_dtoa_r+0x3c>
 8005e8c:	2010      	movs	r0, #16
 8005e8e:	f000 fdfd 	bl	8006a8c <malloc>
 8005e92:	4602      	mov	r2, r0
 8005e94:	f8cb 001c 	str.w	r0, [fp, #28]
 8005e98:	b920      	cbnz	r0, 8005ea4 <_dtoa_r+0x34>
 8005e9a:	4ba7      	ldr	r3, [pc, #668]	@ (8006138 <_dtoa_r+0x2c8>)
 8005e9c:	21ef      	movs	r1, #239	@ 0xef
 8005e9e:	48a7      	ldr	r0, [pc, #668]	@ (800613c <_dtoa_r+0x2cc>)
 8005ea0:	f002 fc36 	bl	8008710 <__assert_func>
 8005ea4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005ea8:	6007      	str	r7, [r0, #0]
 8005eaa:	60c7      	str	r7, [r0, #12]
 8005eac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005eb0:	6819      	ldr	r1, [r3, #0]
 8005eb2:	b159      	cbz	r1, 8005ecc <_dtoa_r+0x5c>
 8005eb4:	685a      	ldr	r2, [r3, #4]
 8005eb6:	604a      	str	r2, [r1, #4]
 8005eb8:	2301      	movs	r3, #1
 8005eba:	4093      	lsls	r3, r2
 8005ebc:	608b      	str	r3, [r1, #8]
 8005ebe:	4658      	mov	r0, fp
 8005ec0:	f000 feda 	bl	8006c78 <_Bfree>
 8005ec4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	601a      	str	r2, [r3, #0]
 8005ecc:	1e2b      	subs	r3, r5, #0
 8005ece:	bfb9      	ittee	lt
 8005ed0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005ed4:	9303      	strlt	r3, [sp, #12]
 8005ed6:	2300      	movge	r3, #0
 8005ed8:	6033      	strge	r3, [r6, #0]
 8005eda:	9f03      	ldr	r7, [sp, #12]
 8005edc:	4b98      	ldr	r3, [pc, #608]	@ (8006140 <_dtoa_r+0x2d0>)
 8005ede:	bfbc      	itt	lt
 8005ee0:	2201      	movlt	r2, #1
 8005ee2:	6032      	strlt	r2, [r6, #0]
 8005ee4:	43bb      	bics	r3, r7
 8005ee6:	d112      	bne.n	8005f0e <_dtoa_r+0x9e>
 8005ee8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005eea:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005ef4:	4323      	orrs	r3, r4
 8005ef6:	f000 854d 	beq.w	8006994 <_dtoa_r+0xb24>
 8005efa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005efc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006154 <_dtoa_r+0x2e4>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 854f 	beq.w	80069a4 <_dtoa_r+0xb34>
 8005f06:	f10a 0303 	add.w	r3, sl, #3
 8005f0a:	f000 bd49 	b.w	80069a0 <_dtoa_r+0xb30>
 8005f0e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005f12:	2200      	movs	r2, #0
 8005f14:	ec51 0b17 	vmov	r0, r1, d7
 8005f18:	2300      	movs	r3, #0
 8005f1a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005f1e:	f7fa fdd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f22:	4680      	mov	r8, r0
 8005f24:	b158      	cbz	r0, 8005f3e <_dtoa_r+0xce>
 8005f26:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005f28:	2301      	movs	r3, #1
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005f2e:	b113      	cbz	r3, 8005f36 <_dtoa_r+0xc6>
 8005f30:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005f32:	4b84      	ldr	r3, [pc, #528]	@ (8006144 <_dtoa_r+0x2d4>)
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006158 <_dtoa_r+0x2e8>
 8005f3a:	f000 bd33 	b.w	80069a4 <_dtoa_r+0xb34>
 8005f3e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005f42:	aa16      	add	r2, sp, #88	@ 0x58
 8005f44:	a917      	add	r1, sp, #92	@ 0x5c
 8005f46:	4658      	mov	r0, fp
 8005f48:	f001 fa3a 	bl	80073c0 <__d2b>
 8005f4c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005f50:	4681      	mov	r9, r0
 8005f52:	2e00      	cmp	r6, #0
 8005f54:	d077      	beq.n	8006046 <_dtoa_r+0x1d6>
 8005f56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005f58:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005f5c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f64:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005f68:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005f6c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005f70:	4619      	mov	r1, r3
 8005f72:	2200      	movs	r2, #0
 8005f74:	4b74      	ldr	r3, [pc, #464]	@ (8006148 <_dtoa_r+0x2d8>)
 8005f76:	f7fa f987 	bl	8000288 <__aeabi_dsub>
 8005f7a:	a369      	add	r3, pc, #420	@ (adr r3, 8006120 <_dtoa_r+0x2b0>)
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	f7fa fb3a 	bl	80005f8 <__aeabi_dmul>
 8005f84:	a368      	add	r3, pc, #416	@ (adr r3, 8006128 <_dtoa_r+0x2b8>)
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f7fa f97f 	bl	800028c <__adddf3>
 8005f8e:	4604      	mov	r4, r0
 8005f90:	4630      	mov	r0, r6
 8005f92:	460d      	mov	r5, r1
 8005f94:	f7fa fac6 	bl	8000524 <__aeabi_i2d>
 8005f98:	a365      	add	r3, pc, #404	@ (adr r3, 8006130 <_dtoa_r+0x2c0>)
 8005f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9e:	f7fa fb2b 	bl	80005f8 <__aeabi_dmul>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	4620      	mov	r0, r4
 8005fa8:	4629      	mov	r1, r5
 8005faa:	f7fa f96f 	bl	800028c <__adddf3>
 8005fae:	4604      	mov	r4, r0
 8005fb0:	460d      	mov	r5, r1
 8005fb2:	f7fa fdd1 	bl	8000b58 <__aeabi_d2iz>
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	4607      	mov	r7, r0
 8005fba:	2300      	movs	r3, #0
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	f7fa fd8c 	bl	8000adc <__aeabi_dcmplt>
 8005fc4:	b140      	cbz	r0, 8005fd8 <_dtoa_r+0x168>
 8005fc6:	4638      	mov	r0, r7
 8005fc8:	f7fa faac 	bl	8000524 <__aeabi_i2d>
 8005fcc:	4622      	mov	r2, r4
 8005fce:	462b      	mov	r3, r5
 8005fd0:	f7fa fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fd4:	b900      	cbnz	r0, 8005fd8 <_dtoa_r+0x168>
 8005fd6:	3f01      	subs	r7, #1
 8005fd8:	2f16      	cmp	r7, #22
 8005fda:	d851      	bhi.n	8006080 <_dtoa_r+0x210>
 8005fdc:	4b5b      	ldr	r3, [pc, #364]	@ (800614c <_dtoa_r+0x2dc>)
 8005fde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005fea:	f7fa fd77 	bl	8000adc <__aeabi_dcmplt>
 8005fee:	2800      	cmp	r0, #0
 8005ff0:	d048      	beq.n	8006084 <_dtoa_r+0x214>
 8005ff2:	3f01      	subs	r7, #1
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	9312      	str	r3, [sp, #72]	@ 0x48
 8005ff8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005ffa:	1b9b      	subs	r3, r3, r6
 8005ffc:	1e5a      	subs	r2, r3, #1
 8005ffe:	bf44      	itt	mi
 8006000:	f1c3 0801 	rsbmi	r8, r3, #1
 8006004:	2300      	movmi	r3, #0
 8006006:	9208      	str	r2, [sp, #32]
 8006008:	bf54      	ite	pl
 800600a:	f04f 0800 	movpl.w	r8, #0
 800600e:	9308      	strmi	r3, [sp, #32]
 8006010:	2f00      	cmp	r7, #0
 8006012:	db39      	blt.n	8006088 <_dtoa_r+0x218>
 8006014:	9b08      	ldr	r3, [sp, #32]
 8006016:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006018:	443b      	add	r3, r7
 800601a:	9308      	str	r3, [sp, #32]
 800601c:	2300      	movs	r3, #0
 800601e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006022:	2b09      	cmp	r3, #9
 8006024:	d864      	bhi.n	80060f0 <_dtoa_r+0x280>
 8006026:	2b05      	cmp	r3, #5
 8006028:	bfc4      	itt	gt
 800602a:	3b04      	subgt	r3, #4
 800602c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800602e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006030:	f1a3 0302 	sub.w	r3, r3, #2
 8006034:	bfcc      	ite	gt
 8006036:	2400      	movgt	r4, #0
 8006038:	2401      	movle	r4, #1
 800603a:	2b03      	cmp	r3, #3
 800603c:	d863      	bhi.n	8006106 <_dtoa_r+0x296>
 800603e:	e8df f003 	tbb	[pc, r3]
 8006042:	372a      	.short	0x372a
 8006044:	5535      	.short	0x5535
 8006046:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800604a:	441e      	add	r6, r3
 800604c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006050:	2b20      	cmp	r3, #32
 8006052:	bfc1      	itttt	gt
 8006054:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006058:	409f      	lslgt	r7, r3
 800605a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800605e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006062:	bfd6      	itet	le
 8006064:	f1c3 0320 	rsble	r3, r3, #32
 8006068:	ea47 0003 	orrgt.w	r0, r7, r3
 800606c:	fa04 f003 	lslle.w	r0, r4, r3
 8006070:	f7fa fa48 	bl	8000504 <__aeabi_ui2d>
 8006074:	2201      	movs	r2, #1
 8006076:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800607a:	3e01      	subs	r6, #1
 800607c:	9214      	str	r2, [sp, #80]	@ 0x50
 800607e:	e777      	b.n	8005f70 <_dtoa_r+0x100>
 8006080:	2301      	movs	r3, #1
 8006082:	e7b8      	b.n	8005ff6 <_dtoa_r+0x186>
 8006084:	9012      	str	r0, [sp, #72]	@ 0x48
 8006086:	e7b7      	b.n	8005ff8 <_dtoa_r+0x188>
 8006088:	427b      	negs	r3, r7
 800608a:	930a      	str	r3, [sp, #40]	@ 0x28
 800608c:	2300      	movs	r3, #0
 800608e:	eba8 0807 	sub.w	r8, r8, r7
 8006092:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006094:	e7c4      	b.n	8006020 <_dtoa_r+0x1b0>
 8006096:	2300      	movs	r3, #0
 8006098:	930b      	str	r3, [sp, #44]	@ 0x2c
 800609a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800609c:	2b00      	cmp	r3, #0
 800609e:	dc35      	bgt.n	800610c <_dtoa_r+0x29c>
 80060a0:	2301      	movs	r3, #1
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	9307      	str	r3, [sp, #28]
 80060a6:	461a      	mov	r2, r3
 80060a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80060aa:	e00b      	b.n	80060c4 <_dtoa_r+0x254>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e7f3      	b.n	8006098 <_dtoa_r+0x228>
 80060b0:	2300      	movs	r3, #0
 80060b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80060b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80060b6:	18fb      	adds	r3, r7, r3
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	3301      	adds	r3, #1
 80060bc:	2b01      	cmp	r3, #1
 80060be:	9307      	str	r3, [sp, #28]
 80060c0:	bfb8      	it	lt
 80060c2:	2301      	movlt	r3, #1
 80060c4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80060c8:	2100      	movs	r1, #0
 80060ca:	2204      	movs	r2, #4
 80060cc:	f102 0514 	add.w	r5, r2, #20
 80060d0:	429d      	cmp	r5, r3
 80060d2:	d91f      	bls.n	8006114 <_dtoa_r+0x2a4>
 80060d4:	6041      	str	r1, [r0, #4]
 80060d6:	4658      	mov	r0, fp
 80060d8:	f000 fd8e 	bl	8006bf8 <_Balloc>
 80060dc:	4682      	mov	sl, r0
 80060de:	2800      	cmp	r0, #0
 80060e0:	d13c      	bne.n	800615c <_dtoa_r+0x2ec>
 80060e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006150 <_dtoa_r+0x2e0>)
 80060e4:	4602      	mov	r2, r0
 80060e6:	f240 11af 	movw	r1, #431	@ 0x1af
 80060ea:	e6d8      	b.n	8005e9e <_dtoa_r+0x2e>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e7e0      	b.n	80060b2 <_dtoa_r+0x242>
 80060f0:	2401      	movs	r4, #1
 80060f2:	2300      	movs	r3, #0
 80060f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060f6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80060f8:	f04f 33ff 	mov.w	r3, #4294967295
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	9307      	str	r3, [sp, #28]
 8006100:	2200      	movs	r2, #0
 8006102:	2312      	movs	r3, #18
 8006104:	e7d0      	b.n	80060a8 <_dtoa_r+0x238>
 8006106:	2301      	movs	r3, #1
 8006108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800610a:	e7f5      	b.n	80060f8 <_dtoa_r+0x288>
 800610c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	9307      	str	r3, [sp, #28]
 8006112:	e7d7      	b.n	80060c4 <_dtoa_r+0x254>
 8006114:	3101      	adds	r1, #1
 8006116:	0052      	lsls	r2, r2, #1
 8006118:	e7d8      	b.n	80060cc <_dtoa_r+0x25c>
 800611a:	bf00      	nop
 800611c:	f3af 8000 	nop.w
 8006120:	636f4361 	.word	0x636f4361
 8006124:	3fd287a7 	.word	0x3fd287a7
 8006128:	8b60c8b3 	.word	0x8b60c8b3
 800612c:	3fc68a28 	.word	0x3fc68a28
 8006130:	509f79fb 	.word	0x509f79fb
 8006134:	3fd34413 	.word	0x3fd34413
 8006138:	080094a6 	.word	0x080094a6
 800613c:	080094bd 	.word	0x080094bd
 8006140:	7ff00000 	.word	0x7ff00000
 8006144:	08009471 	.word	0x08009471
 8006148:	3ff80000 	.word	0x3ff80000
 800614c:	080095b8 	.word	0x080095b8
 8006150:	08009515 	.word	0x08009515
 8006154:	080094a2 	.word	0x080094a2
 8006158:	08009470 	.word	0x08009470
 800615c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006160:	6018      	str	r0, [r3, #0]
 8006162:	9b07      	ldr	r3, [sp, #28]
 8006164:	2b0e      	cmp	r3, #14
 8006166:	f200 80a4 	bhi.w	80062b2 <_dtoa_r+0x442>
 800616a:	2c00      	cmp	r4, #0
 800616c:	f000 80a1 	beq.w	80062b2 <_dtoa_r+0x442>
 8006170:	2f00      	cmp	r7, #0
 8006172:	dd33      	ble.n	80061dc <_dtoa_r+0x36c>
 8006174:	4bad      	ldr	r3, [pc, #692]	@ (800642c <_dtoa_r+0x5bc>)
 8006176:	f007 020f 	and.w	r2, r7, #15
 800617a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800617e:	ed93 7b00 	vldr	d7, [r3]
 8006182:	05f8      	lsls	r0, r7, #23
 8006184:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006188:	ea4f 1427 	mov.w	r4, r7, asr #4
 800618c:	d516      	bpl.n	80061bc <_dtoa_r+0x34c>
 800618e:	4ba8      	ldr	r3, [pc, #672]	@ (8006430 <_dtoa_r+0x5c0>)
 8006190:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006194:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006198:	f7fa fb58 	bl	800084c <__aeabi_ddiv>
 800619c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061a0:	f004 040f 	and.w	r4, r4, #15
 80061a4:	2603      	movs	r6, #3
 80061a6:	4da2      	ldr	r5, [pc, #648]	@ (8006430 <_dtoa_r+0x5c0>)
 80061a8:	b954      	cbnz	r4, 80061c0 <_dtoa_r+0x350>
 80061aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061b2:	f7fa fb4b 	bl	800084c <__aeabi_ddiv>
 80061b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061ba:	e028      	b.n	800620e <_dtoa_r+0x39e>
 80061bc:	2602      	movs	r6, #2
 80061be:	e7f2      	b.n	80061a6 <_dtoa_r+0x336>
 80061c0:	07e1      	lsls	r1, r4, #31
 80061c2:	d508      	bpl.n	80061d6 <_dtoa_r+0x366>
 80061c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061cc:	f7fa fa14 	bl	80005f8 <__aeabi_dmul>
 80061d0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80061d4:	3601      	adds	r6, #1
 80061d6:	1064      	asrs	r4, r4, #1
 80061d8:	3508      	adds	r5, #8
 80061da:	e7e5      	b.n	80061a8 <_dtoa_r+0x338>
 80061dc:	f000 80d2 	beq.w	8006384 <_dtoa_r+0x514>
 80061e0:	427c      	negs	r4, r7
 80061e2:	4b92      	ldr	r3, [pc, #584]	@ (800642c <_dtoa_r+0x5bc>)
 80061e4:	4d92      	ldr	r5, [pc, #584]	@ (8006430 <_dtoa_r+0x5c0>)
 80061e6:	f004 020f 	and.w	r2, r4, #15
 80061ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061f6:	f7fa f9ff 	bl	80005f8 <__aeabi_dmul>
 80061fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061fe:	1124      	asrs	r4, r4, #4
 8006200:	2300      	movs	r3, #0
 8006202:	2602      	movs	r6, #2
 8006204:	2c00      	cmp	r4, #0
 8006206:	f040 80b2 	bne.w	800636e <_dtoa_r+0x4fe>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1d3      	bne.n	80061b6 <_dtoa_r+0x346>
 800620e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006210:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 80b7 	beq.w	8006388 <_dtoa_r+0x518>
 800621a:	4b86      	ldr	r3, [pc, #536]	@ (8006434 <_dtoa_r+0x5c4>)
 800621c:	2200      	movs	r2, #0
 800621e:	4620      	mov	r0, r4
 8006220:	4629      	mov	r1, r5
 8006222:	f7fa fc5b 	bl	8000adc <__aeabi_dcmplt>
 8006226:	2800      	cmp	r0, #0
 8006228:	f000 80ae 	beq.w	8006388 <_dtoa_r+0x518>
 800622c:	9b07      	ldr	r3, [sp, #28]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 80aa 	beq.w	8006388 <_dtoa_r+0x518>
 8006234:	9b00      	ldr	r3, [sp, #0]
 8006236:	2b00      	cmp	r3, #0
 8006238:	dd37      	ble.n	80062aa <_dtoa_r+0x43a>
 800623a:	1e7b      	subs	r3, r7, #1
 800623c:	9304      	str	r3, [sp, #16]
 800623e:	4620      	mov	r0, r4
 8006240:	4b7d      	ldr	r3, [pc, #500]	@ (8006438 <_dtoa_r+0x5c8>)
 8006242:	2200      	movs	r2, #0
 8006244:	4629      	mov	r1, r5
 8006246:	f7fa f9d7 	bl	80005f8 <__aeabi_dmul>
 800624a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800624e:	9c00      	ldr	r4, [sp, #0]
 8006250:	3601      	adds	r6, #1
 8006252:	4630      	mov	r0, r6
 8006254:	f7fa f966 	bl	8000524 <__aeabi_i2d>
 8006258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800625c:	f7fa f9cc 	bl	80005f8 <__aeabi_dmul>
 8006260:	4b76      	ldr	r3, [pc, #472]	@ (800643c <_dtoa_r+0x5cc>)
 8006262:	2200      	movs	r2, #0
 8006264:	f7fa f812 	bl	800028c <__adddf3>
 8006268:	4605      	mov	r5, r0
 800626a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800626e:	2c00      	cmp	r4, #0
 8006270:	f040 808d 	bne.w	800638e <_dtoa_r+0x51e>
 8006274:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006278:	4b71      	ldr	r3, [pc, #452]	@ (8006440 <_dtoa_r+0x5d0>)
 800627a:	2200      	movs	r2, #0
 800627c:	f7fa f804 	bl	8000288 <__aeabi_dsub>
 8006280:	4602      	mov	r2, r0
 8006282:	460b      	mov	r3, r1
 8006284:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006288:	462a      	mov	r2, r5
 800628a:	4633      	mov	r3, r6
 800628c:	f7fa fc44 	bl	8000b18 <__aeabi_dcmpgt>
 8006290:	2800      	cmp	r0, #0
 8006292:	f040 828b 	bne.w	80067ac <_dtoa_r+0x93c>
 8006296:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800629a:	462a      	mov	r2, r5
 800629c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80062a0:	f7fa fc1c 	bl	8000adc <__aeabi_dcmplt>
 80062a4:	2800      	cmp	r0, #0
 80062a6:	f040 8128 	bne.w	80064fa <_dtoa_r+0x68a>
 80062aa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80062ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80062b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	f2c0 815a 	blt.w	800656e <_dtoa_r+0x6fe>
 80062ba:	2f0e      	cmp	r7, #14
 80062bc:	f300 8157 	bgt.w	800656e <_dtoa_r+0x6fe>
 80062c0:	4b5a      	ldr	r3, [pc, #360]	@ (800642c <_dtoa_r+0x5bc>)
 80062c2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80062c6:	ed93 7b00 	vldr	d7, [r3]
 80062ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	ed8d 7b00 	vstr	d7, [sp]
 80062d2:	da03      	bge.n	80062dc <_dtoa_r+0x46c>
 80062d4:	9b07      	ldr	r3, [sp, #28]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	f340 8101 	ble.w	80064de <_dtoa_r+0x66e>
 80062dc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062e0:	4656      	mov	r6, sl
 80062e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062e6:	4620      	mov	r0, r4
 80062e8:	4629      	mov	r1, r5
 80062ea:	f7fa faaf 	bl	800084c <__aeabi_ddiv>
 80062ee:	f7fa fc33 	bl	8000b58 <__aeabi_d2iz>
 80062f2:	4680      	mov	r8, r0
 80062f4:	f7fa f916 	bl	8000524 <__aeabi_i2d>
 80062f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062fc:	f7fa f97c 	bl	80005f8 <__aeabi_dmul>
 8006300:	4602      	mov	r2, r0
 8006302:	460b      	mov	r3, r1
 8006304:	4620      	mov	r0, r4
 8006306:	4629      	mov	r1, r5
 8006308:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800630c:	f7f9 ffbc 	bl	8000288 <__aeabi_dsub>
 8006310:	f806 4b01 	strb.w	r4, [r6], #1
 8006314:	9d07      	ldr	r5, [sp, #28]
 8006316:	eba6 040a 	sub.w	r4, r6, sl
 800631a:	42a5      	cmp	r5, r4
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	f040 8117 	bne.w	8006552 <_dtoa_r+0x6e2>
 8006324:	f7f9 ffb2 	bl	800028c <__adddf3>
 8006328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800632c:	4604      	mov	r4, r0
 800632e:	460d      	mov	r5, r1
 8006330:	f7fa fbf2 	bl	8000b18 <__aeabi_dcmpgt>
 8006334:	2800      	cmp	r0, #0
 8006336:	f040 80f9 	bne.w	800652c <_dtoa_r+0x6bc>
 800633a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800633e:	4620      	mov	r0, r4
 8006340:	4629      	mov	r1, r5
 8006342:	f7fa fbc1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006346:	b118      	cbz	r0, 8006350 <_dtoa_r+0x4e0>
 8006348:	f018 0f01 	tst.w	r8, #1
 800634c:	f040 80ee 	bne.w	800652c <_dtoa_r+0x6bc>
 8006350:	4649      	mov	r1, r9
 8006352:	4658      	mov	r0, fp
 8006354:	f000 fc90 	bl	8006c78 <_Bfree>
 8006358:	2300      	movs	r3, #0
 800635a:	7033      	strb	r3, [r6, #0]
 800635c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800635e:	3701      	adds	r7, #1
 8006360:	601f      	str	r7, [r3, #0]
 8006362:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006364:	2b00      	cmp	r3, #0
 8006366:	f000 831d 	beq.w	80069a4 <_dtoa_r+0xb34>
 800636a:	601e      	str	r6, [r3, #0]
 800636c:	e31a      	b.n	80069a4 <_dtoa_r+0xb34>
 800636e:	07e2      	lsls	r2, r4, #31
 8006370:	d505      	bpl.n	800637e <_dtoa_r+0x50e>
 8006372:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006376:	f7fa f93f 	bl	80005f8 <__aeabi_dmul>
 800637a:	3601      	adds	r6, #1
 800637c:	2301      	movs	r3, #1
 800637e:	1064      	asrs	r4, r4, #1
 8006380:	3508      	adds	r5, #8
 8006382:	e73f      	b.n	8006204 <_dtoa_r+0x394>
 8006384:	2602      	movs	r6, #2
 8006386:	e742      	b.n	800620e <_dtoa_r+0x39e>
 8006388:	9c07      	ldr	r4, [sp, #28]
 800638a:	9704      	str	r7, [sp, #16]
 800638c:	e761      	b.n	8006252 <_dtoa_r+0x3e2>
 800638e:	4b27      	ldr	r3, [pc, #156]	@ (800642c <_dtoa_r+0x5bc>)
 8006390:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006392:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006396:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800639a:	4454      	add	r4, sl
 800639c:	2900      	cmp	r1, #0
 800639e:	d053      	beq.n	8006448 <_dtoa_r+0x5d8>
 80063a0:	4928      	ldr	r1, [pc, #160]	@ (8006444 <_dtoa_r+0x5d4>)
 80063a2:	2000      	movs	r0, #0
 80063a4:	f7fa fa52 	bl	800084c <__aeabi_ddiv>
 80063a8:	4633      	mov	r3, r6
 80063aa:	462a      	mov	r2, r5
 80063ac:	f7f9 ff6c 	bl	8000288 <__aeabi_dsub>
 80063b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80063b4:	4656      	mov	r6, sl
 80063b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063ba:	f7fa fbcd 	bl	8000b58 <__aeabi_d2iz>
 80063be:	4605      	mov	r5, r0
 80063c0:	f7fa f8b0 	bl	8000524 <__aeabi_i2d>
 80063c4:	4602      	mov	r2, r0
 80063c6:	460b      	mov	r3, r1
 80063c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80063cc:	f7f9 ff5c 	bl	8000288 <__aeabi_dsub>
 80063d0:	3530      	adds	r5, #48	@ 0x30
 80063d2:	4602      	mov	r2, r0
 80063d4:	460b      	mov	r3, r1
 80063d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063da:	f806 5b01 	strb.w	r5, [r6], #1
 80063de:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063e2:	f7fa fb7b 	bl	8000adc <__aeabi_dcmplt>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d171      	bne.n	80064ce <_dtoa_r+0x65e>
 80063ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80063ee:	4911      	ldr	r1, [pc, #68]	@ (8006434 <_dtoa_r+0x5c4>)
 80063f0:	2000      	movs	r0, #0
 80063f2:	f7f9 ff49 	bl	8000288 <__aeabi_dsub>
 80063f6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80063fa:	f7fa fb6f 	bl	8000adc <__aeabi_dcmplt>
 80063fe:	2800      	cmp	r0, #0
 8006400:	f040 8095 	bne.w	800652e <_dtoa_r+0x6be>
 8006404:	42a6      	cmp	r6, r4
 8006406:	f43f af50 	beq.w	80062aa <_dtoa_r+0x43a>
 800640a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800640e:	4b0a      	ldr	r3, [pc, #40]	@ (8006438 <_dtoa_r+0x5c8>)
 8006410:	2200      	movs	r2, #0
 8006412:	f7fa f8f1 	bl	80005f8 <__aeabi_dmul>
 8006416:	4b08      	ldr	r3, [pc, #32]	@ (8006438 <_dtoa_r+0x5c8>)
 8006418:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800641c:	2200      	movs	r2, #0
 800641e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006422:	f7fa f8e9 	bl	80005f8 <__aeabi_dmul>
 8006426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800642a:	e7c4      	b.n	80063b6 <_dtoa_r+0x546>
 800642c:	080095b8 	.word	0x080095b8
 8006430:	08009590 	.word	0x08009590
 8006434:	3ff00000 	.word	0x3ff00000
 8006438:	40240000 	.word	0x40240000
 800643c:	401c0000 	.word	0x401c0000
 8006440:	40140000 	.word	0x40140000
 8006444:	3fe00000 	.word	0x3fe00000
 8006448:	4631      	mov	r1, r6
 800644a:	4628      	mov	r0, r5
 800644c:	f7fa f8d4 	bl	80005f8 <__aeabi_dmul>
 8006450:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006454:	9415      	str	r4, [sp, #84]	@ 0x54
 8006456:	4656      	mov	r6, sl
 8006458:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645c:	f7fa fb7c 	bl	8000b58 <__aeabi_d2iz>
 8006460:	4605      	mov	r5, r0
 8006462:	f7fa f85f 	bl	8000524 <__aeabi_i2d>
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800646e:	f7f9 ff0b 	bl	8000288 <__aeabi_dsub>
 8006472:	3530      	adds	r5, #48	@ 0x30
 8006474:	f806 5b01 	strb.w	r5, [r6], #1
 8006478:	4602      	mov	r2, r0
 800647a:	460b      	mov	r3, r1
 800647c:	42a6      	cmp	r6, r4
 800647e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006482:	f04f 0200 	mov.w	r2, #0
 8006486:	d124      	bne.n	80064d2 <_dtoa_r+0x662>
 8006488:	4bac      	ldr	r3, [pc, #688]	@ (800673c <_dtoa_r+0x8cc>)
 800648a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800648e:	f7f9 fefd 	bl	800028c <__adddf3>
 8006492:	4602      	mov	r2, r0
 8006494:	460b      	mov	r3, r1
 8006496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800649a:	f7fa fb3d 	bl	8000b18 <__aeabi_dcmpgt>
 800649e:	2800      	cmp	r0, #0
 80064a0:	d145      	bne.n	800652e <_dtoa_r+0x6be>
 80064a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064a6:	49a5      	ldr	r1, [pc, #660]	@ (800673c <_dtoa_r+0x8cc>)
 80064a8:	2000      	movs	r0, #0
 80064aa:	f7f9 feed 	bl	8000288 <__aeabi_dsub>
 80064ae:	4602      	mov	r2, r0
 80064b0:	460b      	mov	r3, r1
 80064b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064b6:	f7fa fb11 	bl	8000adc <__aeabi_dcmplt>
 80064ba:	2800      	cmp	r0, #0
 80064bc:	f43f aef5 	beq.w	80062aa <_dtoa_r+0x43a>
 80064c0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80064c2:	1e73      	subs	r3, r6, #1
 80064c4:	9315      	str	r3, [sp, #84]	@ 0x54
 80064c6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80064ca:	2b30      	cmp	r3, #48	@ 0x30
 80064cc:	d0f8      	beq.n	80064c0 <_dtoa_r+0x650>
 80064ce:	9f04      	ldr	r7, [sp, #16]
 80064d0:	e73e      	b.n	8006350 <_dtoa_r+0x4e0>
 80064d2:	4b9b      	ldr	r3, [pc, #620]	@ (8006740 <_dtoa_r+0x8d0>)
 80064d4:	f7fa f890 	bl	80005f8 <__aeabi_dmul>
 80064d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064dc:	e7bc      	b.n	8006458 <_dtoa_r+0x5e8>
 80064de:	d10c      	bne.n	80064fa <_dtoa_r+0x68a>
 80064e0:	4b98      	ldr	r3, [pc, #608]	@ (8006744 <_dtoa_r+0x8d4>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80064e8:	f7fa f886 	bl	80005f8 <__aeabi_dmul>
 80064ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064f0:	f7fa fb08 	bl	8000b04 <__aeabi_dcmpge>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	f000 8157 	beq.w	80067a8 <_dtoa_r+0x938>
 80064fa:	2400      	movs	r4, #0
 80064fc:	4625      	mov	r5, r4
 80064fe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006500:	43db      	mvns	r3, r3
 8006502:	9304      	str	r3, [sp, #16]
 8006504:	4656      	mov	r6, sl
 8006506:	2700      	movs	r7, #0
 8006508:	4621      	mov	r1, r4
 800650a:	4658      	mov	r0, fp
 800650c:	f000 fbb4 	bl	8006c78 <_Bfree>
 8006510:	2d00      	cmp	r5, #0
 8006512:	d0dc      	beq.n	80064ce <_dtoa_r+0x65e>
 8006514:	b12f      	cbz	r7, 8006522 <_dtoa_r+0x6b2>
 8006516:	42af      	cmp	r7, r5
 8006518:	d003      	beq.n	8006522 <_dtoa_r+0x6b2>
 800651a:	4639      	mov	r1, r7
 800651c:	4658      	mov	r0, fp
 800651e:	f000 fbab 	bl	8006c78 <_Bfree>
 8006522:	4629      	mov	r1, r5
 8006524:	4658      	mov	r0, fp
 8006526:	f000 fba7 	bl	8006c78 <_Bfree>
 800652a:	e7d0      	b.n	80064ce <_dtoa_r+0x65e>
 800652c:	9704      	str	r7, [sp, #16]
 800652e:	4633      	mov	r3, r6
 8006530:	461e      	mov	r6, r3
 8006532:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006536:	2a39      	cmp	r2, #57	@ 0x39
 8006538:	d107      	bne.n	800654a <_dtoa_r+0x6da>
 800653a:	459a      	cmp	sl, r3
 800653c:	d1f8      	bne.n	8006530 <_dtoa_r+0x6c0>
 800653e:	9a04      	ldr	r2, [sp, #16]
 8006540:	3201      	adds	r2, #1
 8006542:	9204      	str	r2, [sp, #16]
 8006544:	2230      	movs	r2, #48	@ 0x30
 8006546:	f88a 2000 	strb.w	r2, [sl]
 800654a:	781a      	ldrb	r2, [r3, #0]
 800654c:	3201      	adds	r2, #1
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	e7bd      	b.n	80064ce <_dtoa_r+0x65e>
 8006552:	4b7b      	ldr	r3, [pc, #492]	@ (8006740 <_dtoa_r+0x8d0>)
 8006554:	2200      	movs	r2, #0
 8006556:	f7fa f84f 	bl	80005f8 <__aeabi_dmul>
 800655a:	2200      	movs	r2, #0
 800655c:	2300      	movs	r3, #0
 800655e:	4604      	mov	r4, r0
 8006560:	460d      	mov	r5, r1
 8006562:	f7fa fab1 	bl	8000ac8 <__aeabi_dcmpeq>
 8006566:	2800      	cmp	r0, #0
 8006568:	f43f aebb 	beq.w	80062e2 <_dtoa_r+0x472>
 800656c:	e6f0      	b.n	8006350 <_dtoa_r+0x4e0>
 800656e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006570:	2a00      	cmp	r2, #0
 8006572:	f000 80db 	beq.w	800672c <_dtoa_r+0x8bc>
 8006576:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006578:	2a01      	cmp	r2, #1
 800657a:	f300 80bf 	bgt.w	80066fc <_dtoa_r+0x88c>
 800657e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006580:	2a00      	cmp	r2, #0
 8006582:	f000 80b7 	beq.w	80066f4 <_dtoa_r+0x884>
 8006586:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800658a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800658c:	4646      	mov	r6, r8
 800658e:	9a08      	ldr	r2, [sp, #32]
 8006590:	2101      	movs	r1, #1
 8006592:	441a      	add	r2, r3
 8006594:	4658      	mov	r0, fp
 8006596:	4498      	add	r8, r3
 8006598:	9208      	str	r2, [sp, #32]
 800659a:	f000 fc6b 	bl	8006e74 <__i2b>
 800659e:	4605      	mov	r5, r0
 80065a0:	b15e      	cbz	r6, 80065ba <_dtoa_r+0x74a>
 80065a2:	9b08      	ldr	r3, [sp, #32]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	dd08      	ble.n	80065ba <_dtoa_r+0x74a>
 80065a8:	42b3      	cmp	r3, r6
 80065aa:	9a08      	ldr	r2, [sp, #32]
 80065ac:	bfa8      	it	ge
 80065ae:	4633      	movge	r3, r6
 80065b0:	eba8 0803 	sub.w	r8, r8, r3
 80065b4:	1af6      	subs	r6, r6, r3
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	9308      	str	r3, [sp, #32]
 80065ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065bc:	b1f3      	cbz	r3, 80065fc <_dtoa_r+0x78c>
 80065be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80b7 	beq.w	8006734 <_dtoa_r+0x8c4>
 80065c6:	b18c      	cbz	r4, 80065ec <_dtoa_r+0x77c>
 80065c8:	4629      	mov	r1, r5
 80065ca:	4622      	mov	r2, r4
 80065cc:	4658      	mov	r0, fp
 80065ce:	f000 fd11 	bl	8006ff4 <__pow5mult>
 80065d2:	464a      	mov	r2, r9
 80065d4:	4601      	mov	r1, r0
 80065d6:	4605      	mov	r5, r0
 80065d8:	4658      	mov	r0, fp
 80065da:	f000 fc61 	bl	8006ea0 <__multiply>
 80065de:	4649      	mov	r1, r9
 80065e0:	9004      	str	r0, [sp, #16]
 80065e2:	4658      	mov	r0, fp
 80065e4:	f000 fb48 	bl	8006c78 <_Bfree>
 80065e8:	9b04      	ldr	r3, [sp, #16]
 80065ea:	4699      	mov	r9, r3
 80065ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80065ee:	1b1a      	subs	r2, r3, r4
 80065f0:	d004      	beq.n	80065fc <_dtoa_r+0x78c>
 80065f2:	4649      	mov	r1, r9
 80065f4:	4658      	mov	r0, fp
 80065f6:	f000 fcfd 	bl	8006ff4 <__pow5mult>
 80065fa:	4681      	mov	r9, r0
 80065fc:	2101      	movs	r1, #1
 80065fe:	4658      	mov	r0, fp
 8006600:	f000 fc38 	bl	8006e74 <__i2b>
 8006604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006606:	4604      	mov	r4, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 81cf 	beq.w	80069ac <_dtoa_r+0xb3c>
 800660e:	461a      	mov	r2, r3
 8006610:	4601      	mov	r1, r0
 8006612:	4658      	mov	r0, fp
 8006614:	f000 fcee 	bl	8006ff4 <__pow5mult>
 8006618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800661a:	2b01      	cmp	r3, #1
 800661c:	4604      	mov	r4, r0
 800661e:	f300 8095 	bgt.w	800674c <_dtoa_r+0x8dc>
 8006622:	9b02      	ldr	r3, [sp, #8]
 8006624:	2b00      	cmp	r3, #0
 8006626:	f040 8087 	bne.w	8006738 <_dtoa_r+0x8c8>
 800662a:	9b03      	ldr	r3, [sp, #12]
 800662c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006630:	2b00      	cmp	r3, #0
 8006632:	f040 8089 	bne.w	8006748 <_dtoa_r+0x8d8>
 8006636:	9b03      	ldr	r3, [sp, #12]
 8006638:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800663c:	0d1b      	lsrs	r3, r3, #20
 800663e:	051b      	lsls	r3, r3, #20
 8006640:	b12b      	cbz	r3, 800664e <_dtoa_r+0x7de>
 8006642:	9b08      	ldr	r3, [sp, #32]
 8006644:	3301      	adds	r3, #1
 8006646:	9308      	str	r3, [sp, #32]
 8006648:	f108 0801 	add.w	r8, r8, #1
 800664c:	2301      	movs	r3, #1
 800664e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006652:	2b00      	cmp	r3, #0
 8006654:	f000 81b0 	beq.w	80069b8 <_dtoa_r+0xb48>
 8006658:	6923      	ldr	r3, [r4, #16]
 800665a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800665e:	6918      	ldr	r0, [r3, #16]
 8006660:	f000 fbbc 	bl	8006ddc <__hi0bits>
 8006664:	f1c0 0020 	rsb	r0, r0, #32
 8006668:	9b08      	ldr	r3, [sp, #32]
 800666a:	4418      	add	r0, r3
 800666c:	f010 001f 	ands.w	r0, r0, #31
 8006670:	d077      	beq.n	8006762 <_dtoa_r+0x8f2>
 8006672:	f1c0 0320 	rsb	r3, r0, #32
 8006676:	2b04      	cmp	r3, #4
 8006678:	dd6b      	ble.n	8006752 <_dtoa_r+0x8e2>
 800667a:	9b08      	ldr	r3, [sp, #32]
 800667c:	f1c0 001c 	rsb	r0, r0, #28
 8006680:	4403      	add	r3, r0
 8006682:	4480      	add	r8, r0
 8006684:	4406      	add	r6, r0
 8006686:	9308      	str	r3, [sp, #32]
 8006688:	f1b8 0f00 	cmp.w	r8, #0
 800668c:	dd05      	ble.n	800669a <_dtoa_r+0x82a>
 800668e:	4649      	mov	r1, r9
 8006690:	4642      	mov	r2, r8
 8006692:	4658      	mov	r0, fp
 8006694:	f000 fd08 	bl	80070a8 <__lshift>
 8006698:	4681      	mov	r9, r0
 800669a:	9b08      	ldr	r3, [sp, #32]
 800669c:	2b00      	cmp	r3, #0
 800669e:	dd05      	ble.n	80066ac <_dtoa_r+0x83c>
 80066a0:	4621      	mov	r1, r4
 80066a2:	461a      	mov	r2, r3
 80066a4:	4658      	mov	r0, fp
 80066a6:	f000 fcff 	bl	80070a8 <__lshift>
 80066aa:	4604      	mov	r4, r0
 80066ac:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d059      	beq.n	8006766 <_dtoa_r+0x8f6>
 80066b2:	4621      	mov	r1, r4
 80066b4:	4648      	mov	r0, r9
 80066b6:	f000 fd63 	bl	8007180 <__mcmp>
 80066ba:	2800      	cmp	r0, #0
 80066bc:	da53      	bge.n	8006766 <_dtoa_r+0x8f6>
 80066be:	1e7b      	subs	r3, r7, #1
 80066c0:	9304      	str	r3, [sp, #16]
 80066c2:	4649      	mov	r1, r9
 80066c4:	2300      	movs	r3, #0
 80066c6:	220a      	movs	r2, #10
 80066c8:	4658      	mov	r0, fp
 80066ca:	f000 faf7 	bl	8006cbc <__multadd>
 80066ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066d0:	4681      	mov	r9, r0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8172 	beq.w	80069bc <_dtoa_r+0xb4c>
 80066d8:	2300      	movs	r3, #0
 80066da:	4629      	mov	r1, r5
 80066dc:	220a      	movs	r2, #10
 80066de:	4658      	mov	r0, fp
 80066e0:	f000 faec 	bl	8006cbc <__multadd>
 80066e4:	9b00      	ldr	r3, [sp, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	4605      	mov	r5, r0
 80066ea:	dc67      	bgt.n	80067bc <_dtoa_r+0x94c>
 80066ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	dc41      	bgt.n	8006776 <_dtoa_r+0x906>
 80066f2:	e063      	b.n	80067bc <_dtoa_r+0x94c>
 80066f4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80066f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80066fa:	e746      	b.n	800658a <_dtoa_r+0x71a>
 80066fc:	9b07      	ldr	r3, [sp, #28]
 80066fe:	1e5c      	subs	r4, r3, #1
 8006700:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006702:	42a3      	cmp	r3, r4
 8006704:	bfbf      	itttt	lt
 8006706:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006708:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800670a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800670c:	1ae3      	sublt	r3, r4, r3
 800670e:	bfb4      	ite	lt
 8006710:	18d2      	addlt	r2, r2, r3
 8006712:	1b1c      	subge	r4, r3, r4
 8006714:	9b07      	ldr	r3, [sp, #28]
 8006716:	bfbc      	itt	lt
 8006718:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800671a:	2400      	movlt	r4, #0
 800671c:	2b00      	cmp	r3, #0
 800671e:	bfb5      	itete	lt
 8006720:	eba8 0603 	sublt.w	r6, r8, r3
 8006724:	9b07      	ldrge	r3, [sp, #28]
 8006726:	2300      	movlt	r3, #0
 8006728:	4646      	movge	r6, r8
 800672a:	e730      	b.n	800658e <_dtoa_r+0x71e>
 800672c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800672e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006730:	4646      	mov	r6, r8
 8006732:	e735      	b.n	80065a0 <_dtoa_r+0x730>
 8006734:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006736:	e75c      	b.n	80065f2 <_dtoa_r+0x782>
 8006738:	2300      	movs	r3, #0
 800673a:	e788      	b.n	800664e <_dtoa_r+0x7de>
 800673c:	3fe00000 	.word	0x3fe00000
 8006740:	40240000 	.word	0x40240000
 8006744:	40140000 	.word	0x40140000
 8006748:	9b02      	ldr	r3, [sp, #8]
 800674a:	e780      	b.n	800664e <_dtoa_r+0x7de>
 800674c:	2300      	movs	r3, #0
 800674e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006750:	e782      	b.n	8006658 <_dtoa_r+0x7e8>
 8006752:	d099      	beq.n	8006688 <_dtoa_r+0x818>
 8006754:	9a08      	ldr	r2, [sp, #32]
 8006756:	331c      	adds	r3, #28
 8006758:	441a      	add	r2, r3
 800675a:	4498      	add	r8, r3
 800675c:	441e      	add	r6, r3
 800675e:	9208      	str	r2, [sp, #32]
 8006760:	e792      	b.n	8006688 <_dtoa_r+0x818>
 8006762:	4603      	mov	r3, r0
 8006764:	e7f6      	b.n	8006754 <_dtoa_r+0x8e4>
 8006766:	9b07      	ldr	r3, [sp, #28]
 8006768:	9704      	str	r7, [sp, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	dc20      	bgt.n	80067b0 <_dtoa_r+0x940>
 800676e:	9300      	str	r3, [sp, #0]
 8006770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006772:	2b02      	cmp	r3, #2
 8006774:	dd1e      	ble.n	80067b4 <_dtoa_r+0x944>
 8006776:	9b00      	ldr	r3, [sp, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	f47f aec0 	bne.w	80064fe <_dtoa_r+0x68e>
 800677e:	4621      	mov	r1, r4
 8006780:	2205      	movs	r2, #5
 8006782:	4658      	mov	r0, fp
 8006784:	f000 fa9a 	bl	8006cbc <__multadd>
 8006788:	4601      	mov	r1, r0
 800678a:	4604      	mov	r4, r0
 800678c:	4648      	mov	r0, r9
 800678e:	f000 fcf7 	bl	8007180 <__mcmp>
 8006792:	2800      	cmp	r0, #0
 8006794:	f77f aeb3 	ble.w	80064fe <_dtoa_r+0x68e>
 8006798:	4656      	mov	r6, sl
 800679a:	2331      	movs	r3, #49	@ 0x31
 800679c:	f806 3b01 	strb.w	r3, [r6], #1
 80067a0:	9b04      	ldr	r3, [sp, #16]
 80067a2:	3301      	adds	r3, #1
 80067a4:	9304      	str	r3, [sp, #16]
 80067a6:	e6ae      	b.n	8006506 <_dtoa_r+0x696>
 80067a8:	9c07      	ldr	r4, [sp, #28]
 80067aa:	9704      	str	r7, [sp, #16]
 80067ac:	4625      	mov	r5, r4
 80067ae:	e7f3      	b.n	8006798 <_dtoa_r+0x928>
 80067b0:	9b07      	ldr	r3, [sp, #28]
 80067b2:	9300      	str	r3, [sp, #0]
 80067b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 8104 	beq.w	80069c4 <_dtoa_r+0xb54>
 80067bc:	2e00      	cmp	r6, #0
 80067be:	dd05      	ble.n	80067cc <_dtoa_r+0x95c>
 80067c0:	4629      	mov	r1, r5
 80067c2:	4632      	mov	r2, r6
 80067c4:	4658      	mov	r0, fp
 80067c6:	f000 fc6f 	bl	80070a8 <__lshift>
 80067ca:	4605      	mov	r5, r0
 80067cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d05a      	beq.n	8006888 <_dtoa_r+0xa18>
 80067d2:	6869      	ldr	r1, [r5, #4]
 80067d4:	4658      	mov	r0, fp
 80067d6:	f000 fa0f 	bl	8006bf8 <_Balloc>
 80067da:	4606      	mov	r6, r0
 80067dc:	b928      	cbnz	r0, 80067ea <_dtoa_r+0x97a>
 80067de:	4b84      	ldr	r3, [pc, #528]	@ (80069f0 <_dtoa_r+0xb80>)
 80067e0:	4602      	mov	r2, r0
 80067e2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80067e6:	f7ff bb5a 	b.w	8005e9e <_dtoa_r+0x2e>
 80067ea:	692a      	ldr	r2, [r5, #16]
 80067ec:	3202      	adds	r2, #2
 80067ee:	0092      	lsls	r2, r2, #2
 80067f0:	f105 010c 	add.w	r1, r5, #12
 80067f4:	300c      	adds	r0, #12
 80067f6:	f001 ff75 	bl	80086e4 <memcpy>
 80067fa:	2201      	movs	r2, #1
 80067fc:	4631      	mov	r1, r6
 80067fe:	4658      	mov	r0, fp
 8006800:	f000 fc52 	bl	80070a8 <__lshift>
 8006804:	f10a 0301 	add.w	r3, sl, #1
 8006808:	9307      	str	r3, [sp, #28]
 800680a:	9b00      	ldr	r3, [sp, #0]
 800680c:	4453      	add	r3, sl
 800680e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006810:	9b02      	ldr	r3, [sp, #8]
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	462f      	mov	r7, r5
 8006818:	930a      	str	r3, [sp, #40]	@ 0x28
 800681a:	4605      	mov	r5, r0
 800681c:	9b07      	ldr	r3, [sp, #28]
 800681e:	4621      	mov	r1, r4
 8006820:	3b01      	subs	r3, #1
 8006822:	4648      	mov	r0, r9
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	f7ff fa99 	bl	8005d5c <quorem>
 800682a:	4639      	mov	r1, r7
 800682c:	9002      	str	r0, [sp, #8]
 800682e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006832:	4648      	mov	r0, r9
 8006834:	f000 fca4 	bl	8007180 <__mcmp>
 8006838:	462a      	mov	r2, r5
 800683a:	9008      	str	r0, [sp, #32]
 800683c:	4621      	mov	r1, r4
 800683e:	4658      	mov	r0, fp
 8006840:	f000 fcba 	bl	80071b8 <__mdiff>
 8006844:	68c2      	ldr	r2, [r0, #12]
 8006846:	4606      	mov	r6, r0
 8006848:	bb02      	cbnz	r2, 800688c <_dtoa_r+0xa1c>
 800684a:	4601      	mov	r1, r0
 800684c:	4648      	mov	r0, r9
 800684e:	f000 fc97 	bl	8007180 <__mcmp>
 8006852:	4602      	mov	r2, r0
 8006854:	4631      	mov	r1, r6
 8006856:	4658      	mov	r0, fp
 8006858:	920e      	str	r2, [sp, #56]	@ 0x38
 800685a:	f000 fa0d 	bl	8006c78 <_Bfree>
 800685e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006860:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006862:	9e07      	ldr	r6, [sp, #28]
 8006864:	ea43 0102 	orr.w	r1, r3, r2
 8006868:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800686a:	4319      	orrs	r1, r3
 800686c:	d110      	bne.n	8006890 <_dtoa_r+0xa20>
 800686e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006872:	d029      	beq.n	80068c8 <_dtoa_r+0xa58>
 8006874:	9b08      	ldr	r3, [sp, #32]
 8006876:	2b00      	cmp	r3, #0
 8006878:	dd02      	ble.n	8006880 <_dtoa_r+0xa10>
 800687a:	9b02      	ldr	r3, [sp, #8]
 800687c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006880:	9b00      	ldr	r3, [sp, #0]
 8006882:	f883 8000 	strb.w	r8, [r3]
 8006886:	e63f      	b.n	8006508 <_dtoa_r+0x698>
 8006888:	4628      	mov	r0, r5
 800688a:	e7bb      	b.n	8006804 <_dtoa_r+0x994>
 800688c:	2201      	movs	r2, #1
 800688e:	e7e1      	b.n	8006854 <_dtoa_r+0x9e4>
 8006890:	9b08      	ldr	r3, [sp, #32]
 8006892:	2b00      	cmp	r3, #0
 8006894:	db04      	blt.n	80068a0 <_dtoa_r+0xa30>
 8006896:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006898:	430b      	orrs	r3, r1
 800689a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800689c:	430b      	orrs	r3, r1
 800689e:	d120      	bne.n	80068e2 <_dtoa_r+0xa72>
 80068a0:	2a00      	cmp	r2, #0
 80068a2:	dded      	ble.n	8006880 <_dtoa_r+0xa10>
 80068a4:	4649      	mov	r1, r9
 80068a6:	2201      	movs	r2, #1
 80068a8:	4658      	mov	r0, fp
 80068aa:	f000 fbfd 	bl	80070a8 <__lshift>
 80068ae:	4621      	mov	r1, r4
 80068b0:	4681      	mov	r9, r0
 80068b2:	f000 fc65 	bl	8007180 <__mcmp>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	dc03      	bgt.n	80068c2 <_dtoa_r+0xa52>
 80068ba:	d1e1      	bne.n	8006880 <_dtoa_r+0xa10>
 80068bc:	f018 0f01 	tst.w	r8, #1
 80068c0:	d0de      	beq.n	8006880 <_dtoa_r+0xa10>
 80068c2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068c6:	d1d8      	bne.n	800687a <_dtoa_r+0xa0a>
 80068c8:	9a00      	ldr	r2, [sp, #0]
 80068ca:	2339      	movs	r3, #57	@ 0x39
 80068cc:	7013      	strb	r3, [r2, #0]
 80068ce:	4633      	mov	r3, r6
 80068d0:	461e      	mov	r6, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80068d8:	2a39      	cmp	r2, #57	@ 0x39
 80068da:	d052      	beq.n	8006982 <_dtoa_r+0xb12>
 80068dc:	3201      	adds	r2, #1
 80068de:	701a      	strb	r2, [r3, #0]
 80068e0:	e612      	b.n	8006508 <_dtoa_r+0x698>
 80068e2:	2a00      	cmp	r2, #0
 80068e4:	dd07      	ble.n	80068f6 <_dtoa_r+0xa86>
 80068e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80068ea:	d0ed      	beq.n	80068c8 <_dtoa_r+0xa58>
 80068ec:	9a00      	ldr	r2, [sp, #0]
 80068ee:	f108 0301 	add.w	r3, r8, #1
 80068f2:	7013      	strb	r3, [r2, #0]
 80068f4:	e608      	b.n	8006508 <_dtoa_r+0x698>
 80068f6:	9b07      	ldr	r3, [sp, #28]
 80068f8:	9a07      	ldr	r2, [sp, #28]
 80068fa:	f803 8c01 	strb.w	r8, [r3, #-1]
 80068fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006900:	4293      	cmp	r3, r2
 8006902:	d028      	beq.n	8006956 <_dtoa_r+0xae6>
 8006904:	4649      	mov	r1, r9
 8006906:	2300      	movs	r3, #0
 8006908:	220a      	movs	r2, #10
 800690a:	4658      	mov	r0, fp
 800690c:	f000 f9d6 	bl	8006cbc <__multadd>
 8006910:	42af      	cmp	r7, r5
 8006912:	4681      	mov	r9, r0
 8006914:	f04f 0300 	mov.w	r3, #0
 8006918:	f04f 020a 	mov.w	r2, #10
 800691c:	4639      	mov	r1, r7
 800691e:	4658      	mov	r0, fp
 8006920:	d107      	bne.n	8006932 <_dtoa_r+0xac2>
 8006922:	f000 f9cb 	bl	8006cbc <__multadd>
 8006926:	4607      	mov	r7, r0
 8006928:	4605      	mov	r5, r0
 800692a:	9b07      	ldr	r3, [sp, #28]
 800692c:	3301      	adds	r3, #1
 800692e:	9307      	str	r3, [sp, #28]
 8006930:	e774      	b.n	800681c <_dtoa_r+0x9ac>
 8006932:	f000 f9c3 	bl	8006cbc <__multadd>
 8006936:	4629      	mov	r1, r5
 8006938:	4607      	mov	r7, r0
 800693a:	2300      	movs	r3, #0
 800693c:	220a      	movs	r2, #10
 800693e:	4658      	mov	r0, fp
 8006940:	f000 f9bc 	bl	8006cbc <__multadd>
 8006944:	4605      	mov	r5, r0
 8006946:	e7f0      	b.n	800692a <_dtoa_r+0xaba>
 8006948:	9b00      	ldr	r3, [sp, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	bfcc      	ite	gt
 800694e:	461e      	movgt	r6, r3
 8006950:	2601      	movle	r6, #1
 8006952:	4456      	add	r6, sl
 8006954:	2700      	movs	r7, #0
 8006956:	4649      	mov	r1, r9
 8006958:	2201      	movs	r2, #1
 800695a:	4658      	mov	r0, fp
 800695c:	f000 fba4 	bl	80070a8 <__lshift>
 8006960:	4621      	mov	r1, r4
 8006962:	4681      	mov	r9, r0
 8006964:	f000 fc0c 	bl	8007180 <__mcmp>
 8006968:	2800      	cmp	r0, #0
 800696a:	dcb0      	bgt.n	80068ce <_dtoa_r+0xa5e>
 800696c:	d102      	bne.n	8006974 <_dtoa_r+0xb04>
 800696e:	f018 0f01 	tst.w	r8, #1
 8006972:	d1ac      	bne.n	80068ce <_dtoa_r+0xa5e>
 8006974:	4633      	mov	r3, r6
 8006976:	461e      	mov	r6, r3
 8006978:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800697c:	2a30      	cmp	r2, #48	@ 0x30
 800697e:	d0fa      	beq.n	8006976 <_dtoa_r+0xb06>
 8006980:	e5c2      	b.n	8006508 <_dtoa_r+0x698>
 8006982:	459a      	cmp	sl, r3
 8006984:	d1a4      	bne.n	80068d0 <_dtoa_r+0xa60>
 8006986:	9b04      	ldr	r3, [sp, #16]
 8006988:	3301      	adds	r3, #1
 800698a:	9304      	str	r3, [sp, #16]
 800698c:	2331      	movs	r3, #49	@ 0x31
 800698e:	f88a 3000 	strb.w	r3, [sl]
 8006992:	e5b9      	b.n	8006508 <_dtoa_r+0x698>
 8006994:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006996:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80069f4 <_dtoa_r+0xb84>
 800699a:	b11b      	cbz	r3, 80069a4 <_dtoa_r+0xb34>
 800699c:	f10a 0308 	add.w	r3, sl, #8
 80069a0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	4650      	mov	r0, sl
 80069a6:	b019      	add	sp, #100	@ 0x64
 80069a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ae:	2b01      	cmp	r3, #1
 80069b0:	f77f ae37 	ble.w	8006622 <_dtoa_r+0x7b2>
 80069b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80069b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069b8:	2001      	movs	r0, #1
 80069ba:	e655      	b.n	8006668 <_dtoa_r+0x7f8>
 80069bc:	9b00      	ldr	r3, [sp, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f77f aed6 	ble.w	8006770 <_dtoa_r+0x900>
 80069c4:	4656      	mov	r6, sl
 80069c6:	4621      	mov	r1, r4
 80069c8:	4648      	mov	r0, r9
 80069ca:	f7ff f9c7 	bl	8005d5c <quorem>
 80069ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80069d2:	f806 8b01 	strb.w	r8, [r6], #1
 80069d6:	9b00      	ldr	r3, [sp, #0]
 80069d8:	eba6 020a 	sub.w	r2, r6, sl
 80069dc:	4293      	cmp	r3, r2
 80069de:	ddb3      	ble.n	8006948 <_dtoa_r+0xad8>
 80069e0:	4649      	mov	r1, r9
 80069e2:	2300      	movs	r3, #0
 80069e4:	220a      	movs	r2, #10
 80069e6:	4658      	mov	r0, fp
 80069e8:	f000 f968 	bl	8006cbc <__multadd>
 80069ec:	4681      	mov	r9, r0
 80069ee:	e7ea      	b.n	80069c6 <_dtoa_r+0xb56>
 80069f0:	08009515 	.word	0x08009515
 80069f4:	08009499 	.word	0x08009499

080069f8 <_free_r>:
 80069f8:	b538      	push	{r3, r4, r5, lr}
 80069fa:	4605      	mov	r5, r0
 80069fc:	2900      	cmp	r1, #0
 80069fe:	d041      	beq.n	8006a84 <_free_r+0x8c>
 8006a00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a04:	1f0c      	subs	r4, r1, #4
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	bfb8      	it	lt
 8006a0a:	18e4      	addlt	r4, r4, r3
 8006a0c:	f000 f8e8 	bl	8006be0 <__malloc_lock>
 8006a10:	4a1d      	ldr	r2, [pc, #116]	@ (8006a88 <_free_r+0x90>)
 8006a12:	6813      	ldr	r3, [r2, #0]
 8006a14:	b933      	cbnz	r3, 8006a24 <_free_r+0x2c>
 8006a16:	6063      	str	r3, [r4, #4]
 8006a18:	6014      	str	r4, [r2, #0]
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a20:	f000 b8e4 	b.w	8006bec <__malloc_unlock>
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	d908      	bls.n	8006a3a <_free_r+0x42>
 8006a28:	6820      	ldr	r0, [r4, #0]
 8006a2a:	1821      	adds	r1, r4, r0
 8006a2c:	428b      	cmp	r3, r1
 8006a2e:	bf01      	itttt	eq
 8006a30:	6819      	ldreq	r1, [r3, #0]
 8006a32:	685b      	ldreq	r3, [r3, #4]
 8006a34:	1809      	addeq	r1, r1, r0
 8006a36:	6021      	streq	r1, [r4, #0]
 8006a38:	e7ed      	b.n	8006a16 <_free_r+0x1e>
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	b10b      	cbz	r3, 8006a44 <_free_r+0x4c>
 8006a40:	42a3      	cmp	r3, r4
 8006a42:	d9fa      	bls.n	8006a3a <_free_r+0x42>
 8006a44:	6811      	ldr	r1, [r2, #0]
 8006a46:	1850      	adds	r0, r2, r1
 8006a48:	42a0      	cmp	r0, r4
 8006a4a:	d10b      	bne.n	8006a64 <_free_r+0x6c>
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	4401      	add	r1, r0
 8006a50:	1850      	adds	r0, r2, r1
 8006a52:	4283      	cmp	r3, r0
 8006a54:	6011      	str	r1, [r2, #0]
 8006a56:	d1e0      	bne.n	8006a1a <_free_r+0x22>
 8006a58:	6818      	ldr	r0, [r3, #0]
 8006a5a:	685b      	ldr	r3, [r3, #4]
 8006a5c:	6053      	str	r3, [r2, #4]
 8006a5e:	4408      	add	r0, r1
 8006a60:	6010      	str	r0, [r2, #0]
 8006a62:	e7da      	b.n	8006a1a <_free_r+0x22>
 8006a64:	d902      	bls.n	8006a6c <_free_r+0x74>
 8006a66:	230c      	movs	r3, #12
 8006a68:	602b      	str	r3, [r5, #0]
 8006a6a:	e7d6      	b.n	8006a1a <_free_r+0x22>
 8006a6c:	6820      	ldr	r0, [r4, #0]
 8006a6e:	1821      	adds	r1, r4, r0
 8006a70:	428b      	cmp	r3, r1
 8006a72:	bf04      	itt	eq
 8006a74:	6819      	ldreq	r1, [r3, #0]
 8006a76:	685b      	ldreq	r3, [r3, #4]
 8006a78:	6063      	str	r3, [r4, #4]
 8006a7a:	bf04      	itt	eq
 8006a7c:	1809      	addeq	r1, r1, r0
 8006a7e:	6021      	streq	r1, [r4, #0]
 8006a80:	6054      	str	r4, [r2, #4]
 8006a82:	e7ca      	b.n	8006a1a <_free_r+0x22>
 8006a84:	bd38      	pop	{r3, r4, r5, pc}
 8006a86:	bf00      	nop
 8006a88:	20000488 	.word	0x20000488

08006a8c <malloc>:
 8006a8c:	4b02      	ldr	r3, [pc, #8]	@ (8006a98 <malloc+0xc>)
 8006a8e:	4601      	mov	r1, r0
 8006a90:	6818      	ldr	r0, [r3, #0]
 8006a92:	f000 b825 	b.w	8006ae0 <_malloc_r>
 8006a96:	bf00      	nop
 8006a98:	20000018 	.word	0x20000018

08006a9c <sbrk_aligned>:
 8006a9c:	b570      	push	{r4, r5, r6, lr}
 8006a9e:	4e0f      	ldr	r6, [pc, #60]	@ (8006adc <sbrk_aligned+0x40>)
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	6831      	ldr	r1, [r6, #0]
 8006aa4:	4605      	mov	r5, r0
 8006aa6:	b911      	cbnz	r1, 8006aae <sbrk_aligned+0x12>
 8006aa8:	f001 fe0c 	bl	80086c4 <_sbrk_r>
 8006aac:	6030      	str	r0, [r6, #0]
 8006aae:	4621      	mov	r1, r4
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	f001 fe07 	bl	80086c4 <_sbrk_r>
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	d103      	bne.n	8006ac2 <sbrk_aligned+0x26>
 8006aba:	f04f 34ff 	mov.w	r4, #4294967295
 8006abe:	4620      	mov	r0, r4
 8006ac0:	bd70      	pop	{r4, r5, r6, pc}
 8006ac2:	1cc4      	adds	r4, r0, #3
 8006ac4:	f024 0403 	bic.w	r4, r4, #3
 8006ac8:	42a0      	cmp	r0, r4
 8006aca:	d0f8      	beq.n	8006abe <sbrk_aligned+0x22>
 8006acc:	1a21      	subs	r1, r4, r0
 8006ace:	4628      	mov	r0, r5
 8006ad0:	f001 fdf8 	bl	80086c4 <_sbrk_r>
 8006ad4:	3001      	adds	r0, #1
 8006ad6:	d1f2      	bne.n	8006abe <sbrk_aligned+0x22>
 8006ad8:	e7ef      	b.n	8006aba <sbrk_aligned+0x1e>
 8006ada:	bf00      	nop
 8006adc:	20000484 	.word	0x20000484

08006ae0 <_malloc_r>:
 8006ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ae4:	1ccd      	adds	r5, r1, #3
 8006ae6:	f025 0503 	bic.w	r5, r5, #3
 8006aea:	3508      	adds	r5, #8
 8006aec:	2d0c      	cmp	r5, #12
 8006aee:	bf38      	it	cc
 8006af0:	250c      	movcc	r5, #12
 8006af2:	2d00      	cmp	r5, #0
 8006af4:	4606      	mov	r6, r0
 8006af6:	db01      	blt.n	8006afc <_malloc_r+0x1c>
 8006af8:	42a9      	cmp	r1, r5
 8006afa:	d904      	bls.n	8006b06 <_malloc_r+0x26>
 8006afc:	230c      	movs	r3, #12
 8006afe:	6033      	str	r3, [r6, #0]
 8006b00:	2000      	movs	r0, #0
 8006b02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bdc <_malloc_r+0xfc>
 8006b0a:	f000 f869 	bl	8006be0 <__malloc_lock>
 8006b0e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b12:	461c      	mov	r4, r3
 8006b14:	bb44      	cbnz	r4, 8006b68 <_malloc_r+0x88>
 8006b16:	4629      	mov	r1, r5
 8006b18:	4630      	mov	r0, r6
 8006b1a:	f7ff ffbf 	bl	8006a9c <sbrk_aligned>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	4604      	mov	r4, r0
 8006b22:	d158      	bne.n	8006bd6 <_malloc_r+0xf6>
 8006b24:	f8d8 4000 	ldr.w	r4, [r8]
 8006b28:	4627      	mov	r7, r4
 8006b2a:	2f00      	cmp	r7, #0
 8006b2c:	d143      	bne.n	8006bb6 <_malloc_r+0xd6>
 8006b2e:	2c00      	cmp	r4, #0
 8006b30:	d04b      	beq.n	8006bca <_malloc_r+0xea>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	4639      	mov	r1, r7
 8006b36:	4630      	mov	r0, r6
 8006b38:	eb04 0903 	add.w	r9, r4, r3
 8006b3c:	f001 fdc2 	bl	80086c4 <_sbrk_r>
 8006b40:	4581      	cmp	r9, r0
 8006b42:	d142      	bne.n	8006bca <_malloc_r+0xea>
 8006b44:	6821      	ldr	r1, [r4, #0]
 8006b46:	1a6d      	subs	r5, r5, r1
 8006b48:	4629      	mov	r1, r5
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f7ff ffa6 	bl	8006a9c <sbrk_aligned>
 8006b50:	3001      	adds	r0, #1
 8006b52:	d03a      	beq.n	8006bca <_malloc_r+0xea>
 8006b54:	6823      	ldr	r3, [r4, #0]
 8006b56:	442b      	add	r3, r5
 8006b58:	6023      	str	r3, [r4, #0]
 8006b5a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	bb62      	cbnz	r2, 8006bbc <_malloc_r+0xdc>
 8006b62:	f8c8 7000 	str.w	r7, [r8]
 8006b66:	e00f      	b.n	8006b88 <_malloc_r+0xa8>
 8006b68:	6822      	ldr	r2, [r4, #0]
 8006b6a:	1b52      	subs	r2, r2, r5
 8006b6c:	d420      	bmi.n	8006bb0 <_malloc_r+0xd0>
 8006b6e:	2a0b      	cmp	r2, #11
 8006b70:	d917      	bls.n	8006ba2 <_malloc_r+0xc2>
 8006b72:	1961      	adds	r1, r4, r5
 8006b74:	42a3      	cmp	r3, r4
 8006b76:	6025      	str	r5, [r4, #0]
 8006b78:	bf18      	it	ne
 8006b7a:	6059      	strne	r1, [r3, #4]
 8006b7c:	6863      	ldr	r3, [r4, #4]
 8006b7e:	bf08      	it	eq
 8006b80:	f8c8 1000 	streq.w	r1, [r8]
 8006b84:	5162      	str	r2, [r4, r5]
 8006b86:	604b      	str	r3, [r1, #4]
 8006b88:	4630      	mov	r0, r6
 8006b8a:	f000 f82f 	bl	8006bec <__malloc_unlock>
 8006b8e:	f104 000b 	add.w	r0, r4, #11
 8006b92:	1d23      	adds	r3, r4, #4
 8006b94:	f020 0007 	bic.w	r0, r0, #7
 8006b98:	1ac2      	subs	r2, r0, r3
 8006b9a:	bf1c      	itt	ne
 8006b9c:	1a1b      	subne	r3, r3, r0
 8006b9e:	50a3      	strne	r3, [r4, r2]
 8006ba0:	e7af      	b.n	8006b02 <_malloc_r+0x22>
 8006ba2:	6862      	ldr	r2, [r4, #4]
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	bf0c      	ite	eq
 8006ba8:	f8c8 2000 	streq.w	r2, [r8]
 8006bac:	605a      	strne	r2, [r3, #4]
 8006bae:	e7eb      	b.n	8006b88 <_malloc_r+0xa8>
 8006bb0:	4623      	mov	r3, r4
 8006bb2:	6864      	ldr	r4, [r4, #4]
 8006bb4:	e7ae      	b.n	8006b14 <_malloc_r+0x34>
 8006bb6:	463c      	mov	r4, r7
 8006bb8:	687f      	ldr	r7, [r7, #4]
 8006bba:	e7b6      	b.n	8006b2a <_malloc_r+0x4a>
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	42a3      	cmp	r3, r4
 8006bc2:	d1fb      	bne.n	8006bbc <_malloc_r+0xdc>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	6053      	str	r3, [r2, #4]
 8006bc8:	e7de      	b.n	8006b88 <_malloc_r+0xa8>
 8006bca:	230c      	movs	r3, #12
 8006bcc:	6033      	str	r3, [r6, #0]
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f000 f80c 	bl	8006bec <__malloc_unlock>
 8006bd4:	e794      	b.n	8006b00 <_malloc_r+0x20>
 8006bd6:	6005      	str	r5, [r0, #0]
 8006bd8:	e7d6      	b.n	8006b88 <_malloc_r+0xa8>
 8006bda:	bf00      	nop
 8006bdc:	20000488 	.word	0x20000488

08006be0 <__malloc_lock>:
 8006be0:	4801      	ldr	r0, [pc, #4]	@ (8006be8 <__malloc_lock+0x8>)
 8006be2:	f7ff b8b2 	b.w	8005d4a <__retarget_lock_acquire_recursive>
 8006be6:	bf00      	nop
 8006be8:	20000480 	.word	0x20000480

08006bec <__malloc_unlock>:
 8006bec:	4801      	ldr	r0, [pc, #4]	@ (8006bf4 <__malloc_unlock+0x8>)
 8006bee:	f7ff b8ad 	b.w	8005d4c <__retarget_lock_release_recursive>
 8006bf2:	bf00      	nop
 8006bf4:	20000480 	.word	0x20000480

08006bf8 <_Balloc>:
 8006bf8:	b570      	push	{r4, r5, r6, lr}
 8006bfa:	69c6      	ldr	r6, [r0, #28]
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	460d      	mov	r5, r1
 8006c00:	b976      	cbnz	r6, 8006c20 <_Balloc+0x28>
 8006c02:	2010      	movs	r0, #16
 8006c04:	f7ff ff42 	bl	8006a8c <malloc>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	61e0      	str	r0, [r4, #28]
 8006c0c:	b920      	cbnz	r0, 8006c18 <_Balloc+0x20>
 8006c0e:	4b18      	ldr	r3, [pc, #96]	@ (8006c70 <_Balloc+0x78>)
 8006c10:	4818      	ldr	r0, [pc, #96]	@ (8006c74 <_Balloc+0x7c>)
 8006c12:	216b      	movs	r1, #107	@ 0x6b
 8006c14:	f001 fd7c 	bl	8008710 <__assert_func>
 8006c18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c1c:	6006      	str	r6, [r0, #0]
 8006c1e:	60c6      	str	r6, [r0, #12]
 8006c20:	69e6      	ldr	r6, [r4, #28]
 8006c22:	68f3      	ldr	r3, [r6, #12]
 8006c24:	b183      	cbz	r3, 8006c48 <_Balloc+0x50>
 8006c26:	69e3      	ldr	r3, [r4, #28]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006c2e:	b9b8      	cbnz	r0, 8006c60 <_Balloc+0x68>
 8006c30:	2101      	movs	r1, #1
 8006c32:	fa01 f605 	lsl.w	r6, r1, r5
 8006c36:	1d72      	adds	r2, r6, #5
 8006c38:	0092      	lsls	r2, r2, #2
 8006c3a:	4620      	mov	r0, r4
 8006c3c:	f001 fd86 	bl	800874c <_calloc_r>
 8006c40:	b160      	cbz	r0, 8006c5c <_Balloc+0x64>
 8006c42:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006c46:	e00e      	b.n	8006c66 <_Balloc+0x6e>
 8006c48:	2221      	movs	r2, #33	@ 0x21
 8006c4a:	2104      	movs	r1, #4
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f001 fd7d 	bl	800874c <_calloc_r>
 8006c52:	69e3      	ldr	r3, [r4, #28]
 8006c54:	60f0      	str	r0, [r6, #12]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1e4      	bne.n	8006c26 <_Balloc+0x2e>
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	bd70      	pop	{r4, r5, r6, pc}
 8006c60:	6802      	ldr	r2, [r0, #0]
 8006c62:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006c66:	2300      	movs	r3, #0
 8006c68:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006c6c:	e7f7      	b.n	8006c5e <_Balloc+0x66>
 8006c6e:	bf00      	nop
 8006c70:	080094a6 	.word	0x080094a6
 8006c74:	08009526 	.word	0x08009526

08006c78 <_Bfree>:
 8006c78:	b570      	push	{r4, r5, r6, lr}
 8006c7a:	69c6      	ldr	r6, [r0, #28]
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	b976      	cbnz	r6, 8006ca0 <_Bfree+0x28>
 8006c82:	2010      	movs	r0, #16
 8006c84:	f7ff ff02 	bl	8006a8c <malloc>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	61e8      	str	r0, [r5, #28]
 8006c8c:	b920      	cbnz	r0, 8006c98 <_Bfree+0x20>
 8006c8e:	4b09      	ldr	r3, [pc, #36]	@ (8006cb4 <_Bfree+0x3c>)
 8006c90:	4809      	ldr	r0, [pc, #36]	@ (8006cb8 <_Bfree+0x40>)
 8006c92:	218f      	movs	r1, #143	@ 0x8f
 8006c94:	f001 fd3c 	bl	8008710 <__assert_func>
 8006c98:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c9c:	6006      	str	r6, [r0, #0]
 8006c9e:	60c6      	str	r6, [r0, #12]
 8006ca0:	b13c      	cbz	r4, 8006cb2 <_Bfree+0x3a>
 8006ca2:	69eb      	ldr	r3, [r5, #28]
 8006ca4:	6862      	ldr	r2, [r4, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cac:	6021      	str	r1, [r4, #0]
 8006cae:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006cb2:	bd70      	pop	{r4, r5, r6, pc}
 8006cb4:	080094a6 	.word	0x080094a6
 8006cb8:	08009526 	.word	0x08009526

08006cbc <__multadd>:
 8006cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cc0:	690d      	ldr	r5, [r1, #16]
 8006cc2:	4607      	mov	r7, r0
 8006cc4:	460c      	mov	r4, r1
 8006cc6:	461e      	mov	r6, r3
 8006cc8:	f101 0c14 	add.w	ip, r1, #20
 8006ccc:	2000      	movs	r0, #0
 8006cce:	f8dc 3000 	ldr.w	r3, [ip]
 8006cd2:	b299      	uxth	r1, r3
 8006cd4:	fb02 6101 	mla	r1, r2, r1, r6
 8006cd8:	0c1e      	lsrs	r6, r3, #16
 8006cda:	0c0b      	lsrs	r3, r1, #16
 8006cdc:	fb02 3306 	mla	r3, r2, r6, r3
 8006ce0:	b289      	uxth	r1, r1
 8006ce2:	3001      	adds	r0, #1
 8006ce4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ce8:	4285      	cmp	r5, r0
 8006cea:	f84c 1b04 	str.w	r1, [ip], #4
 8006cee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006cf2:	dcec      	bgt.n	8006cce <__multadd+0x12>
 8006cf4:	b30e      	cbz	r6, 8006d3a <__multadd+0x7e>
 8006cf6:	68a3      	ldr	r3, [r4, #8]
 8006cf8:	42ab      	cmp	r3, r5
 8006cfa:	dc19      	bgt.n	8006d30 <__multadd+0x74>
 8006cfc:	6861      	ldr	r1, [r4, #4]
 8006cfe:	4638      	mov	r0, r7
 8006d00:	3101      	adds	r1, #1
 8006d02:	f7ff ff79 	bl	8006bf8 <_Balloc>
 8006d06:	4680      	mov	r8, r0
 8006d08:	b928      	cbnz	r0, 8006d16 <__multadd+0x5a>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d40 <__multadd+0x84>)
 8006d0e:	480d      	ldr	r0, [pc, #52]	@ (8006d44 <__multadd+0x88>)
 8006d10:	21ba      	movs	r1, #186	@ 0xba
 8006d12:	f001 fcfd 	bl	8008710 <__assert_func>
 8006d16:	6922      	ldr	r2, [r4, #16]
 8006d18:	3202      	adds	r2, #2
 8006d1a:	f104 010c 	add.w	r1, r4, #12
 8006d1e:	0092      	lsls	r2, r2, #2
 8006d20:	300c      	adds	r0, #12
 8006d22:	f001 fcdf 	bl	80086e4 <memcpy>
 8006d26:	4621      	mov	r1, r4
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f7ff ffa5 	bl	8006c78 <_Bfree>
 8006d2e:	4644      	mov	r4, r8
 8006d30:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006d34:	3501      	adds	r5, #1
 8006d36:	615e      	str	r6, [r3, #20]
 8006d38:	6125      	str	r5, [r4, #16]
 8006d3a:	4620      	mov	r0, r4
 8006d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d40:	08009515 	.word	0x08009515
 8006d44:	08009526 	.word	0x08009526

08006d48 <__s2b>:
 8006d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	4615      	mov	r5, r2
 8006d50:	461f      	mov	r7, r3
 8006d52:	2209      	movs	r2, #9
 8006d54:	3308      	adds	r3, #8
 8006d56:	4606      	mov	r6, r0
 8006d58:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	2201      	movs	r2, #1
 8006d60:	429a      	cmp	r2, r3
 8006d62:	db09      	blt.n	8006d78 <__s2b+0x30>
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7ff ff47 	bl	8006bf8 <_Balloc>
 8006d6a:	b940      	cbnz	r0, 8006d7e <__s2b+0x36>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	4b19      	ldr	r3, [pc, #100]	@ (8006dd4 <__s2b+0x8c>)
 8006d70:	4819      	ldr	r0, [pc, #100]	@ (8006dd8 <__s2b+0x90>)
 8006d72:	21d3      	movs	r1, #211	@ 0xd3
 8006d74:	f001 fccc 	bl	8008710 <__assert_func>
 8006d78:	0052      	lsls	r2, r2, #1
 8006d7a:	3101      	adds	r1, #1
 8006d7c:	e7f0      	b.n	8006d60 <__s2b+0x18>
 8006d7e:	9b08      	ldr	r3, [sp, #32]
 8006d80:	6143      	str	r3, [r0, #20]
 8006d82:	2d09      	cmp	r5, #9
 8006d84:	f04f 0301 	mov.w	r3, #1
 8006d88:	6103      	str	r3, [r0, #16]
 8006d8a:	dd16      	ble.n	8006dba <__s2b+0x72>
 8006d8c:	f104 0909 	add.w	r9, r4, #9
 8006d90:	46c8      	mov	r8, r9
 8006d92:	442c      	add	r4, r5
 8006d94:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006d98:	4601      	mov	r1, r0
 8006d9a:	3b30      	subs	r3, #48	@ 0x30
 8006d9c:	220a      	movs	r2, #10
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f7ff ff8c 	bl	8006cbc <__multadd>
 8006da4:	45a0      	cmp	r8, r4
 8006da6:	d1f5      	bne.n	8006d94 <__s2b+0x4c>
 8006da8:	f1a5 0408 	sub.w	r4, r5, #8
 8006dac:	444c      	add	r4, r9
 8006dae:	1b2d      	subs	r5, r5, r4
 8006db0:	1963      	adds	r3, r4, r5
 8006db2:	42bb      	cmp	r3, r7
 8006db4:	db04      	blt.n	8006dc0 <__s2b+0x78>
 8006db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dba:	340a      	adds	r4, #10
 8006dbc:	2509      	movs	r5, #9
 8006dbe:	e7f6      	b.n	8006dae <__s2b+0x66>
 8006dc0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006dc4:	4601      	mov	r1, r0
 8006dc6:	3b30      	subs	r3, #48	@ 0x30
 8006dc8:	220a      	movs	r2, #10
 8006dca:	4630      	mov	r0, r6
 8006dcc:	f7ff ff76 	bl	8006cbc <__multadd>
 8006dd0:	e7ee      	b.n	8006db0 <__s2b+0x68>
 8006dd2:	bf00      	nop
 8006dd4:	08009515 	.word	0x08009515
 8006dd8:	08009526 	.word	0x08009526

08006ddc <__hi0bits>:
 8006ddc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006de0:	4603      	mov	r3, r0
 8006de2:	bf36      	itet	cc
 8006de4:	0403      	lslcc	r3, r0, #16
 8006de6:	2000      	movcs	r0, #0
 8006de8:	2010      	movcc	r0, #16
 8006dea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006dee:	bf3c      	itt	cc
 8006df0:	021b      	lslcc	r3, r3, #8
 8006df2:	3008      	addcc	r0, #8
 8006df4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006df8:	bf3c      	itt	cc
 8006dfa:	011b      	lslcc	r3, r3, #4
 8006dfc:	3004      	addcc	r0, #4
 8006dfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e02:	bf3c      	itt	cc
 8006e04:	009b      	lslcc	r3, r3, #2
 8006e06:	3002      	addcc	r0, #2
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	db05      	blt.n	8006e18 <__hi0bits+0x3c>
 8006e0c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006e10:	f100 0001 	add.w	r0, r0, #1
 8006e14:	bf08      	it	eq
 8006e16:	2020      	moveq	r0, #32
 8006e18:	4770      	bx	lr

08006e1a <__lo0bits>:
 8006e1a:	6803      	ldr	r3, [r0, #0]
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	f013 0007 	ands.w	r0, r3, #7
 8006e22:	d00b      	beq.n	8006e3c <__lo0bits+0x22>
 8006e24:	07d9      	lsls	r1, r3, #31
 8006e26:	d421      	bmi.n	8006e6c <__lo0bits+0x52>
 8006e28:	0798      	lsls	r0, r3, #30
 8006e2a:	bf49      	itett	mi
 8006e2c:	085b      	lsrmi	r3, r3, #1
 8006e2e:	089b      	lsrpl	r3, r3, #2
 8006e30:	2001      	movmi	r0, #1
 8006e32:	6013      	strmi	r3, [r2, #0]
 8006e34:	bf5c      	itt	pl
 8006e36:	6013      	strpl	r3, [r2, #0]
 8006e38:	2002      	movpl	r0, #2
 8006e3a:	4770      	bx	lr
 8006e3c:	b299      	uxth	r1, r3
 8006e3e:	b909      	cbnz	r1, 8006e44 <__lo0bits+0x2a>
 8006e40:	0c1b      	lsrs	r3, r3, #16
 8006e42:	2010      	movs	r0, #16
 8006e44:	b2d9      	uxtb	r1, r3
 8006e46:	b909      	cbnz	r1, 8006e4c <__lo0bits+0x32>
 8006e48:	3008      	adds	r0, #8
 8006e4a:	0a1b      	lsrs	r3, r3, #8
 8006e4c:	0719      	lsls	r1, r3, #28
 8006e4e:	bf04      	itt	eq
 8006e50:	091b      	lsreq	r3, r3, #4
 8006e52:	3004      	addeq	r0, #4
 8006e54:	0799      	lsls	r1, r3, #30
 8006e56:	bf04      	itt	eq
 8006e58:	089b      	lsreq	r3, r3, #2
 8006e5a:	3002      	addeq	r0, #2
 8006e5c:	07d9      	lsls	r1, r3, #31
 8006e5e:	d403      	bmi.n	8006e68 <__lo0bits+0x4e>
 8006e60:	085b      	lsrs	r3, r3, #1
 8006e62:	f100 0001 	add.w	r0, r0, #1
 8006e66:	d003      	beq.n	8006e70 <__lo0bits+0x56>
 8006e68:	6013      	str	r3, [r2, #0]
 8006e6a:	4770      	bx	lr
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	4770      	bx	lr
 8006e70:	2020      	movs	r0, #32
 8006e72:	4770      	bx	lr

08006e74 <__i2b>:
 8006e74:	b510      	push	{r4, lr}
 8006e76:	460c      	mov	r4, r1
 8006e78:	2101      	movs	r1, #1
 8006e7a:	f7ff febd 	bl	8006bf8 <_Balloc>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	b928      	cbnz	r0, 8006e8e <__i2b+0x1a>
 8006e82:	4b05      	ldr	r3, [pc, #20]	@ (8006e98 <__i2b+0x24>)
 8006e84:	4805      	ldr	r0, [pc, #20]	@ (8006e9c <__i2b+0x28>)
 8006e86:	f240 1145 	movw	r1, #325	@ 0x145
 8006e8a:	f001 fc41 	bl	8008710 <__assert_func>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	6144      	str	r4, [r0, #20]
 8006e92:	6103      	str	r3, [r0, #16]
 8006e94:	bd10      	pop	{r4, pc}
 8006e96:	bf00      	nop
 8006e98:	08009515 	.word	0x08009515
 8006e9c:	08009526 	.word	0x08009526

08006ea0 <__multiply>:
 8006ea0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	690a      	ldr	r2, [r1, #16]
 8006ea8:	6923      	ldr	r3, [r4, #16]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	bfa8      	it	ge
 8006eae:	4623      	movge	r3, r4
 8006eb0:	460f      	mov	r7, r1
 8006eb2:	bfa4      	itt	ge
 8006eb4:	460c      	movge	r4, r1
 8006eb6:	461f      	movge	r7, r3
 8006eb8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006ebc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006ec0:	68a3      	ldr	r3, [r4, #8]
 8006ec2:	6861      	ldr	r1, [r4, #4]
 8006ec4:	eb0a 0609 	add.w	r6, sl, r9
 8006ec8:	42b3      	cmp	r3, r6
 8006eca:	b085      	sub	sp, #20
 8006ecc:	bfb8      	it	lt
 8006ece:	3101      	addlt	r1, #1
 8006ed0:	f7ff fe92 	bl	8006bf8 <_Balloc>
 8006ed4:	b930      	cbnz	r0, 8006ee4 <__multiply+0x44>
 8006ed6:	4602      	mov	r2, r0
 8006ed8:	4b44      	ldr	r3, [pc, #272]	@ (8006fec <__multiply+0x14c>)
 8006eda:	4845      	ldr	r0, [pc, #276]	@ (8006ff0 <__multiply+0x150>)
 8006edc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006ee0:	f001 fc16 	bl	8008710 <__assert_func>
 8006ee4:	f100 0514 	add.w	r5, r0, #20
 8006ee8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006eec:	462b      	mov	r3, r5
 8006eee:	2200      	movs	r2, #0
 8006ef0:	4543      	cmp	r3, r8
 8006ef2:	d321      	bcc.n	8006f38 <__multiply+0x98>
 8006ef4:	f107 0114 	add.w	r1, r7, #20
 8006ef8:	f104 0214 	add.w	r2, r4, #20
 8006efc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006f00:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006f04:	9302      	str	r3, [sp, #8]
 8006f06:	1b13      	subs	r3, r2, r4
 8006f08:	3b15      	subs	r3, #21
 8006f0a:	f023 0303 	bic.w	r3, r3, #3
 8006f0e:	3304      	adds	r3, #4
 8006f10:	f104 0715 	add.w	r7, r4, #21
 8006f14:	42ba      	cmp	r2, r7
 8006f16:	bf38      	it	cc
 8006f18:	2304      	movcc	r3, #4
 8006f1a:	9301      	str	r3, [sp, #4]
 8006f1c:	9b02      	ldr	r3, [sp, #8]
 8006f1e:	9103      	str	r1, [sp, #12]
 8006f20:	428b      	cmp	r3, r1
 8006f22:	d80c      	bhi.n	8006f3e <__multiply+0x9e>
 8006f24:	2e00      	cmp	r6, #0
 8006f26:	dd03      	ble.n	8006f30 <__multiply+0x90>
 8006f28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d05b      	beq.n	8006fe8 <__multiply+0x148>
 8006f30:	6106      	str	r6, [r0, #16]
 8006f32:	b005      	add	sp, #20
 8006f34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f38:	f843 2b04 	str.w	r2, [r3], #4
 8006f3c:	e7d8      	b.n	8006ef0 <__multiply+0x50>
 8006f3e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f42:	f1ba 0f00 	cmp.w	sl, #0
 8006f46:	d024      	beq.n	8006f92 <__multiply+0xf2>
 8006f48:	f104 0e14 	add.w	lr, r4, #20
 8006f4c:	46a9      	mov	r9, r5
 8006f4e:	f04f 0c00 	mov.w	ip, #0
 8006f52:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006f56:	f8d9 3000 	ldr.w	r3, [r9]
 8006f5a:	fa1f fb87 	uxth.w	fp, r7
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	fb0a 330b 	mla	r3, sl, fp, r3
 8006f64:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006f68:	f8d9 7000 	ldr.w	r7, [r9]
 8006f6c:	4463      	add	r3, ip
 8006f6e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f72:	fb0a c70b 	mla	r7, sl, fp, ip
 8006f76:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006f80:	4572      	cmp	r2, lr
 8006f82:	f849 3b04 	str.w	r3, [r9], #4
 8006f86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006f8a:	d8e2      	bhi.n	8006f52 <__multiply+0xb2>
 8006f8c:	9b01      	ldr	r3, [sp, #4]
 8006f8e:	f845 c003 	str.w	ip, [r5, r3]
 8006f92:	9b03      	ldr	r3, [sp, #12]
 8006f94:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006f98:	3104      	adds	r1, #4
 8006f9a:	f1b9 0f00 	cmp.w	r9, #0
 8006f9e:	d021      	beq.n	8006fe4 <__multiply+0x144>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	f104 0c14 	add.w	ip, r4, #20
 8006fa6:	46ae      	mov	lr, r5
 8006fa8:	f04f 0a00 	mov.w	sl, #0
 8006fac:	f8bc b000 	ldrh.w	fp, [ip]
 8006fb0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006fb4:	fb09 770b 	mla	r7, r9, fp, r7
 8006fb8:	4457      	add	r7, sl
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006fc0:	f84e 3b04 	str.w	r3, [lr], #4
 8006fc4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fc8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fcc:	f8be 3000 	ldrh.w	r3, [lr]
 8006fd0:	fb09 330a 	mla	r3, r9, sl, r3
 8006fd4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006fd8:	4562      	cmp	r2, ip
 8006fda:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fde:	d8e5      	bhi.n	8006fac <__multiply+0x10c>
 8006fe0:	9f01      	ldr	r7, [sp, #4]
 8006fe2:	51eb      	str	r3, [r5, r7]
 8006fe4:	3504      	adds	r5, #4
 8006fe6:	e799      	b.n	8006f1c <__multiply+0x7c>
 8006fe8:	3e01      	subs	r6, #1
 8006fea:	e79b      	b.n	8006f24 <__multiply+0x84>
 8006fec:	08009515 	.word	0x08009515
 8006ff0:	08009526 	.word	0x08009526

08006ff4 <__pow5mult>:
 8006ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff8:	4615      	mov	r5, r2
 8006ffa:	f012 0203 	ands.w	r2, r2, #3
 8006ffe:	4607      	mov	r7, r0
 8007000:	460e      	mov	r6, r1
 8007002:	d007      	beq.n	8007014 <__pow5mult+0x20>
 8007004:	4c25      	ldr	r4, [pc, #148]	@ (800709c <__pow5mult+0xa8>)
 8007006:	3a01      	subs	r2, #1
 8007008:	2300      	movs	r3, #0
 800700a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800700e:	f7ff fe55 	bl	8006cbc <__multadd>
 8007012:	4606      	mov	r6, r0
 8007014:	10ad      	asrs	r5, r5, #2
 8007016:	d03d      	beq.n	8007094 <__pow5mult+0xa0>
 8007018:	69fc      	ldr	r4, [r7, #28]
 800701a:	b97c      	cbnz	r4, 800703c <__pow5mult+0x48>
 800701c:	2010      	movs	r0, #16
 800701e:	f7ff fd35 	bl	8006a8c <malloc>
 8007022:	4602      	mov	r2, r0
 8007024:	61f8      	str	r0, [r7, #28]
 8007026:	b928      	cbnz	r0, 8007034 <__pow5mult+0x40>
 8007028:	4b1d      	ldr	r3, [pc, #116]	@ (80070a0 <__pow5mult+0xac>)
 800702a:	481e      	ldr	r0, [pc, #120]	@ (80070a4 <__pow5mult+0xb0>)
 800702c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007030:	f001 fb6e 	bl	8008710 <__assert_func>
 8007034:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007038:	6004      	str	r4, [r0, #0]
 800703a:	60c4      	str	r4, [r0, #12]
 800703c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007040:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007044:	b94c      	cbnz	r4, 800705a <__pow5mult+0x66>
 8007046:	f240 2171 	movw	r1, #625	@ 0x271
 800704a:	4638      	mov	r0, r7
 800704c:	f7ff ff12 	bl	8006e74 <__i2b>
 8007050:	2300      	movs	r3, #0
 8007052:	f8c8 0008 	str.w	r0, [r8, #8]
 8007056:	4604      	mov	r4, r0
 8007058:	6003      	str	r3, [r0, #0]
 800705a:	f04f 0900 	mov.w	r9, #0
 800705e:	07eb      	lsls	r3, r5, #31
 8007060:	d50a      	bpl.n	8007078 <__pow5mult+0x84>
 8007062:	4631      	mov	r1, r6
 8007064:	4622      	mov	r2, r4
 8007066:	4638      	mov	r0, r7
 8007068:	f7ff ff1a 	bl	8006ea0 <__multiply>
 800706c:	4631      	mov	r1, r6
 800706e:	4680      	mov	r8, r0
 8007070:	4638      	mov	r0, r7
 8007072:	f7ff fe01 	bl	8006c78 <_Bfree>
 8007076:	4646      	mov	r6, r8
 8007078:	106d      	asrs	r5, r5, #1
 800707a:	d00b      	beq.n	8007094 <__pow5mult+0xa0>
 800707c:	6820      	ldr	r0, [r4, #0]
 800707e:	b938      	cbnz	r0, 8007090 <__pow5mult+0x9c>
 8007080:	4622      	mov	r2, r4
 8007082:	4621      	mov	r1, r4
 8007084:	4638      	mov	r0, r7
 8007086:	f7ff ff0b 	bl	8006ea0 <__multiply>
 800708a:	6020      	str	r0, [r4, #0]
 800708c:	f8c0 9000 	str.w	r9, [r0]
 8007090:	4604      	mov	r4, r0
 8007092:	e7e4      	b.n	800705e <__pow5mult+0x6a>
 8007094:	4630      	mov	r0, r6
 8007096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800709a:	bf00      	nop
 800709c:	08009580 	.word	0x08009580
 80070a0:	080094a6 	.word	0x080094a6
 80070a4:	08009526 	.word	0x08009526

080070a8 <__lshift>:
 80070a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070ac:	460c      	mov	r4, r1
 80070ae:	6849      	ldr	r1, [r1, #4]
 80070b0:	6923      	ldr	r3, [r4, #16]
 80070b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80070b6:	68a3      	ldr	r3, [r4, #8]
 80070b8:	4607      	mov	r7, r0
 80070ba:	4691      	mov	r9, r2
 80070bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80070c0:	f108 0601 	add.w	r6, r8, #1
 80070c4:	42b3      	cmp	r3, r6
 80070c6:	db0b      	blt.n	80070e0 <__lshift+0x38>
 80070c8:	4638      	mov	r0, r7
 80070ca:	f7ff fd95 	bl	8006bf8 <_Balloc>
 80070ce:	4605      	mov	r5, r0
 80070d0:	b948      	cbnz	r0, 80070e6 <__lshift+0x3e>
 80070d2:	4602      	mov	r2, r0
 80070d4:	4b28      	ldr	r3, [pc, #160]	@ (8007178 <__lshift+0xd0>)
 80070d6:	4829      	ldr	r0, [pc, #164]	@ (800717c <__lshift+0xd4>)
 80070d8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80070dc:	f001 fb18 	bl	8008710 <__assert_func>
 80070e0:	3101      	adds	r1, #1
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	e7ee      	b.n	80070c4 <__lshift+0x1c>
 80070e6:	2300      	movs	r3, #0
 80070e8:	f100 0114 	add.w	r1, r0, #20
 80070ec:	f100 0210 	add.w	r2, r0, #16
 80070f0:	4618      	mov	r0, r3
 80070f2:	4553      	cmp	r3, sl
 80070f4:	db33      	blt.n	800715e <__lshift+0xb6>
 80070f6:	6920      	ldr	r0, [r4, #16]
 80070f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80070fc:	f104 0314 	add.w	r3, r4, #20
 8007100:	f019 091f 	ands.w	r9, r9, #31
 8007104:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007108:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800710c:	d02b      	beq.n	8007166 <__lshift+0xbe>
 800710e:	f1c9 0e20 	rsb	lr, r9, #32
 8007112:	468a      	mov	sl, r1
 8007114:	2200      	movs	r2, #0
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	fa00 f009 	lsl.w	r0, r0, r9
 800711c:	4310      	orrs	r0, r2
 800711e:	f84a 0b04 	str.w	r0, [sl], #4
 8007122:	f853 2b04 	ldr.w	r2, [r3], #4
 8007126:	459c      	cmp	ip, r3
 8007128:	fa22 f20e 	lsr.w	r2, r2, lr
 800712c:	d8f3      	bhi.n	8007116 <__lshift+0x6e>
 800712e:	ebac 0304 	sub.w	r3, ip, r4
 8007132:	3b15      	subs	r3, #21
 8007134:	f023 0303 	bic.w	r3, r3, #3
 8007138:	3304      	adds	r3, #4
 800713a:	f104 0015 	add.w	r0, r4, #21
 800713e:	4584      	cmp	ip, r0
 8007140:	bf38      	it	cc
 8007142:	2304      	movcc	r3, #4
 8007144:	50ca      	str	r2, [r1, r3]
 8007146:	b10a      	cbz	r2, 800714c <__lshift+0xa4>
 8007148:	f108 0602 	add.w	r6, r8, #2
 800714c:	3e01      	subs	r6, #1
 800714e:	4638      	mov	r0, r7
 8007150:	612e      	str	r6, [r5, #16]
 8007152:	4621      	mov	r1, r4
 8007154:	f7ff fd90 	bl	8006c78 <_Bfree>
 8007158:	4628      	mov	r0, r5
 800715a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800715e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007162:	3301      	adds	r3, #1
 8007164:	e7c5      	b.n	80070f2 <__lshift+0x4a>
 8007166:	3904      	subs	r1, #4
 8007168:	f853 2b04 	ldr.w	r2, [r3], #4
 800716c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007170:	459c      	cmp	ip, r3
 8007172:	d8f9      	bhi.n	8007168 <__lshift+0xc0>
 8007174:	e7ea      	b.n	800714c <__lshift+0xa4>
 8007176:	bf00      	nop
 8007178:	08009515 	.word	0x08009515
 800717c:	08009526 	.word	0x08009526

08007180 <__mcmp>:
 8007180:	690a      	ldr	r2, [r1, #16]
 8007182:	4603      	mov	r3, r0
 8007184:	6900      	ldr	r0, [r0, #16]
 8007186:	1a80      	subs	r0, r0, r2
 8007188:	b530      	push	{r4, r5, lr}
 800718a:	d10e      	bne.n	80071aa <__mcmp+0x2a>
 800718c:	3314      	adds	r3, #20
 800718e:	3114      	adds	r1, #20
 8007190:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007194:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007198:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800719c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071a0:	4295      	cmp	r5, r2
 80071a2:	d003      	beq.n	80071ac <__mcmp+0x2c>
 80071a4:	d205      	bcs.n	80071b2 <__mcmp+0x32>
 80071a6:	f04f 30ff 	mov.w	r0, #4294967295
 80071aa:	bd30      	pop	{r4, r5, pc}
 80071ac:	42a3      	cmp	r3, r4
 80071ae:	d3f3      	bcc.n	8007198 <__mcmp+0x18>
 80071b0:	e7fb      	b.n	80071aa <__mcmp+0x2a>
 80071b2:	2001      	movs	r0, #1
 80071b4:	e7f9      	b.n	80071aa <__mcmp+0x2a>
	...

080071b8 <__mdiff>:
 80071b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	4689      	mov	r9, r1
 80071be:	4606      	mov	r6, r0
 80071c0:	4611      	mov	r1, r2
 80071c2:	4648      	mov	r0, r9
 80071c4:	4614      	mov	r4, r2
 80071c6:	f7ff ffdb 	bl	8007180 <__mcmp>
 80071ca:	1e05      	subs	r5, r0, #0
 80071cc:	d112      	bne.n	80071f4 <__mdiff+0x3c>
 80071ce:	4629      	mov	r1, r5
 80071d0:	4630      	mov	r0, r6
 80071d2:	f7ff fd11 	bl	8006bf8 <_Balloc>
 80071d6:	4602      	mov	r2, r0
 80071d8:	b928      	cbnz	r0, 80071e6 <__mdiff+0x2e>
 80071da:	4b3f      	ldr	r3, [pc, #252]	@ (80072d8 <__mdiff+0x120>)
 80071dc:	f240 2137 	movw	r1, #567	@ 0x237
 80071e0:	483e      	ldr	r0, [pc, #248]	@ (80072dc <__mdiff+0x124>)
 80071e2:	f001 fa95 	bl	8008710 <__assert_func>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80071ec:	4610      	mov	r0, r2
 80071ee:	b003      	add	sp, #12
 80071f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f4:	bfbc      	itt	lt
 80071f6:	464b      	movlt	r3, r9
 80071f8:	46a1      	movlt	r9, r4
 80071fa:	4630      	mov	r0, r6
 80071fc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007200:	bfba      	itte	lt
 8007202:	461c      	movlt	r4, r3
 8007204:	2501      	movlt	r5, #1
 8007206:	2500      	movge	r5, #0
 8007208:	f7ff fcf6 	bl	8006bf8 <_Balloc>
 800720c:	4602      	mov	r2, r0
 800720e:	b918      	cbnz	r0, 8007218 <__mdiff+0x60>
 8007210:	4b31      	ldr	r3, [pc, #196]	@ (80072d8 <__mdiff+0x120>)
 8007212:	f240 2145 	movw	r1, #581	@ 0x245
 8007216:	e7e3      	b.n	80071e0 <__mdiff+0x28>
 8007218:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800721c:	6926      	ldr	r6, [r4, #16]
 800721e:	60c5      	str	r5, [r0, #12]
 8007220:	f109 0310 	add.w	r3, r9, #16
 8007224:	f109 0514 	add.w	r5, r9, #20
 8007228:	f104 0e14 	add.w	lr, r4, #20
 800722c:	f100 0b14 	add.w	fp, r0, #20
 8007230:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007234:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007238:	9301      	str	r3, [sp, #4]
 800723a:	46d9      	mov	r9, fp
 800723c:	f04f 0c00 	mov.w	ip, #0
 8007240:	9b01      	ldr	r3, [sp, #4]
 8007242:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007246:	f853 af04 	ldr.w	sl, [r3, #4]!
 800724a:	9301      	str	r3, [sp, #4]
 800724c:	fa1f f38a 	uxth.w	r3, sl
 8007250:	4619      	mov	r1, r3
 8007252:	b283      	uxth	r3, r0
 8007254:	1acb      	subs	r3, r1, r3
 8007256:	0c00      	lsrs	r0, r0, #16
 8007258:	4463      	add	r3, ip
 800725a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800725e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007262:	b29b      	uxth	r3, r3
 8007264:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007268:	4576      	cmp	r6, lr
 800726a:	f849 3b04 	str.w	r3, [r9], #4
 800726e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007272:	d8e5      	bhi.n	8007240 <__mdiff+0x88>
 8007274:	1b33      	subs	r3, r6, r4
 8007276:	3b15      	subs	r3, #21
 8007278:	f023 0303 	bic.w	r3, r3, #3
 800727c:	3415      	adds	r4, #21
 800727e:	3304      	adds	r3, #4
 8007280:	42a6      	cmp	r6, r4
 8007282:	bf38      	it	cc
 8007284:	2304      	movcc	r3, #4
 8007286:	441d      	add	r5, r3
 8007288:	445b      	add	r3, fp
 800728a:	461e      	mov	r6, r3
 800728c:	462c      	mov	r4, r5
 800728e:	4544      	cmp	r4, r8
 8007290:	d30e      	bcc.n	80072b0 <__mdiff+0xf8>
 8007292:	f108 0103 	add.w	r1, r8, #3
 8007296:	1b49      	subs	r1, r1, r5
 8007298:	f021 0103 	bic.w	r1, r1, #3
 800729c:	3d03      	subs	r5, #3
 800729e:	45a8      	cmp	r8, r5
 80072a0:	bf38      	it	cc
 80072a2:	2100      	movcc	r1, #0
 80072a4:	440b      	add	r3, r1
 80072a6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072aa:	b191      	cbz	r1, 80072d2 <__mdiff+0x11a>
 80072ac:	6117      	str	r7, [r2, #16]
 80072ae:	e79d      	b.n	80071ec <__mdiff+0x34>
 80072b0:	f854 1b04 	ldr.w	r1, [r4], #4
 80072b4:	46e6      	mov	lr, ip
 80072b6:	0c08      	lsrs	r0, r1, #16
 80072b8:	fa1c fc81 	uxtah	ip, ip, r1
 80072bc:	4471      	add	r1, lr
 80072be:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80072c2:	b289      	uxth	r1, r1
 80072c4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80072c8:	f846 1b04 	str.w	r1, [r6], #4
 80072cc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072d0:	e7dd      	b.n	800728e <__mdiff+0xd6>
 80072d2:	3f01      	subs	r7, #1
 80072d4:	e7e7      	b.n	80072a6 <__mdiff+0xee>
 80072d6:	bf00      	nop
 80072d8:	08009515 	.word	0x08009515
 80072dc:	08009526 	.word	0x08009526

080072e0 <__ulp>:
 80072e0:	b082      	sub	sp, #8
 80072e2:	ed8d 0b00 	vstr	d0, [sp]
 80072e6:	9a01      	ldr	r2, [sp, #4]
 80072e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007328 <__ulp+0x48>)
 80072ea:	4013      	ands	r3, r2
 80072ec:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	dc08      	bgt.n	8007306 <__ulp+0x26>
 80072f4:	425b      	negs	r3, r3
 80072f6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80072fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 80072fe:	da04      	bge.n	800730a <__ulp+0x2a>
 8007300:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007304:	4113      	asrs	r3, r2
 8007306:	2200      	movs	r2, #0
 8007308:	e008      	b.n	800731c <__ulp+0x3c>
 800730a:	f1a2 0314 	sub.w	r3, r2, #20
 800730e:	2b1e      	cmp	r3, #30
 8007310:	bfda      	itte	le
 8007312:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007316:	40da      	lsrle	r2, r3
 8007318:	2201      	movgt	r2, #1
 800731a:	2300      	movs	r3, #0
 800731c:	4619      	mov	r1, r3
 800731e:	4610      	mov	r0, r2
 8007320:	ec41 0b10 	vmov	d0, r0, r1
 8007324:	b002      	add	sp, #8
 8007326:	4770      	bx	lr
 8007328:	7ff00000 	.word	0x7ff00000

0800732c <__b2d>:
 800732c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007330:	6906      	ldr	r6, [r0, #16]
 8007332:	f100 0814 	add.w	r8, r0, #20
 8007336:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800733a:	1f37      	subs	r7, r6, #4
 800733c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007340:	4610      	mov	r0, r2
 8007342:	f7ff fd4b 	bl	8006ddc <__hi0bits>
 8007346:	f1c0 0320 	rsb	r3, r0, #32
 800734a:	280a      	cmp	r0, #10
 800734c:	600b      	str	r3, [r1, #0]
 800734e:	491b      	ldr	r1, [pc, #108]	@ (80073bc <__b2d+0x90>)
 8007350:	dc15      	bgt.n	800737e <__b2d+0x52>
 8007352:	f1c0 0c0b 	rsb	ip, r0, #11
 8007356:	fa22 f30c 	lsr.w	r3, r2, ip
 800735a:	45b8      	cmp	r8, r7
 800735c:	ea43 0501 	orr.w	r5, r3, r1
 8007360:	bf34      	ite	cc
 8007362:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007366:	2300      	movcs	r3, #0
 8007368:	3015      	adds	r0, #21
 800736a:	fa02 f000 	lsl.w	r0, r2, r0
 800736e:	fa23 f30c 	lsr.w	r3, r3, ip
 8007372:	4303      	orrs	r3, r0
 8007374:	461c      	mov	r4, r3
 8007376:	ec45 4b10 	vmov	d0, r4, r5
 800737a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800737e:	45b8      	cmp	r8, r7
 8007380:	bf3a      	itte	cc
 8007382:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007386:	f1a6 0708 	subcc.w	r7, r6, #8
 800738a:	2300      	movcs	r3, #0
 800738c:	380b      	subs	r0, #11
 800738e:	d012      	beq.n	80073b6 <__b2d+0x8a>
 8007390:	f1c0 0120 	rsb	r1, r0, #32
 8007394:	fa23 f401 	lsr.w	r4, r3, r1
 8007398:	4082      	lsls	r2, r0
 800739a:	4322      	orrs	r2, r4
 800739c:	4547      	cmp	r7, r8
 800739e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80073a2:	bf8c      	ite	hi
 80073a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80073a8:	2200      	movls	r2, #0
 80073aa:	4083      	lsls	r3, r0
 80073ac:	40ca      	lsrs	r2, r1
 80073ae:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80073b2:	4313      	orrs	r3, r2
 80073b4:	e7de      	b.n	8007374 <__b2d+0x48>
 80073b6:	ea42 0501 	orr.w	r5, r2, r1
 80073ba:	e7db      	b.n	8007374 <__b2d+0x48>
 80073bc:	3ff00000 	.word	0x3ff00000

080073c0 <__d2b>:
 80073c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80073c4:	460f      	mov	r7, r1
 80073c6:	2101      	movs	r1, #1
 80073c8:	ec59 8b10 	vmov	r8, r9, d0
 80073cc:	4616      	mov	r6, r2
 80073ce:	f7ff fc13 	bl	8006bf8 <_Balloc>
 80073d2:	4604      	mov	r4, r0
 80073d4:	b930      	cbnz	r0, 80073e4 <__d2b+0x24>
 80073d6:	4602      	mov	r2, r0
 80073d8:	4b23      	ldr	r3, [pc, #140]	@ (8007468 <__d2b+0xa8>)
 80073da:	4824      	ldr	r0, [pc, #144]	@ (800746c <__d2b+0xac>)
 80073dc:	f240 310f 	movw	r1, #783	@ 0x30f
 80073e0:	f001 f996 	bl	8008710 <__assert_func>
 80073e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80073e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80073ec:	b10d      	cbz	r5, 80073f2 <__d2b+0x32>
 80073ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80073f2:	9301      	str	r3, [sp, #4]
 80073f4:	f1b8 0300 	subs.w	r3, r8, #0
 80073f8:	d023      	beq.n	8007442 <__d2b+0x82>
 80073fa:	4668      	mov	r0, sp
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	f7ff fd0c 	bl	8006e1a <__lo0bits>
 8007402:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007406:	b1d0      	cbz	r0, 800743e <__d2b+0x7e>
 8007408:	f1c0 0320 	rsb	r3, r0, #32
 800740c:	fa02 f303 	lsl.w	r3, r2, r3
 8007410:	430b      	orrs	r3, r1
 8007412:	40c2      	lsrs	r2, r0
 8007414:	6163      	str	r3, [r4, #20]
 8007416:	9201      	str	r2, [sp, #4]
 8007418:	9b01      	ldr	r3, [sp, #4]
 800741a:	61a3      	str	r3, [r4, #24]
 800741c:	2b00      	cmp	r3, #0
 800741e:	bf0c      	ite	eq
 8007420:	2201      	moveq	r2, #1
 8007422:	2202      	movne	r2, #2
 8007424:	6122      	str	r2, [r4, #16]
 8007426:	b1a5      	cbz	r5, 8007452 <__d2b+0x92>
 8007428:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800742c:	4405      	add	r5, r0
 800742e:	603d      	str	r5, [r7, #0]
 8007430:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007434:	6030      	str	r0, [r6, #0]
 8007436:	4620      	mov	r0, r4
 8007438:	b003      	add	sp, #12
 800743a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800743e:	6161      	str	r1, [r4, #20]
 8007440:	e7ea      	b.n	8007418 <__d2b+0x58>
 8007442:	a801      	add	r0, sp, #4
 8007444:	f7ff fce9 	bl	8006e1a <__lo0bits>
 8007448:	9b01      	ldr	r3, [sp, #4]
 800744a:	6163      	str	r3, [r4, #20]
 800744c:	3020      	adds	r0, #32
 800744e:	2201      	movs	r2, #1
 8007450:	e7e8      	b.n	8007424 <__d2b+0x64>
 8007452:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007456:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800745a:	6038      	str	r0, [r7, #0]
 800745c:	6918      	ldr	r0, [r3, #16]
 800745e:	f7ff fcbd 	bl	8006ddc <__hi0bits>
 8007462:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007466:	e7e5      	b.n	8007434 <__d2b+0x74>
 8007468:	08009515 	.word	0x08009515
 800746c:	08009526 	.word	0x08009526

08007470 <__ratio>:
 8007470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007474:	b085      	sub	sp, #20
 8007476:	e9cd 1000 	strd	r1, r0, [sp]
 800747a:	a902      	add	r1, sp, #8
 800747c:	f7ff ff56 	bl	800732c <__b2d>
 8007480:	9800      	ldr	r0, [sp, #0]
 8007482:	a903      	add	r1, sp, #12
 8007484:	ec55 4b10 	vmov	r4, r5, d0
 8007488:	f7ff ff50 	bl	800732c <__b2d>
 800748c:	9b01      	ldr	r3, [sp, #4]
 800748e:	6919      	ldr	r1, [r3, #16]
 8007490:	9b00      	ldr	r3, [sp, #0]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	1ac9      	subs	r1, r1, r3
 8007496:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	ec5b ab10 	vmov	sl, fp, d0
 80074a0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	bfce      	itee	gt
 80074a8:	462a      	movgt	r2, r5
 80074aa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80074ae:	465a      	movle	r2, fp
 80074b0:	462f      	mov	r7, r5
 80074b2:	46d9      	mov	r9, fp
 80074b4:	bfcc      	ite	gt
 80074b6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80074ba:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80074be:	464b      	mov	r3, r9
 80074c0:	4652      	mov	r2, sl
 80074c2:	4620      	mov	r0, r4
 80074c4:	4639      	mov	r1, r7
 80074c6:	f7f9 f9c1 	bl	800084c <__aeabi_ddiv>
 80074ca:	ec41 0b10 	vmov	d0, r0, r1
 80074ce:	b005      	add	sp, #20
 80074d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074d4 <__copybits>:
 80074d4:	3901      	subs	r1, #1
 80074d6:	b570      	push	{r4, r5, r6, lr}
 80074d8:	1149      	asrs	r1, r1, #5
 80074da:	6914      	ldr	r4, [r2, #16]
 80074dc:	3101      	adds	r1, #1
 80074de:	f102 0314 	add.w	r3, r2, #20
 80074e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80074e6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80074ea:	1f05      	subs	r5, r0, #4
 80074ec:	42a3      	cmp	r3, r4
 80074ee:	d30c      	bcc.n	800750a <__copybits+0x36>
 80074f0:	1aa3      	subs	r3, r4, r2
 80074f2:	3b11      	subs	r3, #17
 80074f4:	f023 0303 	bic.w	r3, r3, #3
 80074f8:	3211      	adds	r2, #17
 80074fa:	42a2      	cmp	r2, r4
 80074fc:	bf88      	it	hi
 80074fe:	2300      	movhi	r3, #0
 8007500:	4418      	add	r0, r3
 8007502:	2300      	movs	r3, #0
 8007504:	4288      	cmp	r0, r1
 8007506:	d305      	bcc.n	8007514 <__copybits+0x40>
 8007508:	bd70      	pop	{r4, r5, r6, pc}
 800750a:	f853 6b04 	ldr.w	r6, [r3], #4
 800750e:	f845 6f04 	str.w	r6, [r5, #4]!
 8007512:	e7eb      	b.n	80074ec <__copybits+0x18>
 8007514:	f840 3b04 	str.w	r3, [r0], #4
 8007518:	e7f4      	b.n	8007504 <__copybits+0x30>

0800751a <__any_on>:
 800751a:	f100 0214 	add.w	r2, r0, #20
 800751e:	6900      	ldr	r0, [r0, #16]
 8007520:	114b      	asrs	r3, r1, #5
 8007522:	4298      	cmp	r0, r3
 8007524:	b510      	push	{r4, lr}
 8007526:	db11      	blt.n	800754c <__any_on+0x32>
 8007528:	dd0a      	ble.n	8007540 <__any_on+0x26>
 800752a:	f011 011f 	ands.w	r1, r1, #31
 800752e:	d007      	beq.n	8007540 <__any_on+0x26>
 8007530:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007534:	fa24 f001 	lsr.w	r0, r4, r1
 8007538:	fa00 f101 	lsl.w	r1, r0, r1
 800753c:	428c      	cmp	r4, r1
 800753e:	d10b      	bne.n	8007558 <__any_on+0x3e>
 8007540:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007544:	4293      	cmp	r3, r2
 8007546:	d803      	bhi.n	8007550 <__any_on+0x36>
 8007548:	2000      	movs	r0, #0
 800754a:	bd10      	pop	{r4, pc}
 800754c:	4603      	mov	r3, r0
 800754e:	e7f7      	b.n	8007540 <__any_on+0x26>
 8007550:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007554:	2900      	cmp	r1, #0
 8007556:	d0f5      	beq.n	8007544 <__any_on+0x2a>
 8007558:	2001      	movs	r0, #1
 800755a:	e7f6      	b.n	800754a <__any_on+0x30>

0800755c <sulp>:
 800755c:	b570      	push	{r4, r5, r6, lr}
 800755e:	4604      	mov	r4, r0
 8007560:	460d      	mov	r5, r1
 8007562:	ec45 4b10 	vmov	d0, r4, r5
 8007566:	4616      	mov	r6, r2
 8007568:	f7ff feba 	bl	80072e0 <__ulp>
 800756c:	ec51 0b10 	vmov	r0, r1, d0
 8007570:	b17e      	cbz	r6, 8007592 <sulp+0x36>
 8007572:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007576:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800757a:	2b00      	cmp	r3, #0
 800757c:	dd09      	ble.n	8007592 <sulp+0x36>
 800757e:	051b      	lsls	r3, r3, #20
 8007580:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007584:	2400      	movs	r4, #0
 8007586:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800758a:	4622      	mov	r2, r4
 800758c:	462b      	mov	r3, r5
 800758e:	f7f9 f833 	bl	80005f8 <__aeabi_dmul>
 8007592:	ec41 0b10 	vmov	d0, r0, r1
 8007596:	bd70      	pop	{r4, r5, r6, pc}

08007598 <_strtod_l>:
 8007598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800759c:	b09f      	sub	sp, #124	@ 0x7c
 800759e:	460c      	mov	r4, r1
 80075a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80075a2:	2200      	movs	r2, #0
 80075a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80075a6:	9005      	str	r0, [sp, #20]
 80075a8:	f04f 0a00 	mov.w	sl, #0
 80075ac:	f04f 0b00 	mov.w	fp, #0
 80075b0:	460a      	mov	r2, r1
 80075b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80075b4:	7811      	ldrb	r1, [r2, #0]
 80075b6:	292b      	cmp	r1, #43	@ 0x2b
 80075b8:	d04a      	beq.n	8007650 <_strtod_l+0xb8>
 80075ba:	d838      	bhi.n	800762e <_strtod_l+0x96>
 80075bc:	290d      	cmp	r1, #13
 80075be:	d832      	bhi.n	8007626 <_strtod_l+0x8e>
 80075c0:	2908      	cmp	r1, #8
 80075c2:	d832      	bhi.n	800762a <_strtod_l+0x92>
 80075c4:	2900      	cmp	r1, #0
 80075c6:	d03b      	beq.n	8007640 <_strtod_l+0xa8>
 80075c8:	2200      	movs	r2, #0
 80075ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80075cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80075ce:	782a      	ldrb	r2, [r5, #0]
 80075d0:	2a30      	cmp	r2, #48	@ 0x30
 80075d2:	f040 80b3 	bne.w	800773c <_strtod_l+0x1a4>
 80075d6:	786a      	ldrb	r2, [r5, #1]
 80075d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80075dc:	2a58      	cmp	r2, #88	@ 0x58
 80075de:	d16e      	bne.n	80076be <_strtod_l+0x126>
 80075e0:	9302      	str	r3, [sp, #8]
 80075e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	ab1a      	add	r3, sp, #104	@ 0x68
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	4a8e      	ldr	r2, [pc, #568]	@ (8007824 <_strtod_l+0x28c>)
 80075ec:	9805      	ldr	r0, [sp, #20]
 80075ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80075f0:	a919      	add	r1, sp, #100	@ 0x64
 80075f2:	f001 f927 	bl	8008844 <__gethex>
 80075f6:	f010 060f 	ands.w	r6, r0, #15
 80075fa:	4604      	mov	r4, r0
 80075fc:	d005      	beq.n	800760a <_strtod_l+0x72>
 80075fe:	2e06      	cmp	r6, #6
 8007600:	d128      	bne.n	8007654 <_strtod_l+0xbc>
 8007602:	3501      	adds	r5, #1
 8007604:	2300      	movs	r3, #0
 8007606:	9519      	str	r5, [sp, #100]	@ 0x64
 8007608:	930b      	str	r3, [sp, #44]	@ 0x2c
 800760a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800760c:	2b00      	cmp	r3, #0
 800760e:	f040 858e 	bne.w	800812e <_strtod_l+0xb96>
 8007612:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007614:	b1cb      	cbz	r3, 800764a <_strtod_l+0xb2>
 8007616:	4652      	mov	r2, sl
 8007618:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800761c:	ec43 2b10 	vmov	d0, r2, r3
 8007620:	b01f      	add	sp, #124	@ 0x7c
 8007622:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007626:	2920      	cmp	r1, #32
 8007628:	d1ce      	bne.n	80075c8 <_strtod_l+0x30>
 800762a:	3201      	adds	r2, #1
 800762c:	e7c1      	b.n	80075b2 <_strtod_l+0x1a>
 800762e:	292d      	cmp	r1, #45	@ 0x2d
 8007630:	d1ca      	bne.n	80075c8 <_strtod_l+0x30>
 8007632:	2101      	movs	r1, #1
 8007634:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007636:	1c51      	adds	r1, r2, #1
 8007638:	9119      	str	r1, [sp, #100]	@ 0x64
 800763a:	7852      	ldrb	r2, [r2, #1]
 800763c:	2a00      	cmp	r2, #0
 800763e:	d1c5      	bne.n	80075cc <_strtod_l+0x34>
 8007640:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007642:	9419      	str	r4, [sp, #100]	@ 0x64
 8007644:	2b00      	cmp	r3, #0
 8007646:	f040 8570 	bne.w	800812a <_strtod_l+0xb92>
 800764a:	4652      	mov	r2, sl
 800764c:	465b      	mov	r3, fp
 800764e:	e7e5      	b.n	800761c <_strtod_l+0x84>
 8007650:	2100      	movs	r1, #0
 8007652:	e7ef      	b.n	8007634 <_strtod_l+0x9c>
 8007654:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007656:	b13a      	cbz	r2, 8007668 <_strtod_l+0xd0>
 8007658:	2135      	movs	r1, #53	@ 0x35
 800765a:	a81c      	add	r0, sp, #112	@ 0x70
 800765c:	f7ff ff3a 	bl	80074d4 <__copybits>
 8007660:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007662:	9805      	ldr	r0, [sp, #20]
 8007664:	f7ff fb08 	bl	8006c78 <_Bfree>
 8007668:	3e01      	subs	r6, #1
 800766a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800766c:	2e04      	cmp	r6, #4
 800766e:	d806      	bhi.n	800767e <_strtod_l+0xe6>
 8007670:	e8df f006 	tbb	[pc, r6]
 8007674:	201d0314 	.word	0x201d0314
 8007678:	14          	.byte	0x14
 8007679:	00          	.byte	0x00
 800767a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800767e:	05e1      	lsls	r1, r4, #23
 8007680:	bf48      	it	mi
 8007682:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8007686:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800768a:	0d1b      	lsrs	r3, r3, #20
 800768c:	051b      	lsls	r3, r3, #20
 800768e:	2b00      	cmp	r3, #0
 8007690:	d1bb      	bne.n	800760a <_strtod_l+0x72>
 8007692:	f7fe fb2f 	bl	8005cf4 <__errno>
 8007696:	2322      	movs	r3, #34	@ 0x22
 8007698:	6003      	str	r3, [r0, #0]
 800769a:	e7b6      	b.n	800760a <_strtod_l+0x72>
 800769c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80076a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80076a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80076a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80076ac:	e7e7      	b.n	800767e <_strtod_l+0xe6>
 80076ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800782c <_strtod_l+0x294>
 80076b2:	e7e4      	b.n	800767e <_strtod_l+0xe6>
 80076b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80076b8:	f04f 3aff 	mov.w	sl, #4294967295
 80076bc:	e7df      	b.n	800767e <_strtod_l+0xe6>
 80076be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076c0:	1c5a      	adds	r2, r3, #1
 80076c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	2b30      	cmp	r3, #48	@ 0x30
 80076c8:	d0f9      	beq.n	80076be <_strtod_l+0x126>
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d09d      	beq.n	800760a <_strtod_l+0x72>
 80076ce:	2301      	movs	r3, #1
 80076d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80076d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80076d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80076d6:	2300      	movs	r3, #0
 80076d8:	9308      	str	r3, [sp, #32]
 80076da:	930a      	str	r3, [sp, #40]	@ 0x28
 80076dc:	461f      	mov	r7, r3
 80076de:	220a      	movs	r2, #10
 80076e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80076e2:	7805      	ldrb	r5, [r0, #0]
 80076e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80076e8:	b2d9      	uxtb	r1, r3
 80076ea:	2909      	cmp	r1, #9
 80076ec:	d928      	bls.n	8007740 <_strtod_l+0x1a8>
 80076ee:	494e      	ldr	r1, [pc, #312]	@ (8007828 <_strtod_l+0x290>)
 80076f0:	2201      	movs	r2, #1
 80076f2:	f000 ffd5 	bl	80086a0 <strncmp>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d032      	beq.n	8007760 <_strtod_l+0x1c8>
 80076fa:	2000      	movs	r0, #0
 80076fc:	462a      	mov	r2, r5
 80076fe:	4681      	mov	r9, r0
 8007700:	463d      	mov	r5, r7
 8007702:	4603      	mov	r3, r0
 8007704:	2a65      	cmp	r2, #101	@ 0x65
 8007706:	d001      	beq.n	800770c <_strtod_l+0x174>
 8007708:	2a45      	cmp	r2, #69	@ 0x45
 800770a:	d114      	bne.n	8007736 <_strtod_l+0x19e>
 800770c:	b91d      	cbnz	r5, 8007716 <_strtod_l+0x17e>
 800770e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007710:	4302      	orrs	r2, r0
 8007712:	d095      	beq.n	8007640 <_strtod_l+0xa8>
 8007714:	2500      	movs	r5, #0
 8007716:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007718:	1c62      	adds	r2, r4, #1
 800771a:	9219      	str	r2, [sp, #100]	@ 0x64
 800771c:	7862      	ldrb	r2, [r4, #1]
 800771e:	2a2b      	cmp	r2, #43	@ 0x2b
 8007720:	d077      	beq.n	8007812 <_strtod_l+0x27a>
 8007722:	2a2d      	cmp	r2, #45	@ 0x2d
 8007724:	d07b      	beq.n	800781e <_strtod_l+0x286>
 8007726:	f04f 0c00 	mov.w	ip, #0
 800772a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800772e:	2909      	cmp	r1, #9
 8007730:	f240 8082 	bls.w	8007838 <_strtod_l+0x2a0>
 8007734:	9419      	str	r4, [sp, #100]	@ 0x64
 8007736:	f04f 0800 	mov.w	r8, #0
 800773a:	e0a2      	b.n	8007882 <_strtod_l+0x2ea>
 800773c:	2300      	movs	r3, #0
 800773e:	e7c7      	b.n	80076d0 <_strtod_l+0x138>
 8007740:	2f08      	cmp	r7, #8
 8007742:	bfd5      	itete	le
 8007744:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8007746:	9908      	ldrgt	r1, [sp, #32]
 8007748:	fb02 3301 	mlale	r3, r2, r1, r3
 800774c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007750:	f100 0001 	add.w	r0, r0, #1
 8007754:	bfd4      	ite	le
 8007756:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007758:	9308      	strgt	r3, [sp, #32]
 800775a:	3701      	adds	r7, #1
 800775c:	9019      	str	r0, [sp, #100]	@ 0x64
 800775e:	e7bf      	b.n	80076e0 <_strtod_l+0x148>
 8007760:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007762:	1c5a      	adds	r2, r3, #1
 8007764:	9219      	str	r2, [sp, #100]	@ 0x64
 8007766:	785a      	ldrb	r2, [r3, #1]
 8007768:	b37f      	cbz	r7, 80077ca <_strtod_l+0x232>
 800776a:	4681      	mov	r9, r0
 800776c:	463d      	mov	r5, r7
 800776e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007772:	2b09      	cmp	r3, #9
 8007774:	d912      	bls.n	800779c <_strtod_l+0x204>
 8007776:	2301      	movs	r3, #1
 8007778:	e7c4      	b.n	8007704 <_strtod_l+0x16c>
 800777a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800777c:	1c5a      	adds	r2, r3, #1
 800777e:	9219      	str	r2, [sp, #100]	@ 0x64
 8007780:	785a      	ldrb	r2, [r3, #1]
 8007782:	3001      	adds	r0, #1
 8007784:	2a30      	cmp	r2, #48	@ 0x30
 8007786:	d0f8      	beq.n	800777a <_strtod_l+0x1e2>
 8007788:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800778c:	2b08      	cmp	r3, #8
 800778e:	f200 84d3 	bhi.w	8008138 <_strtod_l+0xba0>
 8007792:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007794:	930c      	str	r3, [sp, #48]	@ 0x30
 8007796:	4681      	mov	r9, r0
 8007798:	2000      	movs	r0, #0
 800779a:	4605      	mov	r5, r0
 800779c:	3a30      	subs	r2, #48	@ 0x30
 800779e:	f100 0301 	add.w	r3, r0, #1
 80077a2:	d02a      	beq.n	80077fa <_strtod_l+0x262>
 80077a4:	4499      	add	r9, r3
 80077a6:	eb00 0c05 	add.w	ip, r0, r5
 80077aa:	462b      	mov	r3, r5
 80077ac:	210a      	movs	r1, #10
 80077ae:	4563      	cmp	r3, ip
 80077b0:	d10d      	bne.n	80077ce <_strtod_l+0x236>
 80077b2:	1c69      	adds	r1, r5, #1
 80077b4:	4401      	add	r1, r0
 80077b6:	4428      	add	r0, r5
 80077b8:	2808      	cmp	r0, #8
 80077ba:	dc16      	bgt.n	80077ea <_strtod_l+0x252>
 80077bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80077be:	230a      	movs	r3, #10
 80077c0:	fb03 2300 	mla	r3, r3, r0, r2
 80077c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80077c6:	2300      	movs	r3, #0
 80077c8:	e018      	b.n	80077fc <_strtod_l+0x264>
 80077ca:	4638      	mov	r0, r7
 80077cc:	e7da      	b.n	8007784 <_strtod_l+0x1ec>
 80077ce:	2b08      	cmp	r3, #8
 80077d0:	f103 0301 	add.w	r3, r3, #1
 80077d4:	dc03      	bgt.n	80077de <_strtod_l+0x246>
 80077d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80077d8:	434e      	muls	r6, r1
 80077da:	960a      	str	r6, [sp, #40]	@ 0x28
 80077dc:	e7e7      	b.n	80077ae <_strtod_l+0x216>
 80077de:	2b10      	cmp	r3, #16
 80077e0:	bfde      	ittt	le
 80077e2:	9e08      	ldrle	r6, [sp, #32]
 80077e4:	434e      	mulle	r6, r1
 80077e6:	9608      	strle	r6, [sp, #32]
 80077e8:	e7e1      	b.n	80077ae <_strtod_l+0x216>
 80077ea:	280f      	cmp	r0, #15
 80077ec:	dceb      	bgt.n	80077c6 <_strtod_l+0x22e>
 80077ee:	9808      	ldr	r0, [sp, #32]
 80077f0:	230a      	movs	r3, #10
 80077f2:	fb03 2300 	mla	r3, r3, r0, r2
 80077f6:	9308      	str	r3, [sp, #32]
 80077f8:	e7e5      	b.n	80077c6 <_strtod_l+0x22e>
 80077fa:	4629      	mov	r1, r5
 80077fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80077fe:	1c50      	adds	r0, r2, #1
 8007800:	9019      	str	r0, [sp, #100]	@ 0x64
 8007802:	7852      	ldrb	r2, [r2, #1]
 8007804:	4618      	mov	r0, r3
 8007806:	460d      	mov	r5, r1
 8007808:	e7b1      	b.n	800776e <_strtod_l+0x1d6>
 800780a:	f04f 0900 	mov.w	r9, #0
 800780e:	2301      	movs	r3, #1
 8007810:	e77d      	b.n	800770e <_strtod_l+0x176>
 8007812:	f04f 0c00 	mov.w	ip, #0
 8007816:	1ca2      	adds	r2, r4, #2
 8007818:	9219      	str	r2, [sp, #100]	@ 0x64
 800781a:	78a2      	ldrb	r2, [r4, #2]
 800781c:	e785      	b.n	800772a <_strtod_l+0x192>
 800781e:	f04f 0c01 	mov.w	ip, #1
 8007822:	e7f8      	b.n	8007816 <_strtod_l+0x27e>
 8007824:	08009698 	.word	0x08009698
 8007828:	08009680 	.word	0x08009680
 800782c:	7ff00000 	.word	0x7ff00000
 8007830:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007832:	1c51      	adds	r1, r2, #1
 8007834:	9119      	str	r1, [sp, #100]	@ 0x64
 8007836:	7852      	ldrb	r2, [r2, #1]
 8007838:	2a30      	cmp	r2, #48	@ 0x30
 800783a:	d0f9      	beq.n	8007830 <_strtod_l+0x298>
 800783c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007840:	2908      	cmp	r1, #8
 8007842:	f63f af78 	bhi.w	8007736 <_strtod_l+0x19e>
 8007846:	3a30      	subs	r2, #48	@ 0x30
 8007848:	920e      	str	r2, [sp, #56]	@ 0x38
 800784a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800784c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800784e:	f04f 080a 	mov.w	r8, #10
 8007852:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007854:	1c56      	adds	r6, r2, #1
 8007856:	9619      	str	r6, [sp, #100]	@ 0x64
 8007858:	7852      	ldrb	r2, [r2, #1]
 800785a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800785e:	f1be 0f09 	cmp.w	lr, #9
 8007862:	d939      	bls.n	80078d8 <_strtod_l+0x340>
 8007864:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007866:	1a76      	subs	r6, r6, r1
 8007868:	2e08      	cmp	r6, #8
 800786a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800786e:	dc03      	bgt.n	8007878 <_strtod_l+0x2e0>
 8007870:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007872:	4588      	cmp	r8, r1
 8007874:	bfa8      	it	ge
 8007876:	4688      	movge	r8, r1
 8007878:	f1bc 0f00 	cmp.w	ip, #0
 800787c:	d001      	beq.n	8007882 <_strtod_l+0x2ea>
 800787e:	f1c8 0800 	rsb	r8, r8, #0
 8007882:	2d00      	cmp	r5, #0
 8007884:	d14e      	bne.n	8007924 <_strtod_l+0x38c>
 8007886:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007888:	4308      	orrs	r0, r1
 800788a:	f47f aebe 	bne.w	800760a <_strtod_l+0x72>
 800788e:	2b00      	cmp	r3, #0
 8007890:	f47f aed6 	bne.w	8007640 <_strtod_l+0xa8>
 8007894:	2a69      	cmp	r2, #105	@ 0x69
 8007896:	d028      	beq.n	80078ea <_strtod_l+0x352>
 8007898:	dc25      	bgt.n	80078e6 <_strtod_l+0x34e>
 800789a:	2a49      	cmp	r2, #73	@ 0x49
 800789c:	d025      	beq.n	80078ea <_strtod_l+0x352>
 800789e:	2a4e      	cmp	r2, #78	@ 0x4e
 80078a0:	f47f aece 	bne.w	8007640 <_strtod_l+0xa8>
 80078a4:	499b      	ldr	r1, [pc, #620]	@ (8007b14 <_strtod_l+0x57c>)
 80078a6:	a819      	add	r0, sp, #100	@ 0x64
 80078a8:	f001 f9ee 	bl	8008c88 <__match>
 80078ac:	2800      	cmp	r0, #0
 80078ae:	f43f aec7 	beq.w	8007640 <_strtod_l+0xa8>
 80078b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	2b28      	cmp	r3, #40	@ 0x28
 80078b8:	d12e      	bne.n	8007918 <_strtod_l+0x380>
 80078ba:	4997      	ldr	r1, [pc, #604]	@ (8007b18 <_strtod_l+0x580>)
 80078bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80078be:	a819      	add	r0, sp, #100	@ 0x64
 80078c0:	f001 f9f6 	bl	8008cb0 <__hexnan>
 80078c4:	2805      	cmp	r0, #5
 80078c6:	d127      	bne.n	8007918 <_strtod_l+0x380>
 80078c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80078ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80078ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80078d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80078d6:	e698      	b.n	800760a <_strtod_l+0x72>
 80078d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80078da:	fb08 2101 	mla	r1, r8, r1, r2
 80078de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80078e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80078e4:	e7b5      	b.n	8007852 <_strtod_l+0x2ba>
 80078e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80078e8:	e7da      	b.n	80078a0 <_strtod_l+0x308>
 80078ea:	498c      	ldr	r1, [pc, #560]	@ (8007b1c <_strtod_l+0x584>)
 80078ec:	a819      	add	r0, sp, #100	@ 0x64
 80078ee:	f001 f9cb 	bl	8008c88 <__match>
 80078f2:	2800      	cmp	r0, #0
 80078f4:	f43f aea4 	beq.w	8007640 <_strtod_l+0xa8>
 80078f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80078fa:	4989      	ldr	r1, [pc, #548]	@ (8007b20 <_strtod_l+0x588>)
 80078fc:	3b01      	subs	r3, #1
 80078fe:	a819      	add	r0, sp, #100	@ 0x64
 8007900:	9319      	str	r3, [sp, #100]	@ 0x64
 8007902:	f001 f9c1 	bl	8008c88 <__match>
 8007906:	b910      	cbnz	r0, 800790e <_strtod_l+0x376>
 8007908:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800790a:	3301      	adds	r3, #1
 800790c:	9319      	str	r3, [sp, #100]	@ 0x64
 800790e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007b30 <_strtod_l+0x598>
 8007912:	f04f 0a00 	mov.w	sl, #0
 8007916:	e678      	b.n	800760a <_strtod_l+0x72>
 8007918:	4882      	ldr	r0, [pc, #520]	@ (8007b24 <_strtod_l+0x58c>)
 800791a:	f000 fef1 	bl	8008700 <nan>
 800791e:	ec5b ab10 	vmov	sl, fp, d0
 8007922:	e672      	b.n	800760a <_strtod_l+0x72>
 8007924:	eba8 0309 	sub.w	r3, r8, r9
 8007928:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800792a:	9309      	str	r3, [sp, #36]	@ 0x24
 800792c:	2f00      	cmp	r7, #0
 800792e:	bf08      	it	eq
 8007930:	462f      	moveq	r7, r5
 8007932:	2d10      	cmp	r5, #16
 8007934:	462c      	mov	r4, r5
 8007936:	bfa8      	it	ge
 8007938:	2410      	movge	r4, #16
 800793a:	f7f8 fde3 	bl	8000504 <__aeabi_ui2d>
 800793e:	2d09      	cmp	r5, #9
 8007940:	4682      	mov	sl, r0
 8007942:	468b      	mov	fp, r1
 8007944:	dc13      	bgt.n	800796e <_strtod_l+0x3d6>
 8007946:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007948:	2b00      	cmp	r3, #0
 800794a:	f43f ae5e 	beq.w	800760a <_strtod_l+0x72>
 800794e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007950:	dd78      	ble.n	8007a44 <_strtod_l+0x4ac>
 8007952:	2b16      	cmp	r3, #22
 8007954:	dc5f      	bgt.n	8007a16 <_strtod_l+0x47e>
 8007956:	4974      	ldr	r1, [pc, #464]	@ (8007b28 <_strtod_l+0x590>)
 8007958:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800795c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007960:	4652      	mov	r2, sl
 8007962:	465b      	mov	r3, fp
 8007964:	f7f8 fe48 	bl	80005f8 <__aeabi_dmul>
 8007968:	4682      	mov	sl, r0
 800796a:	468b      	mov	fp, r1
 800796c:	e64d      	b.n	800760a <_strtod_l+0x72>
 800796e:	4b6e      	ldr	r3, [pc, #440]	@ (8007b28 <_strtod_l+0x590>)
 8007970:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007974:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007978:	f7f8 fe3e 	bl	80005f8 <__aeabi_dmul>
 800797c:	4682      	mov	sl, r0
 800797e:	9808      	ldr	r0, [sp, #32]
 8007980:	468b      	mov	fp, r1
 8007982:	f7f8 fdbf 	bl	8000504 <__aeabi_ui2d>
 8007986:	4602      	mov	r2, r0
 8007988:	460b      	mov	r3, r1
 800798a:	4650      	mov	r0, sl
 800798c:	4659      	mov	r1, fp
 800798e:	f7f8 fc7d 	bl	800028c <__adddf3>
 8007992:	2d0f      	cmp	r5, #15
 8007994:	4682      	mov	sl, r0
 8007996:	468b      	mov	fp, r1
 8007998:	ddd5      	ble.n	8007946 <_strtod_l+0x3ae>
 800799a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800799c:	1b2c      	subs	r4, r5, r4
 800799e:	441c      	add	r4, r3
 80079a0:	2c00      	cmp	r4, #0
 80079a2:	f340 8096 	ble.w	8007ad2 <_strtod_l+0x53a>
 80079a6:	f014 030f 	ands.w	r3, r4, #15
 80079aa:	d00a      	beq.n	80079c2 <_strtod_l+0x42a>
 80079ac:	495e      	ldr	r1, [pc, #376]	@ (8007b28 <_strtod_l+0x590>)
 80079ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80079b2:	4652      	mov	r2, sl
 80079b4:	465b      	mov	r3, fp
 80079b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079ba:	f7f8 fe1d 	bl	80005f8 <__aeabi_dmul>
 80079be:	4682      	mov	sl, r0
 80079c0:	468b      	mov	fp, r1
 80079c2:	f034 040f 	bics.w	r4, r4, #15
 80079c6:	d073      	beq.n	8007ab0 <_strtod_l+0x518>
 80079c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80079cc:	dd48      	ble.n	8007a60 <_strtod_l+0x4c8>
 80079ce:	2400      	movs	r4, #0
 80079d0:	46a0      	mov	r8, r4
 80079d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80079d4:	46a1      	mov	r9, r4
 80079d6:	9a05      	ldr	r2, [sp, #20]
 80079d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007b30 <_strtod_l+0x598>
 80079dc:	2322      	movs	r3, #34	@ 0x22
 80079de:	6013      	str	r3, [r2, #0]
 80079e0:	f04f 0a00 	mov.w	sl, #0
 80079e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f43f ae0f 	beq.w	800760a <_strtod_l+0x72>
 80079ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80079ee:	9805      	ldr	r0, [sp, #20]
 80079f0:	f7ff f942 	bl	8006c78 <_Bfree>
 80079f4:	9805      	ldr	r0, [sp, #20]
 80079f6:	4649      	mov	r1, r9
 80079f8:	f7ff f93e 	bl	8006c78 <_Bfree>
 80079fc:	9805      	ldr	r0, [sp, #20]
 80079fe:	4641      	mov	r1, r8
 8007a00:	f7ff f93a 	bl	8006c78 <_Bfree>
 8007a04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007a06:	9805      	ldr	r0, [sp, #20]
 8007a08:	f7ff f936 	bl	8006c78 <_Bfree>
 8007a0c:	9805      	ldr	r0, [sp, #20]
 8007a0e:	4621      	mov	r1, r4
 8007a10:	f7ff f932 	bl	8006c78 <_Bfree>
 8007a14:	e5f9      	b.n	800760a <_strtod_l+0x72>
 8007a16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007a1c:	4293      	cmp	r3, r2
 8007a1e:	dbbc      	blt.n	800799a <_strtod_l+0x402>
 8007a20:	4c41      	ldr	r4, [pc, #260]	@ (8007b28 <_strtod_l+0x590>)
 8007a22:	f1c5 050f 	rsb	r5, r5, #15
 8007a26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007a2a:	4652      	mov	r2, sl
 8007a2c:	465b      	mov	r3, fp
 8007a2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a32:	f7f8 fde1 	bl	80005f8 <__aeabi_dmul>
 8007a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a38:	1b5d      	subs	r5, r3, r5
 8007a3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007a3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007a42:	e78f      	b.n	8007964 <_strtod_l+0x3cc>
 8007a44:	3316      	adds	r3, #22
 8007a46:	dba8      	blt.n	800799a <_strtod_l+0x402>
 8007a48:	4b37      	ldr	r3, [pc, #220]	@ (8007b28 <_strtod_l+0x590>)
 8007a4a:	eba9 0808 	sub.w	r8, r9, r8
 8007a4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007a52:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007a56:	4650      	mov	r0, sl
 8007a58:	4659      	mov	r1, fp
 8007a5a:	f7f8 fef7 	bl	800084c <__aeabi_ddiv>
 8007a5e:	e783      	b.n	8007968 <_strtod_l+0x3d0>
 8007a60:	4b32      	ldr	r3, [pc, #200]	@ (8007b2c <_strtod_l+0x594>)
 8007a62:	9308      	str	r3, [sp, #32]
 8007a64:	2300      	movs	r3, #0
 8007a66:	1124      	asrs	r4, r4, #4
 8007a68:	4650      	mov	r0, sl
 8007a6a:	4659      	mov	r1, fp
 8007a6c:	461e      	mov	r6, r3
 8007a6e:	2c01      	cmp	r4, #1
 8007a70:	dc21      	bgt.n	8007ab6 <_strtod_l+0x51e>
 8007a72:	b10b      	cbz	r3, 8007a78 <_strtod_l+0x4e0>
 8007a74:	4682      	mov	sl, r0
 8007a76:	468b      	mov	fp, r1
 8007a78:	492c      	ldr	r1, [pc, #176]	@ (8007b2c <_strtod_l+0x594>)
 8007a7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007a7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007a82:	4652      	mov	r2, sl
 8007a84:	465b      	mov	r3, fp
 8007a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a8a:	f7f8 fdb5 	bl	80005f8 <__aeabi_dmul>
 8007a8e:	4b28      	ldr	r3, [pc, #160]	@ (8007b30 <_strtod_l+0x598>)
 8007a90:	460a      	mov	r2, r1
 8007a92:	400b      	ands	r3, r1
 8007a94:	4927      	ldr	r1, [pc, #156]	@ (8007b34 <_strtod_l+0x59c>)
 8007a96:	428b      	cmp	r3, r1
 8007a98:	4682      	mov	sl, r0
 8007a9a:	d898      	bhi.n	80079ce <_strtod_l+0x436>
 8007a9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007aa0:	428b      	cmp	r3, r1
 8007aa2:	bf86      	itte	hi
 8007aa4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007b38 <_strtod_l+0x5a0>
 8007aa8:	f04f 3aff 	movhi.w	sl, #4294967295
 8007aac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	9308      	str	r3, [sp, #32]
 8007ab4:	e07a      	b.n	8007bac <_strtod_l+0x614>
 8007ab6:	07e2      	lsls	r2, r4, #31
 8007ab8:	d505      	bpl.n	8007ac6 <_strtod_l+0x52e>
 8007aba:	9b08      	ldr	r3, [sp, #32]
 8007abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac0:	f7f8 fd9a 	bl	80005f8 <__aeabi_dmul>
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	9a08      	ldr	r2, [sp, #32]
 8007ac8:	3208      	adds	r2, #8
 8007aca:	3601      	adds	r6, #1
 8007acc:	1064      	asrs	r4, r4, #1
 8007ace:	9208      	str	r2, [sp, #32]
 8007ad0:	e7cd      	b.n	8007a6e <_strtod_l+0x4d6>
 8007ad2:	d0ed      	beq.n	8007ab0 <_strtod_l+0x518>
 8007ad4:	4264      	negs	r4, r4
 8007ad6:	f014 020f 	ands.w	r2, r4, #15
 8007ada:	d00a      	beq.n	8007af2 <_strtod_l+0x55a>
 8007adc:	4b12      	ldr	r3, [pc, #72]	@ (8007b28 <_strtod_l+0x590>)
 8007ade:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ae2:	4650      	mov	r0, sl
 8007ae4:	4659      	mov	r1, fp
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	f7f8 feaf 	bl	800084c <__aeabi_ddiv>
 8007aee:	4682      	mov	sl, r0
 8007af0:	468b      	mov	fp, r1
 8007af2:	1124      	asrs	r4, r4, #4
 8007af4:	d0dc      	beq.n	8007ab0 <_strtod_l+0x518>
 8007af6:	2c1f      	cmp	r4, #31
 8007af8:	dd20      	ble.n	8007b3c <_strtod_l+0x5a4>
 8007afa:	2400      	movs	r4, #0
 8007afc:	46a0      	mov	r8, r4
 8007afe:	940a      	str	r4, [sp, #40]	@ 0x28
 8007b00:	46a1      	mov	r9, r4
 8007b02:	9a05      	ldr	r2, [sp, #20]
 8007b04:	2322      	movs	r3, #34	@ 0x22
 8007b06:	f04f 0a00 	mov.w	sl, #0
 8007b0a:	f04f 0b00 	mov.w	fp, #0
 8007b0e:	6013      	str	r3, [r2, #0]
 8007b10:	e768      	b.n	80079e4 <_strtod_l+0x44c>
 8007b12:	bf00      	nop
 8007b14:	0800946d 	.word	0x0800946d
 8007b18:	08009684 	.word	0x08009684
 8007b1c:	08009465 	.word	0x08009465
 8007b20:	0800949c 	.word	0x0800949c
 8007b24:	0800982d 	.word	0x0800982d
 8007b28:	080095b8 	.word	0x080095b8
 8007b2c:	08009590 	.word	0x08009590
 8007b30:	7ff00000 	.word	0x7ff00000
 8007b34:	7ca00000 	.word	0x7ca00000
 8007b38:	7fefffff 	.word	0x7fefffff
 8007b3c:	f014 0310 	ands.w	r3, r4, #16
 8007b40:	bf18      	it	ne
 8007b42:	236a      	movne	r3, #106	@ 0x6a
 8007b44:	4ea9      	ldr	r6, [pc, #676]	@ (8007dec <_strtod_l+0x854>)
 8007b46:	9308      	str	r3, [sp, #32]
 8007b48:	4650      	mov	r0, sl
 8007b4a:	4659      	mov	r1, fp
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	07e2      	lsls	r2, r4, #31
 8007b50:	d504      	bpl.n	8007b5c <_strtod_l+0x5c4>
 8007b52:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007b56:	f7f8 fd4f 	bl	80005f8 <__aeabi_dmul>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	1064      	asrs	r4, r4, #1
 8007b5e:	f106 0608 	add.w	r6, r6, #8
 8007b62:	d1f4      	bne.n	8007b4e <_strtod_l+0x5b6>
 8007b64:	b10b      	cbz	r3, 8007b6a <_strtod_l+0x5d2>
 8007b66:	4682      	mov	sl, r0
 8007b68:	468b      	mov	fp, r1
 8007b6a:	9b08      	ldr	r3, [sp, #32]
 8007b6c:	b1b3      	cbz	r3, 8007b9c <_strtod_l+0x604>
 8007b6e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007b72:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	4659      	mov	r1, fp
 8007b7a:	dd0f      	ble.n	8007b9c <_strtod_l+0x604>
 8007b7c:	2b1f      	cmp	r3, #31
 8007b7e:	dd55      	ble.n	8007c2c <_strtod_l+0x694>
 8007b80:	2b34      	cmp	r3, #52	@ 0x34
 8007b82:	bfde      	ittt	le
 8007b84:	f04f 33ff 	movle.w	r3, #4294967295
 8007b88:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007b8c:	4093      	lslle	r3, r2
 8007b8e:	f04f 0a00 	mov.w	sl, #0
 8007b92:	bfcc      	ite	gt
 8007b94:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007b98:	ea03 0b01 	andle.w	fp, r3, r1
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	4650      	mov	r0, sl
 8007ba2:	4659      	mov	r1, fp
 8007ba4:	f7f8 ff90 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ba8:	2800      	cmp	r0, #0
 8007baa:	d1a6      	bne.n	8007afa <_strtod_l+0x562>
 8007bac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bae:	9300      	str	r3, [sp, #0]
 8007bb0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007bb2:	9805      	ldr	r0, [sp, #20]
 8007bb4:	462b      	mov	r3, r5
 8007bb6:	463a      	mov	r2, r7
 8007bb8:	f7ff f8c6 	bl	8006d48 <__s2b>
 8007bbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	f43f af05 	beq.w	80079ce <_strtod_l+0x436>
 8007bc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bc6:	2a00      	cmp	r2, #0
 8007bc8:	eba9 0308 	sub.w	r3, r9, r8
 8007bcc:	bfa8      	it	ge
 8007bce:	2300      	movge	r3, #0
 8007bd0:	9312      	str	r3, [sp, #72]	@ 0x48
 8007bd2:	2400      	movs	r4, #0
 8007bd4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007bd8:	9316      	str	r3, [sp, #88]	@ 0x58
 8007bda:	46a0      	mov	r8, r4
 8007bdc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bde:	9805      	ldr	r0, [sp, #20]
 8007be0:	6859      	ldr	r1, [r3, #4]
 8007be2:	f7ff f809 	bl	8006bf8 <_Balloc>
 8007be6:	4681      	mov	r9, r0
 8007be8:	2800      	cmp	r0, #0
 8007bea:	f43f aef4 	beq.w	80079d6 <_strtod_l+0x43e>
 8007bee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007bf0:	691a      	ldr	r2, [r3, #16]
 8007bf2:	3202      	adds	r2, #2
 8007bf4:	f103 010c 	add.w	r1, r3, #12
 8007bf8:	0092      	lsls	r2, r2, #2
 8007bfa:	300c      	adds	r0, #12
 8007bfc:	f000 fd72 	bl	80086e4 <memcpy>
 8007c00:	ec4b ab10 	vmov	d0, sl, fp
 8007c04:	9805      	ldr	r0, [sp, #20]
 8007c06:	aa1c      	add	r2, sp, #112	@ 0x70
 8007c08:	a91b      	add	r1, sp, #108	@ 0x6c
 8007c0a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007c0e:	f7ff fbd7 	bl	80073c0 <__d2b>
 8007c12:	901a      	str	r0, [sp, #104]	@ 0x68
 8007c14:	2800      	cmp	r0, #0
 8007c16:	f43f aede 	beq.w	80079d6 <_strtod_l+0x43e>
 8007c1a:	9805      	ldr	r0, [sp, #20]
 8007c1c:	2101      	movs	r1, #1
 8007c1e:	f7ff f929 	bl	8006e74 <__i2b>
 8007c22:	4680      	mov	r8, r0
 8007c24:	b948      	cbnz	r0, 8007c3a <_strtod_l+0x6a2>
 8007c26:	f04f 0800 	mov.w	r8, #0
 8007c2a:	e6d4      	b.n	80079d6 <_strtod_l+0x43e>
 8007c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c30:	fa02 f303 	lsl.w	r3, r2, r3
 8007c34:	ea03 0a0a 	and.w	sl, r3, sl
 8007c38:	e7b0      	b.n	8007b9c <_strtod_l+0x604>
 8007c3a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007c3c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007c3e:	2d00      	cmp	r5, #0
 8007c40:	bfab      	itete	ge
 8007c42:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007c44:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007c46:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007c48:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007c4a:	bfac      	ite	ge
 8007c4c:	18ef      	addge	r7, r5, r3
 8007c4e:	1b5e      	sublt	r6, r3, r5
 8007c50:	9b08      	ldr	r3, [sp, #32]
 8007c52:	1aed      	subs	r5, r5, r3
 8007c54:	4415      	add	r5, r2
 8007c56:	4b66      	ldr	r3, [pc, #408]	@ (8007df0 <_strtod_l+0x858>)
 8007c58:	3d01      	subs	r5, #1
 8007c5a:	429d      	cmp	r5, r3
 8007c5c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007c60:	da50      	bge.n	8007d04 <_strtod_l+0x76c>
 8007c62:	1b5b      	subs	r3, r3, r5
 8007c64:	2b1f      	cmp	r3, #31
 8007c66:	eba2 0203 	sub.w	r2, r2, r3
 8007c6a:	f04f 0101 	mov.w	r1, #1
 8007c6e:	dc3d      	bgt.n	8007cec <_strtod_l+0x754>
 8007c70:	fa01 f303 	lsl.w	r3, r1, r3
 8007c74:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007c76:	2300      	movs	r3, #0
 8007c78:	9310      	str	r3, [sp, #64]	@ 0x40
 8007c7a:	18bd      	adds	r5, r7, r2
 8007c7c:	9b08      	ldr	r3, [sp, #32]
 8007c7e:	42af      	cmp	r7, r5
 8007c80:	4416      	add	r6, r2
 8007c82:	441e      	add	r6, r3
 8007c84:	463b      	mov	r3, r7
 8007c86:	bfa8      	it	ge
 8007c88:	462b      	movge	r3, r5
 8007c8a:	42b3      	cmp	r3, r6
 8007c8c:	bfa8      	it	ge
 8007c8e:	4633      	movge	r3, r6
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	bfc2      	ittt	gt
 8007c94:	1aed      	subgt	r5, r5, r3
 8007c96:	1af6      	subgt	r6, r6, r3
 8007c98:	1aff      	subgt	r7, r7, r3
 8007c9a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	dd16      	ble.n	8007cce <_strtod_l+0x736>
 8007ca0:	4641      	mov	r1, r8
 8007ca2:	9805      	ldr	r0, [sp, #20]
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f7ff f9a5 	bl	8006ff4 <__pow5mult>
 8007caa:	4680      	mov	r8, r0
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d0ba      	beq.n	8007c26 <_strtod_l+0x68e>
 8007cb0:	4601      	mov	r1, r0
 8007cb2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007cb4:	9805      	ldr	r0, [sp, #20]
 8007cb6:	f7ff f8f3 	bl	8006ea0 <__multiply>
 8007cba:	900e      	str	r0, [sp, #56]	@ 0x38
 8007cbc:	2800      	cmp	r0, #0
 8007cbe:	f43f ae8a 	beq.w	80079d6 <_strtod_l+0x43e>
 8007cc2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007cc4:	9805      	ldr	r0, [sp, #20]
 8007cc6:	f7fe ffd7 	bl	8006c78 <_Bfree>
 8007cca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ccc:	931a      	str	r3, [sp, #104]	@ 0x68
 8007cce:	2d00      	cmp	r5, #0
 8007cd0:	dc1d      	bgt.n	8007d0e <_strtod_l+0x776>
 8007cd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	dd23      	ble.n	8007d20 <_strtod_l+0x788>
 8007cd8:	4649      	mov	r1, r9
 8007cda:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007cdc:	9805      	ldr	r0, [sp, #20]
 8007cde:	f7ff f989 	bl	8006ff4 <__pow5mult>
 8007ce2:	4681      	mov	r9, r0
 8007ce4:	b9e0      	cbnz	r0, 8007d20 <_strtod_l+0x788>
 8007ce6:	f04f 0900 	mov.w	r9, #0
 8007cea:	e674      	b.n	80079d6 <_strtod_l+0x43e>
 8007cec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007cf0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007cf4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007cf8:	35e2      	adds	r5, #226	@ 0xe2
 8007cfa:	fa01 f305 	lsl.w	r3, r1, r5
 8007cfe:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d00:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007d02:	e7ba      	b.n	8007c7a <_strtod_l+0x6e2>
 8007d04:	2300      	movs	r3, #0
 8007d06:	9310      	str	r3, [sp, #64]	@ 0x40
 8007d08:	2301      	movs	r3, #1
 8007d0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d0c:	e7b5      	b.n	8007c7a <_strtod_l+0x6e2>
 8007d0e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d10:	9805      	ldr	r0, [sp, #20]
 8007d12:	462a      	mov	r2, r5
 8007d14:	f7ff f9c8 	bl	80070a8 <__lshift>
 8007d18:	901a      	str	r0, [sp, #104]	@ 0x68
 8007d1a:	2800      	cmp	r0, #0
 8007d1c:	d1d9      	bne.n	8007cd2 <_strtod_l+0x73a>
 8007d1e:	e65a      	b.n	80079d6 <_strtod_l+0x43e>
 8007d20:	2e00      	cmp	r6, #0
 8007d22:	dd07      	ble.n	8007d34 <_strtod_l+0x79c>
 8007d24:	4649      	mov	r1, r9
 8007d26:	9805      	ldr	r0, [sp, #20]
 8007d28:	4632      	mov	r2, r6
 8007d2a:	f7ff f9bd 	bl	80070a8 <__lshift>
 8007d2e:	4681      	mov	r9, r0
 8007d30:	2800      	cmp	r0, #0
 8007d32:	d0d8      	beq.n	8007ce6 <_strtod_l+0x74e>
 8007d34:	2f00      	cmp	r7, #0
 8007d36:	dd08      	ble.n	8007d4a <_strtod_l+0x7b2>
 8007d38:	4641      	mov	r1, r8
 8007d3a:	9805      	ldr	r0, [sp, #20]
 8007d3c:	463a      	mov	r2, r7
 8007d3e:	f7ff f9b3 	bl	80070a8 <__lshift>
 8007d42:	4680      	mov	r8, r0
 8007d44:	2800      	cmp	r0, #0
 8007d46:	f43f ae46 	beq.w	80079d6 <_strtod_l+0x43e>
 8007d4a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007d4c:	9805      	ldr	r0, [sp, #20]
 8007d4e:	464a      	mov	r2, r9
 8007d50:	f7ff fa32 	bl	80071b8 <__mdiff>
 8007d54:	4604      	mov	r4, r0
 8007d56:	2800      	cmp	r0, #0
 8007d58:	f43f ae3d 	beq.w	80079d6 <_strtod_l+0x43e>
 8007d5c:	68c3      	ldr	r3, [r0, #12]
 8007d5e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007d60:	2300      	movs	r3, #0
 8007d62:	60c3      	str	r3, [r0, #12]
 8007d64:	4641      	mov	r1, r8
 8007d66:	f7ff fa0b 	bl	8007180 <__mcmp>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	da46      	bge.n	8007dfc <_strtod_l+0x864>
 8007d6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d70:	ea53 030a 	orrs.w	r3, r3, sl
 8007d74:	d16c      	bne.n	8007e50 <_strtod_l+0x8b8>
 8007d76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d168      	bne.n	8007e50 <_strtod_l+0x8b8>
 8007d7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007d82:	0d1b      	lsrs	r3, r3, #20
 8007d84:	051b      	lsls	r3, r3, #20
 8007d86:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007d8a:	d961      	bls.n	8007e50 <_strtod_l+0x8b8>
 8007d8c:	6963      	ldr	r3, [r4, #20]
 8007d8e:	b913      	cbnz	r3, 8007d96 <_strtod_l+0x7fe>
 8007d90:	6923      	ldr	r3, [r4, #16]
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	dd5c      	ble.n	8007e50 <_strtod_l+0x8b8>
 8007d96:	4621      	mov	r1, r4
 8007d98:	2201      	movs	r2, #1
 8007d9a:	9805      	ldr	r0, [sp, #20]
 8007d9c:	f7ff f984 	bl	80070a8 <__lshift>
 8007da0:	4641      	mov	r1, r8
 8007da2:	4604      	mov	r4, r0
 8007da4:	f7ff f9ec 	bl	8007180 <__mcmp>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	dd51      	ble.n	8007e50 <_strtod_l+0x8b8>
 8007dac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007db0:	9a08      	ldr	r2, [sp, #32]
 8007db2:	0d1b      	lsrs	r3, r3, #20
 8007db4:	051b      	lsls	r3, r3, #20
 8007db6:	2a00      	cmp	r2, #0
 8007db8:	d06b      	beq.n	8007e92 <_strtod_l+0x8fa>
 8007dba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007dbe:	d868      	bhi.n	8007e92 <_strtod_l+0x8fa>
 8007dc0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007dc4:	f67f ae9d 	bls.w	8007b02 <_strtod_l+0x56a>
 8007dc8:	4b0a      	ldr	r3, [pc, #40]	@ (8007df4 <_strtod_l+0x85c>)
 8007dca:	4650      	mov	r0, sl
 8007dcc:	4659      	mov	r1, fp
 8007dce:	2200      	movs	r2, #0
 8007dd0:	f7f8 fc12 	bl	80005f8 <__aeabi_dmul>
 8007dd4:	4b08      	ldr	r3, [pc, #32]	@ (8007df8 <_strtod_l+0x860>)
 8007dd6:	400b      	ands	r3, r1
 8007dd8:	4682      	mov	sl, r0
 8007dda:	468b      	mov	fp, r1
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f47f ae05 	bne.w	80079ec <_strtod_l+0x454>
 8007de2:	9a05      	ldr	r2, [sp, #20]
 8007de4:	2322      	movs	r3, #34	@ 0x22
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	e600      	b.n	80079ec <_strtod_l+0x454>
 8007dea:	bf00      	nop
 8007dec:	080096b0 	.word	0x080096b0
 8007df0:	fffffc02 	.word	0xfffffc02
 8007df4:	39500000 	.word	0x39500000
 8007df8:	7ff00000 	.word	0x7ff00000
 8007dfc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007e00:	d165      	bne.n	8007ece <_strtod_l+0x936>
 8007e02:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007e04:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e08:	b35a      	cbz	r2, 8007e62 <_strtod_l+0x8ca>
 8007e0a:	4a9f      	ldr	r2, [pc, #636]	@ (8008088 <_strtod_l+0xaf0>)
 8007e0c:	4293      	cmp	r3, r2
 8007e0e:	d12b      	bne.n	8007e68 <_strtod_l+0x8d0>
 8007e10:	9b08      	ldr	r3, [sp, #32]
 8007e12:	4651      	mov	r1, sl
 8007e14:	b303      	cbz	r3, 8007e58 <_strtod_l+0x8c0>
 8007e16:	4b9d      	ldr	r3, [pc, #628]	@ (800808c <_strtod_l+0xaf4>)
 8007e18:	465a      	mov	r2, fp
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007e20:	f04f 32ff 	mov.w	r2, #4294967295
 8007e24:	d81b      	bhi.n	8007e5e <_strtod_l+0x8c6>
 8007e26:	0d1b      	lsrs	r3, r3, #20
 8007e28:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e30:	4299      	cmp	r1, r3
 8007e32:	d119      	bne.n	8007e68 <_strtod_l+0x8d0>
 8007e34:	4b96      	ldr	r3, [pc, #600]	@ (8008090 <_strtod_l+0xaf8>)
 8007e36:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d102      	bne.n	8007e42 <_strtod_l+0x8aa>
 8007e3c:	3101      	adds	r1, #1
 8007e3e:	f43f adca 	beq.w	80079d6 <_strtod_l+0x43e>
 8007e42:	4b92      	ldr	r3, [pc, #584]	@ (800808c <_strtod_l+0xaf4>)
 8007e44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e46:	401a      	ands	r2, r3
 8007e48:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007e4c:	f04f 0a00 	mov.w	sl, #0
 8007e50:	9b08      	ldr	r3, [sp, #32]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d1b8      	bne.n	8007dc8 <_strtod_l+0x830>
 8007e56:	e5c9      	b.n	80079ec <_strtod_l+0x454>
 8007e58:	f04f 33ff 	mov.w	r3, #4294967295
 8007e5c:	e7e8      	b.n	8007e30 <_strtod_l+0x898>
 8007e5e:	4613      	mov	r3, r2
 8007e60:	e7e6      	b.n	8007e30 <_strtod_l+0x898>
 8007e62:	ea53 030a 	orrs.w	r3, r3, sl
 8007e66:	d0a1      	beq.n	8007dac <_strtod_l+0x814>
 8007e68:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007e6a:	b1db      	cbz	r3, 8007ea4 <_strtod_l+0x90c>
 8007e6c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e6e:	4213      	tst	r3, r2
 8007e70:	d0ee      	beq.n	8007e50 <_strtod_l+0x8b8>
 8007e72:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e74:	9a08      	ldr	r2, [sp, #32]
 8007e76:	4650      	mov	r0, sl
 8007e78:	4659      	mov	r1, fp
 8007e7a:	b1bb      	cbz	r3, 8007eac <_strtod_l+0x914>
 8007e7c:	f7ff fb6e 	bl	800755c <sulp>
 8007e80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007e84:	ec53 2b10 	vmov	r2, r3, d0
 8007e88:	f7f8 fa00 	bl	800028c <__adddf3>
 8007e8c:	4682      	mov	sl, r0
 8007e8e:	468b      	mov	fp, r1
 8007e90:	e7de      	b.n	8007e50 <_strtod_l+0x8b8>
 8007e92:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007e96:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007e9a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007e9e:	f04f 3aff 	mov.w	sl, #4294967295
 8007ea2:	e7d5      	b.n	8007e50 <_strtod_l+0x8b8>
 8007ea4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007ea6:	ea13 0f0a 	tst.w	r3, sl
 8007eaa:	e7e1      	b.n	8007e70 <_strtod_l+0x8d8>
 8007eac:	f7ff fb56 	bl	800755c <sulp>
 8007eb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007eb4:	ec53 2b10 	vmov	r2, r3, d0
 8007eb8:	f7f8 f9e6 	bl	8000288 <__aeabi_dsub>
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	4682      	mov	sl, r0
 8007ec2:	468b      	mov	fp, r1
 8007ec4:	f7f8 fe00 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ec8:	2800      	cmp	r0, #0
 8007eca:	d0c1      	beq.n	8007e50 <_strtod_l+0x8b8>
 8007ecc:	e619      	b.n	8007b02 <_strtod_l+0x56a>
 8007ece:	4641      	mov	r1, r8
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f7ff facd 	bl	8007470 <__ratio>
 8007ed6:	ec57 6b10 	vmov	r6, r7, d0
 8007eda:	2200      	movs	r2, #0
 8007edc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	4639      	mov	r1, r7
 8007ee4:	f7f8 fe04 	bl	8000af0 <__aeabi_dcmple>
 8007ee8:	2800      	cmp	r0, #0
 8007eea:	d06f      	beq.n	8007fcc <_strtod_l+0xa34>
 8007eec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d17a      	bne.n	8007fe8 <_strtod_l+0xa50>
 8007ef2:	f1ba 0f00 	cmp.w	sl, #0
 8007ef6:	d158      	bne.n	8007faa <_strtod_l+0xa12>
 8007ef8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007efa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d15a      	bne.n	8007fb8 <_strtod_l+0xa20>
 8007f02:	4b64      	ldr	r3, [pc, #400]	@ (8008094 <_strtod_l+0xafc>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	4630      	mov	r0, r6
 8007f08:	4639      	mov	r1, r7
 8007f0a:	f7f8 fde7 	bl	8000adc <__aeabi_dcmplt>
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d159      	bne.n	8007fc6 <_strtod_l+0xa2e>
 8007f12:	4630      	mov	r0, r6
 8007f14:	4639      	mov	r1, r7
 8007f16:	4b60      	ldr	r3, [pc, #384]	@ (8008098 <_strtod_l+0xb00>)
 8007f18:	2200      	movs	r2, #0
 8007f1a:	f7f8 fb6d 	bl	80005f8 <__aeabi_dmul>
 8007f1e:	4606      	mov	r6, r0
 8007f20:	460f      	mov	r7, r1
 8007f22:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007f26:	9606      	str	r6, [sp, #24]
 8007f28:	9307      	str	r3, [sp, #28]
 8007f2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f2e:	4d57      	ldr	r5, [pc, #348]	@ (800808c <_strtod_l+0xaf4>)
 8007f30:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007f34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f36:	401d      	ands	r5, r3
 8007f38:	4b58      	ldr	r3, [pc, #352]	@ (800809c <_strtod_l+0xb04>)
 8007f3a:	429d      	cmp	r5, r3
 8007f3c:	f040 80b2 	bne.w	80080a4 <_strtod_l+0xb0c>
 8007f40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f42:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007f46:	ec4b ab10 	vmov	d0, sl, fp
 8007f4a:	f7ff f9c9 	bl	80072e0 <__ulp>
 8007f4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007f52:	ec51 0b10 	vmov	r0, r1, d0
 8007f56:	f7f8 fb4f 	bl	80005f8 <__aeabi_dmul>
 8007f5a:	4652      	mov	r2, sl
 8007f5c:	465b      	mov	r3, fp
 8007f5e:	f7f8 f995 	bl	800028c <__adddf3>
 8007f62:	460b      	mov	r3, r1
 8007f64:	4949      	ldr	r1, [pc, #292]	@ (800808c <_strtod_l+0xaf4>)
 8007f66:	4a4e      	ldr	r2, [pc, #312]	@ (80080a0 <_strtod_l+0xb08>)
 8007f68:	4019      	ands	r1, r3
 8007f6a:	4291      	cmp	r1, r2
 8007f6c:	4682      	mov	sl, r0
 8007f6e:	d942      	bls.n	8007ff6 <_strtod_l+0xa5e>
 8007f70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007f72:	4b47      	ldr	r3, [pc, #284]	@ (8008090 <_strtod_l+0xaf8>)
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d103      	bne.n	8007f80 <_strtod_l+0x9e8>
 8007f78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	f43f ad2b 	beq.w	80079d6 <_strtod_l+0x43e>
 8007f80:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008090 <_strtod_l+0xaf8>
 8007f84:	f04f 3aff 	mov.w	sl, #4294967295
 8007f88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f8a:	9805      	ldr	r0, [sp, #20]
 8007f8c:	f7fe fe74 	bl	8006c78 <_Bfree>
 8007f90:	9805      	ldr	r0, [sp, #20]
 8007f92:	4649      	mov	r1, r9
 8007f94:	f7fe fe70 	bl	8006c78 <_Bfree>
 8007f98:	9805      	ldr	r0, [sp, #20]
 8007f9a:	4641      	mov	r1, r8
 8007f9c:	f7fe fe6c 	bl	8006c78 <_Bfree>
 8007fa0:	9805      	ldr	r0, [sp, #20]
 8007fa2:	4621      	mov	r1, r4
 8007fa4:	f7fe fe68 	bl	8006c78 <_Bfree>
 8007fa8:	e618      	b.n	8007bdc <_strtod_l+0x644>
 8007faa:	f1ba 0f01 	cmp.w	sl, #1
 8007fae:	d103      	bne.n	8007fb8 <_strtod_l+0xa20>
 8007fb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	f43f ada5 	beq.w	8007b02 <_strtod_l+0x56a>
 8007fb8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008068 <_strtod_l+0xad0>
 8007fbc:	4f35      	ldr	r7, [pc, #212]	@ (8008094 <_strtod_l+0xafc>)
 8007fbe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007fc2:	2600      	movs	r6, #0
 8007fc4:	e7b1      	b.n	8007f2a <_strtod_l+0x992>
 8007fc6:	4f34      	ldr	r7, [pc, #208]	@ (8008098 <_strtod_l+0xb00>)
 8007fc8:	2600      	movs	r6, #0
 8007fca:	e7aa      	b.n	8007f22 <_strtod_l+0x98a>
 8007fcc:	4b32      	ldr	r3, [pc, #200]	@ (8008098 <_strtod_l+0xb00>)
 8007fce:	4630      	mov	r0, r6
 8007fd0:	4639      	mov	r1, r7
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	f7f8 fb10 	bl	80005f8 <__aeabi_dmul>
 8007fd8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007fda:	4606      	mov	r6, r0
 8007fdc:	460f      	mov	r7, r1
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d09f      	beq.n	8007f22 <_strtod_l+0x98a>
 8007fe2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007fe6:	e7a0      	b.n	8007f2a <_strtod_l+0x992>
 8007fe8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008070 <_strtod_l+0xad8>
 8007fec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ff0:	ec57 6b17 	vmov	r6, r7, d7
 8007ff4:	e799      	b.n	8007f2a <_strtod_l+0x992>
 8007ff6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007ffa:	9b08      	ldr	r3, [sp, #32]
 8007ffc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008000:	2b00      	cmp	r3, #0
 8008002:	d1c1      	bne.n	8007f88 <_strtod_l+0x9f0>
 8008004:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008008:	0d1b      	lsrs	r3, r3, #20
 800800a:	051b      	lsls	r3, r3, #20
 800800c:	429d      	cmp	r5, r3
 800800e:	d1bb      	bne.n	8007f88 <_strtod_l+0x9f0>
 8008010:	4630      	mov	r0, r6
 8008012:	4639      	mov	r1, r7
 8008014:	f7f8 fe38 	bl	8000c88 <__aeabi_d2lz>
 8008018:	f7f8 fac0 	bl	800059c <__aeabi_l2d>
 800801c:	4602      	mov	r2, r0
 800801e:	460b      	mov	r3, r1
 8008020:	4630      	mov	r0, r6
 8008022:	4639      	mov	r1, r7
 8008024:	f7f8 f930 	bl	8000288 <__aeabi_dsub>
 8008028:	460b      	mov	r3, r1
 800802a:	4602      	mov	r2, r0
 800802c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008030:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008036:	ea46 060a 	orr.w	r6, r6, sl
 800803a:	431e      	orrs	r6, r3
 800803c:	d06f      	beq.n	800811e <_strtod_l+0xb86>
 800803e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008078 <_strtod_l+0xae0>)
 8008040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008044:	f7f8 fd4a 	bl	8000adc <__aeabi_dcmplt>
 8008048:	2800      	cmp	r0, #0
 800804a:	f47f accf 	bne.w	80079ec <_strtod_l+0x454>
 800804e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008080 <_strtod_l+0xae8>)
 8008050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008054:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008058:	f7f8 fd5e 	bl	8000b18 <__aeabi_dcmpgt>
 800805c:	2800      	cmp	r0, #0
 800805e:	d093      	beq.n	8007f88 <_strtod_l+0x9f0>
 8008060:	e4c4      	b.n	80079ec <_strtod_l+0x454>
 8008062:	bf00      	nop
 8008064:	f3af 8000 	nop.w
 8008068:	00000000 	.word	0x00000000
 800806c:	bff00000 	.word	0xbff00000
 8008070:	00000000 	.word	0x00000000
 8008074:	3ff00000 	.word	0x3ff00000
 8008078:	94a03595 	.word	0x94a03595
 800807c:	3fdfffff 	.word	0x3fdfffff
 8008080:	35afe535 	.word	0x35afe535
 8008084:	3fe00000 	.word	0x3fe00000
 8008088:	000fffff 	.word	0x000fffff
 800808c:	7ff00000 	.word	0x7ff00000
 8008090:	7fefffff 	.word	0x7fefffff
 8008094:	3ff00000 	.word	0x3ff00000
 8008098:	3fe00000 	.word	0x3fe00000
 800809c:	7fe00000 	.word	0x7fe00000
 80080a0:	7c9fffff 	.word	0x7c9fffff
 80080a4:	9b08      	ldr	r3, [sp, #32]
 80080a6:	b323      	cbz	r3, 80080f2 <_strtod_l+0xb5a>
 80080a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80080ac:	d821      	bhi.n	80080f2 <_strtod_l+0xb5a>
 80080ae:	a328      	add	r3, pc, #160	@ (adr r3, 8008150 <_strtod_l+0xbb8>)
 80080b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b4:	4630      	mov	r0, r6
 80080b6:	4639      	mov	r1, r7
 80080b8:	f7f8 fd1a 	bl	8000af0 <__aeabi_dcmple>
 80080bc:	b1a0      	cbz	r0, 80080e8 <_strtod_l+0xb50>
 80080be:	4639      	mov	r1, r7
 80080c0:	4630      	mov	r0, r6
 80080c2:	f7f8 fd71 	bl	8000ba8 <__aeabi_d2uiz>
 80080c6:	2801      	cmp	r0, #1
 80080c8:	bf38      	it	cc
 80080ca:	2001      	movcc	r0, #1
 80080cc:	f7f8 fa1a 	bl	8000504 <__aeabi_ui2d>
 80080d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080d2:	4606      	mov	r6, r0
 80080d4:	460f      	mov	r7, r1
 80080d6:	b9fb      	cbnz	r3, 8008118 <_strtod_l+0xb80>
 80080d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80080dc:	9014      	str	r0, [sp, #80]	@ 0x50
 80080de:	9315      	str	r3, [sp, #84]	@ 0x54
 80080e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80080e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80080e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80080ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80080ee:	1b5b      	subs	r3, r3, r5
 80080f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80080f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80080f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80080fa:	f7ff f8f1 	bl	80072e0 <__ulp>
 80080fe:	4650      	mov	r0, sl
 8008100:	ec53 2b10 	vmov	r2, r3, d0
 8008104:	4659      	mov	r1, fp
 8008106:	f7f8 fa77 	bl	80005f8 <__aeabi_dmul>
 800810a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800810e:	f7f8 f8bd 	bl	800028c <__adddf3>
 8008112:	4682      	mov	sl, r0
 8008114:	468b      	mov	fp, r1
 8008116:	e770      	b.n	8007ffa <_strtod_l+0xa62>
 8008118:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800811c:	e7e0      	b.n	80080e0 <_strtod_l+0xb48>
 800811e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008158 <_strtod_l+0xbc0>)
 8008120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008124:	f7f8 fcda 	bl	8000adc <__aeabi_dcmplt>
 8008128:	e798      	b.n	800805c <_strtod_l+0xac4>
 800812a:	2300      	movs	r3, #0
 800812c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800812e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008130:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008132:	6013      	str	r3, [r2, #0]
 8008134:	f7ff ba6d 	b.w	8007612 <_strtod_l+0x7a>
 8008138:	2a65      	cmp	r2, #101	@ 0x65
 800813a:	f43f ab66 	beq.w	800780a <_strtod_l+0x272>
 800813e:	2a45      	cmp	r2, #69	@ 0x45
 8008140:	f43f ab63 	beq.w	800780a <_strtod_l+0x272>
 8008144:	2301      	movs	r3, #1
 8008146:	f7ff bb9e 	b.w	8007886 <_strtod_l+0x2ee>
 800814a:	bf00      	nop
 800814c:	f3af 8000 	nop.w
 8008150:	ffc00000 	.word	0xffc00000
 8008154:	41dfffff 	.word	0x41dfffff
 8008158:	94a03595 	.word	0x94a03595
 800815c:	3fcfffff 	.word	0x3fcfffff

08008160 <_strtod_r>:
 8008160:	4b01      	ldr	r3, [pc, #4]	@ (8008168 <_strtod_r+0x8>)
 8008162:	f7ff ba19 	b.w	8007598 <_strtod_l>
 8008166:	bf00      	nop
 8008168:	20000068 	.word	0x20000068

0800816c <_strtol_l.constprop.0>:
 800816c:	2b24      	cmp	r3, #36	@ 0x24
 800816e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008172:	4686      	mov	lr, r0
 8008174:	4690      	mov	r8, r2
 8008176:	d801      	bhi.n	800817c <_strtol_l.constprop.0+0x10>
 8008178:	2b01      	cmp	r3, #1
 800817a:	d106      	bne.n	800818a <_strtol_l.constprop.0+0x1e>
 800817c:	f7fd fdba 	bl	8005cf4 <__errno>
 8008180:	2316      	movs	r3, #22
 8008182:	6003      	str	r3, [r0, #0]
 8008184:	2000      	movs	r0, #0
 8008186:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800818a:	4834      	ldr	r0, [pc, #208]	@ (800825c <_strtol_l.constprop.0+0xf0>)
 800818c:	460d      	mov	r5, r1
 800818e:	462a      	mov	r2, r5
 8008190:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008194:	5d06      	ldrb	r6, [r0, r4]
 8008196:	f016 0608 	ands.w	r6, r6, #8
 800819a:	d1f8      	bne.n	800818e <_strtol_l.constprop.0+0x22>
 800819c:	2c2d      	cmp	r4, #45	@ 0x2d
 800819e:	d12d      	bne.n	80081fc <_strtol_l.constprop.0+0x90>
 80081a0:	782c      	ldrb	r4, [r5, #0]
 80081a2:	2601      	movs	r6, #1
 80081a4:	1c95      	adds	r5, r2, #2
 80081a6:	f033 0210 	bics.w	r2, r3, #16
 80081aa:	d109      	bne.n	80081c0 <_strtol_l.constprop.0+0x54>
 80081ac:	2c30      	cmp	r4, #48	@ 0x30
 80081ae:	d12a      	bne.n	8008206 <_strtol_l.constprop.0+0x9a>
 80081b0:	782a      	ldrb	r2, [r5, #0]
 80081b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80081b6:	2a58      	cmp	r2, #88	@ 0x58
 80081b8:	d125      	bne.n	8008206 <_strtol_l.constprop.0+0x9a>
 80081ba:	786c      	ldrb	r4, [r5, #1]
 80081bc:	2310      	movs	r3, #16
 80081be:	3502      	adds	r5, #2
 80081c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80081c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80081c8:	2200      	movs	r2, #0
 80081ca:	fbbc f9f3 	udiv	r9, ip, r3
 80081ce:	4610      	mov	r0, r2
 80081d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80081d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80081d8:	2f09      	cmp	r7, #9
 80081da:	d81b      	bhi.n	8008214 <_strtol_l.constprop.0+0xa8>
 80081dc:	463c      	mov	r4, r7
 80081de:	42a3      	cmp	r3, r4
 80081e0:	dd27      	ble.n	8008232 <_strtol_l.constprop.0+0xc6>
 80081e2:	1c57      	adds	r7, r2, #1
 80081e4:	d007      	beq.n	80081f6 <_strtol_l.constprop.0+0x8a>
 80081e6:	4581      	cmp	r9, r0
 80081e8:	d320      	bcc.n	800822c <_strtol_l.constprop.0+0xc0>
 80081ea:	d101      	bne.n	80081f0 <_strtol_l.constprop.0+0x84>
 80081ec:	45a2      	cmp	sl, r4
 80081ee:	db1d      	blt.n	800822c <_strtol_l.constprop.0+0xc0>
 80081f0:	fb00 4003 	mla	r0, r0, r3, r4
 80081f4:	2201      	movs	r2, #1
 80081f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80081fa:	e7eb      	b.n	80081d4 <_strtol_l.constprop.0+0x68>
 80081fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80081fe:	bf04      	itt	eq
 8008200:	782c      	ldrbeq	r4, [r5, #0]
 8008202:	1c95      	addeq	r5, r2, #2
 8008204:	e7cf      	b.n	80081a6 <_strtol_l.constprop.0+0x3a>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d1da      	bne.n	80081c0 <_strtol_l.constprop.0+0x54>
 800820a:	2c30      	cmp	r4, #48	@ 0x30
 800820c:	bf0c      	ite	eq
 800820e:	2308      	moveq	r3, #8
 8008210:	230a      	movne	r3, #10
 8008212:	e7d5      	b.n	80081c0 <_strtol_l.constprop.0+0x54>
 8008214:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008218:	2f19      	cmp	r7, #25
 800821a:	d801      	bhi.n	8008220 <_strtol_l.constprop.0+0xb4>
 800821c:	3c37      	subs	r4, #55	@ 0x37
 800821e:	e7de      	b.n	80081de <_strtol_l.constprop.0+0x72>
 8008220:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008224:	2f19      	cmp	r7, #25
 8008226:	d804      	bhi.n	8008232 <_strtol_l.constprop.0+0xc6>
 8008228:	3c57      	subs	r4, #87	@ 0x57
 800822a:	e7d8      	b.n	80081de <_strtol_l.constprop.0+0x72>
 800822c:	f04f 32ff 	mov.w	r2, #4294967295
 8008230:	e7e1      	b.n	80081f6 <_strtol_l.constprop.0+0x8a>
 8008232:	1c53      	adds	r3, r2, #1
 8008234:	d108      	bne.n	8008248 <_strtol_l.constprop.0+0xdc>
 8008236:	2322      	movs	r3, #34	@ 0x22
 8008238:	f8ce 3000 	str.w	r3, [lr]
 800823c:	4660      	mov	r0, ip
 800823e:	f1b8 0f00 	cmp.w	r8, #0
 8008242:	d0a0      	beq.n	8008186 <_strtol_l.constprop.0+0x1a>
 8008244:	1e69      	subs	r1, r5, #1
 8008246:	e006      	b.n	8008256 <_strtol_l.constprop.0+0xea>
 8008248:	b106      	cbz	r6, 800824c <_strtol_l.constprop.0+0xe0>
 800824a:	4240      	negs	r0, r0
 800824c:	f1b8 0f00 	cmp.w	r8, #0
 8008250:	d099      	beq.n	8008186 <_strtol_l.constprop.0+0x1a>
 8008252:	2a00      	cmp	r2, #0
 8008254:	d1f6      	bne.n	8008244 <_strtol_l.constprop.0+0xd8>
 8008256:	f8c8 1000 	str.w	r1, [r8]
 800825a:	e794      	b.n	8008186 <_strtol_l.constprop.0+0x1a>
 800825c:	080096d9 	.word	0x080096d9

08008260 <_strtol_r>:
 8008260:	f7ff bf84 	b.w	800816c <_strtol_l.constprop.0>

08008264 <__ssputs_r>:
 8008264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008268:	688e      	ldr	r6, [r1, #8]
 800826a:	461f      	mov	r7, r3
 800826c:	42be      	cmp	r6, r7
 800826e:	680b      	ldr	r3, [r1, #0]
 8008270:	4682      	mov	sl, r0
 8008272:	460c      	mov	r4, r1
 8008274:	4690      	mov	r8, r2
 8008276:	d82d      	bhi.n	80082d4 <__ssputs_r+0x70>
 8008278:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800827c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008280:	d026      	beq.n	80082d0 <__ssputs_r+0x6c>
 8008282:	6965      	ldr	r5, [r4, #20]
 8008284:	6909      	ldr	r1, [r1, #16]
 8008286:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800828a:	eba3 0901 	sub.w	r9, r3, r1
 800828e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008292:	1c7b      	adds	r3, r7, #1
 8008294:	444b      	add	r3, r9
 8008296:	106d      	asrs	r5, r5, #1
 8008298:	429d      	cmp	r5, r3
 800829a:	bf38      	it	cc
 800829c:	461d      	movcc	r5, r3
 800829e:	0553      	lsls	r3, r2, #21
 80082a0:	d527      	bpl.n	80082f2 <__ssputs_r+0x8e>
 80082a2:	4629      	mov	r1, r5
 80082a4:	f7fe fc1c 	bl	8006ae0 <_malloc_r>
 80082a8:	4606      	mov	r6, r0
 80082aa:	b360      	cbz	r0, 8008306 <__ssputs_r+0xa2>
 80082ac:	6921      	ldr	r1, [r4, #16]
 80082ae:	464a      	mov	r2, r9
 80082b0:	f000 fa18 	bl	80086e4 <memcpy>
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082be:	81a3      	strh	r3, [r4, #12]
 80082c0:	6126      	str	r6, [r4, #16]
 80082c2:	6165      	str	r5, [r4, #20]
 80082c4:	444e      	add	r6, r9
 80082c6:	eba5 0509 	sub.w	r5, r5, r9
 80082ca:	6026      	str	r6, [r4, #0]
 80082cc:	60a5      	str	r5, [r4, #8]
 80082ce:	463e      	mov	r6, r7
 80082d0:	42be      	cmp	r6, r7
 80082d2:	d900      	bls.n	80082d6 <__ssputs_r+0x72>
 80082d4:	463e      	mov	r6, r7
 80082d6:	6820      	ldr	r0, [r4, #0]
 80082d8:	4632      	mov	r2, r6
 80082da:	4641      	mov	r1, r8
 80082dc:	f000 f9c6 	bl	800866c <memmove>
 80082e0:	68a3      	ldr	r3, [r4, #8]
 80082e2:	1b9b      	subs	r3, r3, r6
 80082e4:	60a3      	str	r3, [r4, #8]
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	4433      	add	r3, r6
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	2000      	movs	r0, #0
 80082ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082f2:	462a      	mov	r2, r5
 80082f4:	f000 fd89 	bl	8008e0a <_realloc_r>
 80082f8:	4606      	mov	r6, r0
 80082fa:	2800      	cmp	r0, #0
 80082fc:	d1e0      	bne.n	80082c0 <__ssputs_r+0x5c>
 80082fe:	6921      	ldr	r1, [r4, #16]
 8008300:	4650      	mov	r0, sl
 8008302:	f7fe fb79 	bl	80069f8 <_free_r>
 8008306:	230c      	movs	r3, #12
 8008308:	f8ca 3000 	str.w	r3, [sl]
 800830c:	89a3      	ldrh	r3, [r4, #12]
 800830e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008312:	81a3      	strh	r3, [r4, #12]
 8008314:	f04f 30ff 	mov.w	r0, #4294967295
 8008318:	e7e9      	b.n	80082ee <__ssputs_r+0x8a>
	...

0800831c <_svfiprintf_r>:
 800831c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008320:	4698      	mov	r8, r3
 8008322:	898b      	ldrh	r3, [r1, #12]
 8008324:	061b      	lsls	r3, r3, #24
 8008326:	b09d      	sub	sp, #116	@ 0x74
 8008328:	4607      	mov	r7, r0
 800832a:	460d      	mov	r5, r1
 800832c:	4614      	mov	r4, r2
 800832e:	d510      	bpl.n	8008352 <_svfiprintf_r+0x36>
 8008330:	690b      	ldr	r3, [r1, #16]
 8008332:	b973      	cbnz	r3, 8008352 <_svfiprintf_r+0x36>
 8008334:	2140      	movs	r1, #64	@ 0x40
 8008336:	f7fe fbd3 	bl	8006ae0 <_malloc_r>
 800833a:	6028      	str	r0, [r5, #0]
 800833c:	6128      	str	r0, [r5, #16]
 800833e:	b930      	cbnz	r0, 800834e <_svfiprintf_r+0x32>
 8008340:	230c      	movs	r3, #12
 8008342:	603b      	str	r3, [r7, #0]
 8008344:	f04f 30ff 	mov.w	r0, #4294967295
 8008348:	b01d      	add	sp, #116	@ 0x74
 800834a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800834e:	2340      	movs	r3, #64	@ 0x40
 8008350:	616b      	str	r3, [r5, #20]
 8008352:	2300      	movs	r3, #0
 8008354:	9309      	str	r3, [sp, #36]	@ 0x24
 8008356:	2320      	movs	r3, #32
 8008358:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800835c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008360:	2330      	movs	r3, #48	@ 0x30
 8008362:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008500 <_svfiprintf_r+0x1e4>
 8008366:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800836a:	f04f 0901 	mov.w	r9, #1
 800836e:	4623      	mov	r3, r4
 8008370:	469a      	mov	sl, r3
 8008372:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008376:	b10a      	cbz	r2, 800837c <_svfiprintf_r+0x60>
 8008378:	2a25      	cmp	r2, #37	@ 0x25
 800837a:	d1f9      	bne.n	8008370 <_svfiprintf_r+0x54>
 800837c:	ebba 0b04 	subs.w	fp, sl, r4
 8008380:	d00b      	beq.n	800839a <_svfiprintf_r+0x7e>
 8008382:	465b      	mov	r3, fp
 8008384:	4622      	mov	r2, r4
 8008386:	4629      	mov	r1, r5
 8008388:	4638      	mov	r0, r7
 800838a:	f7ff ff6b 	bl	8008264 <__ssputs_r>
 800838e:	3001      	adds	r0, #1
 8008390:	f000 80a7 	beq.w	80084e2 <_svfiprintf_r+0x1c6>
 8008394:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008396:	445a      	add	r2, fp
 8008398:	9209      	str	r2, [sp, #36]	@ 0x24
 800839a:	f89a 3000 	ldrb.w	r3, [sl]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	f000 809f 	beq.w	80084e2 <_svfiprintf_r+0x1c6>
 80083a4:	2300      	movs	r3, #0
 80083a6:	f04f 32ff 	mov.w	r2, #4294967295
 80083aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ae:	f10a 0a01 	add.w	sl, sl, #1
 80083b2:	9304      	str	r3, [sp, #16]
 80083b4:	9307      	str	r3, [sp, #28]
 80083b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80083bc:	4654      	mov	r4, sl
 80083be:	2205      	movs	r2, #5
 80083c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083c4:	484e      	ldr	r0, [pc, #312]	@ (8008500 <_svfiprintf_r+0x1e4>)
 80083c6:	f7f7 ff03 	bl	80001d0 <memchr>
 80083ca:	9a04      	ldr	r2, [sp, #16]
 80083cc:	b9d8      	cbnz	r0, 8008406 <_svfiprintf_r+0xea>
 80083ce:	06d0      	lsls	r0, r2, #27
 80083d0:	bf44      	itt	mi
 80083d2:	2320      	movmi	r3, #32
 80083d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083d8:	0711      	lsls	r1, r2, #28
 80083da:	bf44      	itt	mi
 80083dc:	232b      	movmi	r3, #43	@ 0x2b
 80083de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80083e2:	f89a 3000 	ldrb.w	r3, [sl]
 80083e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80083e8:	d015      	beq.n	8008416 <_svfiprintf_r+0xfa>
 80083ea:	9a07      	ldr	r2, [sp, #28]
 80083ec:	4654      	mov	r4, sl
 80083ee:	2000      	movs	r0, #0
 80083f0:	f04f 0c0a 	mov.w	ip, #10
 80083f4:	4621      	mov	r1, r4
 80083f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083fa:	3b30      	subs	r3, #48	@ 0x30
 80083fc:	2b09      	cmp	r3, #9
 80083fe:	d94b      	bls.n	8008498 <_svfiprintf_r+0x17c>
 8008400:	b1b0      	cbz	r0, 8008430 <_svfiprintf_r+0x114>
 8008402:	9207      	str	r2, [sp, #28]
 8008404:	e014      	b.n	8008430 <_svfiprintf_r+0x114>
 8008406:	eba0 0308 	sub.w	r3, r0, r8
 800840a:	fa09 f303 	lsl.w	r3, r9, r3
 800840e:	4313      	orrs	r3, r2
 8008410:	9304      	str	r3, [sp, #16]
 8008412:	46a2      	mov	sl, r4
 8008414:	e7d2      	b.n	80083bc <_svfiprintf_r+0xa0>
 8008416:	9b03      	ldr	r3, [sp, #12]
 8008418:	1d19      	adds	r1, r3, #4
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	9103      	str	r1, [sp, #12]
 800841e:	2b00      	cmp	r3, #0
 8008420:	bfbb      	ittet	lt
 8008422:	425b      	neglt	r3, r3
 8008424:	f042 0202 	orrlt.w	r2, r2, #2
 8008428:	9307      	strge	r3, [sp, #28]
 800842a:	9307      	strlt	r3, [sp, #28]
 800842c:	bfb8      	it	lt
 800842e:	9204      	strlt	r2, [sp, #16]
 8008430:	7823      	ldrb	r3, [r4, #0]
 8008432:	2b2e      	cmp	r3, #46	@ 0x2e
 8008434:	d10a      	bne.n	800844c <_svfiprintf_r+0x130>
 8008436:	7863      	ldrb	r3, [r4, #1]
 8008438:	2b2a      	cmp	r3, #42	@ 0x2a
 800843a:	d132      	bne.n	80084a2 <_svfiprintf_r+0x186>
 800843c:	9b03      	ldr	r3, [sp, #12]
 800843e:	1d1a      	adds	r2, r3, #4
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	9203      	str	r2, [sp, #12]
 8008444:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008448:	3402      	adds	r4, #2
 800844a:	9305      	str	r3, [sp, #20]
 800844c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008510 <_svfiprintf_r+0x1f4>
 8008450:	7821      	ldrb	r1, [r4, #0]
 8008452:	2203      	movs	r2, #3
 8008454:	4650      	mov	r0, sl
 8008456:	f7f7 febb 	bl	80001d0 <memchr>
 800845a:	b138      	cbz	r0, 800846c <_svfiprintf_r+0x150>
 800845c:	9b04      	ldr	r3, [sp, #16]
 800845e:	eba0 000a 	sub.w	r0, r0, sl
 8008462:	2240      	movs	r2, #64	@ 0x40
 8008464:	4082      	lsls	r2, r0
 8008466:	4313      	orrs	r3, r2
 8008468:	3401      	adds	r4, #1
 800846a:	9304      	str	r3, [sp, #16]
 800846c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008470:	4824      	ldr	r0, [pc, #144]	@ (8008504 <_svfiprintf_r+0x1e8>)
 8008472:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008476:	2206      	movs	r2, #6
 8008478:	f7f7 feaa 	bl	80001d0 <memchr>
 800847c:	2800      	cmp	r0, #0
 800847e:	d036      	beq.n	80084ee <_svfiprintf_r+0x1d2>
 8008480:	4b21      	ldr	r3, [pc, #132]	@ (8008508 <_svfiprintf_r+0x1ec>)
 8008482:	bb1b      	cbnz	r3, 80084cc <_svfiprintf_r+0x1b0>
 8008484:	9b03      	ldr	r3, [sp, #12]
 8008486:	3307      	adds	r3, #7
 8008488:	f023 0307 	bic.w	r3, r3, #7
 800848c:	3308      	adds	r3, #8
 800848e:	9303      	str	r3, [sp, #12]
 8008490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008492:	4433      	add	r3, r6
 8008494:	9309      	str	r3, [sp, #36]	@ 0x24
 8008496:	e76a      	b.n	800836e <_svfiprintf_r+0x52>
 8008498:	fb0c 3202 	mla	r2, ip, r2, r3
 800849c:	460c      	mov	r4, r1
 800849e:	2001      	movs	r0, #1
 80084a0:	e7a8      	b.n	80083f4 <_svfiprintf_r+0xd8>
 80084a2:	2300      	movs	r3, #0
 80084a4:	3401      	adds	r4, #1
 80084a6:	9305      	str	r3, [sp, #20]
 80084a8:	4619      	mov	r1, r3
 80084aa:	f04f 0c0a 	mov.w	ip, #10
 80084ae:	4620      	mov	r0, r4
 80084b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084b4:	3a30      	subs	r2, #48	@ 0x30
 80084b6:	2a09      	cmp	r2, #9
 80084b8:	d903      	bls.n	80084c2 <_svfiprintf_r+0x1a6>
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d0c6      	beq.n	800844c <_svfiprintf_r+0x130>
 80084be:	9105      	str	r1, [sp, #20]
 80084c0:	e7c4      	b.n	800844c <_svfiprintf_r+0x130>
 80084c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80084c6:	4604      	mov	r4, r0
 80084c8:	2301      	movs	r3, #1
 80084ca:	e7f0      	b.n	80084ae <_svfiprintf_r+0x192>
 80084cc:	ab03      	add	r3, sp, #12
 80084ce:	9300      	str	r3, [sp, #0]
 80084d0:	462a      	mov	r2, r5
 80084d2:	4b0e      	ldr	r3, [pc, #56]	@ (800850c <_svfiprintf_r+0x1f0>)
 80084d4:	a904      	add	r1, sp, #16
 80084d6:	4638      	mov	r0, r7
 80084d8:	f7fc fcc8 	bl	8004e6c <_printf_float>
 80084dc:	1c42      	adds	r2, r0, #1
 80084de:	4606      	mov	r6, r0
 80084e0:	d1d6      	bne.n	8008490 <_svfiprintf_r+0x174>
 80084e2:	89ab      	ldrh	r3, [r5, #12]
 80084e4:	065b      	lsls	r3, r3, #25
 80084e6:	f53f af2d 	bmi.w	8008344 <_svfiprintf_r+0x28>
 80084ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80084ec:	e72c      	b.n	8008348 <_svfiprintf_r+0x2c>
 80084ee:	ab03      	add	r3, sp, #12
 80084f0:	9300      	str	r3, [sp, #0]
 80084f2:	462a      	mov	r2, r5
 80084f4:	4b05      	ldr	r3, [pc, #20]	@ (800850c <_svfiprintf_r+0x1f0>)
 80084f6:	a904      	add	r1, sp, #16
 80084f8:	4638      	mov	r0, r7
 80084fa:	f7fc ff4f 	bl	800539c <_printf_i>
 80084fe:	e7ed      	b.n	80084dc <_svfiprintf_r+0x1c0>
 8008500:	080097d9 	.word	0x080097d9
 8008504:	080097e3 	.word	0x080097e3
 8008508:	08004e6d 	.word	0x08004e6d
 800850c:	08008265 	.word	0x08008265
 8008510:	080097df 	.word	0x080097df

08008514 <__sflush_r>:
 8008514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800851c:	0716      	lsls	r6, r2, #28
 800851e:	4605      	mov	r5, r0
 8008520:	460c      	mov	r4, r1
 8008522:	d454      	bmi.n	80085ce <__sflush_r+0xba>
 8008524:	684b      	ldr	r3, [r1, #4]
 8008526:	2b00      	cmp	r3, #0
 8008528:	dc02      	bgt.n	8008530 <__sflush_r+0x1c>
 800852a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800852c:	2b00      	cmp	r3, #0
 800852e:	dd48      	ble.n	80085c2 <__sflush_r+0xae>
 8008530:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008532:	2e00      	cmp	r6, #0
 8008534:	d045      	beq.n	80085c2 <__sflush_r+0xae>
 8008536:	2300      	movs	r3, #0
 8008538:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800853c:	682f      	ldr	r7, [r5, #0]
 800853e:	6a21      	ldr	r1, [r4, #32]
 8008540:	602b      	str	r3, [r5, #0]
 8008542:	d030      	beq.n	80085a6 <__sflush_r+0x92>
 8008544:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008546:	89a3      	ldrh	r3, [r4, #12]
 8008548:	0759      	lsls	r1, r3, #29
 800854a:	d505      	bpl.n	8008558 <__sflush_r+0x44>
 800854c:	6863      	ldr	r3, [r4, #4]
 800854e:	1ad2      	subs	r2, r2, r3
 8008550:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008552:	b10b      	cbz	r3, 8008558 <__sflush_r+0x44>
 8008554:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008556:	1ad2      	subs	r2, r2, r3
 8008558:	2300      	movs	r3, #0
 800855a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800855c:	6a21      	ldr	r1, [r4, #32]
 800855e:	4628      	mov	r0, r5
 8008560:	47b0      	blx	r6
 8008562:	1c43      	adds	r3, r0, #1
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	d106      	bne.n	8008576 <__sflush_r+0x62>
 8008568:	6829      	ldr	r1, [r5, #0]
 800856a:	291d      	cmp	r1, #29
 800856c:	d82b      	bhi.n	80085c6 <__sflush_r+0xb2>
 800856e:	4a2a      	ldr	r2, [pc, #168]	@ (8008618 <__sflush_r+0x104>)
 8008570:	410a      	asrs	r2, r1
 8008572:	07d6      	lsls	r6, r2, #31
 8008574:	d427      	bmi.n	80085c6 <__sflush_r+0xb2>
 8008576:	2200      	movs	r2, #0
 8008578:	6062      	str	r2, [r4, #4]
 800857a:	04d9      	lsls	r1, r3, #19
 800857c:	6922      	ldr	r2, [r4, #16]
 800857e:	6022      	str	r2, [r4, #0]
 8008580:	d504      	bpl.n	800858c <__sflush_r+0x78>
 8008582:	1c42      	adds	r2, r0, #1
 8008584:	d101      	bne.n	800858a <__sflush_r+0x76>
 8008586:	682b      	ldr	r3, [r5, #0]
 8008588:	b903      	cbnz	r3, 800858c <__sflush_r+0x78>
 800858a:	6560      	str	r0, [r4, #84]	@ 0x54
 800858c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800858e:	602f      	str	r7, [r5, #0]
 8008590:	b1b9      	cbz	r1, 80085c2 <__sflush_r+0xae>
 8008592:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008596:	4299      	cmp	r1, r3
 8008598:	d002      	beq.n	80085a0 <__sflush_r+0x8c>
 800859a:	4628      	mov	r0, r5
 800859c:	f7fe fa2c 	bl	80069f8 <_free_r>
 80085a0:	2300      	movs	r3, #0
 80085a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80085a4:	e00d      	b.n	80085c2 <__sflush_r+0xae>
 80085a6:	2301      	movs	r3, #1
 80085a8:	4628      	mov	r0, r5
 80085aa:	47b0      	blx	r6
 80085ac:	4602      	mov	r2, r0
 80085ae:	1c50      	adds	r0, r2, #1
 80085b0:	d1c9      	bne.n	8008546 <__sflush_r+0x32>
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d0c6      	beq.n	8008546 <__sflush_r+0x32>
 80085b8:	2b1d      	cmp	r3, #29
 80085ba:	d001      	beq.n	80085c0 <__sflush_r+0xac>
 80085bc:	2b16      	cmp	r3, #22
 80085be:	d11e      	bne.n	80085fe <__sflush_r+0xea>
 80085c0:	602f      	str	r7, [r5, #0]
 80085c2:	2000      	movs	r0, #0
 80085c4:	e022      	b.n	800860c <__sflush_r+0xf8>
 80085c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085ca:	b21b      	sxth	r3, r3
 80085cc:	e01b      	b.n	8008606 <__sflush_r+0xf2>
 80085ce:	690f      	ldr	r7, [r1, #16]
 80085d0:	2f00      	cmp	r7, #0
 80085d2:	d0f6      	beq.n	80085c2 <__sflush_r+0xae>
 80085d4:	0793      	lsls	r3, r2, #30
 80085d6:	680e      	ldr	r6, [r1, #0]
 80085d8:	bf08      	it	eq
 80085da:	694b      	ldreq	r3, [r1, #20]
 80085dc:	600f      	str	r7, [r1, #0]
 80085de:	bf18      	it	ne
 80085e0:	2300      	movne	r3, #0
 80085e2:	eba6 0807 	sub.w	r8, r6, r7
 80085e6:	608b      	str	r3, [r1, #8]
 80085e8:	f1b8 0f00 	cmp.w	r8, #0
 80085ec:	dde9      	ble.n	80085c2 <__sflush_r+0xae>
 80085ee:	6a21      	ldr	r1, [r4, #32]
 80085f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80085f2:	4643      	mov	r3, r8
 80085f4:	463a      	mov	r2, r7
 80085f6:	4628      	mov	r0, r5
 80085f8:	47b0      	blx	r6
 80085fa:	2800      	cmp	r0, #0
 80085fc:	dc08      	bgt.n	8008610 <__sflush_r+0xfc>
 80085fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008606:	81a3      	strh	r3, [r4, #12]
 8008608:	f04f 30ff 	mov.w	r0, #4294967295
 800860c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008610:	4407      	add	r7, r0
 8008612:	eba8 0800 	sub.w	r8, r8, r0
 8008616:	e7e7      	b.n	80085e8 <__sflush_r+0xd4>
 8008618:	dfbffffe 	.word	0xdfbffffe

0800861c <_fflush_r>:
 800861c:	b538      	push	{r3, r4, r5, lr}
 800861e:	690b      	ldr	r3, [r1, #16]
 8008620:	4605      	mov	r5, r0
 8008622:	460c      	mov	r4, r1
 8008624:	b913      	cbnz	r3, 800862c <_fflush_r+0x10>
 8008626:	2500      	movs	r5, #0
 8008628:	4628      	mov	r0, r5
 800862a:	bd38      	pop	{r3, r4, r5, pc}
 800862c:	b118      	cbz	r0, 8008636 <_fflush_r+0x1a>
 800862e:	6a03      	ldr	r3, [r0, #32]
 8008630:	b90b      	cbnz	r3, 8008636 <_fflush_r+0x1a>
 8008632:	f7fd fa73 	bl	8005b1c <__sinit>
 8008636:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d0f3      	beq.n	8008626 <_fflush_r+0xa>
 800863e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008640:	07d0      	lsls	r0, r2, #31
 8008642:	d404      	bmi.n	800864e <_fflush_r+0x32>
 8008644:	0599      	lsls	r1, r3, #22
 8008646:	d402      	bmi.n	800864e <_fflush_r+0x32>
 8008648:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800864a:	f7fd fb7e 	bl	8005d4a <__retarget_lock_acquire_recursive>
 800864e:	4628      	mov	r0, r5
 8008650:	4621      	mov	r1, r4
 8008652:	f7ff ff5f 	bl	8008514 <__sflush_r>
 8008656:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008658:	07da      	lsls	r2, r3, #31
 800865a:	4605      	mov	r5, r0
 800865c:	d4e4      	bmi.n	8008628 <_fflush_r+0xc>
 800865e:	89a3      	ldrh	r3, [r4, #12]
 8008660:	059b      	lsls	r3, r3, #22
 8008662:	d4e1      	bmi.n	8008628 <_fflush_r+0xc>
 8008664:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008666:	f7fd fb71 	bl	8005d4c <__retarget_lock_release_recursive>
 800866a:	e7dd      	b.n	8008628 <_fflush_r+0xc>

0800866c <memmove>:
 800866c:	4288      	cmp	r0, r1
 800866e:	b510      	push	{r4, lr}
 8008670:	eb01 0402 	add.w	r4, r1, r2
 8008674:	d902      	bls.n	800867c <memmove+0x10>
 8008676:	4284      	cmp	r4, r0
 8008678:	4623      	mov	r3, r4
 800867a:	d807      	bhi.n	800868c <memmove+0x20>
 800867c:	1e43      	subs	r3, r0, #1
 800867e:	42a1      	cmp	r1, r4
 8008680:	d008      	beq.n	8008694 <memmove+0x28>
 8008682:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008686:	f803 2f01 	strb.w	r2, [r3, #1]!
 800868a:	e7f8      	b.n	800867e <memmove+0x12>
 800868c:	4402      	add	r2, r0
 800868e:	4601      	mov	r1, r0
 8008690:	428a      	cmp	r2, r1
 8008692:	d100      	bne.n	8008696 <memmove+0x2a>
 8008694:	bd10      	pop	{r4, pc}
 8008696:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800869a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800869e:	e7f7      	b.n	8008690 <memmove+0x24>

080086a0 <strncmp>:
 80086a0:	b510      	push	{r4, lr}
 80086a2:	b16a      	cbz	r2, 80086c0 <strncmp+0x20>
 80086a4:	3901      	subs	r1, #1
 80086a6:	1884      	adds	r4, r0, r2
 80086a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d103      	bne.n	80086bc <strncmp+0x1c>
 80086b4:	42a0      	cmp	r0, r4
 80086b6:	d001      	beq.n	80086bc <strncmp+0x1c>
 80086b8:	2a00      	cmp	r2, #0
 80086ba:	d1f5      	bne.n	80086a8 <strncmp+0x8>
 80086bc:	1ad0      	subs	r0, r2, r3
 80086be:	bd10      	pop	{r4, pc}
 80086c0:	4610      	mov	r0, r2
 80086c2:	e7fc      	b.n	80086be <strncmp+0x1e>

080086c4 <_sbrk_r>:
 80086c4:	b538      	push	{r3, r4, r5, lr}
 80086c6:	4d06      	ldr	r5, [pc, #24]	@ (80086e0 <_sbrk_r+0x1c>)
 80086c8:	2300      	movs	r3, #0
 80086ca:	4604      	mov	r4, r0
 80086cc:	4608      	mov	r0, r1
 80086ce:	602b      	str	r3, [r5, #0]
 80086d0:	f7f9 f972 	bl	80019b8 <_sbrk>
 80086d4:	1c43      	adds	r3, r0, #1
 80086d6:	d102      	bne.n	80086de <_sbrk_r+0x1a>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	b103      	cbz	r3, 80086de <_sbrk_r+0x1a>
 80086dc:	6023      	str	r3, [r4, #0]
 80086de:	bd38      	pop	{r3, r4, r5, pc}
 80086e0:	2000047c 	.word	0x2000047c

080086e4 <memcpy>:
 80086e4:	440a      	add	r2, r1
 80086e6:	4291      	cmp	r1, r2
 80086e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80086ec:	d100      	bne.n	80086f0 <memcpy+0xc>
 80086ee:	4770      	bx	lr
 80086f0:	b510      	push	{r4, lr}
 80086f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086fa:	4291      	cmp	r1, r2
 80086fc:	d1f9      	bne.n	80086f2 <memcpy+0xe>
 80086fe:	bd10      	pop	{r4, pc}

08008700 <nan>:
 8008700:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008708 <nan+0x8>
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	00000000 	.word	0x00000000
 800870c:	7ff80000 	.word	0x7ff80000

08008710 <__assert_func>:
 8008710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008712:	4614      	mov	r4, r2
 8008714:	461a      	mov	r2, r3
 8008716:	4b09      	ldr	r3, [pc, #36]	@ (800873c <__assert_func+0x2c>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	4605      	mov	r5, r0
 800871c:	68d8      	ldr	r0, [r3, #12]
 800871e:	b954      	cbnz	r4, 8008736 <__assert_func+0x26>
 8008720:	4b07      	ldr	r3, [pc, #28]	@ (8008740 <__assert_func+0x30>)
 8008722:	461c      	mov	r4, r3
 8008724:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008728:	9100      	str	r1, [sp, #0]
 800872a:	462b      	mov	r3, r5
 800872c:	4905      	ldr	r1, [pc, #20]	@ (8008744 <__assert_func+0x34>)
 800872e:	f000 fba7 	bl	8008e80 <fiprintf>
 8008732:	f000 fbb7 	bl	8008ea4 <abort>
 8008736:	4b04      	ldr	r3, [pc, #16]	@ (8008748 <__assert_func+0x38>)
 8008738:	e7f4      	b.n	8008724 <__assert_func+0x14>
 800873a:	bf00      	nop
 800873c:	20000018 	.word	0x20000018
 8008740:	0800982d 	.word	0x0800982d
 8008744:	080097ff 	.word	0x080097ff
 8008748:	080097f2 	.word	0x080097f2

0800874c <_calloc_r>:
 800874c:	b570      	push	{r4, r5, r6, lr}
 800874e:	fba1 5402 	umull	r5, r4, r1, r2
 8008752:	b93c      	cbnz	r4, 8008764 <_calloc_r+0x18>
 8008754:	4629      	mov	r1, r5
 8008756:	f7fe f9c3 	bl	8006ae0 <_malloc_r>
 800875a:	4606      	mov	r6, r0
 800875c:	b928      	cbnz	r0, 800876a <_calloc_r+0x1e>
 800875e:	2600      	movs	r6, #0
 8008760:	4630      	mov	r0, r6
 8008762:	bd70      	pop	{r4, r5, r6, pc}
 8008764:	220c      	movs	r2, #12
 8008766:	6002      	str	r2, [r0, #0]
 8008768:	e7f9      	b.n	800875e <_calloc_r+0x12>
 800876a:	462a      	mov	r2, r5
 800876c:	4621      	mov	r1, r4
 800876e:	f7fd fa6e 	bl	8005c4e <memset>
 8008772:	e7f5      	b.n	8008760 <_calloc_r+0x14>

08008774 <rshift>:
 8008774:	6903      	ldr	r3, [r0, #16]
 8008776:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800877a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800877e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008782:	f100 0414 	add.w	r4, r0, #20
 8008786:	dd45      	ble.n	8008814 <rshift+0xa0>
 8008788:	f011 011f 	ands.w	r1, r1, #31
 800878c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008790:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008794:	d10c      	bne.n	80087b0 <rshift+0x3c>
 8008796:	f100 0710 	add.w	r7, r0, #16
 800879a:	4629      	mov	r1, r5
 800879c:	42b1      	cmp	r1, r6
 800879e:	d334      	bcc.n	800880a <rshift+0x96>
 80087a0:	1a9b      	subs	r3, r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	1eea      	subs	r2, r5, #3
 80087a6:	4296      	cmp	r6, r2
 80087a8:	bf38      	it	cc
 80087aa:	2300      	movcc	r3, #0
 80087ac:	4423      	add	r3, r4
 80087ae:	e015      	b.n	80087dc <rshift+0x68>
 80087b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80087b4:	f1c1 0820 	rsb	r8, r1, #32
 80087b8:	40cf      	lsrs	r7, r1
 80087ba:	f105 0e04 	add.w	lr, r5, #4
 80087be:	46a1      	mov	r9, r4
 80087c0:	4576      	cmp	r6, lr
 80087c2:	46f4      	mov	ip, lr
 80087c4:	d815      	bhi.n	80087f2 <rshift+0x7e>
 80087c6:	1a9a      	subs	r2, r3, r2
 80087c8:	0092      	lsls	r2, r2, #2
 80087ca:	3a04      	subs	r2, #4
 80087cc:	3501      	adds	r5, #1
 80087ce:	42ae      	cmp	r6, r5
 80087d0:	bf38      	it	cc
 80087d2:	2200      	movcc	r2, #0
 80087d4:	18a3      	adds	r3, r4, r2
 80087d6:	50a7      	str	r7, [r4, r2]
 80087d8:	b107      	cbz	r7, 80087dc <rshift+0x68>
 80087da:	3304      	adds	r3, #4
 80087dc:	1b1a      	subs	r2, r3, r4
 80087de:	42a3      	cmp	r3, r4
 80087e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80087e4:	bf08      	it	eq
 80087e6:	2300      	moveq	r3, #0
 80087e8:	6102      	str	r2, [r0, #16]
 80087ea:	bf08      	it	eq
 80087ec:	6143      	streq	r3, [r0, #20]
 80087ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087f2:	f8dc c000 	ldr.w	ip, [ip]
 80087f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80087fa:	ea4c 0707 	orr.w	r7, ip, r7
 80087fe:	f849 7b04 	str.w	r7, [r9], #4
 8008802:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008806:	40cf      	lsrs	r7, r1
 8008808:	e7da      	b.n	80087c0 <rshift+0x4c>
 800880a:	f851 cb04 	ldr.w	ip, [r1], #4
 800880e:	f847 cf04 	str.w	ip, [r7, #4]!
 8008812:	e7c3      	b.n	800879c <rshift+0x28>
 8008814:	4623      	mov	r3, r4
 8008816:	e7e1      	b.n	80087dc <rshift+0x68>

08008818 <__hexdig_fun>:
 8008818:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800881c:	2b09      	cmp	r3, #9
 800881e:	d802      	bhi.n	8008826 <__hexdig_fun+0xe>
 8008820:	3820      	subs	r0, #32
 8008822:	b2c0      	uxtb	r0, r0
 8008824:	4770      	bx	lr
 8008826:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800882a:	2b05      	cmp	r3, #5
 800882c:	d801      	bhi.n	8008832 <__hexdig_fun+0x1a>
 800882e:	3847      	subs	r0, #71	@ 0x47
 8008830:	e7f7      	b.n	8008822 <__hexdig_fun+0xa>
 8008832:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008836:	2b05      	cmp	r3, #5
 8008838:	d801      	bhi.n	800883e <__hexdig_fun+0x26>
 800883a:	3827      	subs	r0, #39	@ 0x27
 800883c:	e7f1      	b.n	8008822 <__hexdig_fun+0xa>
 800883e:	2000      	movs	r0, #0
 8008840:	4770      	bx	lr
	...

08008844 <__gethex>:
 8008844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008848:	b085      	sub	sp, #20
 800884a:	468a      	mov	sl, r1
 800884c:	9302      	str	r3, [sp, #8]
 800884e:	680b      	ldr	r3, [r1, #0]
 8008850:	9001      	str	r0, [sp, #4]
 8008852:	4690      	mov	r8, r2
 8008854:	1c9c      	adds	r4, r3, #2
 8008856:	46a1      	mov	r9, r4
 8008858:	f814 0b01 	ldrb.w	r0, [r4], #1
 800885c:	2830      	cmp	r0, #48	@ 0x30
 800885e:	d0fa      	beq.n	8008856 <__gethex+0x12>
 8008860:	eba9 0303 	sub.w	r3, r9, r3
 8008864:	f1a3 0b02 	sub.w	fp, r3, #2
 8008868:	f7ff ffd6 	bl	8008818 <__hexdig_fun>
 800886c:	4605      	mov	r5, r0
 800886e:	2800      	cmp	r0, #0
 8008870:	d168      	bne.n	8008944 <__gethex+0x100>
 8008872:	49a0      	ldr	r1, [pc, #640]	@ (8008af4 <__gethex+0x2b0>)
 8008874:	2201      	movs	r2, #1
 8008876:	4648      	mov	r0, r9
 8008878:	f7ff ff12 	bl	80086a0 <strncmp>
 800887c:	4607      	mov	r7, r0
 800887e:	2800      	cmp	r0, #0
 8008880:	d167      	bne.n	8008952 <__gethex+0x10e>
 8008882:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008886:	4626      	mov	r6, r4
 8008888:	f7ff ffc6 	bl	8008818 <__hexdig_fun>
 800888c:	2800      	cmp	r0, #0
 800888e:	d062      	beq.n	8008956 <__gethex+0x112>
 8008890:	4623      	mov	r3, r4
 8008892:	7818      	ldrb	r0, [r3, #0]
 8008894:	2830      	cmp	r0, #48	@ 0x30
 8008896:	4699      	mov	r9, r3
 8008898:	f103 0301 	add.w	r3, r3, #1
 800889c:	d0f9      	beq.n	8008892 <__gethex+0x4e>
 800889e:	f7ff ffbb 	bl	8008818 <__hexdig_fun>
 80088a2:	fab0 f580 	clz	r5, r0
 80088a6:	096d      	lsrs	r5, r5, #5
 80088a8:	f04f 0b01 	mov.w	fp, #1
 80088ac:	464a      	mov	r2, r9
 80088ae:	4616      	mov	r6, r2
 80088b0:	3201      	adds	r2, #1
 80088b2:	7830      	ldrb	r0, [r6, #0]
 80088b4:	f7ff ffb0 	bl	8008818 <__hexdig_fun>
 80088b8:	2800      	cmp	r0, #0
 80088ba:	d1f8      	bne.n	80088ae <__gethex+0x6a>
 80088bc:	498d      	ldr	r1, [pc, #564]	@ (8008af4 <__gethex+0x2b0>)
 80088be:	2201      	movs	r2, #1
 80088c0:	4630      	mov	r0, r6
 80088c2:	f7ff feed 	bl	80086a0 <strncmp>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	d13f      	bne.n	800894a <__gethex+0x106>
 80088ca:	b944      	cbnz	r4, 80088de <__gethex+0x9a>
 80088cc:	1c74      	adds	r4, r6, #1
 80088ce:	4622      	mov	r2, r4
 80088d0:	4616      	mov	r6, r2
 80088d2:	3201      	adds	r2, #1
 80088d4:	7830      	ldrb	r0, [r6, #0]
 80088d6:	f7ff ff9f 	bl	8008818 <__hexdig_fun>
 80088da:	2800      	cmp	r0, #0
 80088dc:	d1f8      	bne.n	80088d0 <__gethex+0x8c>
 80088de:	1ba4      	subs	r4, r4, r6
 80088e0:	00a7      	lsls	r7, r4, #2
 80088e2:	7833      	ldrb	r3, [r6, #0]
 80088e4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80088e8:	2b50      	cmp	r3, #80	@ 0x50
 80088ea:	d13e      	bne.n	800896a <__gethex+0x126>
 80088ec:	7873      	ldrb	r3, [r6, #1]
 80088ee:	2b2b      	cmp	r3, #43	@ 0x2b
 80088f0:	d033      	beq.n	800895a <__gethex+0x116>
 80088f2:	2b2d      	cmp	r3, #45	@ 0x2d
 80088f4:	d034      	beq.n	8008960 <__gethex+0x11c>
 80088f6:	1c71      	adds	r1, r6, #1
 80088f8:	2400      	movs	r4, #0
 80088fa:	7808      	ldrb	r0, [r1, #0]
 80088fc:	f7ff ff8c 	bl	8008818 <__hexdig_fun>
 8008900:	1e43      	subs	r3, r0, #1
 8008902:	b2db      	uxtb	r3, r3
 8008904:	2b18      	cmp	r3, #24
 8008906:	d830      	bhi.n	800896a <__gethex+0x126>
 8008908:	f1a0 0210 	sub.w	r2, r0, #16
 800890c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008910:	f7ff ff82 	bl	8008818 <__hexdig_fun>
 8008914:	f100 3cff 	add.w	ip, r0, #4294967295
 8008918:	fa5f fc8c 	uxtb.w	ip, ip
 800891c:	f1bc 0f18 	cmp.w	ip, #24
 8008920:	f04f 030a 	mov.w	r3, #10
 8008924:	d91e      	bls.n	8008964 <__gethex+0x120>
 8008926:	b104      	cbz	r4, 800892a <__gethex+0xe6>
 8008928:	4252      	negs	r2, r2
 800892a:	4417      	add	r7, r2
 800892c:	f8ca 1000 	str.w	r1, [sl]
 8008930:	b1ed      	cbz	r5, 800896e <__gethex+0x12a>
 8008932:	f1bb 0f00 	cmp.w	fp, #0
 8008936:	bf0c      	ite	eq
 8008938:	2506      	moveq	r5, #6
 800893a:	2500      	movne	r5, #0
 800893c:	4628      	mov	r0, r5
 800893e:	b005      	add	sp, #20
 8008940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008944:	2500      	movs	r5, #0
 8008946:	462c      	mov	r4, r5
 8008948:	e7b0      	b.n	80088ac <__gethex+0x68>
 800894a:	2c00      	cmp	r4, #0
 800894c:	d1c7      	bne.n	80088de <__gethex+0x9a>
 800894e:	4627      	mov	r7, r4
 8008950:	e7c7      	b.n	80088e2 <__gethex+0x9e>
 8008952:	464e      	mov	r6, r9
 8008954:	462f      	mov	r7, r5
 8008956:	2501      	movs	r5, #1
 8008958:	e7c3      	b.n	80088e2 <__gethex+0x9e>
 800895a:	2400      	movs	r4, #0
 800895c:	1cb1      	adds	r1, r6, #2
 800895e:	e7cc      	b.n	80088fa <__gethex+0xb6>
 8008960:	2401      	movs	r4, #1
 8008962:	e7fb      	b.n	800895c <__gethex+0x118>
 8008964:	fb03 0002 	mla	r0, r3, r2, r0
 8008968:	e7ce      	b.n	8008908 <__gethex+0xc4>
 800896a:	4631      	mov	r1, r6
 800896c:	e7de      	b.n	800892c <__gethex+0xe8>
 800896e:	eba6 0309 	sub.w	r3, r6, r9
 8008972:	3b01      	subs	r3, #1
 8008974:	4629      	mov	r1, r5
 8008976:	2b07      	cmp	r3, #7
 8008978:	dc0a      	bgt.n	8008990 <__gethex+0x14c>
 800897a:	9801      	ldr	r0, [sp, #4]
 800897c:	f7fe f93c 	bl	8006bf8 <_Balloc>
 8008980:	4604      	mov	r4, r0
 8008982:	b940      	cbnz	r0, 8008996 <__gethex+0x152>
 8008984:	4b5c      	ldr	r3, [pc, #368]	@ (8008af8 <__gethex+0x2b4>)
 8008986:	4602      	mov	r2, r0
 8008988:	21e4      	movs	r1, #228	@ 0xe4
 800898a:	485c      	ldr	r0, [pc, #368]	@ (8008afc <__gethex+0x2b8>)
 800898c:	f7ff fec0 	bl	8008710 <__assert_func>
 8008990:	3101      	adds	r1, #1
 8008992:	105b      	asrs	r3, r3, #1
 8008994:	e7ef      	b.n	8008976 <__gethex+0x132>
 8008996:	f100 0a14 	add.w	sl, r0, #20
 800899a:	2300      	movs	r3, #0
 800899c:	4655      	mov	r5, sl
 800899e:	469b      	mov	fp, r3
 80089a0:	45b1      	cmp	r9, r6
 80089a2:	d337      	bcc.n	8008a14 <__gethex+0x1d0>
 80089a4:	f845 bb04 	str.w	fp, [r5], #4
 80089a8:	eba5 050a 	sub.w	r5, r5, sl
 80089ac:	10ad      	asrs	r5, r5, #2
 80089ae:	6125      	str	r5, [r4, #16]
 80089b0:	4658      	mov	r0, fp
 80089b2:	f7fe fa13 	bl	8006ddc <__hi0bits>
 80089b6:	016d      	lsls	r5, r5, #5
 80089b8:	f8d8 6000 	ldr.w	r6, [r8]
 80089bc:	1a2d      	subs	r5, r5, r0
 80089be:	42b5      	cmp	r5, r6
 80089c0:	dd54      	ble.n	8008a6c <__gethex+0x228>
 80089c2:	1bad      	subs	r5, r5, r6
 80089c4:	4629      	mov	r1, r5
 80089c6:	4620      	mov	r0, r4
 80089c8:	f7fe fda7 	bl	800751a <__any_on>
 80089cc:	4681      	mov	r9, r0
 80089ce:	b178      	cbz	r0, 80089f0 <__gethex+0x1ac>
 80089d0:	1e6b      	subs	r3, r5, #1
 80089d2:	1159      	asrs	r1, r3, #5
 80089d4:	f003 021f 	and.w	r2, r3, #31
 80089d8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80089dc:	f04f 0901 	mov.w	r9, #1
 80089e0:	fa09 f202 	lsl.w	r2, r9, r2
 80089e4:	420a      	tst	r2, r1
 80089e6:	d003      	beq.n	80089f0 <__gethex+0x1ac>
 80089e8:	454b      	cmp	r3, r9
 80089ea:	dc36      	bgt.n	8008a5a <__gethex+0x216>
 80089ec:	f04f 0902 	mov.w	r9, #2
 80089f0:	4629      	mov	r1, r5
 80089f2:	4620      	mov	r0, r4
 80089f4:	f7ff febe 	bl	8008774 <rshift>
 80089f8:	442f      	add	r7, r5
 80089fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089fe:	42bb      	cmp	r3, r7
 8008a00:	da42      	bge.n	8008a88 <__gethex+0x244>
 8008a02:	9801      	ldr	r0, [sp, #4]
 8008a04:	4621      	mov	r1, r4
 8008a06:	f7fe f937 	bl	8006c78 <_Bfree>
 8008a0a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	6013      	str	r3, [r2, #0]
 8008a10:	25a3      	movs	r5, #163	@ 0xa3
 8008a12:	e793      	b.n	800893c <__gethex+0xf8>
 8008a14:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008a18:	2a2e      	cmp	r2, #46	@ 0x2e
 8008a1a:	d012      	beq.n	8008a42 <__gethex+0x1fe>
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	d104      	bne.n	8008a2a <__gethex+0x1e6>
 8008a20:	f845 bb04 	str.w	fp, [r5], #4
 8008a24:	f04f 0b00 	mov.w	fp, #0
 8008a28:	465b      	mov	r3, fp
 8008a2a:	7830      	ldrb	r0, [r6, #0]
 8008a2c:	9303      	str	r3, [sp, #12]
 8008a2e:	f7ff fef3 	bl	8008818 <__hexdig_fun>
 8008a32:	9b03      	ldr	r3, [sp, #12]
 8008a34:	f000 000f 	and.w	r0, r0, #15
 8008a38:	4098      	lsls	r0, r3
 8008a3a:	ea4b 0b00 	orr.w	fp, fp, r0
 8008a3e:	3304      	adds	r3, #4
 8008a40:	e7ae      	b.n	80089a0 <__gethex+0x15c>
 8008a42:	45b1      	cmp	r9, r6
 8008a44:	d8ea      	bhi.n	8008a1c <__gethex+0x1d8>
 8008a46:	492b      	ldr	r1, [pc, #172]	@ (8008af4 <__gethex+0x2b0>)
 8008a48:	9303      	str	r3, [sp, #12]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	4630      	mov	r0, r6
 8008a4e:	f7ff fe27 	bl	80086a0 <strncmp>
 8008a52:	9b03      	ldr	r3, [sp, #12]
 8008a54:	2800      	cmp	r0, #0
 8008a56:	d1e1      	bne.n	8008a1c <__gethex+0x1d8>
 8008a58:	e7a2      	b.n	80089a0 <__gethex+0x15c>
 8008a5a:	1ea9      	subs	r1, r5, #2
 8008a5c:	4620      	mov	r0, r4
 8008a5e:	f7fe fd5c 	bl	800751a <__any_on>
 8008a62:	2800      	cmp	r0, #0
 8008a64:	d0c2      	beq.n	80089ec <__gethex+0x1a8>
 8008a66:	f04f 0903 	mov.w	r9, #3
 8008a6a:	e7c1      	b.n	80089f0 <__gethex+0x1ac>
 8008a6c:	da09      	bge.n	8008a82 <__gethex+0x23e>
 8008a6e:	1b75      	subs	r5, r6, r5
 8008a70:	4621      	mov	r1, r4
 8008a72:	9801      	ldr	r0, [sp, #4]
 8008a74:	462a      	mov	r2, r5
 8008a76:	f7fe fb17 	bl	80070a8 <__lshift>
 8008a7a:	1b7f      	subs	r7, r7, r5
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	f100 0a14 	add.w	sl, r0, #20
 8008a82:	f04f 0900 	mov.w	r9, #0
 8008a86:	e7b8      	b.n	80089fa <__gethex+0x1b6>
 8008a88:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008a8c:	42bd      	cmp	r5, r7
 8008a8e:	dd6f      	ble.n	8008b70 <__gethex+0x32c>
 8008a90:	1bed      	subs	r5, r5, r7
 8008a92:	42ae      	cmp	r6, r5
 8008a94:	dc34      	bgt.n	8008b00 <__gethex+0x2bc>
 8008a96:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d022      	beq.n	8008ae4 <__gethex+0x2a0>
 8008a9e:	2b03      	cmp	r3, #3
 8008aa0:	d024      	beq.n	8008aec <__gethex+0x2a8>
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d115      	bne.n	8008ad2 <__gethex+0x28e>
 8008aa6:	42ae      	cmp	r6, r5
 8008aa8:	d113      	bne.n	8008ad2 <__gethex+0x28e>
 8008aaa:	2e01      	cmp	r6, #1
 8008aac:	d10b      	bne.n	8008ac6 <__gethex+0x282>
 8008aae:	9a02      	ldr	r2, [sp, #8]
 8008ab0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008ab4:	6013      	str	r3, [r2, #0]
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	6123      	str	r3, [r4, #16]
 8008aba:	f8ca 3000 	str.w	r3, [sl]
 8008abe:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ac0:	2562      	movs	r5, #98	@ 0x62
 8008ac2:	601c      	str	r4, [r3, #0]
 8008ac4:	e73a      	b.n	800893c <__gethex+0xf8>
 8008ac6:	1e71      	subs	r1, r6, #1
 8008ac8:	4620      	mov	r0, r4
 8008aca:	f7fe fd26 	bl	800751a <__any_on>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	d1ed      	bne.n	8008aae <__gethex+0x26a>
 8008ad2:	9801      	ldr	r0, [sp, #4]
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	f7fe f8cf 	bl	8006c78 <_Bfree>
 8008ada:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008adc:	2300      	movs	r3, #0
 8008ade:	6013      	str	r3, [r2, #0]
 8008ae0:	2550      	movs	r5, #80	@ 0x50
 8008ae2:	e72b      	b.n	800893c <__gethex+0xf8>
 8008ae4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1f3      	bne.n	8008ad2 <__gethex+0x28e>
 8008aea:	e7e0      	b.n	8008aae <__gethex+0x26a>
 8008aec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1dd      	bne.n	8008aae <__gethex+0x26a>
 8008af2:	e7ee      	b.n	8008ad2 <__gethex+0x28e>
 8008af4:	08009680 	.word	0x08009680
 8008af8:	08009515 	.word	0x08009515
 8008afc:	0800982e 	.word	0x0800982e
 8008b00:	1e6f      	subs	r7, r5, #1
 8008b02:	f1b9 0f00 	cmp.w	r9, #0
 8008b06:	d130      	bne.n	8008b6a <__gethex+0x326>
 8008b08:	b127      	cbz	r7, 8008b14 <__gethex+0x2d0>
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	f7fe fd04 	bl	800751a <__any_on>
 8008b12:	4681      	mov	r9, r0
 8008b14:	117a      	asrs	r2, r7, #5
 8008b16:	2301      	movs	r3, #1
 8008b18:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008b1c:	f007 071f 	and.w	r7, r7, #31
 8008b20:	40bb      	lsls	r3, r7
 8008b22:	4213      	tst	r3, r2
 8008b24:	4629      	mov	r1, r5
 8008b26:	4620      	mov	r0, r4
 8008b28:	bf18      	it	ne
 8008b2a:	f049 0902 	orrne.w	r9, r9, #2
 8008b2e:	f7ff fe21 	bl	8008774 <rshift>
 8008b32:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008b36:	1b76      	subs	r6, r6, r5
 8008b38:	2502      	movs	r5, #2
 8008b3a:	f1b9 0f00 	cmp.w	r9, #0
 8008b3e:	d047      	beq.n	8008bd0 <__gethex+0x38c>
 8008b40:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008b44:	2b02      	cmp	r3, #2
 8008b46:	d015      	beq.n	8008b74 <__gethex+0x330>
 8008b48:	2b03      	cmp	r3, #3
 8008b4a:	d017      	beq.n	8008b7c <__gethex+0x338>
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d109      	bne.n	8008b64 <__gethex+0x320>
 8008b50:	f019 0f02 	tst.w	r9, #2
 8008b54:	d006      	beq.n	8008b64 <__gethex+0x320>
 8008b56:	f8da 3000 	ldr.w	r3, [sl]
 8008b5a:	ea49 0903 	orr.w	r9, r9, r3
 8008b5e:	f019 0f01 	tst.w	r9, #1
 8008b62:	d10e      	bne.n	8008b82 <__gethex+0x33e>
 8008b64:	f045 0510 	orr.w	r5, r5, #16
 8008b68:	e032      	b.n	8008bd0 <__gethex+0x38c>
 8008b6a:	f04f 0901 	mov.w	r9, #1
 8008b6e:	e7d1      	b.n	8008b14 <__gethex+0x2d0>
 8008b70:	2501      	movs	r5, #1
 8008b72:	e7e2      	b.n	8008b3a <__gethex+0x2f6>
 8008b74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b76:	f1c3 0301 	rsb	r3, r3, #1
 8008b7a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0f0      	beq.n	8008b64 <__gethex+0x320>
 8008b82:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b86:	f104 0314 	add.w	r3, r4, #20
 8008b8a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008b8e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008b92:	f04f 0c00 	mov.w	ip, #0
 8008b96:	4618      	mov	r0, r3
 8008b98:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b9c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008ba0:	d01b      	beq.n	8008bda <__gethex+0x396>
 8008ba2:	3201      	adds	r2, #1
 8008ba4:	6002      	str	r2, [r0, #0]
 8008ba6:	2d02      	cmp	r5, #2
 8008ba8:	f104 0314 	add.w	r3, r4, #20
 8008bac:	d13c      	bne.n	8008c28 <__gethex+0x3e4>
 8008bae:	f8d8 2000 	ldr.w	r2, [r8]
 8008bb2:	3a01      	subs	r2, #1
 8008bb4:	42b2      	cmp	r2, r6
 8008bb6:	d109      	bne.n	8008bcc <__gethex+0x388>
 8008bb8:	1171      	asrs	r1, r6, #5
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008bc0:	f006 061f 	and.w	r6, r6, #31
 8008bc4:	fa02 f606 	lsl.w	r6, r2, r6
 8008bc8:	421e      	tst	r6, r3
 8008bca:	d13a      	bne.n	8008c42 <__gethex+0x3fe>
 8008bcc:	f045 0520 	orr.w	r5, r5, #32
 8008bd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bd2:	601c      	str	r4, [r3, #0]
 8008bd4:	9b02      	ldr	r3, [sp, #8]
 8008bd6:	601f      	str	r7, [r3, #0]
 8008bd8:	e6b0      	b.n	800893c <__gethex+0xf8>
 8008bda:	4299      	cmp	r1, r3
 8008bdc:	f843 cc04 	str.w	ip, [r3, #-4]
 8008be0:	d8d9      	bhi.n	8008b96 <__gethex+0x352>
 8008be2:	68a3      	ldr	r3, [r4, #8]
 8008be4:	459b      	cmp	fp, r3
 8008be6:	db17      	blt.n	8008c18 <__gethex+0x3d4>
 8008be8:	6861      	ldr	r1, [r4, #4]
 8008bea:	9801      	ldr	r0, [sp, #4]
 8008bec:	3101      	adds	r1, #1
 8008bee:	f7fe f803 	bl	8006bf8 <_Balloc>
 8008bf2:	4681      	mov	r9, r0
 8008bf4:	b918      	cbnz	r0, 8008bfe <__gethex+0x3ba>
 8008bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8008c60 <__gethex+0x41c>)
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	2184      	movs	r1, #132	@ 0x84
 8008bfc:	e6c5      	b.n	800898a <__gethex+0x146>
 8008bfe:	6922      	ldr	r2, [r4, #16]
 8008c00:	3202      	adds	r2, #2
 8008c02:	f104 010c 	add.w	r1, r4, #12
 8008c06:	0092      	lsls	r2, r2, #2
 8008c08:	300c      	adds	r0, #12
 8008c0a:	f7ff fd6b 	bl	80086e4 <memcpy>
 8008c0e:	4621      	mov	r1, r4
 8008c10:	9801      	ldr	r0, [sp, #4]
 8008c12:	f7fe f831 	bl	8006c78 <_Bfree>
 8008c16:	464c      	mov	r4, r9
 8008c18:	6923      	ldr	r3, [r4, #16]
 8008c1a:	1c5a      	adds	r2, r3, #1
 8008c1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c20:	6122      	str	r2, [r4, #16]
 8008c22:	2201      	movs	r2, #1
 8008c24:	615a      	str	r2, [r3, #20]
 8008c26:	e7be      	b.n	8008ba6 <__gethex+0x362>
 8008c28:	6922      	ldr	r2, [r4, #16]
 8008c2a:	455a      	cmp	r2, fp
 8008c2c:	dd0b      	ble.n	8008c46 <__gethex+0x402>
 8008c2e:	2101      	movs	r1, #1
 8008c30:	4620      	mov	r0, r4
 8008c32:	f7ff fd9f 	bl	8008774 <rshift>
 8008c36:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c3a:	3701      	adds	r7, #1
 8008c3c:	42bb      	cmp	r3, r7
 8008c3e:	f6ff aee0 	blt.w	8008a02 <__gethex+0x1be>
 8008c42:	2501      	movs	r5, #1
 8008c44:	e7c2      	b.n	8008bcc <__gethex+0x388>
 8008c46:	f016 061f 	ands.w	r6, r6, #31
 8008c4a:	d0fa      	beq.n	8008c42 <__gethex+0x3fe>
 8008c4c:	4453      	add	r3, sl
 8008c4e:	f1c6 0620 	rsb	r6, r6, #32
 8008c52:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008c56:	f7fe f8c1 	bl	8006ddc <__hi0bits>
 8008c5a:	42b0      	cmp	r0, r6
 8008c5c:	dbe7      	blt.n	8008c2e <__gethex+0x3ea>
 8008c5e:	e7f0      	b.n	8008c42 <__gethex+0x3fe>
 8008c60:	08009515 	.word	0x08009515

08008c64 <L_shift>:
 8008c64:	f1c2 0208 	rsb	r2, r2, #8
 8008c68:	0092      	lsls	r2, r2, #2
 8008c6a:	b570      	push	{r4, r5, r6, lr}
 8008c6c:	f1c2 0620 	rsb	r6, r2, #32
 8008c70:	6843      	ldr	r3, [r0, #4]
 8008c72:	6804      	ldr	r4, [r0, #0]
 8008c74:	fa03 f506 	lsl.w	r5, r3, r6
 8008c78:	432c      	orrs	r4, r5
 8008c7a:	40d3      	lsrs	r3, r2
 8008c7c:	6004      	str	r4, [r0, #0]
 8008c7e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c82:	4288      	cmp	r0, r1
 8008c84:	d3f4      	bcc.n	8008c70 <L_shift+0xc>
 8008c86:	bd70      	pop	{r4, r5, r6, pc}

08008c88 <__match>:
 8008c88:	b530      	push	{r4, r5, lr}
 8008c8a:	6803      	ldr	r3, [r0, #0]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c92:	b914      	cbnz	r4, 8008c9a <__match+0x12>
 8008c94:	6003      	str	r3, [r0, #0]
 8008c96:	2001      	movs	r0, #1
 8008c98:	bd30      	pop	{r4, r5, pc}
 8008c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c9e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008ca2:	2d19      	cmp	r5, #25
 8008ca4:	bf98      	it	ls
 8008ca6:	3220      	addls	r2, #32
 8008ca8:	42a2      	cmp	r2, r4
 8008caa:	d0f0      	beq.n	8008c8e <__match+0x6>
 8008cac:	2000      	movs	r0, #0
 8008cae:	e7f3      	b.n	8008c98 <__match+0x10>

08008cb0 <__hexnan>:
 8008cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cb4:	680b      	ldr	r3, [r1, #0]
 8008cb6:	6801      	ldr	r1, [r0, #0]
 8008cb8:	115e      	asrs	r6, r3, #5
 8008cba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008cbe:	f013 031f 	ands.w	r3, r3, #31
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	bf18      	it	ne
 8008cc6:	3604      	addne	r6, #4
 8008cc8:	2500      	movs	r5, #0
 8008cca:	1f37      	subs	r7, r6, #4
 8008ccc:	4682      	mov	sl, r0
 8008cce:	4690      	mov	r8, r2
 8008cd0:	9301      	str	r3, [sp, #4]
 8008cd2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008cd6:	46b9      	mov	r9, r7
 8008cd8:	463c      	mov	r4, r7
 8008cda:	9502      	str	r5, [sp, #8]
 8008cdc:	46ab      	mov	fp, r5
 8008cde:	784a      	ldrb	r2, [r1, #1]
 8008ce0:	1c4b      	adds	r3, r1, #1
 8008ce2:	9303      	str	r3, [sp, #12]
 8008ce4:	b342      	cbz	r2, 8008d38 <__hexnan+0x88>
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	9105      	str	r1, [sp, #20]
 8008cea:	9204      	str	r2, [sp, #16]
 8008cec:	f7ff fd94 	bl	8008818 <__hexdig_fun>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d151      	bne.n	8008d98 <__hexnan+0xe8>
 8008cf4:	9a04      	ldr	r2, [sp, #16]
 8008cf6:	9905      	ldr	r1, [sp, #20]
 8008cf8:	2a20      	cmp	r2, #32
 8008cfa:	d818      	bhi.n	8008d2e <__hexnan+0x7e>
 8008cfc:	9b02      	ldr	r3, [sp, #8]
 8008cfe:	459b      	cmp	fp, r3
 8008d00:	dd13      	ble.n	8008d2a <__hexnan+0x7a>
 8008d02:	454c      	cmp	r4, r9
 8008d04:	d206      	bcs.n	8008d14 <__hexnan+0x64>
 8008d06:	2d07      	cmp	r5, #7
 8008d08:	dc04      	bgt.n	8008d14 <__hexnan+0x64>
 8008d0a:	462a      	mov	r2, r5
 8008d0c:	4649      	mov	r1, r9
 8008d0e:	4620      	mov	r0, r4
 8008d10:	f7ff ffa8 	bl	8008c64 <L_shift>
 8008d14:	4544      	cmp	r4, r8
 8008d16:	d952      	bls.n	8008dbe <__hexnan+0x10e>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	f1a4 0904 	sub.w	r9, r4, #4
 8008d1e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d22:	f8cd b008 	str.w	fp, [sp, #8]
 8008d26:	464c      	mov	r4, r9
 8008d28:	461d      	mov	r5, r3
 8008d2a:	9903      	ldr	r1, [sp, #12]
 8008d2c:	e7d7      	b.n	8008cde <__hexnan+0x2e>
 8008d2e:	2a29      	cmp	r2, #41	@ 0x29
 8008d30:	d157      	bne.n	8008de2 <__hexnan+0x132>
 8008d32:	3102      	adds	r1, #2
 8008d34:	f8ca 1000 	str.w	r1, [sl]
 8008d38:	f1bb 0f00 	cmp.w	fp, #0
 8008d3c:	d051      	beq.n	8008de2 <__hexnan+0x132>
 8008d3e:	454c      	cmp	r4, r9
 8008d40:	d206      	bcs.n	8008d50 <__hexnan+0xa0>
 8008d42:	2d07      	cmp	r5, #7
 8008d44:	dc04      	bgt.n	8008d50 <__hexnan+0xa0>
 8008d46:	462a      	mov	r2, r5
 8008d48:	4649      	mov	r1, r9
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f7ff ff8a 	bl	8008c64 <L_shift>
 8008d50:	4544      	cmp	r4, r8
 8008d52:	d936      	bls.n	8008dc2 <__hexnan+0x112>
 8008d54:	f1a8 0204 	sub.w	r2, r8, #4
 8008d58:	4623      	mov	r3, r4
 8008d5a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d5e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d62:	429f      	cmp	r7, r3
 8008d64:	d2f9      	bcs.n	8008d5a <__hexnan+0xaa>
 8008d66:	1b3b      	subs	r3, r7, r4
 8008d68:	f023 0303 	bic.w	r3, r3, #3
 8008d6c:	3304      	adds	r3, #4
 8008d6e:	3401      	adds	r4, #1
 8008d70:	3e03      	subs	r6, #3
 8008d72:	42b4      	cmp	r4, r6
 8008d74:	bf88      	it	hi
 8008d76:	2304      	movhi	r3, #4
 8008d78:	4443      	add	r3, r8
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f843 2b04 	str.w	r2, [r3], #4
 8008d80:	429f      	cmp	r7, r3
 8008d82:	d2fb      	bcs.n	8008d7c <__hexnan+0xcc>
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	b91b      	cbnz	r3, 8008d90 <__hexnan+0xe0>
 8008d88:	4547      	cmp	r7, r8
 8008d8a:	d128      	bne.n	8008dde <__hexnan+0x12e>
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	603b      	str	r3, [r7, #0]
 8008d90:	2005      	movs	r0, #5
 8008d92:	b007      	add	sp, #28
 8008d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d98:	3501      	adds	r5, #1
 8008d9a:	2d08      	cmp	r5, #8
 8008d9c:	f10b 0b01 	add.w	fp, fp, #1
 8008da0:	dd06      	ble.n	8008db0 <__hexnan+0x100>
 8008da2:	4544      	cmp	r4, r8
 8008da4:	d9c1      	bls.n	8008d2a <__hexnan+0x7a>
 8008da6:	2300      	movs	r3, #0
 8008da8:	f844 3c04 	str.w	r3, [r4, #-4]
 8008dac:	2501      	movs	r5, #1
 8008dae:	3c04      	subs	r4, #4
 8008db0:	6822      	ldr	r2, [r4, #0]
 8008db2:	f000 000f 	and.w	r0, r0, #15
 8008db6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008dba:	6020      	str	r0, [r4, #0]
 8008dbc:	e7b5      	b.n	8008d2a <__hexnan+0x7a>
 8008dbe:	2508      	movs	r5, #8
 8008dc0:	e7b3      	b.n	8008d2a <__hexnan+0x7a>
 8008dc2:	9b01      	ldr	r3, [sp, #4]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0dd      	beq.n	8008d84 <__hexnan+0xd4>
 8008dc8:	f1c3 0320 	rsb	r3, r3, #32
 8008dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008dd0:	40da      	lsrs	r2, r3
 8008dd2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	f846 3c04 	str.w	r3, [r6, #-4]
 8008ddc:	e7d2      	b.n	8008d84 <__hexnan+0xd4>
 8008dde:	3f04      	subs	r7, #4
 8008de0:	e7d0      	b.n	8008d84 <__hexnan+0xd4>
 8008de2:	2004      	movs	r0, #4
 8008de4:	e7d5      	b.n	8008d92 <__hexnan+0xe2>

08008de6 <__ascii_mbtowc>:
 8008de6:	b082      	sub	sp, #8
 8008de8:	b901      	cbnz	r1, 8008dec <__ascii_mbtowc+0x6>
 8008dea:	a901      	add	r1, sp, #4
 8008dec:	b142      	cbz	r2, 8008e00 <__ascii_mbtowc+0x1a>
 8008dee:	b14b      	cbz	r3, 8008e04 <__ascii_mbtowc+0x1e>
 8008df0:	7813      	ldrb	r3, [r2, #0]
 8008df2:	600b      	str	r3, [r1, #0]
 8008df4:	7812      	ldrb	r2, [r2, #0]
 8008df6:	1e10      	subs	r0, r2, #0
 8008df8:	bf18      	it	ne
 8008dfa:	2001      	movne	r0, #1
 8008dfc:	b002      	add	sp, #8
 8008dfe:	4770      	bx	lr
 8008e00:	4610      	mov	r0, r2
 8008e02:	e7fb      	b.n	8008dfc <__ascii_mbtowc+0x16>
 8008e04:	f06f 0001 	mvn.w	r0, #1
 8008e08:	e7f8      	b.n	8008dfc <__ascii_mbtowc+0x16>

08008e0a <_realloc_r>:
 8008e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0e:	4680      	mov	r8, r0
 8008e10:	4615      	mov	r5, r2
 8008e12:	460c      	mov	r4, r1
 8008e14:	b921      	cbnz	r1, 8008e20 <_realloc_r+0x16>
 8008e16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e1a:	4611      	mov	r1, r2
 8008e1c:	f7fd be60 	b.w	8006ae0 <_malloc_r>
 8008e20:	b92a      	cbnz	r2, 8008e2e <_realloc_r+0x24>
 8008e22:	f7fd fde9 	bl	80069f8 <_free_r>
 8008e26:	2400      	movs	r4, #0
 8008e28:	4620      	mov	r0, r4
 8008e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e2e:	f000 f840 	bl	8008eb2 <_malloc_usable_size_r>
 8008e32:	4285      	cmp	r5, r0
 8008e34:	4606      	mov	r6, r0
 8008e36:	d802      	bhi.n	8008e3e <_realloc_r+0x34>
 8008e38:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008e3c:	d8f4      	bhi.n	8008e28 <_realloc_r+0x1e>
 8008e3e:	4629      	mov	r1, r5
 8008e40:	4640      	mov	r0, r8
 8008e42:	f7fd fe4d 	bl	8006ae0 <_malloc_r>
 8008e46:	4607      	mov	r7, r0
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	d0ec      	beq.n	8008e26 <_realloc_r+0x1c>
 8008e4c:	42b5      	cmp	r5, r6
 8008e4e:	462a      	mov	r2, r5
 8008e50:	4621      	mov	r1, r4
 8008e52:	bf28      	it	cs
 8008e54:	4632      	movcs	r2, r6
 8008e56:	f7ff fc45 	bl	80086e4 <memcpy>
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	4640      	mov	r0, r8
 8008e5e:	f7fd fdcb 	bl	80069f8 <_free_r>
 8008e62:	463c      	mov	r4, r7
 8008e64:	e7e0      	b.n	8008e28 <_realloc_r+0x1e>

08008e66 <__ascii_wctomb>:
 8008e66:	4603      	mov	r3, r0
 8008e68:	4608      	mov	r0, r1
 8008e6a:	b141      	cbz	r1, 8008e7e <__ascii_wctomb+0x18>
 8008e6c:	2aff      	cmp	r2, #255	@ 0xff
 8008e6e:	d904      	bls.n	8008e7a <__ascii_wctomb+0x14>
 8008e70:	228a      	movs	r2, #138	@ 0x8a
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	f04f 30ff 	mov.w	r0, #4294967295
 8008e78:	4770      	bx	lr
 8008e7a:	700a      	strb	r2, [r1, #0]
 8008e7c:	2001      	movs	r0, #1
 8008e7e:	4770      	bx	lr

08008e80 <fiprintf>:
 8008e80:	b40e      	push	{r1, r2, r3}
 8008e82:	b503      	push	{r0, r1, lr}
 8008e84:	4601      	mov	r1, r0
 8008e86:	ab03      	add	r3, sp, #12
 8008e88:	4805      	ldr	r0, [pc, #20]	@ (8008ea0 <fiprintf+0x20>)
 8008e8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e8e:	6800      	ldr	r0, [r0, #0]
 8008e90:	9301      	str	r3, [sp, #4]
 8008e92:	f000 f83f 	bl	8008f14 <_vfiprintf_r>
 8008e96:	b002      	add	sp, #8
 8008e98:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e9c:	b003      	add	sp, #12
 8008e9e:	4770      	bx	lr
 8008ea0:	20000018 	.word	0x20000018

08008ea4 <abort>:
 8008ea4:	b508      	push	{r3, lr}
 8008ea6:	2006      	movs	r0, #6
 8008ea8:	f000 fa08 	bl	80092bc <raise>
 8008eac:	2001      	movs	r0, #1
 8008eae:	f7f8 fd0b 	bl	80018c8 <_exit>

08008eb2 <_malloc_usable_size_r>:
 8008eb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008eb6:	1f18      	subs	r0, r3, #4
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	bfbc      	itt	lt
 8008ebc:	580b      	ldrlt	r3, [r1, r0]
 8008ebe:	18c0      	addlt	r0, r0, r3
 8008ec0:	4770      	bx	lr

08008ec2 <__sfputc_r>:
 8008ec2:	6893      	ldr	r3, [r2, #8]
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	b410      	push	{r4}
 8008eca:	6093      	str	r3, [r2, #8]
 8008ecc:	da08      	bge.n	8008ee0 <__sfputc_r+0x1e>
 8008ece:	6994      	ldr	r4, [r2, #24]
 8008ed0:	42a3      	cmp	r3, r4
 8008ed2:	db01      	blt.n	8008ed8 <__sfputc_r+0x16>
 8008ed4:	290a      	cmp	r1, #10
 8008ed6:	d103      	bne.n	8008ee0 <__sfputc_r+0x1e>
 8008ed8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008edc:	f000 b932 	b.w	8009144 <__swbuf_r>
 8008ee0:	6813      	ldr	r3, [r2, #0]
 8008ee2:	1c58      	adds	r0, r3, #1
 8008ee4:	6010      	str	r0, [r2, #0]
 8008ee6:	7019      	strb	r1, [r3, #0]
 8008ee8:	4608      	mov	r0, r1
 8008eea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <__sfputs_r>:
 8008ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	460f      	mov	r7, r1
 8008ef6:	4614      	mov	r4, r2
 8008ef8:	18d5      	adds	r5, r2, r3
 8008efa:	42ac      	cmp	r4, r5
 8008efc:	d101      	bne.n	8008f02 <__sfputs_r+0x12>
 8008efe:	2000      	movs	r0, #0
 8008f00:	e007      	b.n	8008f12 <__sfputs_r+0x22>
 8008f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f06:	463a      	mov	r2, r7
 8008f08:	4630      	mov	r0, r6
 8008f0a:	f7ff ffda 	bl	8008ec2 <__sfputc_r>
 8008f0e:	1c43      	adds	r3, r0, #1
 8008f10:	d1f3      	bne.n	8008efa <__sfputs_r+0xa>
 8008f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008f14 <_vfiprintf_r>:
 8008f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f18:	460d      	mov	r5, r1
 8008f1a:	b09d      	sub	sp, #116	@ 0x74
 8008f1c:	4614      	mov	r4, r2
 8008f1e:	4698      	mov	r8, r3
 8008f20:	4606      	mov	r6, r0
 8008f22:	b118      	cbz	r0, 8008f2c <_vfiprintf_r+0x18>
 8008f24:	6a03      	ldr	r3, [r0, #32]
 8008f26:	b90b      	cbnz	r3, 8008f2c <_vfiprintf_r+0x18>
 8008f28:	f7fc fdf8 	bl	8005b1c <__sinit>
 8008f2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f2e:	07d9      	lsls	r1, r3, #31
 8008f30:	d405      	bmi.n	8008f3e <_vfiprintf_r+0x2a>
 8008f32:	89ab      	ldrh	r3, [r5, #12]
 8008f34:	059a      	lsls	r2, r3, #22
 8008f36:	d402      	bmi.n	8008f3e <_vfiprintf_r+0x2a>
 8008f38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f3a:	f7fc ff06 	bl	8005d4a <__retarget_lock_acquire_recursive>
 8008f3e:	89ab      	ldrh	r3, [r5, #12]
 8008f40:	071b      	lsls	r3, r3, #28
 8008f42:	d501      	bpl.n	8008f48 <_vfiprintf_r+0x34>
 8008f44:	692b      	ldr	r3, [r5, #16]
 8008f46:	b99b      	cbnz	r3, 8008f70 <_vfiprintf_r+0x5c>
 8008f48:	4629      	mov	r1, r5
 8008f4a:	4630      	mov	r0, r6
 8008f4c:	f000 f938 	bl	80091c0 <__swsetup_r>
 8008f50:	b170      	cbz	r0, 8008f70 <_vfiprintf_r+0x5c>
 8008f52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f54:	07dc      	lsls	r4, r3, #31
 8008f56:	d504      	bpl.n	8008f62 <_vfiprintf_r+0x4e>
 8008f58:	f04f 30ff 	mov.w	r0, #4294967295
 8008f5c:	b01d      	add	sp, #116	@ 0x74
 8008f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f62:	89ab      	ldrh	r3, [r5, #12]
 8008f64:	0598      	lsls	r0, r3, #22
 8008f66:	d4f7      	bmi.n	8008f58 <_vfiprintf_r+0x44>
 8008f68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f6a:	f7fc feef 	bl	8005d4c <__retarget_lock_release_recursive>
 8008f6e:	e7f3      	b.n	8008f58 <_vfiprintf_r+0x44>
 8008f70:	2300      	movs	r3, #0
 8008f72:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f74:	2320      	movs	r3, #32
 8008f76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f7e:	2330      	movs	r3, #48	@ 0x30
 8008f80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009130 <_vfiprintf_r+0x21c>
 8008f84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f88:	f04f 0901 	mov.w	r9, #1
 8008f8c:	4623      	mov	r3, r4
 8008f8e:	469a      	mov	sl, r3
 8008f90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f94:	b10a      	cbz	r2, 8008f9a <_vfiprintf_r+0x86>
 8008f96:	2a25      	cmp	r2, #37	@ 0x25
 8008f98:	d1f9      	bne.n	8008f8e <_vfiprintf_r+0x7a>
 8008f9a:	ebba 0b04 	subs.w	fp, sl, r4
 8008f9e:	d00b      	beq.n	8008fb8 <_vfiprintf_r+0xa4>
 8008fa0:	465b      	mov	r3, fp
 8008fa2:	4622      	mov	r2, r4
 8008fa4:	4629      	mov	r1, r5
 8008fa6:	4630      	mov	r0, r6
 8008fa8:	f7ff ffa2 	bl	8008ef0 <__sfputs_r>
 8008fac:	3001      	adds	r0, #1
 8008fae:	f000 80a7 	beq.w	8009100 <_vfiprintf_r+0x1ec>
 8008fb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fb4:	445a      	add	r2, fp
 8008fb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8008fb8:	f89a 3000 	ldrb.w	r3, [sl]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	f000 809f 	beq.w	8009100 <_vfiprintf_r+0x1ec>
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8008fc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fcc:	f10a 0a01 	add.w	sl, sl, #1
 8008fd0:	9304      	str	r3, [sp, #16]
 8008fd2:	9307      	str	r3, [sp, #28]
 8008fd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fda:	4654      	mov	r4, sl
 8008fdc:	2205      	movs	r2, #5
 8008fde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fe2:	4853      	ldr	r0, [pc, #332]	@ (8009130 <_vfiprintf_r+0x21c>)
 8008fe4:	f7f7 f8f4 	bl	80001d0 <memchr>
 8008fe8:	9a04      	ldr	r2, [sp, #16]
 8008fea:	b9d8      	cbnz	r0, 8009024 <_vfiprintf_r+0x110>
 8008fec:	06d1      	lsls	r1, r2, #27
 8008fee:	bf44      	itt	mi
 8008ff0:	2320      	movmi	r3, #32
 8008ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ff6:	0713      	lsls	r3, r2, #28
 8008ff8:	bf44      	itt	mi
 8008ffa:	232b      	movmi	r3, #43	@ 0x2b
 8008ffc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009000:	f89a 3000 	ldrb.w	r3, [sl]
 8009004:	2b2a      	cmp	r3, #42	@ 0x2a
 8009006:	d015      	beq.n	8009034 <_vfiprintf_r+0x120>
 8009008:	9a07      	ldr	r2, [sp, #28]
 800900a:	4654      	mov	r4, sl
 800900c:	2000      	movs	r0, #0
 800900e:	f04f 0c0a 	mov.w	ip, #10
 8009012:	4621      	mov	r1, r4
 8009014:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009018:	3b30      	subs	r3, #48	@ 0x30
 800901a:	2b09      	cmp	r3, #9
 800901c:	d94b      	bls.n	80090b6 <_vfiprintf_r+0x1a2>
 800901e:	b1b0      	cbz	r0, 800904e <_vfiprintf_r+0x13a>
 8009020:	9207      	str	r2, [sp, #28]
 8009022:	e014      	b.n	800904e <_vfiprintf_r+0x13a>
 8009024:	eba0 0308 	sub.w	r3, r0, r8
 8009028:	fa09 f303 	lsl.w	r3, r9, r3
 800902c:	4313      	orrs	r3, r2
 800902e:	9304      	str	r3, [sp, #16]
 8009030:	46a2      	mov	sl, r4
 8009032:	e7d2      	b.n	8008fda <_vfiprintf_r+0xc6>
 8009034:	9b03      	ldr	r3, [sp, #12]
 8009036:	1d19      	adds	r1, r3, #4
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	9103      	str	r1, [sp, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	bfbb      	ittet	lt
 8009040:	425b      	neglt	r3, r3
 8009042:	f042 0202 	orrlt.w	r2, r2, #2
 8009046:	9307      	strge	r3, [sp, #28]
 8009048:	9307      	strlt	r3, [sp, #28]
 800904a:	bfb8      	it	lt
 800904c:	9204      	strlt	r2, [sp, #16]
 800904e:	7823      	ldrb	r3, [r4, #0]
 8009050:	2b2e      	cmp	r3, #46	@ 0x2e
 8009052:	d10a      	bne.n	800906a <_vfiprintf_r+0x156>
 8009054:	7863      	ldrb	r3, [r4, #1]
 8009056:	2b2a      	cmp	r3, #42	@ 0x2a
 8009058:	d132      	bne.n	80090c0 <_vfiprintf_r+0x1ac>
 800905a:	9b03      	ldr	r3, [sp, #12]
 800905c:	1d1a      	adds	r2, r3, #4
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	9203      	str	r2, [sp, #12]
 8009062:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009066:	3402      	adds	r4, #2
 8009068:	9305      	str	r3, [sp, #20]
 800906a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009140 <_vfiprintf_r+0x22c>
 800906e:	7821      	ldrb	r1, [r4, #0]
 8009070:	2203      	movs	r2, #3
 8009072:	4650      	mov	r0, sl
 8009074:	f7f7 f8ac 	bl	80001d0 <memchr>
 8009078:	b138      	cbz	r0, 800908a <_vfiprintf_r+0x176>
 800907a:	9b04      	ldr	r3, [sp, #16]
 800907c:	eba0 000a 	sub.w	r0, r0, sl
 8009080:	2240      	movs	r2, #64	@ 0x40
 8009082:	4082      	lsls	r2, r0
 8009084:	4313      	orrs	r3, r2
 8009086:	3401      	adds	r4, #1
 8009088:	9304      	str	r3, [sp, #16]
 800908a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800908e:	4829      	ldr	r0, [pc, #164]	@ (8009134 <_vfiprintf_r+0x220>)
 8009090:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009094:	2206      	movs	r2, #6
 8009096:	f7f7 f89b 	bl	80001d0 <memchr>
 800909a:	2800      	cmp	r0, #0
 800909c:	d03f      	beq.n	800911e <_vfiprintf_r+0x20a>
 800909e:	4b26      	ldr	r3, [pc, #152]	@ (8009138 <_vfiprintf_r+0x224>)
 80090a0:	bb1b      	cbnz	r3, 80090ea <_vfiprintf_r+0x1d6>
 80090a2:	9b03      	ldr	r3, [sp, #12]
 80090a4:	3307      	adds	r3, #7
 80090a6:	f023 0307 	bic.w	r3, r3, #7
 80090aa:	3308      	adds	r3, #8
 80090ac:	9303      	str	r3, [sp, #12]
 80090ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090b0:	443b      	add	r3, r7
 80090b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80090b4:	e76a      	b.n	8008f8c <_vfiprintf_r+0x78>
 80090b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80090ba:	460c      	mov	r4, r1
 80090bc:	2001      	movs	r0, #1
 80090be:	e7a8      	b.n	8009012 <_vfiprintf_r+0xfe>
 80090c0:	2300      	movs	r3, #0
 80090c2:	3401      	adds	r4, #1
 80090c4:	9305      	str	r3, [sp, #20]
 80090c6:	4619      	mov	r1, r3
 80090c8:	f04f 0c0a 	mov.w	ip, #10
 80090cc:	4620      	mov	r0, r4
 80090ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090d2:	3a30      	subs	r2, #48	@ 0x30
 80090d4:	2a09      	cmp	r2, #9
 80090d6:	d903      	bls.n	80090e0 <_vfiprintf_r+0x1cc>
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d0c6      	beq.n	800906a <_vfiprintf_r+0x156>
 80090dc:	9105      	str	r1, [sp, #20]
 80090de:	e7c4      	b.n	800906a <_vfiprintf_r+0x156>
 80090e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80090e4:	4604      	mov	r4, r0
 80090e6:	2301      	movs	r3, #1
 80090e8:	e7f0      	b.n	80090cc <_vfiprintf_r+0x1b8>
 80090ea:	ab03      	add	r3, sp, #12
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	462a      	mov	r2, r5
 80090f0:	4b12      	ldr	r3, [pc, #72]	@ (800913c <_vfiprintf_r+0x228>)
 80090f2:	a904      	add	r1, sp, #16
 80090f4:	4630      	mov	r0, r6
 80090f6:	f7fb feb9 	bl	8004e6c <_printf_float>
 80090fa:	4607      	mov	r7, r0
 80090fc:	1c78      	adds	r0, r7, #1
 80090fe:	d1d6      	bne.n	80090ae <_vfiprintf_r+0x19a>
 8009100:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009102:	07d9      	lsls	r1, r3, #31
 8009104:	d405      	bmi.n	8009112 <_vfiprintf_r+0x1fe>
 8009106:	89ab      	ldrh	r3, [r5, #12]
 8009108:	059a      	lsls	r2, r3, #22
 800910a:	d402      	bmi.n	8009112 <_vfiprintf_r+0x1fe>
 800910c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800910e:	f7fc fe1d 	bl	8005d4c <__retarget_lock_release_recursive>
 8009112:	89ab      	ldrh	r3, [r5, #12]
 8009114:	065b      	lsls	r3, r3, #25
 8009116:	f53f af1f 	bmi.w	8008f58 <_vfiprintf_r+0x44>
 800911a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800911c:	e71e      	b.n	8008f5c <_vfiprintf_r+0x48>
 800911e:	ab03      	add	r3, sp, #12
 8009120:	9300      	str	r3, [sp, #0]
 8009122:	462a      	mov	r2, r5
 8009124:	4b05      	ldr	r3, [pc, #20]	@ (800913c <_vfiprintf_r+0x228>)
 8009126:	a904      	add	r1, sp, #16
 8009128:	4630      	mov	r0, r6
 800912a:	f7fc f937 	bl	800539c <_printf_i>
 800912e:	e7e4      	b.n	80090fa <_vfiprintf_r+0x1e6>
 8009130:	080097d9 	.word	0x080097d9
 8009134:	080097e3 	.word	0x080097e3
 8009138:	08004e6d 	.word	0x08004e6d
 800913c:	08008ef1 	.word	0x08008ef1
 8009140:	080097df 	.word	0x080097df

08009144 <__swbuf_r>:
 8009144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009146:	460e      	mov	r6, r1
 8009148:	4614      	mov	r4, r2
 800914a:	4605      	mov	r5, r0
 800914c:	b118      	cbz	r0, 8009156 <__swbuf_r+0x12>
 800914e:	6a03      	ldr	r3, [r0, #32]
 8009150:	b90b      	cbnz	r3, 8009156 <__swbuf_r+0x12>
 8009152:	f7fc fce3 	bl	8005b1c <__sinit>
 8009156:	69a3      	ldr	r3, [r4, #24]
 8009158:	60a3      	str	r3, [r4, #8]
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	071a      	lsls	r2, r3, #28
 800915e:	d501      	bpl.n	8009164 <__swbuf_r+0x20>
 8009160:	6923      	ldr	r3, [r4, #16]
 8009162:	b943      	cbnz	r3, 8009176 <__swbuf_r+0x32>
 8009164:	4621      	mov	r1, r4
 8009166:	4628      	mov	r0, r5
 8009168:	f000 f82a 	bl	80091c0 <__swsetup_r>
 800916c:	b118      	cbz	r0, 8009176 <__swbuf_r+0x32>
 800916e:	f04f 37ff 	mov.w	r7, #4294967295
 8009172:	4638      	mov	r0, r7
 8009174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009176:	6823      	ldr	r3, [r4, #0]
 8009178:	6922      	ldr	r2, [r4, #16]
 800917a:	1a98      	subs	r0, r3, r2
 800917c:	6963      	ldr	r3, [r4, #20]
 800917e:	b2f6      	uxtb	r6, r6
 8009180:	4283      	cmp	r3, r0
 8009182:	4637      	mov	r7, r6
 8009184:	dc05      	bgt.n	8009192 <__swbuf_r+0x4e>
 8009186:	4621      	mov	r1, r4
 8009188:	4628      	mov	r0, r5
 800918a:	f7ff fa47 	bl	800861c <_fflush_r>
 800918e:	2800      	cmp	r0, #0
 8009190:	d1ed      	bne.n	800916e <__swbuf_r+0x2a>
 8009192:	68a3      	ldr	r3, [r4, #8]
 8009194:	3b01      	subs	r3, #1
 8009196:	60a3      	str	r3, [r4, #8]
 8009198:	6823      	ldr	r3, [r4, #0]
 800919a:	1c5a      	adds	r2, r3, #1
 800919c:	6022      	str	r2, [r4, #0]
 800919e:	701e      	strb	r6, [r3, #0]
 80091a0:	6962      	ldr	r2, [r4, #20]
 80091a2:	1c43      	adds	r3, r0, #1
 80091a4:	429a      	cmp	r2, r3
 80091a6:	d004      	beq.n	80091b2 <__swbuf_r+0x6e>
 80091a8:	89a3      	ldrh	r3, [r4, #12]
 80091aa:	07db      	lsls	r3, r3, #31
 80091ac:	d5e1      	bpl.n	8009172 <__swbuf_r+0x2e>
 80091ae:	2e0a      	cmp	r6, #10
 80091b0:	d1df      	bne.n	8009172 <__swbuf_r+0x2e>
 80091b2:	4621      	mov	r1, r4
 80091b4:	4628      	mov	r0, r5
 80091b6:	f7ff fa31 	bl	800861c <_fflush_r>
 80091ba:	2800      	cmp	r0, #0
 80091bc:	d0d9      	beq.n	8009172 <__swbuf_r+0x2e>
 80091be:	e7d6      	b.n	800916e <__swbuf_r+0x2a>

080091c0 <__swsetup_r>:
 80091c0:	b538      	push	{r3, r4, r5, lr}
 80091c2:	4b29      	ldr	r3, [pc, #164]	@ (8009268 <__swsetup_r+0xa8>)
 80091c4:	4605      	mov	r5, r0
 80091c6:	6818      	ldr	r0, [r3, #0]
 80091c8:	460c      	mov	r4, r1
 80091ca:	b118      	cbz	r0, 80091d4 <__swsetup_r+0x14>
 80091cc:	6a03      	ldr	r3, [r0, #32]
 80091ce:	b90b      	cbnz	r3, 80091d4 <__swsetup_r+0x14>
 80091d0:	f7fc fca4 	bl	8005b1c <__sinit>
 80091d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091d8:	0719      	lsls	r1, r3, #28
 80091da:	d422      	bmi.n	8009222 <__swsetup_r+0x62>
 80091dc:	06da      	lsls	r2, r3, #27
 80091de:	d407      	bmi.n	80091f0 <__swsetup_r+0x30>
 80091e0:	2209      	movs	r2, #9
 80091e2:	602a      	str	r2, [r5, #0]
 80091e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091e8:	81a3      	strh	r3, [r4, #12]
 80091ea:	f04f 30ff 	mov.w	r0, #4294967295
 80091ee:	e033      	b.n	8009258 <__swsetup_r+0x98>
 80091f0:	0758      	lsls	r0, r3, #29
 80091f2:	d512      	bpl.n	800921a <__swsetup_r+0x5a>
 80091f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091f6:	b141      	cbz	r1, 800920a <__swsetup_r+0x4a>
 80091f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091fc:	4299      	cmp	r1, r3
 80091fe:	d002      	beq.n	8009206 <__swsetup_r+0x46>
 8009200:	4628      	mov	r0, r5
 8009202:	f7fd fbf9 	bl	80069f8 <_free_r>
 8009206:	2300      	movs	r3, #0
 8009208:	6363      	str	r3, [r4, #52]	@ 0x34
 800920a:	89a3      	ldrh	r3, [r4, #12]
 800920c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009210:	81a3      	strh	r3, [r4, #12]
 8009212:	2300      	movs	r3, #0
 8009214:	6063      	str	r3, [r4, #4]
 8009216:	6923      	ldr	r3, [r4, #16]
 8009218:	6023      	str	r3, [r4, #0]
 800921a:	89a3      	ldrh	r3, [r4, #12]
 800921c:	f043 0308 	orr.w	r3, r3, #8
 8009220:	81a3      	strh	r3, [r4, #12]
 8009222:	6923      	ldr	r3, [r4, #16]
 8009224:	b94b      	cbnz	r3, 800923a <__swsetup_r+0x7a>
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800922c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009230:	d003      	beq.n	800923a <__swsetup_r+0x7a>
 8009232:	4621      	mov	r1, r4
 8009234:	4628      	mov	r0, r5
 8009236:	f000 f883 	bl	8009340 <__smakebuf_r>
 800923a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923e:	f013 0201 	ands.w	r2, r3, #1
 8009242:	d00a      	beq.n	800925a <__swsetup_r+0x9a>
 8009244:	2200      	movs	r2, #0
 8009246:	60a2      	str	r2, [r4, #8]
 8009248:	6962      	ldr	r2, [r4, #20]
 800924a:	4252      	negs	r2, r2
 800924c:	61a2      	str	r2, [r4, #24]
 800924e:	6922      	ldr	r2, [r4, #16]
 8009250:	b942      	cbnz	r2, 8009264 <__swsetup_r+0xa4>
 8009252:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009256:	d1c5      	bne.n	80091e4 <__swsetup_r+0x24>
 8009258:	bd38      	pop	{r3, r4, r5, pc}
 800925a:	0799      	lsls	r1, r3, #30
 800925c:	bf58      	it	pl
 800925e:	6962      	ldrpl	r2, [r4, #20]
 8009260:	60a2      	str	r2, [r4, #8]
 8009262:	e7f4      	b.n	800924e <__swsetup_r+0x8e>
 8009264:	2000      	movs	r0, #0
 8009266:	e7f7      	b.n	8009258 <__swsetup_r+0x98>
 8009268:	20000018 	.word	0x20000018

0800926c <_raise_r>:
 800926c:	291f      	cmp	r1, #31
 800926e:	b538      	push	{r3, r4, r5, lr}
 8009270:	4605      	mov	r5, r0
 8009272:	460c      	mov	r4, r1
 8009274:	d904      	bls.n	8009280 <_raise_r+0x14>
 8009276:	2316      	movs	r3, #22
 8009278:	6003      	str	r3, [r0, #0]
 800927a:	f04f 30ff 	mov.w	r0, #4294967295
 800927e:	bd38      	pop	{r3, r4, r5, pc}
 8009280:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009282:	b112      	cbz	r2, 800928a <_raise_r+0x1e>
 8009284:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009288:	b94b      	cbnz	r3, 800929e <_raise_r+0x32>
 800928a:	4628      	mov	r0, r5
 800928c:	f000 f830 	bl	80092f0 <_getpid_r>
 8009290:	4622      	mov	r2, r4
 8009292:	4601      	mov	r1, r0
 8009294:	4628      	mov	r0, r5
 8009296:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800929a:	f000 b817 	b.w	80092cc <_kill_r>
 800929e:	2b01      	cmp	r3, #1
 80092a0:	d00a      	beq.n	80092b8 <_raise_r+0x4c>
 80092a2:	1c59      	adds	r1, r3, #1
 80092a4:	d103      	bne.n	80092ae <_raise_r+0x42>
 80092a6:	2316      	movs	r3, #22
 80092a8:	6003      	str	r3, [r0, #0]
 80092aa:	2001      	movs	r0, #1
 80092ac:	e7e7      	b.n	800927e <_raise_r+0x12>
 80092ae:	2100      	movs	r1, #0
 80092b0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80092b4:	4620      	mov	r0, r4
 80092b6:	4798      	blx	r3
 80092b8:	2000      	movs	r0, #0
 80092ba:	e7e0      	b.n	800927e <_raise_r+0x12>

080092bc <raise>:
 80092bc:	4b02      	ldr	r3, [pc, #8]	@ (80092c8 <raise+0xc>)
 80092be:	4601      	mov	r1, r0
 80092c0:	6818      	ldr	r0, [r3, #0]
 80092c2:	f7ff bfd3 	b.w	800926c <_raise_r>
 80092c6:	bf00      	nop
 80092c8:	20000018 	.word	0x20000018

080092cc <_kill_r>:
 80092cc:	b538      	push	{r3, r4, r5, lr}
 80092ce:	4d07      	ldr	r5, [pc, #28]	@ (80092ec <_kill_r+0x20>)
 80092d0:	2300      	movs	r3, #0
 80092d2:	4604      	mov	r4, r0
 80092d4:	4608      	mov	r0, r1
 80092d6:	4611      	mov	r1, r2
 80092d8:	602b      	str	r3, [r5, #0]
 80092da:	f7f8 fae5 	bl	80018a8 <_kill>
 80092de:	1c43      	adds	r3, r0, #1
 80092e0:	d102      	bne.n	80092e8 <_kill_r+0x1c>
 80092e2:	682b      	ldr	r3, [r5, #0]
 80092e4:	b103      	cbz	r3, 80092e8 <_kill_r+0x1c>
 80092e6:	6023      	str	r3, [r4, #0]
 80092e8:	bd38      	pop	{r3, r4, r5, pc}
 80092ea:	bf00      	nop
 80092ec:	2000047c 	.word	0x2000047c

080092f0 <_getpid_r>:
 80092f0:	f7f8 bad2 	b.w	8001898 <_getpid>

080092f4 <__swhatbuf_r>:
 80092f4:	b570      	push	{r4, r5, r6, lr}
 80092f6:	460c      	mov	r4, r1
 80092f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092fc:	2900      	cmp	r1, #0
 80092fe:	b096      	sub	sp, #88	@ 0x58
 8009300:	4615      	mov	r5, r2
 8009302:	461e      	mov	r6, r3
 8009304:	da0d      	bge.n	8009322 <__swhatbuf_r+0x2e>
 8009306:	89a3      	ldrh	r3, [r4, #12]
 8009308:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800930c:	f04f 0100 	mov.w	r1, #0
 8009310:	bf14      	ite	ne
 8009312:	2340      	movne	r3, #64	@ 0x40
 8009314:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009318:	2000      	movs	r0, #0
 800931a:	6031      	str	r1, [r6, #0]
 800931c:	602b      	str	r3, [r5, #0]
 800931e:	b016      	add	sp, #88	@ 0x58
 8009320:	bd70      	pop	{r4, r5, r6, pc}
 8009322:	466a      	mov	r2, sp
 8009324:	f000 f848 	bl	80093b8 <_fstat_r>
 8009328:	2800      	cmp	r0, #0
 800932a:	dbec      	blt.n	8009306 <__swhatbuf_r+0x12>
 800932c:	9901      	ldr	r1, [sp, #4]
 800932e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009332:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009336:	4259      	negs	r1, r3
 8009338:	4159      	adcs	r1, r3
 800933a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800933e:	e7eb      	b.n	8009318 <__swhatbuf_r+0x24>

08009340 <__smakebuf_r>:
 8009340:	898b      	ldrh	r3, [r1, #12]
 8009342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009344:	079d      	lsls	r5, r3, #30
 8009346:	4606      	mov	r6, r0
 8009348:	460c      	mov	r4, r1
 800934a:	d507      	bpl.n	800935c <__smakebuf_r+0x1c>
 800934c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009350:	6023      	str	r3, [r4, #0]
 8009352:	6123      	str	r3, [r4, #16]
 8009354:	2301      	movs	r3, #1
 8009356:	6163      	str	r3, [r4, #20]
 8009358:	b003      	add	sp, #12
 800935a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800935c:	ab01      	add	r3, sp, #4
 800935e:	466a      	mov	r2, sp
 8009360:	f7ff ffc8 	bl	80092f4 <__swhatbuf_r>
 8009364:	9f00      	ldr	r7, [sp, #0]
 8009366:	4605      	mov	r5, r0
 8009368:	4639      	mov	r1, r7
 800936a:	4630      	mov	r0, r6
 800936c:	f7fd fbb8 	bl	8006ae0 <_malloc_r>
 8009370:	b948      	cbnz	r0, 8009386 <__smakebuf_r+0x46>
 8009372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009376:	059a      	lsls	r2, r3, #22
 8009378:	d4ee      	bmi.n	8009358 <__smakebuf_r+0x18>
 800937a:	f023 0303 	bic.w	r3, r3, #3
 800937e:	f043 0302 	orr.w	r3, r3, #2
 8009382:	81a3      	strh	r3, [r4, #12]
 8009384:	e7e2      	b.n	800934c <__smakebuf_r+0xc>
 8009386:	89a3      	ldrh	r3, [r4, #12]
 8009388:	6020      	str	r0, [r4, #0]
 800938a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800938e:	81a3      	strh	r3, [r4, #12]
 8009390:	9b01      	ldr	r3, [sp, #4]
 8009392:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009396:	b15b      	cbz	r3, 80093b0 <__smakebuf_r+0x70>
 8009398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800939c:	4630      	mov	r0, r6
 800939e:	f000 f81d 	bl	80093dc <_isatty_r>
 80093a2:	b128      	cbz	r0, 80093b0 <__smakebuf_r+0x70>
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	f023 0303 	bic.w	r3, r3, #3
 80093aa:	f043 0301 	orr.w	r3, r3, #1
 80093ae:	81a3      	strh	r3, [r4, #12]
 80093b0:	89a3      	ldrh	r3, [r4, #12]
 80093b2:	431d      	orrs	r5, r3
 80093b4:	81a5      	strh	r5, [r4, #12]
 80093b6:	e7cf      	b.n	8009358 <__smakebuf_r+0x18>

080093b8 <_fstat_r>:
 80093b8:	b538      	push	{r3, r4, r5, lr}
 80093ba:	4d07      	ldr	r5, [pc, #28]	@ (80093d8 <_fstat_r+0x20>)
 80093bc:	2300      	movs	r3, #0
 80093be:	4604      	mov	r4, r0
 80093c0:	4608      	mov	r0, r1
 80093c2:	4611      	mov	r1, r2
 80093c4:	602b      	str	r3, [r5, #0]
 80093c6:	f7f8 facf 	bl	8001968 <_fstat>
 80093ca:	1c43      	adds	r3, r0, #1
 80093cc:	d102      	bne.n	80093d4 <_fstat_r+0x1c>
 80093ce:	682b      	ldr	r3, [r5, #0]
 80093d0:	b103      	cbz	r3, 80093d4 <_fstat_r+0x1c>
 80093d2:	6023      	str	r3, [r4, #0]
 80093d4:	bd38      	pop	{r3, r4, r5, pc}
 80093d6:	bf00      	nop
 80093d8:	2000047c 	.word	0x2000047c

080093dc <_isatty_r>:
 80093dc:	b538      	push	{r3, r4, r5, lr}
 80093de:	4d06      	ldr	r5, [pc, #24]	@ (80093f8 <_isatty_r+0x1c>)
 80093e0:	2300      	movs	r3, #0
 80093e2:	4604      	mov	r4, r0
 80093e4:	4608      	mov	r0, r1
 80093e6:	602b      	str	r3, [r5, #0]
 80093e8:	f7f8 face 	bl	8001988 <_isatty>
 80093ec:	1c43      	adds	r3, r0, #1
 80093ee:	d102      	bne.n	80093f6 <_isatty_r+0x1a>
 80093f0:	682b      	ldr	r3, [r5, #0]
 80093f2:	b103      	cbz	r3, 80093f6 <_isatty_r+0x1a>
 80093f4:	6023      	str	r3, [r4, #0]
 80093f6:	bd38      	pop	{r3, r4, r5, pc}
 80093f8:	2000047c 	.word	0x2000047c

080093fc <_init>:
 80093fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093fe:	bf00      	nop
 8009400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009402:	bc08      	pop	{r3}
 8009404:	469e      	mov	lr, r3
 8009406:	4770      	bx	lr

08009408 <_fini>:
 8009408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800940a:	bf00      	nop
 800940c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800940e:	bc08      	pop	{r3}
 8009410:	469e      	mov	lr, r3
 8009412:	4770      	bx	lr
