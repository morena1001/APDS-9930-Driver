
APDS-9930 Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000952c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  080096c0  080096c0  0000a6c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b40  08009b40  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08009b40  08009b40  0000ab40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b48  08009b48  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b48  08009b48  0000ab48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b4c  08009b4c  0000ab4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009b50  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001d4  08009d24  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  08009d24  0000b48c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cd63  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e97  00000000  00000000  00017f67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  00019e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000081d  00000000  00000000  0001a880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c38d  00000000  00000000  0001b09d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0f5  00000000  00000000  0003742a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f2b1  00000000  00000000  0004651f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e57d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fac  00000000  00000000  000e5814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000e97c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080096a4 	.word	0x080096a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080096a4 	.word	0x080096a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000
 8000cf4:	00000000 	.word	0x00000000

08000cf8 <APDS9930_Init>:

/*
 * INITIALIZATION
 */

uint8_t APDS9930_Init (APDS9930_t* device, I2C_HandleTypeDef* i2c_handle) {
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
	// Set struct parameters
	device->i2c_handle = i2c_handle;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	683a      	ldr	r2, [r7, #0]
 8000d06:	601a      	str	r2, [r3, #0]

	device->lux = 0.0f;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
	device->prox = 0.0f;
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]

	Ch0_data = 0;
 8000d18:	4bb7      	ldr	r3, [pc, #732]	@ (8000ff8 <APDS9930_Init+0x300>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	801a      	strh	r2, [r3, #0]
	Ch1_data = 0;
 8000d1e:	4bb7      	ldr	r3, [pc, #732]	@ (8000ffc <APDS9930_Init+0x304>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	801a      	strh	r2, [r3, #0]

	IAC1 = 0.0f;
 8000d24:	4bb6      	ldr	r3, [pc, #728]	@ (8001000 <APDS9930_Init+0x308>)
 8000d26:	f04f 0200 	mov.w	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
	IAC2 = 0.0f;
 8000d2c:	4bb5      	ldr	r3, [pc, #724]	@ (8001004 <APDS9930_Init+0x30c>)
 8000d2e:	f04f 0200 	mov.w	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]

	IAC = 0.0f;
 8000d34:	4bb4      	ldr	r3, [pc, #720]	@ (8001008 <APDS9930_Init+0x310>)
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
	LPC = 0.0f;
 8000d3c:	4bb3      	ldr	r3, [pc, #716]	@ (800100c <APDS9930_Init+0x314>)
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]

	// Store number of transaction errors ( to be returned at the end of the function )
	uint8_t err_num = 0;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef status;
	uint8_t reg_data;

	// ENABLE : Disable and power down (p.14)
	reg_data = 0x00;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	737b      	strb	r3, [r7, #13]
	status = APDS9930_CMD_WriteRegister (device, APDS9930_REG_ENABLE, &reg_data);
 8000d4c:	f107 030d 	add.w	r3, r7, #13
 8000d50:	461a      	mov	r2, r3
 8000d52:	2100      	movs	r1, #0
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 faa5 	bl	80012a4 <APDS9930_CMD_WriteRegister>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000d5e:	7bbb      	ldrb	r3, [r7, #14]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bf14      	ite	ne
 8000d64:	2301      	movne	r3, #1
 8000d66:	2300      	moveq	r3, #0
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	4413      	add	r3, r2
 8000d70:	73fb      	strb	r3, [r7, #15]

	// Check ID register (p.23)
	status = APDS9930_CMD_ReadRegister (device, APDS9930_REG_ID, &reg_data);
 8000d72:	f107 030d 	add.w	r3, r7, #13
 8000d76:	461a      	mov	r2, r3
 8000d78:	2112      	movs	r1, #18
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f000 fa68 	bl	8001250 <APDS9930_CMD_ReadRegister>
 8000d80:	4603      	mov	r3, r0
 8000d82:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000d84:	7bbb      	ldrb	r3, [r7, #14]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	bf14      	ite	ne
 8000d8a:	2301      	movne	r3, #1
 8000d8c:	2300      	moveq	r3, #0
 8000d8e:	b2db      	uxtb	r3, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	7bfb      	ldrb	r3, [r7, #15]
 8000d94:	4413      	add	r3, r2
 8000d96:	73fb      	strb	r3, [r7, #15]

	if (reg_data != APDS9930_ID_1 && reg_data != APDS9930_ID_2)	return 255;
 8000d98:	7b7b      	ldrb	r3, [r7, #13]
 8000d9a:	2b39      	cmp	r3, #57	@ 0x39
 8000d9c:	d004      	beq.n	8000da8 <APDS9930_Init+0xb0>
 8000d9e:	7b7b      	ldrb	r3, [r7, #13]
 8000da0:	2b12      	cmp	r3, #18
 8000da2:	d001      	beq.n	8000da8 <APDS9930_Init+0xb0>
 8000da4:	23ff      	movs	r3, #255	@ 0xff
 8000da6:	e11d      	b.n	8000fe4 <APDS9930_Init+0x2ec>
//	reg_data = 0x2F;
//	status = APDS9930_WriteRegister (device, APDS9930_REG_ENABLE, &reg_data);
//	err_num += (status != HAL_OK);

	// ALS Timing Register : 1 cycle (2.73ms)
	reg_data = 0xff;
 8000da8:	23ff      	movs	r3, #255	@ 0xff
 8000daa:	737b      	strb	r3, [r7, #13]
	status = APDS9930_CMD_WriteRegister (device, APDS9930_REG_ATIME, &reg_data);
 8000dac:	f107 030d 	add.w	r3, r7, #13
 8000db0:	461a      	mov	r2, r3
 8000db2:	2101      	movs	r1, #1
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f000 fa75 	bl	80012a4 <APDS9930_CMD_WriteRegister>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	bf14      	ite	ne
 8000dc4:	2301      	movne	r3, #1
 8000dc6:	2300      	moveq	r3, #0
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	7bfb      	ldrb	r3, [r7, #15]
 8000dce:	4413      	add	r3, r2
 8000dd0:	73fb      	strb	r3, [r7, #15]

	ALSIT = 2.73 * (float) (256 - reg_data);
 8000dd2:	7b7b      	ldrb	r3, [r7, #13]
 8000dd4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de0:	ee17 0a90 	vmov	r0, s15
 8000de4:	f7ff fbb0 	bl	8000548 <__aeabi_f2d>
 8000de8:	a381      	add	r3, pc, #516	@ (adr r3, 8000ff0 <APDS9930_Init+0x2f8>)
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	f7ff fc03 	bl	80005f8 <__aeabi_dmul>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4610      	mov	r0, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff fef5 	bl	8000be8 <__aeabi_d2f>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	4a83      	ldr	r2, [pc, #524]	@ (8001010 <APDS9930_Init+0x318>)
 8000e02:	6013      	str	r3, [r2, #0]

	// Proximity Time Control Register : 1 cycle (2.73ms)
	reg_data = 0xff;
 8000e04:	23ff      	movs	r3, #255	@ 0xff
 8000e06:	737b      	strb	r3, [r7, #13]
	status = APDS9930_CMD_WriteRegister (device, APDS9930_REG_PTIME, &reg_data);
 8000e08:	f107 030d 	add.w	r3, r7, #13
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	2102      	movs	r1, #2
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 fa47 	bl	80012a4 <APDS9930_CMD_WriteRegister>
 8000e16:	4603      	mov	r3, r0
 8000e18:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e1a:	7bbb      	ldrb	r3, [r7, #14]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	bf14      	ite	ne
 8000e20:	2301      	movne	r3, #1
 8000e22:	2300      	moveq	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	461a      	mov	r2, r3
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	4413      	add	r3, r2
 8000e2c:	73fb      	strb	r3, [r7, #15]

	// Wait Time Register : 1 cycle (2.73ms)
	reg_data = 0xff;
 8000e2e:	23ff      	movs	r3, #255	@ 0xff
 8000e30:	737b      	strb	r3, [r7, #13]
	status = APDS9930_CMD_WriteRegister (device, APDS9930_REG_WTIME, &reg_data);
 8000e32:	f107 030d 	add.w	r3, r7, #13
 8000e36:	461a      	mov	r2, r3
 8000e38:	2103      	movs	r1, #3
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f000 fa32 	bl	80012a4 <APDS9930_CMD_WriteRegister>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e44:	7bbb      	ldrb	r3, [r7, #14]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	bf14      	ite	ne
 8000e4a:	2301      	movne	r3, #1
 8000e4c:	2300      	moveq	r3, #0
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	461a      	mov	r2, r3
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	4413      	add	r3, r2
 8000e56:	73fb      	strb	r3, [r7, #15]

	// Proximity Interrupt Threshold : low and high threshold of 0
	reg_data = 0x00;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	737b      	strb	r3, [r7, #13]
	status = APDS9930_CMD_WriteRegister (device, APDS9930_REG_PILTL, &reg_data);
 8000e5c:	f107 030d 	add.w	r3, r7, #13
 8000e60:	461a      	mov	r2, r3
 8000e62:	2108      	movs	r1, #8
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 fa1d 	bl	80012a4 <APDS9930_CMD_WriteRegister>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e6e:	7bbb      	ldrb	r3, [r7, #14]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	bf14      	ite	ne
 8000e74:	2301      	movne	r3, #1
 8000e76:	2300      	moveq	r3, #0
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	7bfb      	ldrb	r3, [r7, #15]
 8000e7e:	4413      	add	r3, r2
 8000e80:	73fb      	strb	r3, [r7, #15]

	status = APDS9930_CMD_WriteRegister (device, APDS9930_REG_PILTH, &reg_data);
 8000e82:	f107 030d 	add.w	r3, r7, #13
 8000e86:	461a      	mov	r2, r3
 8000e88:	2109      	movs	r1, #9
 8000e8a:	6878      	ldr	r0, [r7, #4]
 8000e8c:	f000 fa0a 	bl	80012a4 <APDS9930_CMD_WriteRegister>
 8000e90:	4603      	mov	r3, r0
 8000e92:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000e94:	7bbb      	ldrb	r3, [r7, #14]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	bf14      	ite	ne
 8000e9a:	2301      	movne	r3, #1
 8000e9c:	2300      	moveq	r3, #0
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	7bfb      	ldrb	r3, [r7, #15]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	73fb      	strb	r3, [r7, #15]

	status = APDS9930_CMD_WriteRegister (device, APDS9930_REG_PIHTL, &reg_data);
 8000ea8:	f107 030d 	add.w	r3, r7, #13
 8000eac:	461a      	mov	r2, r3
 8000eae:	210a      	movs	r1, #10
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f000 f9f7 	bl	80012a4 <APDS9930_CMD_WriteRegister>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000eba:	7bbb      	ldrb	r3, [r7, #14]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	bf14      	ite	ne
 8000ec0:	2301      	movne	r3, #1
 8000ec2:	2300      	moveq	r3, #0
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	4413      	add	r3, r2
 8000ecc:	73fb      	strb	r3, [r7, #15]

	status = APDS9930_CMD_WriteRegister (device, APDS9930_REG_PIHTH, &reg_data);
 8000ece:	f107 030d 	add.w	r3, r7, #13
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	210b      	movs	r1, #11
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f9e4 	bl	80012a4 <APDS9930_CMD_WriteRegister>
 8000edc:	4603      	mov	r3, r0
 8000ede:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000ee0:	7bbb      	ldrb	r3, [r7, #14]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	bf14      	ite	ne
 8000ee6:	2301      	movne	r3, #1
 8000ee8:	2300      	moveq	r3, #0
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	461a      	mov	r2, r3
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	73fb      	strb	r3, [r7, #15]

	// Persistence Register : Every proximity cycle generates interrupt
	reg_data = 0x00;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	737b      	strb	r3, [r7, #13]
	status = APDS9930_CMD_WriteRegister (device, APDS9930_REG_PERS, &reg_data);
 8000ef8:	f107 030d 	add.w	r3, r7, #13
 8000efc:	461a      	mov	r2, r3
 8000efe:	210c      	movs	r1, #12
 8000f00:	6878      	ldr	r0, [r7, #4]
 8000f02:	f000 f9cf 	bl	80012a4 <APDS9930_CMD_WriteRegister>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000f0a:	7bbb      	ldrb	r3, [r7, #14]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	461a      	mov	r2, r3
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	73fb      	strb	r3, [r7, #15]

	// Configuration Register : AGL, WLONG, and PDL are not asserted
	reg_data = 0x00;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	737b      	strb	r3, [r7, #13]
	status = APDS9930_CMD_WriteRegister (device, APDS9930_REG_CONFIG, &reg_data);
 8000f22:	f107 030d 	add.w	r3, r7, #13
 8000f26:	461a      	mov	r2, r3
 8000f28:	210d      	movs	r1, #13
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f000 f9ba 	bl	80012a4 <APDS9930_CMD_WriteRegister>
 8000f30:	4603      	mov	r3, r0
 8000f32:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bf14      	ite	ne
 8000f3a:	2301      	movne	r3, #1
 8000f3c:	2300      	moveq	r3, #0
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	461a      	mov	r2, r3
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	4413      	add	r3, r2
 8000f46:	73fb      	strb	r3, [r7, #15]

	AGAIN = Pow (2, reg_data >> 2);
 8000f48:	7b7b      	ldrb	r3, [r7, #13]
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	4619      	mov	r1, r3
 8000f50:	2002      	movs	r0, #2
 8000f52:	f000 fa00 	bl	8001356 <Pow>
 8000f56:	4603      	mov	r3, r0
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001014 <APDS9930_Init+0x31c>)
 8000f5c:	701a      	strb	r2, [r3, #0]

	// Proximity Pulse Count Register : 8 pulses (recommended p.22)
	reg_data = 0x08;
 8000f5e:	2308      	movs	r3, #8
 8000f60:	737b      	strb	r3, [r7, #13]
	status = APDS9930_CMD_WriteRegister (device, APDS9930_REG_PPULSE, &reg_data);
 8000f62:	f107 030d 	add.w	r3, r7, #13
 8000f66:	461a      	mov	r2, r3
 8000f68:	210e      	movs	r1, #14
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f000 f99a 	bl	80012a4 <APDS9930_CMD_WriteRegister>
 8000f70:	4603      	mov	r3, r0
 8000f72:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	bf14      	ite	ne
 8000f7a:	2301      	movne	r3, #1
 8000f7c:	2300      	moveq	r3, #0
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	461a      	mov	r2, r3
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	4413      	add	r3, r2
 8000f86:	73fb      	strb	r3, [r7, #15]

	// Control Register : 100mA LED strength, Proximity uses Ch1 diode, 1x Proximity gain, 1x ALS gain
	reg_data = 0x20;
 8000f88:	2320      	movs	r3, #32
 8000f8a:	737b      	strb	r3, [r7, #13]
	status = APDS9930_CMD_WriteRegister (device, APDS9930_REG_CONTROL, &reg_data);
 8000f8c:	f107 030d 	add.w	r3, r7, #13
 8000f90:	461a      	mov	r2, r3
 8000f92:	210f      	movs	r1, #15
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f000 f985 	bl	80012a4 <APDS9930_CMD_WriteRegister>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	bf14      	ite	ne
 8000fa4:	2301      	movne	r3, #1
 8000fa6:	2300      	moveq	r3, #0
 8000fa8:	b2db      	uxtb	r3, r3
 8000faa:	461a      	mov	r2, r3
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
 8000fae:	4413      	add	r3, r2
 8000fb0:	73fb      	strb	r3, [r7, #15]

	// ENABLE : WEN, PEN, AEN, and PON are enabled. PIEN is enabled, AIEN is disabled
	reg_data = 0x2F;
 8000fb2:	232f      	movs	r3, #47	@ 0x2f
 8000fb4:	737b      	strb	r3, [r7, #13]
	status = APDS9930_CMD_WriteRegister (device, APDS9930_REG_ENABLE, &reg_data);
 8000fb6:	f107 030d 	add.w	r3, r7, #13
 8000fba:	461a      	mov	r2, r3
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 f970 	bl	80012a4 <APDS9930_CMD_WriteRegister>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	73bb      	strb	r3, [r7, #14]
	err_num += (status != HAL_OK);
 8000fc8:	7bbb      	ldrb	r3, [r7, #14]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	bf14      	ite	ne
 8000fce:	2301      	movne	r3, #1
 8000fd0:	2300      	moveq	r3, #0
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	7bfb      	ldrb	r3, [r7, #15]
 8000fd8:	4413      	add	r3, r2
 8000fda:	73fb      	strb	r3, [r7, #15]
	HAL_Delay(12);
 8000fdc:	200c      	movs	r0, #12
 8000fde:	f000 fdab 	bl	8001b38 <HAL_Delay>

	return err_num;
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	f3af 8000 	nop.w
 8000ff0:	3d70a3d7 	.word	0x3d70a3d7
 8000ff4:	4005d70a 	.word	0x4005d70a
 8000ff8:	200001f6 	.word	0x200001f6
 8000ffc:	200001f8 	.word	0x200001f8
 8001000:	200001fc 	.word	0x200001fc
 8001004:	20000200 	.word	0x20000200
 8001008:	20000204 	.word	0x20000204
 800100c:	20000208 	.word	0x20000208
 8001010:	200001f0 	.word	0x200001f0
 8001014:	200001f4 	.word	0x200001f4

08001018 <APDS9930_ReadLux>:

/*
 * DATA AQUISITION
 */

HAL_StatusTypeDef APDS9930_ReadLux (APDS9930_t* device) {
 8001018:	b5b0      	push	{r4, r5, r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af02      	add	r7, sp, #8
 800101e:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[4];
	HAL_StatusTypeDef status;

	status = APDS9930_ReadRegisters (device, APDS9930_REG_Ch0DATAL, raw_data, 4);
 8001020:	f107 0208 	add.w	r2, r7, #8
 8001024:	2304      	movs	r3, #4
 8001026:	2114      	movs	r1, #20
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f000 f8f2 	bl	8001212 <APDS9930_ReadRegisters>
 800102e:	4603      	mov	r3, r0
 8001030:	73fb      	strb	r3, [r7, #15]
	Ch0_data = 256 * raw_data[1] + raw_data[0];
 8001032:	7a7b      	ldrb	r3, [r7, #9]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b29b      	uxth	r3, r3
 8001038:	7a3a      	ldrb	r2, [r7, #8]
 800103a:	4413      	add	r3, r2
 800103c:	b29a      	uxth	r2, r3
 800103e:	4b5e      	ldr	r3, [pc, #376]	@ (80011b8 <APDS9930_ReadLux+0x1a0>)
 8001040:	801a      	strh	r2, [r3, #0]
	Ch1_data = 256 * raw_data[3] + raw_data[2];
 8001042:	7afb      	ldrb	r3, [r7, #11]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b29b      	uxth	r3, r3
 8001048:	7aba      	ldrb	r2, [r7, #10]
 800104a:	4413      	add	r3, r2
 800104c:	b29a      	uxth	r2, r3
 800104e:	4b5b      	ldr	r3, [pc, #364]	@ (80011bc <APDS9930_ReadLux+0x1a4>)
 8001050:	801a      	strh	r2, [r3, #0]

	IAC1 = (float) Ch0_data - B * (float ) Ch1_data;
 8001052:	4b59      	ldr	r3, [pc, #356]	@ (80011b8 <APDS9930_ReadLux+0x1a0>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	ee07 3a90 	vmov	s15, r3
 800105a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800105e:	ee17 0a90 	vmov	r0, s15
 8001062:	f7ff fa71 	bl	8000548 <__aeabi_f2d>
 8001066:	4604      	mov	r4, r0
 8001068:	460d      	mov	r5, r1
 800106a:	4b54      	ldr	r3, [pc, #336]	@ (80011bc <APDS9930_ReadLux+0x1a4>)
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	ee07 3a90 	vmov	s15, r3
 8001072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001076:	ee17 0a90 	vmov	r0, s15
 800107a:	f7ff fa65 	bl	8000548 <__aeabi_f2d>
 800107e:	a346      	add	r3, pc, #280	@ (adr r3, 8001198 <APDS9930_ReadLux+0x180>)
 8001080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001084:	f7ff fab8 	bl	80005f8 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4620      	mov	r0, r4
 800108e:	4629      	mov	r1, r5
 8001090:	f7ff f8fa 	bl	8000288 <__aeabi_dsub>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fda4 	bl	8000be8 <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	4a47      	ldr	r2, [pc, #284]	@ (80011c0 <APDS9930_ReadLux+0x1a8>)
 80010a4:	6013      	str	r3, [r2, #0]
	IAC2 = C * (float) Ch0_data - D * (float) Ch1_data;
 80010a6:	4b44      	ldr	r3, [pc, #272]	@ (80011b8 <APDS9930_ReadLux+0x1a0>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	ee07 3a90 	vmov	s15, r3
 80010ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b2:	ee17 0a90 	vmov	r0, s15
 80010b6:	f7ff fa47 	bl	8000548 <__aeabi_f2d>
 80010ba:	a339      	add	r3, pc, #228	@ (adr r3, 80011a0 <APDS9930_ReadLux+0x188>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	f7ff fa9a 	bl	80005f8 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4614      	mov	r4, r2
 80010ca:	461d      	mov	r5, r3
 80010cc:	4b3b      	ldr	r3, [pc, #236]	@ (80011bc <APDS9930_ReadLux+0x1a4>)
 80010ce:	881b      	ldrh	r3, [r3, #0]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010d8:	ee17 0a90 	vmov	r0, s15
 80010dc:	f7ff fa34 	bl	8000548 <__aeabi_f2d>
 80010e0:	a331      	add	r3, pc, #196	@ (adr r3, 80011a8 <APDS9930_ReadLux+0x190>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff fa87 	bl	80005f8 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4620      	mov	r0, r4
 80010f0:	4629      	mov	r1, r5
 80010f2:	f7ff f8c9 	bl	8000288 <__aeabi_dsub>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fd73 	bl	8000be8 <__aeabi_d2f>
 8001102:	4603      	mov	r3, r0
 8001104:	4a2f      	ldr	r2, [pc, #188]	@ (80011c4 <APDS9930_ReadLux+0x1ac>)
 8001106:	6013      	str	r3, [r2, #0]

	IAC = Max (2, IAC1, IAC2);
 8001108:	4b2d      	ldr	r3, [pc, #180]	@ (80011c0 <APDS9930_ReadLux+0x1a8>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff fa1b 	bl	8000548 <__aeabi_f2d>
 8001112:	4604      	mov	r4, r0
 8001114:	460d      	mov	r5, r1
 8001116:	4b2b      	ldr	r3, [pc, #172]	@ (80011c4 <APDS9930_ReadLux+0x1ac>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff fa14 	bl	8000548 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	e9cd 2300 	strd	r2, r3, [sp]
 8001128:	4622      	mov	r2, r4
 800112a:	462b      	mov	r3, r5
 800112c:	2002      	movs	r0, #2
 800112e:	f000 f8d7 	bl	80012e0 <Max>
 8001132:	4603      	mov	r3, r0
 8001134:	4a24      	ldr	r2, [pc, #144]	@ (80011c8 <APDS9930_ReadLux+0x1b0>)
 8001136:	6013      	str	r3, [r2, #0]
	LPC = GA * DF / (ALSIT * (float) AGAIN);
 8001138:	4b24      	ldr	r3, [pc, #144]	@ (80011cc <APDS9930_ReadLux+0x1b4>)
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	ee07 3a90 	vmov	s15, r3
 8001140:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001144:	4b22      	ldr	r3, [pc, #136]	@ (80011d0 <APDS9930_ReadLux+0x1b8>)
 8001146:	edd3 7a00 	vldr	s15, [r3]
 800114a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800114e:	ee17 0a90 	vmov	r0, s15
 8001152:	f7ff f9f9 	bl	8000548 <__aeabi_f2d>
 8001156:	4602      	mov	r2, r0
 8001158:	460b      	mov	r3, r1
 800115a:	a115      	add	r1, pc, #84	@ (adr r1, 80011b0 <APDS9930_ReadLux+0x198>)
 800115c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001160:	f7ff fb74 	bl	800084c <__aeabi_ddiv>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	f7ff fd3c 	bl	8000be8 <__aeabi_d2f>
 8001170:	4603      	mov	r3, r0
 8001172:	4a18      	ldr	r2, [pc, #96]	@ (80011d4 <APDS9930_ReadLux+0x1bc>)
 8001174:	6013      	str	r3, [r2, #0]

	device->lux = IAC * LPC;
 8001176:	4b14      	ldr	r3, [pc, #80]	@ (80011c8 <APDS9930_ReadLux+0x1b0>)
 8001178:	ed93 7a00 	vldr	s14, [r3]
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <APDS9930_ReadLux+0x1bc>)
 800117e:	edd3 7a00 	vldr	s15, [r3]
 8001182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	edc3 7a01 	vstr	s15, [r3, #4]

	return status;
 800118c:	7bfb      	ldrb	r3, [r7, #15]
}
 800118e:	4618      	mov	r0, r3
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bdb0      	pop	{r4, r5, r7, pc}
 8001196:	bf00      	nop
 8001198:	83126e98 	.word	0x83126e98
 800119c:	3ffdcac0 	.word	0x3ffdcac0
 80011a0:	645a1cac 	.word	0x645a1cac
 80011a4:	3fe7df3b 	.word	0x3fe7df3b
 80011a8:	9db22d0e 	.word	0x9db22d0e
 80011ac:	3ff4a7ef 	.word	0x3ff4a7ef
 80011b0:	47ae147b 	.word	0x47ae147b
 80011b4:	40397ae1 	.word	0x40397ae1
 80011b8:	200001f6 	.word	0x200001f6
 80011bc:	200001f8 	.word	0x200001f8
 80011c0:	200001fc 	.word	0x200001fc
 80011c4:	20000200 	.word	0x20000200
 80011c8:	20000204 	.word	0x20000204
 80011cc:	200001f4 	.word	0x200001f4
 80011d0:	200001f0 	.word	0x200001f0
 80011d4:	20000208 	.word	0x20000208

080011d8 <APDS9930_ReadProximity>:

HAL_StatusTypeDef APDS9930_ReadProximity (APDS9930_t* device) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b084      	sub	sp, #16
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[2];
	HAL_StatusTypeDef status;

	status = APDS9930_ReadRegisters (device, APDS9930_REG_PDATAL, raw_data, 2);
 80011e0:	f107 020c 	add.w	r2, r7, #12
 80011e4:	2302      	movs	r3, #2
 80011e6:	2118      	movs	r1, #24
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f812 	bl	8001212 <APDS9930_ReadRegisters>
 80011ee:	4603      	mov	r3, r0
 80011f0:	73fb      	strb	r3, [r7, #15]
	device->prox = 256 * raw_data[1] + raw_data[0];
 80011f2:	7b7b      	ldrb	r3, [r7, #13]
 80011f4:	021b      	lsls	r3, r3, #8
 80011f6:	7b3a      	ldrb	r2, [r7, #12]
 80011f8:	4413      	add	r3, r2
 80011fa:	ee07 3a90 	vmov	s15, r3
 80011fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	edc3 7a02 	vstr	s15, [r3, #8]

	return status;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
}
 800120a:	4618      	mov	r0, r3
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <APDS9930_ReadRegisters>:

HAL_StatusTypeDef APDS9930_ReadRegister (APDS9930_t* device, uint8_t reg, uint8_t* data) {
	return HAL_I2C_Mem_Read(device->i2c_handle, APDS9930_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
}

HAL_StatusTypeDef APDS9930_ReadRegisters (APDS9930_t* device, uint8_t reg, uint8_t* data, uint8_t length) {
 8001212:	b580      	push	{r7, lr}
 8001214:	b088      	sub	sp, #32
 8001216:	af04      	add	r7, sp, #16
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	607a      	str	r2, [r7, #4]
 800121c:	461a      	mov	r2, r3
 800121e:	460b      	mov	r3, r1
 8001220:	72fb      	strb	r3, [r7, #11]
 8001222:	4613      	mov	r3, r2
 8001224:	72bb      	strb	r3, [r7, #10]
	return HAL_I2C_Mem_Read(device->i2c_handle, APDS9930_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6818      	ldr	r0, [r3, #0]
 800122a:	7afb      	ldrb	r3, [r7, #11]
 800122c:	b29a      	uxth	r2, r3
 800122e:	7abb      	ldrb	r3, [r7, #10]
 8001230:	b29b      	uxth	r3, r3
 8001232:	f04f 31ff 	mov.w	r1, #4294967295
 8001236:	9102      	str	r1, [sp, #8]
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2301      	movs	r3, #1
 8001240:	2172      	movs	r1, #114	@ 0x72
 8001242:	f001 fa05 	bl	8002650 <HAL_I2C_Mem_Read>
 8001246:	4603      	mov	r3, r0
}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <APDS9930_CMD_ReadRegister>:
	return HAL_I2C_Mem_Write(device->i2c_handle, APDS9930_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, HAL_MAX_DELAY);
}



HAL_StatusTypeDef APDS9930_CMD_ReadRegister (APDS9930_t* device, uint8_t reg, uint8_t* data) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af02      	add	r7, sp, #8
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	460b      	mov	r3, r1
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	72fb      	strb	r3, [r7, #11]
	uint8_t cmd = APDS9930_REG_COMMAND_REPEAT + reg;
 800125e:	7afb      	ldrb	r3, [r7, #11]
 8001260:	3b80      	subs	r3, #128	@ 0x80
 8001262:	b2db      	uxtb	r3, r3
 8001264:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Master_Transmit (device->i2c_handle, APDS9930_I2C_ADDR, &cmd, 1, HAL_MAX_DELAY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6818      	ldr	r0, [r3, #0]
 800126a:	f107 0217 	add.w	r2, r7, #23
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2301      	movs	r3, #1
 8001276:	2172      	movs	r1, #114	@ 0x72
 8001278:	f000 ffdc 	bl	8002234 <HAL_I2C_Master_Transmit>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <APDS9930_CMD_ReadRegister+0x36>
			!= HAL_OK)	return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e00a      	b.n	800129c <APDS9930_CMD_ReadRegister+0x4c>

	return HAL_I2C_Master_Receive (device->i2c_handle, APDS9930_I2C_ADDR, data, 1, HAL_MAX_DELAY);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6818      	ldr	r0, [r3, #0]
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2301      	movs	r3, #1
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	2172      	movs	r1, #114	@ 0x72
 8001296:	f001 f8e5 	bl	8002464 <HAL_I2C_Master_Receive>
 800129a:	4603      	mov	r3, r0
}
 800129c:	4618      	mov	r0, r3
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <APDS9930_CMD_WriteRegister>:
			!= HAL_OK)	return HAL_ERROR;

	return HAL_I2C_Master_Receive (device->i2c_handle, APDS9930_I2C_ADDR, data, 1, HAL_MAX_DELAY);
}

HAL_StatusTypeDef APDS9930_CMD_WriteRegister (APDS9930_t* device, uint8_t reg, uint8_t* data) {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af02      	add	r7, sp, #8
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	460b      	mov	r3, r1
 80012ae:	607a      	str	r2, [r7, #4]
 80012b0:	72fb      	strb	r3, [r7, #11]
//	uint16_t cmd = ((APDS9930_REG_COMMAND_REPEAT + reg) << 8) + (*data);

	uint8_t cmd[2] = {
			APDS9930_REG_COMMAND_REPEAT + reg,
 80012b2:	7afb      	ldrb	r3, [r7, #11]
 80012b4:	3b80      	subs	r3, #128	@ 0x80
 80012b6:	b2db      	uxtb	r3, r3
	uint8_t cmd[2] = {
 80012b8:	753b      	strb	r3, [r7, #20]
			(*data)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	781b      	ldrb	r3, [r3, #0]
	uint8_t cmd[2] = {
 80012be:	757b      	strb	r3, [r7, #21]
	};

	return HAL_I2C_Master_Transmit (device->i2c_handle, APDS9930_I2C_ADDR, cmd, 2, HAL_MAX_DELAY);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	f107 0214 	add.w	r2, r7, #20
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2302      	movs	r3, #2
 80012d0:	2172      	movs	r1, #114	@ 0x72
 80012d2:	f000 ffaf 	bl	8002234 <HAL_I2C_Master_Transmit>
 80012d6:	4603      	mov	r3, r0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3718      	adds	r7, #24
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <Max>:

/*
 * PRIVATE FUNCTIONS
 */

float Max (int num, ...) {
 80012e0:	b40f      	push	{r0, r1, r2, r3}
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b084      	sub	sp, #16
 80012e6:	af00      	add	r7, sp, #0
	float max = 0.0f;
 80012e8:	f04f 0300 	mov.w	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
	float temp = 0.0f;
 80012ee:	f04f 0300 	mov.w	r3, #0
 80012f2:	607b      	str	r3, [r7, #4]
	va_list vl;
	va_start (vl, num);
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	603b      	str	r3, [r7, #0]

	for (int i = 0; i < num; i++) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	e01e      	b.n	800133e <Max+0x5e>
		temp = (float) va_arg (vl, double);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	3307      	adds	r3, #7
 8001304:	f023 0307 	bic.w	r3, r3, #7
 8001308:	f103 0208 	add.w	r2, r3, #8
 800130c:	603a      	str	r2, [r7, #0]
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	f7ff fc67 	bl	8000be8 <__aeabi_d2f>
 800131a:	4603      	mov	r3, r0
 800131c:	607b      	str	r3, [r7, #4]
		max = temp > max ? temp : max;
 800131e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001322:	edd7 7a03 	vldr	s15, [r7, #12]
 8001326:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800132a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132e:	dd01      	ble.n	8001334 <Max+0x54>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	e000      	b.n	8001336 <Max+0x56>
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < num; i++) {
 8001338:	68bb      	ldr	r3, [r7, #8]
 800133a:	3301      	adds	r3, #1
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	69bb      	ldr	r3, [r7, #24]
 8001342:	429a      	cmp	r2, r3
 8001344:	dbdc      	blt.n	8001300 <Max+0x20>
	}

	return max;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001352:	b004      	add	sp, #16
 8001354:	4770      	bx	lr

08001356 <Pow>:

uint8_t Pow (uint8_t base, uint8_t exp) {
 8001356:	b480      	push	{r7}
 8001358:	b085      	sub	sp, #20
 800135a:	af00      	add	r7, sp, #0
 800135c:	4603      	mov	r3, r0
 800135e:	460a      	mov	r2, r1
 8001360:	71fb      	strb	r3, [r7, #7]
 8001362:	4613      	mov	r3, r2
 8001364:	71bb      	strb	r3, [r7, #6]
	uint8_t answer = 1;
 8001366:	2301      	movs	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < exp; i++) {
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	e007      	b.n	8001380 <Pow+0x2a>
		answer *= base;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	fb12 f303 	smulbb	r3, r2, r3
 8001378:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < exp; i++) {
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3301      	adds	r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	79bb      	ldrb	r3, [r7, #6]
 8001382:	68ba      	ldr	r2, [r7, #8]
 8001384:	429a      	cmp	r2, r3
 8001386:	dbf3      	blt.n	8001370 <Pow+0x1a>
	}

	return answer;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001398:	b5b0      	push	{r4, r5, r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139e:	f000 fb65 	bl	8001a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a2:	f000 f841 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a6:	f000 f901 	bl	80015ac <MX_GPIO_Init>
  MX_I2C1_Init();
 80013aa:	f000 f88f 	bl	80014cc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80013ae:	f000 f8cd 	bl	800154c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  APDS9930_Init (&dev, &hi2c1);
 80013b2:	4917      	ldr	r1, [pc, #92]	@ (8001410 <main+0x78>)
 80013b4:	4817      	ldr	r0, [pc, #92]	@ (8001414 <main+0x7c>)
 80013b6:	f7ff fc9f 	bl	8000cf8 <APDS9930_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (cool) {
 80013ba:	4b17      	ldr	r3, [pc, #92]	@ (8001418 <main+0x80>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0fb      	beq.n	80013ba <main+0x22>
		  APDS9930_ReadLux (&dev);
 80013c2:	4814      	ldr	r0, [pc, #80]	@ (8001414 <main+0x7c>)
 80013c4:	f7ff fe28 	bl	8001018 <APDS9930_ReadLux>
		  APDS9930_ReadProximity (&dev);
 80013c8:	4812      	ldr	r0, [pc, #72]	@ (8001414 <main+0x7c>)
 80013ca:	f7ff ff05 	bl	80011d8 <APDS9930_ReadProximity>

		  sprintf (message, "lux: %.2f\r\nprox: %.2f\r\n\n", dev.lux, dev.prox);
 80013ce:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <main+0x7c>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f8b8 	bl	8000548 <__aeabi_f2d>
 80013d8:	4604      	mov	r4, r0
 80013da:	460d      	mov	r5, r1
 80013dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001414 <main+0x7c>)
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff f8b1 	bl	8000548 <__aeabi_f2d>
 80013e6:	4602      	mov	r2, r0
 80013e8:	460b      	mov	r3, r1
 80013ea:	e9cd 2300 	strd	r2, r3, [sp]
 80013ee:	4622      	mov	r2, r4
 80013f0:	462b      	mov	r3, r5
 80013f2:	490a      	ldr	r1, [pc, #40]	@ (800141c <main+0x84>)
 80013f4:	480a      	ldr	r0, [pc, #40]	@ (8001420 <main+0x88>)
 80013f6:	f004 fd1d 	bl	8005e34 <siprintf>
		  HAL_UART_Transmit (&huart2, (uint8_t *) message, 64, HAL_MAX_DELAY);
 80013fa:	f04f 33ff 	mov.w	r3, #4294967295
 80013fe:	2240      	movs	r2, #64	@ 0x40
 8001400:	4907      	ldr	r1, [pc, #28]	@ (8001420 <main+0x88>)
 8001402:	4808      	ldr	r0, [pc, #32]	@ (8001424 <main+0x8c>)
 8001404:	f003 fa0e 	bl	8004824 <HAL_UART_Transmit>
		  cool = false;
 8001408:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <main+0x80>)
 800140a:	2200      	movs	r2, #0
 800140c:	701a      	strb	r2, [r3, #0]
	  if (cool) {
 800140e:	e7d4      	b.n	80013ba <main+0x22>
 8001410:	2000020c 	.word	0x2000020c
 8001414:	200002e8 	.word	0x200002e8
 8001418:	200002f4 	.word	0x200002f4
 800141c:	080096c0 	.word	0x080096c0
 8001420:	200002f8 	.word	0x200002f8
 8001424:	20000260 	.word	0x20000260

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b09c      	sub	sp, #112	@ 0x70
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001432:	2228      	movs	r2, #40	@ 0x28
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f004 fd5f 	bl	8005efa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800144c:	463b      	mov	r3, r7
 800144e:	2234      	movs	r2, #52	@ 0x34
 8001450:	2100      	movs	r1, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f004 fd51 	bl	8005efa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001458:	2302      	movs	r3, #2
 800145a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800145c:	2301      	movs	r3, #1
 800145e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001460:	2310      	movs	r3, #16
 8001462:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001464:	2300      	movs	r3, #0
 8001466:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001468:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800146c:	4618      	mov	r0, r3
 800146e:	f001 fd9b 	bl	8002fa8 <HAL_RCC_OscConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8001478:	f000 f8e4 	bl	8001644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800147c:	230f      	movs	r3, #15
 800147e:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001480:	2300      	movs	r3, #0
 8001482:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001484:	2300      	movs	r3, #0
 8001486:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001488:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800148c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001492:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f002 fdc3 	bl	8004024 <HAL_RCC_ClockConfig>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80014a4:	f000 f8ce 	bl	8001644 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80014a8:	2320      	movs	r3, #32
 80014aa:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80014ac:	2310      	movs	r3, #16
 80014ae:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 ffd6 	bl	8004464 <HAL_RCCEx_PeriphCLKConfig>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80014be:	f000 f8c1 	bl	8001644 <Error_Handler>
  }
}
 80014c2:	bf00      	nop
 80014c4:	3770      	adds	r7, #112	@ 0x70
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001544 <MX_I2C1_Init+0x78>)
 80014d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0010020A;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001548 <MX_I2C1_Init+0x7c>)
 80014da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014dc:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014e2:	4b17      	ldr	r3, [pc, #92]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014e4:	2201      	movs	r2, #1
 80014e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014ee:	4b14      	ldr	r3, [pc, #80]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014fa:	4b11      	ldr	r3, [pc, #68]	@ (8001540 <MX_I2C1_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_I2C1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001506:	480e      	ldr	r0, [pc, #56]	@ (8001540 <MX_I2C1_Init+0x74>)
 8001508:	f000 fdf9 	bl	80020fe <HAL_I2C_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001512:	f000 f897 	bl	8001644 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001516:	2100      	movs	r1, #0
 8001518:	4809      	ldr	r0, [pc, #36]	@ (8001540 <MX_I2C1_Init+0x74>)
 800151a:	f001 fcad 	bl	8002e78 <HAL_I2CEx_ConfigAnalogFilter>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001524:	f000 f88e 	bl	8001644 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001528:	2100      	movs	r1, #0
 800152a:	4805      	ldr	r0, [pc, #20]	@ (8001540 <MX_I2C1_Init+0x74>)
 800152c:	f001 fcef 	bl	8002f0e <HAL_I2CEx_ConfigDigitalFilter>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001536:	f000 f885 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	2000020c 	.word	0x2000020c
 8001544:	40005400 	.word	0x40005400
 8001548:	0010020a 	.word	0x0010020a

0800154c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001550:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <MX_USART2_UART_Init+0x58>)
 8001552:	4a15      	ldr	r2, [pc, #84]	@ (80015a8 <MX_USART2_UART_Init+0x5c>)
 8001554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8001556:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <MX_USART2_UART_Init+0x58>)
 8001558:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800155c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b11      	ldr	r3, [pc, #68]	@ (80015a4 <MX_USART2_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0f      	ldr	r3, [pc, #60]	@ (80015a4 <MX_USART2_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <MX_USART2_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b0c      	ldr	r3, [pc, #48]	@ (80015a4 <MX_USART2_UART_Init+0x58>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <MX_USART2_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <MX_USART2_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <MX_USART2_UART_Init+0x58>)
 8001584:	2200      	movs	r2, #0
 8001586:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <MX_USART2_UART_Init+0x58>)
 800158a:	2200      	movs	r2, #0
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800158e:	4805      	ldr	r0, [pc, #20]	@ (80015a4 <MX_USART2_UART_Init+0x58>)
 8001590:	f003 f8fa 	bl	8004788 <HAL_UART_Init>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800159a:	f000 f853 	bl	8001644 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000260 	.word	0x20000260
 80015a8:	40004400 	.word	0x40004400

080015ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b088      	sub	sp, #32
 80015b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001640 <MX_GPIO_Init+0x94>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	4a1e      	ldr	r2, [pc, #120]	@ (8001640 <MX_GPIO_Init+0x94>)
 80015c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80015cc:	6153      	str	r3, [r2, #20]
 80015ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001640 <MX_GPIO_Init+0x94>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015d6:	60bb      	str	r3, [r7, #8]
 80015d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015da:	4b19      	ldr	r3, [pc, #100]	@ (8001640 <MX_GPIO_Init+0x94>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a18      	ldr	r2, [pc, #96]	@ (8001640 <MX_GPIO_Init+0x94>)
 80015e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
 80015e6:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <MX_GPIO_Init+0x94>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ee:	607b      	str	r3, [r7, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f2:	4b13      	ldr	r3, [pc, #76]	@ (8001640 <MX_GPIO_Init+0x94>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <MX_GPIO_Init+0x94>)
 80015f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015fc:	6153      	str	r3, [r2, #20]
 80015fe:	4b10      	ldr	r3, [pc, #64]	@ (8001640 <MX_GPIO_Init+0x94>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 800160a:	2301      	movs	r3, #1
 800160c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800160e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001612:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001614:	2301      	movs	r3, #1
 8001616:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	4619      	mov	r1, r3
 800161e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001622:	f000 fbbf 	bl	8001da4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001626:	2200      	movs	r2, #0
 8001628:	2100      	movs	r1, #0
 800162a:	2006      	movs	r0, #6
 800162c:	f000 fb83 	bl	8001d36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001630:	2006      	movs	r0, #6
 8001632:	f000 fb9c 	bl	8001d6e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001636:	bf00      	nop
 8001638:	3720      	adds	r7, #32
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000

08001644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001648:	b672      	cpsid	i
}
 800164a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <Error_Handler+0x8>

08001650 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001656:	4b0f      	ldr	r3, [pc, #60]	@ (8001694 <HAL_MspInit+0x44>)
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	4a0e      	ldr	r2, [pc, #56]	@ (8001694 <HAL_MspInit+0x44>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6193      	str	r3, [r2, #24]
 8001662:	4b0c      	ldr	r3, [pc, #48]	@ (8001694 <HAL_MspInit+0x44>)
 8001664:	699b      	ldr	r3, [r3, #24]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166e:	4b09      	ldr	r3, [pc, #36]	@ (8001694 <HAL_MspInit+0x44>)
 8001670:	69db      	ldr	r3, [r3, #28]
 8001672:	4a08      	ldr	r2, [pc, #32]	@ (8001694 <HAL_MspInit+0x44>)
 8001674:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001678:	61d3      	str	r3, [r2, #28]
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <HAL_MspInit+0x44>)
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001682:	603b      	str	r3, [r7, #0]
 8001684:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40021000 	.word	0x40021000

08001698 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	@ 0x28
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a26      	ldr	r2, [pc, #152]	@ (8001750 <HAL_I2C_MspInit+0xb8>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d145      	bne.n	8001746 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ba:	4b26      	ldr	r3, [pc, #152]	@ (8001754 <HAL_I2C_MspInit+0xbc>)
 80016bc:	695b      	ldr	r3, [r3, #20]
 80016be:	4a25      	ldr	r2, [pc, #148]	@ (8001754 <HAL_I2C_MspInit+0xbc>)
 80016c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016c4:	6153      	str	r3, [r2, #20]
 80016c6:	4b23      	ldr	r3, [pc, #140]	@ (8001754 <HAL_I2C_MspInit+0xbc>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d2:	4b20      	ldr	r3, [pc, #128]	@ (8001754 <HAL_I2C_MspInit+0xbc>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001754 <HAL_I2C_MspInit+0xbc>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016dc:	6153      	str	r3, [r2, #20]
 80016de:	4b1d      	ldr	r3, [pc, #116]	@ (8001754 <HAL_I2C_MspInit+0xbc>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016e6:	60fb      	str	r3, [r7, #12]
 80016e8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f0:	2312      	movs	r3, #18
 80016f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fc:	2304      	movs	r3, #4
 80016fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800170a:	f000 fb4b 	bl	8001da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800170e:	2380      	movs	r3, #128	@ 0x80
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001712:	2312      	movs	r3, #18
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171a:	2303      	movs	r3, #3
 800171c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800171e:	2304      	movs	r3, #4
 8001720:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	4619      	mov	r1, r3
 8001728:	480b      	ldr	r0, [pc, #44]	@ (8001758 <HAL_I2C_MspInit+0xc0>)
 800172a:	f000 fb3b 	bl	8001da4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800172e:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_I2C_MspInit+0xbc>)
 8001730:	69db      	ldr	r3, [r3, #28]
 8001732:	4a08      	ldr	r2, [pc, #32]	@ (8001754 <HAL_I2C_MspInit+0xbc>)
 8001734:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001738:	61d3      	str	r3, [r2, #28]
 800173a:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <HAL_I2C_MspInit+0xbc>)
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001746:	bf00      	nop
 8001748:	3728      	adds	r7, #40	@ 0x28
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40005400 	.word	0x40005400
 8001754:	40021000 	.word	0x40021000
 8001758:	48000400 	.word	0x48000400

0800175c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	@ 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a17      	ldr	r2, [pc, #92]	@ (80017d8 <HAL_UART_MspInit+0x7c>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d128      	bne.n	80017d0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800177e:	4b17      	ldr	r3, [pc, #92]	@ (80017dc <HAL_UART_MspInit+0x80>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	4a16      	ldr	r2, [pc, #88]	@ (80017dc <HAL_UART_MspInit+0x80>)
 8001784:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001788:	61d3      	str	r3, [r2, #28]
 800178a:	4b14      	ldr	r3, [pc, #80]	@ (80017dc <HAL_UART_MspInit+0x80>)
 800178c:	69db      	ldr	r3, [r3, #28]
 800178e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b11      	ldr	r3, [pc, #68]	@ (80017dc <HAL_UART_MspInit+0x80>)
 8001798:	695b      	ldr	r3, [r3, #20]
 800179a:	4a10      	ldr	r2, [pc, #64]	@ (80017dc <HAL_UART_MspInit+0x80>)
 800179c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017a0:	6153      	str	r3, [r2, #20]
 80017a2:	4b0e      	ldr	r3, [pc, #56]	@ (80017dc <HAL_UART_MspInit+0x80>)
 80017a4:	695b      	ldr	r3, [r3, #20]
 80017a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ae:	230c      	movs	r3, #12
 80017b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017be:	2307      	movs	r3, #7
 80017c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c2:	f107 0314 	add.w	r3, r7, #20
 80017c6:	4619      	mov	r1, r3
 80017c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017cc:	f000 faea 	bl	8001da4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80017d0:	bf00      	nop
 80017d2:	3728      	adds	r7, #40	@ 0x28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40004400 	.word	0x40004400
 80017dc:	40021000 	.word	0x40021000

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <NMI_Handler+0x4>

080017e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <MemManage_Handler+0x4>

080017f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <UsageFault_Handler+0x4>

08001808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001836:	f000 f95f 	bl	8001af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (!HAL_GPIO_ReadPin(INT_GPIO_Port, INT_Pin)) {
 8001844:	2101      	movs	r1, #1
 8001846:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800184a:	f000 fc1d 	bl	8002088 <HAL_GPIO_ReadPin>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d102      	bne.n	800185a <EXTI0_IRQHandler+0x1a>
		cool = true;
 8001854:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <EXTI0_IRQHandler+0x24>)
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT_Pin);
 800185a:	2001      	movs	r0, #1
 800185c:	f000 fc2c 	bl	80020b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200002f4 	.word	0x200002f4

08001868 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  return 1;
 800186c:	2301      	movs	r3, #1
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <_kill>:

int _kill(int pid, int sig)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001882:	f004 fb8d 	bl	8005fa0 <__errno>
 8001886:	4603      	mov	r3, r0
 8001888:	2216      	movs	r2, #22
 800188a:	601a      	str	r2, [r3, #0]
  return -1;
 800188c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <_exit>:

void _exit (int status)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffe7 	bl	8001878 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018aa:	bf00      	nop
 80018ac:	e7fd      	b.n	80018aa <_exit+0x12>

080018ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b086      	sub	sp, #24
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	60f8      	str	r0, [r7, #12]
 80018b6:	60b9      	str	r1, [r7, #8]
 80018b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	e00a      	b.n	80018d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018c0:	f3af 8000 	nop.w
 80018c4:	4601      	mov	r1, r0
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	1c5a      	adds	r2, r3, #1
 80018ca:	60ba      	str	r2, [r7, #8]
 80018cc:	b2ca      	uxtb	r2, r1
 80018ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	3301      	adds	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	429a      	cmp	r2, r3
 80018dc:	dbf0      	blt.n	80018c0 <_read+0x12>
  }

  return len;
 80018de:	687b      	ldr	r3, [r7, #4]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3718      	adds	r7, #24
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f4:	2300      	movs	r3, #0
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e009      	b.n	800190e <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	1c5a      	adds	r2, r3, #1
 80018fe:	60ba      	str	r2, [r7, #8]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	3301      	adds	r3, #1
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	429a      	cmp	r2, r3
 8001914:	dbf1      	blt.n	80018fa <_write+0x12>
  }
  return len;
 8001916:	687b      	ldr	r3, [r7, #4]
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <_close>:

int _close(int file)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001928:	f04f 33ff 	mov.w	r3, #4294967295
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001948:	605a      	str	r2, [r3, #4]
  return 0;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <_isatty>:

int _isatty(int file)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001960:	2301      	movs	r3, #1
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800196e:	b480      	push	{r7}
 8001970:	b085      	sub	sp, #20
 8001972:	af00      	add	r7, sp, #0
 8001974:	60f8      	str	r0, [r7, #12]
 8001976:	60b9      	str	r1, [r7, #8]
 8001978:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001990:	4a14      	ldr	r2, [pc, #80]	@ (80019e4 <_sbrk+0x5c>)
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <_sbrk+0x60>)
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <_sbrk+0x64>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a4:	4b11      	ldr	r3, [pc, #68]	@ (80019ec <_sbrk+0x64>)
 80019a6:	4a12      	ldr	r2, [pc, #72]	@ (80019f0 <_sbrk+0x68>)
 80019a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019aa:	4b10      	ldr	r3, [pc, #64]	@ (80019ec <_sbrk+0x64>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4413      	add	r3, r2
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d207      	bcs.n	80019c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019b8:	f004 faf2 	bl	8005fa0 <__errno>
 80019bc:	4603      	mov	r3, r0
 80019be:	220c      	movs	r2, #12
 80019c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
 80019c6:	e009      	b.n	80019dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019c8:	4b08      	ldr	r3, [pc, #32]	@ (80019ec <_sbrk+0x64>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ce:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <_sbrk+0x64>)
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	4a05      	ldr	r2, [pc, #20]	@ (80019ec <_sbrk+0x64>)
 80019d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019da:	68fb      	ldr	r3, [r7, #12]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3718      	adds	r7, #24
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20004000 	.word	0x20004000
 80019e8:	00000400 	.word	0x00000400
 80019ec:	20000338 	.word	0x20000338
 80019f0:	20000490 	.word	0x20000490

080019f4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019f8:	4b06      	ldr	r3, [pc, #24]	@ (8001a14 <SystemInit+0x20>)
 80019fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019fe:	4a05      	ldr	r2, [pc, #20]	@ (8001a14 <SystemInit+0x20>)
 8001a00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a08:	bf00      	nop
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000ed00 	.word	0xe000ed00

08001a18 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a50 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a1c:	f7ff ffea 	bl	80019f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a20:	480c      	ldr	r0, [pc, #48]	@ (8001a54 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a22:	490d      	ldr	r1, [pc, #52]	@ (8001a58 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a24:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <LoopForever+0xe>)
  movs r3, #0
 8001a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a28:	e002      	b.n	8001a30 <LoopCopyDataInit>

08001a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2e:	3304      	adds	r3, #4

08001a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a34:	d3f9      	bcc.n	8001a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a36:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a38:	4c0a      	ldr	r4, [pc, #40]	@ (8001a64 <LoopForever+0x16>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a3c:	e001      	b.n	8001a42 <LoopFillZerobss>

08001a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a40:	3204      	adds	r2, #4

08001a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a44:	d3fb      	bcc.n	8001a3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a46:	f004 fab1 	bl	8005fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a4a:	f7ff fca5 	bl	8001398 <main>

08001a4e <LoopForever>:

LoopForever:
    b LoopForever
 8001a4e:	e7fe      	b.n	8001a4e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a50:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001a54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a58:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a5c:	08009b50 	.word	0x08009b50
  ldr r2, =_sbss
 8001a60:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a64:	2000048c 	.word	0x2000048c

08001a68 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a68:	e7fe      	b.n	8001a68 <ADC1_IRQHandler>
	...

08001a6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a70:	4b08      	ldr	r3, [pc, #32]	@ (8001a94 <HAL_Init+0x28>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a07      	ldr	r2, [pc, #28]	@ (8001a94 <HAL_Init+0x28>)
 8001a76:	f043 0310 	orr.w	r3, r3, #16
 8001a7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f000 f94f 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a82:	200f      	movs	r0, #15
 8001a84:	f000 f808 	bl	8001a98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a88:	f7ff fde2 	bl	8001650 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40022000 	.word	0x40022000

08001a98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aa0:	4b12      	ldr	r3, [pc, #72]	@ (8001aec <HAL_InitTick+0x54>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4b12      	ldr	r3, [pc, #72]	@ (8001af0 <HAL_InitTick+0x58>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f967 	bl	8001d8a <HAL_SYSTICK_Config>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00e      	b.n	8001ae4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b0f      	cmp	r3, #15
 8001aca:	d80a      	bhi.n	8001ae2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001acc:	2200      	movs	r2, #0
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad4:	f000 f92f 	bl	8001d36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad8:	4a06      	ldr	r2, [pc, #24]	@ (8001af4 <HAL_InitTick+0x5c>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e000      	b.n	8001ae4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3708      	adds	r7, #8
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000000 	.word	0x20000000
 8001af0:	20000008 	.word	0x20000008
 8001af4:	20000004 	.word	0x20000004

08001af8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001afc:	4b06      	ldr	r3, [pc, #24]	@ (8001b18 <HAL_IncTick+0x20>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_IncTick+0x24>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	4a04      	ldr	r2, [pc, #16]	@ (8001b1c <HAL_IncTick+0x24>)
 8001b0a:	6013      	str	r3, [r2, #0]
}
 8001b0c:	bf00      	nop
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000008 	.word	0x20000008
 8001b1c:	2000033c 	.word	0x2000033c

08001b20 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b24:	4b03      	ldr	r3, [pc, #12]	@ (8001b34 <HAL_GetTick+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	2000033c 	.word	0x2000033c

08001b38 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff ffee 	bl	8001b20 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d005      	beq.n	8001b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_Delay+0x44>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	461a      	mov	r2, r3
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b5e:	bf00      	nop
 8001b60:	f7ff ffde 	bl	8001b20 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d8f7      	bhi.n	8001b60 <HAL_Delay+0x28>
  {
  }
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3710      	adds	r7, #16
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000008 	.word	0x20000008

08001b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b90:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b96:	68ba      	ldr	r2, [r7, #8]
 8001b98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba4:	68bb      	ldr	r3, [r7, #8]
 8001ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001bac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb2:	4a04      	ldr	r2, [pc, #16]	@ (8001bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	60d3      	str	r3, [r2, #12]
}
 8001bb8:	bf00      	nop
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bcc:	4b04      	ldr	r3, [pc, #16]	@ (8001be0 <__NVIC_GetPriorityGrouping+0x18>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	f003 0307 	and.w	r3, r3, #7
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	e000ed00 	.word	0xe000ed00

08001be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	db0b      	blt.n	8001c0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf6:	79fb      	ldrb	r3, [r7, #7]
 8001bf8:	f003 021f 	and.w	r2, r3, #31
 8001bfc:	4907      	ldr	r1, [pc, #28]	@ (8001c1c <__NVIC_EnableIRQ+0x38>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	095b      	lsrs	r3, r3, #5
 8001c04:	2001      	movs	r0, #1
 8001c06:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	@ (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	@ (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	@ 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
         );
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	@ 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f7ff ff8e 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	@ (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	@ (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff29 	bl	8001b80 <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff3e 	bl	8001bc8 <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff8e 	bl	8001c74 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5d 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	4603      	mov	r3, r0
 8001d76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff ff31 	bl	8001be4 <__NVIC_EnableIRQ>
}
 8001d82:	bf00      	nop
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b082      	sub	sp, #8
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ffa2 	bl	8001cdc <SysTick_Config>
 8001d98:	4603      	mov	r3, r0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
	...

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b087      	sub	sp, #28
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001db2:	e14e      	b.n	8002052 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2101      	movs	r1, #1
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	f000 8140 	beq.w	800204c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 0303 	and.w	r3, r3, #3
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d005      	beq.n	8001de4 <HAL_GPIO_Init+0x40>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d130      	bne.n	8001e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	2203      	movs	r2, #3
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	68da      	ldr	r2, [r3, #12]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	005b      	lsls	r3, r3, #1
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43db      	mvns	r3, r3
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	4013      	ands	r3, r2
 8001e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 0201 	and.w	r2, r3, #1
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	693a      	ldr	r2, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d017      	beq.n	8001e82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4313      	orrs	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	693a      	ldr	r2, [r7, #16]
 8001e80:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 0303 	and.w	r3, r3, #3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d123      	bne.n	8001ed6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	08da      	lsrs	r2, r3, #3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3208      	adds	r2, #8
 8001e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	691a      	ldr	r2, [r3, #16]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	08da      	lsrs	r2, r3, #3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	3208      	adds	r2, #8
 8001ed0:	6939      	ldr	r1, [r7, #16]
 8001ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	693a      	ldr	r2, [r7, #16]
 8001eea:	4013      	ands	r3, r2
 8001eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0203 	and.w	r2, r3, #3
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 809a 	beq.w	800204c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f18:	4b55      	ldr	r3, [pc, #340]	@ (8002070 <HAL_GPIO_Init+0x2cc>)
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	4a54      	ldr	r2, [pc, #336]	@ (8002070 <HAL_GPIO_Init+0x2cc>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	6193      	str	r3, [r2, #24]
 8001f24:	4b52      	ldr	r3, [pc, #328]	@ (8002070 <HAL_GPIO_Init+0x2cc>)
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0301 	and.w	r3, r3, #1
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f30:	4a50      	ldr	r2, [pc, #320]	@ (8002074 <HAL_GPIO_Init+0x2d0>)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3302      	adds	r3, #2
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001f5a:	d013      	beq.n	8001f84 <HAL_GPIO_Init+0x1e0>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a46      	ldr	r2, [pc, #280]	@ (8002078 <HAL_GPIO_Init+0x2d4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d00d      	beq.n	8001f80 <HAL_GPIO_Init+0x1dc>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a45      	ldr	r2, [pc, #276]	@ (800207c <HAL_GPIO_Init+0x2d8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d007      	beq.n	8001f7c <HAL_GPIO_Init+0x1d8>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a44      	ldr	r2, [pc, #272]	@ (8002080 <HAL_GPIO_Init+0x2dc>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d101      	bne.n	8001f78 <HAL_GPIO_Init+0x1d4>
 8001f74:	2303      	movs	r3, #3
 8001f76:	e006      	b.n	8001f86 <HAL_GPIO_Init+0x1e2>
 8001f78:	2305      	movs	r3, #5
 8001f7a:	e004      	b.n	8001f86 <HAL_GPIO_Init+0x1e2>
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	e002      	b.n	8001f86 <HAL_GPIO_Init+0x1e2>
 8001f80:	2301      	movs	r3, #1
 8001f82:	e000      	b.n	8001f86 <HAL_GPIO_Init+0x1e2>
 8001f84:	2300      	movs	r3, #0
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	f002 0203 	and.w	r2, r2, #3
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	4093      	lsls	r3, r2
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f96:	4937      	ldr	r1, [pc, #220]	@ (8002074 <HAL_GPIO_Init+0x2d0>)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	089b      	lsrs	r3, r3, #2
 8001f9c:	3302      	adds	r3, #2
 8001f9e:	693a      	ldr	r2, [r7, #16]
 8001fa0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fa4:	4b37      	ldr	r3, [pc, #220]	@ (8002084 <HAL_GPIO_Init+0x2e0>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001fc0:	693a      	ldr	r2, [r7, #16]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001fc8:	4a2e      	ldr	r2, [pc, #184]	@ (8002084 <HAL_GPIO_Init+0x2e0>)
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fce:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <HAL_GPIO_Init+0x2e0>)
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	693a      	ldr	r2, [r7, #16]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001fea:	693a      	ldr	r2, [r7, #16]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ff2:	4a24      	ldr	r2, [pc, #144]	@ (8002084 <HAL_GPIO_Init+0x2e0>)
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ff8:	4b22      	ldr	r3, [pc, #136]	@ (8002084 <HAL_GPIO_Init+0x2e0>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	43db      	mvns	r3, r3
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	4013      	ands	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002014:	693a      	ldr	r2, [r7, #16]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800201c:	4a19      	ldr	r2, [pc, #100]	@ (8002084 <HAL_GPIO_Init+0x2e0>)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002022:	4b18      	ldr	r3, [pc, #96]	@ (8002084 <HAL_GPIO_Init+0x2e0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	43db      	mvns	r3, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800203e:	693a      	ldr	r2, [r7, #16]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	4313      	orrs	r3, r2
 8002044:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002046:	4a0f      	ldr	r2, [pc, #60]	@ (8002084 <HAL_GPIO_Init+0x2e0>)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3301      	adds	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	f47f aea9 	bne.w	8001db4 <HAL_GPIO_Init+0x10>
  }
}
 8002062:	bf00      	nop
 8002064:	bf00      	nop
 8002066:	371c      	adds	r7, #28
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	40021000 	.word	0x40021000
 8002074:	40010000 	.word	0x40010000
 8002078:	48000400 	.word	0x48000400
 800207c:	48000800 	.word	0x48000800
 8002080:	48000c00 	.word	0x48000c00
 8002084:	40010400 	.word	0x40010400

08002088 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e001      	b.n	80020aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	4603      	mov	r3, r0
 80020c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80020c2:	4b08      	ldr	r3, [pc, #32]	@ (80020e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020c4:	695a      	ldr	r2, [r3, #20]
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	4013      	ands	r3, r2
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020ce:	4a05      	ldr	r2, [pc, #20]	@ (80020e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020d4:	88fb      	ldrh	r3, [r7, #6]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f806 	bl	80020e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40010400 	.word	0x40010400

080020e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d101      	bne.n	8002110 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e08d      	b.n	800222c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d106      	bne.n	800212a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002124:	6878      	ldr	r0, [r7, #4]
 8002126:	f7ff fab7 	bl	8001698 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2224      	movs	r2, #36	@ 0x24
 800212e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f022 0201 	bic.w	r2, r2, #1
 8002140:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800214e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800215e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d107      	bne.n	8002178 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	e006      	b.n	8002186 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689a      	ldr	r2, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002184:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d108      	bne.n	80021a0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	e007      	b.n	80021b0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021ae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	6812      	ldr	r2, [r2, #0]
 80021ba:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80021c2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68da      	ldr	r2, [r3, #12]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80021d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691a      	ldr	r2, [r3, #16]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699b      	ldr	r3, [r3, #24]
 80021e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69d9      	ldr	r1, [r3, #28]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1a      	ldr	r2, [r3, #32]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f042 0201 	orr.w	r2, r2, #1
 800220c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2220      	movs	r2, #32
 8002218:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b088      	sub	sp, #32
 8002238:	af02      	add	r7, sp, #8
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	607a      	str	r2, [r7, #4]
 800223e:	461a      	mov	r2, r3
 8002240:	460b      	mov	r3, r1
 8002242:	817b      	strh	r3, [r7, #10]
 8002244:	4613      	mov	r3, r2
 8002246:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800224e:	b2db      	uxtb	r3, r3
 8002250:	2b20      	cmp	r3, #32
 8002252:	f040 80fd 	bne.w	8002450 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800225c:	2b01      	cmp	r3, #1
 800225e:	d101      	bne.n	8002264 <HAL_I2C_Master_Transmit+0x30>
 8002260:	2302      	movs	r3, #2
 8002262:	e0f6      	b.n	8002452 <HAL_I2C_Master_Transmit+0x21e>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800226c:	f7ff fc58 	bl	8001b20 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2319      	movs	r3, #25
 8002278:	2201      	movs	r2, #1
 800227a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800227e:	68f8      	ldr	r0, [r7, #12]
 8002280:	f000 fb78 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0e1      	b.n	8002452 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2221      	movs	r2, #33	@ 0x21
 8002292:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2210      	movs	r2, #16
 800229a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2200      	movs	r2, #0
 80022a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	893a      	ldrh	r2, [r7, #8]
 80022ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2bff      	cmp	r3, #255	@ 0xff
 80022be:	d906      	bls.n	80022ce <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	22ff      	movs	r2, #255	@ 0xff
 80022c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80022c6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	e007      	b.n	80022de <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80022d8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80022dc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d024      	beq.n	8002330 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	1c5a      	adds	r2, r3, #1
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002300:	b29b      	uxth	r3, r3
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230e:	3b01      	subs	r3, #1
 8002310:	b29a      	uxth	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3301      	adds	r3, #1
 800231e:	b2da      	uxtb	r2, r3
 8002320:	8979      	ldrh	r1, [r7, #10]
 8002322:	4b4e      	ldr	r3, [pc, #312]	@ (800245c <HAL_I2C_Master_Transmit+0x228>)
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fd73 	bl	8002e14 <I2C_TransferConfig>
 800232e:	e066      	b.n	80023fe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002334:	b2da      	uxtb	r2, r3
 8002336:	8979      	ldrh	r1, [r7, #10]
 8002338:	4b48      	ldr	r3, [pc, #288]	@ (800245c <HAL_I2C_Master_Transmit+0x228>)
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	68f8      	ldr	r0, [r7, #12]
 8002340:	f000 fd68 	bl	8002e14 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002344:	e05b      	b.n	80023fe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002346:	693a      	ldr	r2, [r7, #16]
 8002348:	6a39      	ldr	r1, [r7, #32]
 800234a:	68f8      	ldr	r0, [r7, #12]
 800234c:	f000 fb6b 	bl	8002a26 <I2C_WaitOnTXISFlagUntilTimeout>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e07b      	b.n	8002452 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235e:	781a      	ldrb	r2, [r3, #0]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800236a:	1c5a      	adds	r2, r3, #1
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002374:	b29b      	uxth	r3, r3
 8002376:	3b01      	subs	r3, #1
 8002378:	b29a      	uxth	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002382:	3b01      	subs	r3, #1
 8002384:	b29a      	uxth	r2, r3
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800238e:	b29b      	uxth	r3, r3
 8002390:	2b00      	cmp	r3, #0
 8002392:	d034      	beq.n	80023fe <HAL_I2C_Master_Transmit+0x1ca>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002398:	2b00      	cmp	r3, #0
 800239a:	d130      	bne.n	80023fe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	2200      	movs	r2, #0
 80023a4:	2180      	movs	r1, #128	@ 0x80
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 fae4 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e04d      	b.n	8002452 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	2bff      	cmp	r3, #255	@ 0xff
 80023be:	d90e      	bls.n	80023de <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	22ff      	movs	r2, #255	@ 0xff
 80023c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ca:	b2da      	uxtb	r2, r3
 80023cc:	8979      	ldrh	r1, [r7, #10]
 80023ce:	2300      	movs	r3, #0
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023d6:	68f8      	ldr	r0, [r7, #12]
 80023d8:	f000 fd1c 	bl	8002e14 <I2C_TransferConfig>
 80023dc:	e00f      	b.n	80023fe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023ec:	b2da      	uxtb	r2, r3
 80023ee:	8979      	ldrh	r1, [r7, #10]
 80023f0:	2300      	movs	r3, #0
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fd0b 	bl	8002e14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002402:	b29b      	uxth	r3, r3
 8002404:	2b00      	cmp	r3, #0
 8002406:	d19e      	bne.n	8002346 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	6a39      	ldr	r1, [r7, #32]
 800240c:	68f8      	ldr	r0, [r7, #12]
 800240e:	f000 fb51 	bl	8002ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e01a      	b.n	8002452 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2220      	movs	r2, #32
 8002422:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6859      	ldr	r1, [r3, #4]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b0c      	ldr	r3, [pc, #48]	@ (8002460 <HAL_I2C_Master_Transmit+0x22c>)
 8002430:	400b      	ands	r3, r1
 8002432:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2220      	movs	r2, #32
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2200      	movs	r2, #0
 8002448:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	e000      	b.n	8002452 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8002450:	2302      	movs	r3, #2
  }
}
 8002452:	4618      	mov	r0, r3
 8002454:	3718      	adds	r7, #24
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	80002000 	.word	0x80002000
 8002460:	fe00e800 	.word	0xfe00e800

08002464 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af02      	add	r7, sp, #8
 800246a:	60f8      	str	r0, [r7, #12]
 800246c:	607a      	str	r2, [r7, #4]
 800246e:	461a      	mov	r2, r3
 8002470:	460b      	mov	r3, r1
 8002472:	817b      	strh	r3, [r7, #10]
 8002474:	4613      	mov	r3, r2
 8002476:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b20      	cmp	r3, #32
 8002482:	f040 80db 	bne.w	800263c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800248c:	2b01      	cmp	r3, #1
 800248e:	d101      	bne.n	8002494 <HAL_I2C_Master_Receive+0x30>
 8002490:	2302      	movs	r3, #2
 8002492:	e0d4      	b.n	800263e <HAL_I2C_Master_Receive+0x1da>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2201      	movs	r2, #1
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800249c:	f7ff fb40 	bl	8001b20 <HAL_GetTick>
 80024a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2319      	movs	r3, #25
 80024a8:	2201      	movs	r2, #1
 80024aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fa60 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e0bf      	b.n	800263e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2222      	movs	r2, #34	@ 0x22
 80024c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2210      	movs	r2, #16
 80024ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	893a      	ldrh	r2, [r7, #8]
 80024de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	2200      	movs	r2, #0
 80024e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	2bff      	cmp	r3, #255	@ 0xff
 80024ee:	d90e      	bls.n	800250e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2201      	movs	r2, #1
 80024f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	8979      	ldrh	r1, [r7, #10]
 80024fe:	4b52      	ldr	r3, [pc, #328]	@ (8002648 <HAL_I2C_Master_Receive+0x1e4>)
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fc84 	bl	8002e14 <I2C_TransferConfig>
 800250c:	e06d      	b.n	80025ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002512:	b29a      	uxth	r2, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800251c:	b2da      	uxtb	r2, r3
 800251e:	8979      	ldrh	r1, [r7, #10]
 8002520:	4b49      	ldr	r3, [pc, #292]	@ (8002648 <HAL_I2C_Master_Receive+0x1e4>)
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 fc73 	bl	8002e14 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800252e:	e05c      	b.n	80025ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	6a39      	ldr	r1, [r7, #32]
 8002534:	68f8      	ldr	r0, [r7, #12]
 8002536:	f000 fb01 	bl	8002b3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e07c      	b.n	800263e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	1c5a      	adds	r2, r3, #1
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002560:	3b01      	subs	r3, #1
 8002562:	b29a      	uxth	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b29a      	uxth	r2, r3
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257a:	b29b      	uxth	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d034      	beq.n	80025ea <HAL_I2C_Master_Receive+0x186>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002584:	2b00      	cmp	r3, #0
 8002586:	d130      	bne.n	80025ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	2200      	movs	r2, #0
 8002590:	2180      	movs	r1, #128	@ 0x80
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f9ee 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e04d      	b.n	800263e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2bff      	cmp	r3, #255	@ 0xff
 80025aa:	d90e      	bls.n	80025ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	22ff      	movs	r2, #255	@ 0xff
 80025b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	8979      	ldrh	r1, [r7, #10]
 80025ba:	2300      	movs	r3, #0
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fc26 	bl	8002e14 <I2C_TransferConfig>
 80025c8:	e00f      	b.n	80025ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ce:	b29a      	uxth	r2, r3
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	8979      	ldrh	r1, [r7, #10]
 80025dc:	2300      	movs	r3, #0
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 fc15 	bl	8002e14 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d19d      	bne.n	8002530 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f4:	697a      	ldr	r2, [r7, #20]
 80025f6:	6a39      	ldr	r1, [r7, #32]
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 fa5b 	bl	8002ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e01a      	b.n	800263e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2220      	movs	r2, #32
 800260e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <HAL_I2C_Master_Receive+0x1e8>)
 800261c:	400b      	ands	r3, r1
 800261e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002638:	2300      	movs	r3, #0
 800263a:	e000      	b.n	800263e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800263c:	2302      	movs	r3, #2
  }
}
 800263e:	4618      	mov	r0, r3
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	80002400 	.word	0x80002400
 800264c:	fe00e800 	.word	0xfe00e800

08002650 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b088      	sub	sp, #32
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	4608      	mov	r0, r1
 800265a:	4611      	mov	r1, r2
 800265c:	461a      	mov	r2, r3
 800265e:	4603      	mov	r3, r0
 8002660:	817b      	strh	r3, [r7, #10]
 8002662:	460b      	mov	r3, r1
 8002664:	813b      	strh	r3, [r7, #8]
 8002666:	4613      	mov	r3, r2
 8002668:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b20      	cmp	r3, #32
 8002674:	f040 80fd 	bne.w	8002872 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_I2C_Mem_Read+0x34>
 800267e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002680:	2b00      	cmp	r3, #0
 8002682:	d105      	bne.n	8002690 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800268a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0f1      	b.n	8002874 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002696:	2b01      	cmp	r3, #1
 8002698:	d101      	bne.n	800269e <HAL_I2C_Mem_Read+0x4e>
 800269a:	2302      	movs	r3, #2
 800269c:	e0ea      	b.n	8002874 <HAL_I2C_Mem_Read+0x224>
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026a6:	f7ff fa3b 	bl	8001b20 <HAL_GetTick>
 80026aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	2319      	movs	r3, #25
 80026b2:	2201      	movs	r2, #1
 80026b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f95b 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0d5      	b.n	8002874 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2222      	movs	r2, #34	@ 0x22
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2240      	movs	r2, #64	@ 0x40
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a3a      	ldr	r2, [r7, #32]
 80026e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026f0:	88f8      	ldrh	r0, [r7, #6]
 80026f2:	893a      	ldrh	r2, [r7, #8]
 80026f4:	8979      	ldrh	r1, [r7, #10]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	9301      	str	r3, [sp, #4]
 80026fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026fc:	9300      	str	r3, [sp, #0]
 80026fe:	4603      	mov	r3, r0
 8002700:	68f8      	ldr	r0, [r7, #12]
 8002702:	f000 f8bf 	bl	8002884 <I2C_RequestMemoryRead>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d005      	beq.n	8002718 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e0ad      	b.n	8002874 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	2bff      	cmp	r3, #255	@ 0xff
 8002720:	d90e      	bls.n	8002740 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2201      	movs	r2, #1
 8002726:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272c:	b2da      	uxtb	r2, r3
 800272e:	8979      	ldrh	r1, [r7, #10]
 8002730:	4b52      	ldr	r3, [pc, #328]	@ (800287c <HAL_I2C_Mem_Read+0x22c>)
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 fb6b 	bl	8002e14 <I2C_TransferConfig>
 800273e:	e00f      	b.n	8002760 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002744:	b29a      	uxth	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800274e:	b2da      	uxtb	r2, r3
 8002750:	8979      	ldrh	r1, [r7, #10]
 8002752:	4b4a      	ldr	r3, [pc, #296]	@ (800287c <HAL_I2C_Mem_Read+0x22c>)
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fb5a 	bl	8002e14 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002766:	2200      	movs	r2, #0
 8002768:	2104      	movs	r1, #4
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f902 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e07c      	b.n	8002874 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	b2d2      	uxtb	r2, r2
 8002786:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b0:	b29b      	uxth	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d034      	beq.n	8002820 <HAL_I2C_Mem_Read+0x1d0>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d130      	bne.n	8002820 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c4:	2200      	movs	r2, #0
 80027c6:	2180      	movs	r1, #128	@ 0x80
 80027c8:	68f8      	ldr	r0, [r7, #12]
 80027ca:	f000 f8d3 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80027d4:	2301      	movs	r3, #1
 80027d6:	e04d      	b.n	8002874 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027dc:	b29b      	uxth	r3, r3
 80027de:	2bff      	cmp	r3, #255	@ 0xff
 80027e0:	d90e      	bls.n	8002800 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	8979      	ldrh	r1, [r7, #10]
 80027f0:	2300      	movs	r3, #0
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80027f8:	68f8      	ldr	r0, [r7, #12]
 80027fa:	f000 fb0b 	bl	8002e14 <I2C_TransferConfig>
 80027fe:	e00f      	b.n	8002820 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002804:	b29a      	uxth	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800280e:	b2da      	uxtb	r2, r3
 8002810:	8979      	ldrh	r1, [r7, #10]
 8002812:	2300      	movs	r3, #0
 8002814:	9300      	str	r3, [sp, #0]
 8002816:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fafa 	bl	8002e14 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002824:	b29b      	uxth	r3, r3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d19a      	bne.n	8002760 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800282a:	697a      	ldr	r2, [r7, #20]
 800282c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 f940 	bl	8002ab4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d001      	beq.n	800283e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e01a      	b.n	8002874 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2220      	movs	r2, #32
 8002844:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	6859      	ldr	r1, [r3, #4]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <HAL_I2C_Mem_Read+0x230>)
 8002852:	400b      	ands	r3, r1
 8002854:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2220      	movs	r2, #32
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002872:	2302      	movs	r3, #2
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	80002400 	.word	0x80002400
 8002880:	fe00e800 	.word	0xfe00e800

08002884 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af02      	add	r7, sp, #8
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	4608      	mov	r0, r1
 800288e:	4611      	mov	r1, r2
 8002890:	461a      	mov	r2, r3
 8002892:	4603      	mov	r3, r0
 8002894:	817b      	strh	r3, [r7, #10]
 8002896:	460b      	mov	r3, r1
 8002898:	813b      	strh	r3, [r7, #8]
 800289a:	4613      	mov	r3, r2
 800289c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800289e:	88fb      	ldrh	r3, [r7, #6]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	8979      	ldrh	r1, [r7, #10]
 80028a4:	4b20      	ldr	r3, [pc, #128]	@ (8002928 <I2C_RequestMemoryRead+0xa4>)
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	2300      	movs	r3, #0
 80028aa:	68f8      	ldr	r0, [r7, #12]
 80028ac:	f000 fab2 	bl	8002e14 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b0:	69fa      	ldr	r2, [r7, #28]
 80028b2:	69b9      	ldr	r1, [r7, #24]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f8b6 	bl	8002a26 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e02c      	b.n	800291e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028c4:	88fb      	ldrh	r3, [r7, #6]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d105      	bne.n	80028d6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028ca:	893b      	ldrh	r3, [r7, #8]
 80028cc:	b2da      	uxtb	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80028d4:	e015      	b.n	8002902 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028d6:	893b      	ldrh	r3, [r7, #8]
 80028d8:	0a1b      	lsrs	r3, r3, #8
 80028da:	b29b      	uxth	r3, r3
 80028dc:	b2da      	uxtb	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028e4:	69fa      	ldr	r2, [r7, #28]
 80028e6:	69b9      	ldr	r1, [r7, #24]
 80028e8:	68f8      	ldr	r0, [r7, #12]
 80028ea:	f000 f89c 	bl	8002a26 <I2C_WaitOnTXISFlagUntilTimeout>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e012      	b.n	800291e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028f8:	893b      	ldrh	r3, [r7, #8]
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	2200      	movs	r2, #0
 800290a:	2140      	movs	r1, #64	@ 0x40
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f000 f831 	bl	8002974 <I2C_WaitOnFlagUntilTimeout>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d001      	beq.n	800291c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	80002000 	.word	0x80002000

0800292c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b02      	cmp	r3, #2
 8002940:	d103      	bne.n	800294a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2200      	movs	r2, #0
 8002948:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	2b01      	cmp	r3, #1
 8002956:	d007      	beq.n	8002968 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	699a      	ldr	r2, [r3, #24]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	619a      	str	r2, [r3, #24]
  }
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	603b      	str	r3, [r7, #0]
 8002980:	4613      	mov	r3, r2
 8002982:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002984:	e03b      	b.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	6839      	ldr	r1, [r7, #0]
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 f962 	bl	8002c54 <I2C_IsErrorOccurred>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e041      	b.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a0:	d02d      	beq.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a2:	f7ff f8bd 	bl	8001b20 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	69bb      	ldr	r3, [r7, #24]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d302      	bcc.n	80029b8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d122      	bne.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699a      	ldr	r2, [r3, #24]
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	4013      	ands	r3, r2
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	bf0c      	ite	eq
 80029c8:	2301      	moveq	r3, #1
 80029ca:	2300      	movne	r3, #0
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	461a      	mov	r2, r3
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d113      	bne.n	80029fe <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029da:	f043 0220 	orr.w	r2, r3, #32
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2220      	movs	r2, #32
 80029e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00f      	b.n	8002a1e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699a      	ldr	r2, [r3, #24]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	4013      	ands	r3, r2
 8002a08:	68ba      	ldr	r2, [r7, #8]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	bf0c      	ite	eq
 8002a0e:	2301      	moveq	r3, #1
 8002a10:	2300      	movne	r3, #0
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d0b4      	beq.n	8002986 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a26:	b580      	push	{r7, lr}
 8002a28:	b084      	sub	sp, #16
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a32:	e033      	b.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	68b9      	ldr	r1, [r7, #8]
 8002a38:	68f8      	ldr	r0, [r7, #12]
 8002a3a:	f000 f90b 	bl	8002c54 <I2C_IsErrorOccurred>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e031      	b.n	8002aac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a4e:	d025      	beq.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a50:	f7ff f866 	bl	8001b20 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	68ba      	ldr	r2, [r7, #8]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d302      	bcc.n	8002a66 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d11a      	bne.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d013      	beq.n	8002a9c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a78:	f043 0220 	orr.w	r2, r3, #32
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e007      	b.n	8002aac <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	f003 0302 	and.w	r3, r3, #2
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d1c4      	bne.n	8002a34 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3710      	adds	r7, #16
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ac0:	e02f      	b.n	8002b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f8c4 	bl	8002c54 <I2C_IsErrorOccurred>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e02d      	b.n	8002b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ad6:	f7ff f823 	bl	8001b20 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	68ba      	ldr	r2, [r7, #8]
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d302      	bcc.n	8002aec <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d11a      	bne.n	8002b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	d013      	beq.n	8002b22 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002afe:	f043 0220 	orr.w	r2, r3, #32
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2220      	movs	r2, #32
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e007      	b.n	8002b32 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f003 0320 	and.w	r3, r3, #32
 8002b2c:	2b20      	cmp	r3, #32
 8002b2e:	d1c8      	bne.n	8002ac2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002b4c:	e071      	b.n	8002c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	68b9      	ldr	r1, [r7, #8]
 8002b52:	68f8      	ldr	r0, [r7, #12]
 8002b54:	f000 f87e 	bl	8002c54 <I2C_IsErrorOccurred>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	f003 0320 	and.w	r3, r3, #32
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d13b      	bne.n	8002be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8002b70:	7dfb      	ldrb	r3, [r7, #23]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d138      	bne.n	8002be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	699b      	ldr	r3, [r3, #24]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d105      	bne.n	8002b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d001      	beq.n	8002b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b10      	cmp	r3, #16
 8002b9c:	d121      	bne.n	8002be2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2210      	movs	r2, #16
 8002ba4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2220      	movs	r2, #32
 8002bb2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6859      	ldr	r1, [r3, #4]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	4b24      	ldr	r3, [pc, #144]	@ (8002c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 8002bc0:	400b      	ands	r3, r1
 8002bc2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	75fb      	strb	r3, [r7, #23]
 8002be0:	e002      	b.n	8002be8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8002be8:	f7fe ff9a 	bl	8001b20 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	d302      	bcc.n	8002bfe <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d119      	bne.n	8002c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8002bfe:	7dfb      	ldrb	r3, [r7, #23]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d116      	bne.n	8002c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d00f      	beq.n	8002c32 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c16:	f043 0220 	orr.w	r2, r3, #32
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2220      	movs	r2, #32
 8002c22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0304 	and.w	r3, r3, #4
 8002c3c:	2b04      	cmp	r3, #4
 8002c3e:	d002      	beq.n	8002c46 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8002c40:	7dfb      	ldrb	r3, [r7, #23]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d083      	beq.n	8002b4e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8002c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	fe00e800 	.word	0xfe00e800

08002c54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	@ 0x28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d068      	beq.n	8002d52 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2210      	movs	r2, #16
 8002c86:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002c88:	e049      	b.n	8002d1e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c90:	d045      	beq.n	8002d1e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002c92:	f7fe ff45 	bl	8001b20 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d302      	bcc.n	8002ca8 <I2C_IsErrorOccurred+0x54>
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d13a      	bne.n	8002d1e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cb2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002cba:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cca:	d121      	bne.n	8002d10 <I2C_IsErrorOccurred+0xbc>
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002cd2:	d01d      	beq.n	8002d10 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002cd4:	7cfb      	ldrb	r3, [r7, #19]
 8002cd6:	2b20      	cmp	r3, #32
 8002cd8:	d01a      	beq.n	8002d10 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ce8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002cea:	f7fe ff19 	bl	8001b20 <HAL_GetTick>
 8002cee:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cf0:	e00e      	b.n	8002d10 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002cf2:	f7fe ff15 	bl	8001b20 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b19      	cmp	r3, #25
 8002cfe:	d907      	bls.n	8002d10 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002d00:	6a3b      	ldr	r3, [r7, #32]
 8002d02:	f043 0320 	orr.w	r3, r3, #32
 8002d06:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002d0e:	e006      	b.n	8002d1e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f003 0320 	and.w	r3, r3, #32
 8002d1a:	2b20      	cmp	r3, #32
 8002d1c:	d1e9      	bne.n	8002cf2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0320 	and.w	r3, r3, #32
 8002d28:	2b20      	cmp	r3, #32
 8002d2a:	d003      	beq.n	8002d34 <I2C_IsErrorOccurred+0xe0>
 8002d2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d0aa      	beq.n	8002c8a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002d34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d103      	bne.n	8002d44 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2220      	movs	r2, #32
 8002d42:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002d44:	6a3b      	ldr	r3, [r7, #32]
 8002d46:	f043 0304 	orr.w	r3, r3, #4
 8002d4a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00b      	beq.n	8002d7c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	f043 0301 	orr.w	r3, r3, #1
 8002d6a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	f043 0308 	orr.w	r3, r3, #8
 8002d8c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d96:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002d9e:	69bb      	ldr	r3, [r7, #24]
 8002da0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00b      	beq.n	8002dc0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	f043 0302 	orr.w	r3, r3, #2
 8002dae:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002db8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002dc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d01c      	beq.n	8002e02 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002dc8:	68f8      	ldr	r0, [r7, #12]
 8002dca:	f7ff fdaf 	bl	800292c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e10 <I2C_IsErrorOccurred+0x1bc>)
 8002dda:	400b      	ands	r3, r1
 8002ddc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002de2:	6a3b      	ldr	r3, [r7, #32]
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2200      	movs	r2, #0
 8002df6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002e02:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3728      	adds	r7, #40	@ 0x28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	fe00e800 	.word	0xfe00e800

08002e14 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002e14:	b480      	push	{r7}
 8002e16:	b087      	sub	sp, #28
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	607b      	str	r3, [r7, #4]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	817b      	strh	r3, [r7, #10]
 8002e22:	4613      	mov	r3, r2
 8002e24:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e26:	897b      	ldrh	r3, [r7, #10]
 8002e28:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e2c:	7a7b      	ldrb	r3, [r7, #9]
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e34:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e42:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685a      	ldr	r2, [r3, #4]
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	0d5b      	lsrs	r3, r3, #21
 8002e4e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002e52:	4b08      	ldr	r3, [pc, #32]	@ (8002e74 <I2C_TransferConfig+0x60>)
 8002e54:	430b      	orrs	r3, r1
 8002e56:	43db      	mvns	r3, r3
 8002e58:	ea02 0103 	and.w	r1, r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002e66:	bf00      	nop
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	03ff63ff 	.word	0x03ff63ff

08002e78 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
 8002e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d138      	bne.n	8002f00 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e032      	b.n	8002f02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2224      	movs	r2, #36	@ 0x24
 8002ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0201 	bic.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002eca:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6819      	ldr	r1, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	683a      	ldr	r2, [r7, #0]
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002efc:	2300      	movs	r3, #0
 8002efe:	e000      	b.n	8002f02 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002f00:	2302      	movs	r3, #2
  }
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b085      	sub	sp, #20
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
 8002f16:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b20      	cmp	r3, #32
 8002f22:	d139      	bne.n	8002f98 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d101      	bne.n	8002f32 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002f2e:	2302      	movs	r3, #2
 8002f30:	e033      	b.n	8002f9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2224      	movs	r2, #36	@ 0x24
 8002f3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0201 	bic.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002f60:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68fa      	ldr	r2, [r7, #12]
 8002f72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002f94:	2300      	movs	r3, #0
 8002f96:	e000      	b.n	8002f9a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
  }
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3714      	adds	r7, #20
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa4:	4770      	bx	lr
	...

08002fa8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fb4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fb8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d102      	bne.n	8002fce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f001 b823 	b.w	8004014 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	f000 817d 	beq.w	80032de <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fe4:	4bbc      	ldr	r3, [pc, #752]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 030c 	and.w	r3, r3, #12
 8002fec:	2b04      	cmp	r3, #4
 8002fee:	d00c      	beq.n	800300a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f003 030c 	and.w	r3, r3, #12
 8002ff8:	2b08      	cmp	r3, #8
 8002ffa:	d15c      	bne.n	80030b6 <HAL_RCC_OscConfig+0x10e>
 8002ffc:	4bb6      	ldr	r3, [pc, #728]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003008:	d155      	bne.n	80030b6 <HAL_RCC_OscConfig+0x10e>
 800300a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800300e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003012:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800301e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003022:	fab3 f383 	clz	r3, r3
 8003026:	b2db      	uxtb	r3, r3
 8003028:	095b      	lsrs	r3, r3, #5
 800302a:	b2db      	uxtb	r3, r3
 800302c:	f043 0301 	orr.w	r3, r3, #1
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d102      	bne.n	800303c <HAL_RCC_OscConfig+0x94>
 8003036:	4ba8      	ldr	r3, [pc, #672]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	e015      	b.n	8003068 <HAL_RCC_OscConfig+0xc0>
 800303c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003040:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003050:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003054:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003058:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800305c:	fa93 f3a3 	rbit	r3, r3
 8003060:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8003064:	4b9c      	ldr	r3, [pc, #624]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 8003066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003068:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800306c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8003070:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003074:	fa92 f2a2 	rbit	r2, r2
 8003078:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 800307c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8003080:	fab2 f282 	clz	r2, r2
 8003084:	b2d2      	uxtb	r2, r2
 8003086:	f042 0220 	orr.w	r2, r2, #32
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	f002 021f 	and.w	r2, r2, #31
 8003090:	2101      	movs	r1, #1
 8003092:	fa01 f202 	lsl.w	r2, r1, r2
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 811f 	beq.w	80032dc <HAL_RCC_OscConfig+0x334>
 800309e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	f040 8116 	bne.w	80032dc <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	f000 bfaf 	b.w	8004014 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c6:	d106      	bne.n	80030d6 <HAL_RCC_OscConfig+0x12e>
 80030c8:	4b83      	ldr	r3, [pc, #524]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a82      	ldr	r2, [pc, #520]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 80030ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	e036      	b.n	8003144 <HAL_RCC_OscConfig+0x19c>
 80030d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0x158>
 80030e6:	4b7c      	ldr	r3, [pc, #496]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a7b      	ldr	r2, [pc, #492]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 80030ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b79      	ldr	r3, [pc, #484]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a78      	ldr	r2, [pc, #480]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 80030f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e021      	b.n	8003144 <HAL_RCC_OscConfig+0x19c>
 8003100:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003104:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x184>
 8003112:	4b71      	ldr	r3, [pc, #452]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a70      	ldr	r2, [pc, #448]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 8003118:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800311c:	6013      	str	r3, [r2, #0]
 800311e:	4b6e      	ldr	r3, [pc, #440]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a6d      	ldr	r2, [pc, #436]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e00b      	b.n	8003144 <HAL_RCC_OscConfig+0x19c>
 800312c:	4b6a      	ldr	r3, [pc, #424]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a69      	ldr	r2, [pc, #420]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 8003132:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003136:	6013      	str	r3, [r2, #0]
 8003138:	4b67      	ldr	r3, [pc, #412]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a66      	ldr	r2, [pc, #408]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003142:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003144:	4b64      	ldr	r3, [pc, #400]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	f023 020f 	bic.w	r2, r3, #15
 800314c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003150:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	495f      	ldr	r1, [pc, #380]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 800315a:	4313      	orrs	r3, r2
 800315c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800315e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003162:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d059      	beq.n	8003222 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316e:	f7fe fcd7 	bl	8001b20 <HAL_GetTick>
 8003172:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	e00a      	b.n	800318e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003178:	f7fe fcd2 	bl	8001b20 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	2b64      	cmp	r3, #100	@ 0x64
 8003186:	d902      	bls.n	800318e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003188:	2303      	movs	r3, #3
 800318a:	f000 bf43 	b.w	8004014 <HAL_RCC_OscConfig+0x106c>
 800318e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003192:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003196:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800319a:	fa93 f3a3 	rbit	r3, r3
 800319e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80031a2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031a6:	fab3 f383 	clz	r3, r3
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	095b      	lsrs	r3, r3, #5
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d102      	bne.n	80031c0 <HAL_RCC_OscConfig+0x218>
 80031ba:	4b47      	ldr	r3, [pc, #284]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	e015      	b.n	80031ec <HAL_RCC_OscConfig+0x244>
 80031c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031c4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80031d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031d8:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80031dc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80031e0:	fa93 f3a3 	rbit	r3, r3
 80031e4:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80031e8:	4b3b      	ldr	r3, [pc, #236]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031f0:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80031f4:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80031f8:	fa92 f2a2 	rbit	r2, r2
 80031fc:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8003200:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8003204:	fab2 f282 	clz	r2, r2
 8003208:	b2d2      	uxtb	r2, r2
 800320a:	f042 0220 	orr.w	r2, r2, #32
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	f002 021f 	and.w	r2, r2, #31
 8003214:	2101      	movs	r1, #1
 8003216:	fa01 f202 	lsl.w	r2, r1, r2
 800321a:	4013      	ands	r3, r2
 800321c:	2b00      	cmp	r3, #0
 800321e:	d0ab      	beq.n	8003178 <HAL_RCC_OscConfig+0x1d0>
 8003220:	e05d      	b.n	80032de <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003222:	f7fe fc7d 	bl	8001b20 <HAL_GetTick>
 8003226:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	e00a      	b.n	8003242 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800322c:	f7fe fc78 	bl	8001b20 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b64      	cmp	r3, #100	@ 0x64
 800323a:	d902      	bls.n	8003242 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	f000 bee9 	b.w	8004014 <HAL_RCC_OscConfig+0x106c>
 8003242:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003246:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8003256:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800325a:	fab3 f383 	clz	r3, r3
 800325e:	b2db      	uxtb	r3, r3
 8003260:	095b      	lsrs	r3, r3, #5
 8003262:	b2db      	uxtb	r3, r3
 8003264:	f043 0301 	orr.w	r3, r3, #1
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b01      	cmp	r3, #1
 800326c:	d102      	bne.n	8003274 <HAL_RCC_OscConfig+0x2cc>
 800326e:	4b1a      	ldr	r3, [pc, #104]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	e015      	b.n	80032a0 <HAL_RCC_OscConfig+0x2f8>
 8003274:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003278:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8003280:	fa93 f3a3 	rbit	r3, r3
 8003284:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003288:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800328c:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003290:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8003294:	fa93 f3a3 	rbit	r3, r3
 8003298:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800329c:	4b0e      	ldr	r3, [pc, #56]	@ (80032d8 <HAL_RCC_OscConfig+0x330>)
 800329e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80032a4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80032a8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80032ac:	fa92 f2a2 	rbit	r2, r2
 80032b0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80032b4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80032b8:	fab2 f282 	clz	r2, r2
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	f042 0220 	orr.w	r2, r2, #32
 80032c2:	b2d2      	uxtb	r2, r2
 80032c4:	f002 021f 	and.w	r2, r2, #31
 80032c8:	2101      	movs	r1, #1
 80032ca:	fa01 f202 	lsl.w	r2, r1, r2
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1ab      	bne.n	800322c <HAL_RCC_OscConfig+0x284>
 80032d4:	e003      	b.n	80032de <HAL_RCC_OscConfig+0x336>
 80032d6:	bf00      	nop
 80032d8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032e2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0302 	and.w	r3, r3, #2
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	f000 817d 	beq.w	80035ee <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032f4:	4ba6      	ldr	r3, [pc, #664]	@ (8003590 <HAL_RCC_OscConfig+0x5e8>)
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 030c 	and.w	r3, r3, #12
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00b      	beq.n	8003318 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003300:	4ba3      	ldr	r3, [pc, #652]	@ (8003590 <HAL_RCC_OscConfig+0x5e8>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b08      	cmp	r3, #8
 800330a:	d172      	bne.n	80033f2 <HAL_RCC_OscConfig+0x44a>
 800330c:	4ba0      	ldr	r3, [pc, #640]	@ (8003590 <HAL_RCC_OscConfig+0x5e8>)
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d16c      	bne.n	80033f2 <HAL_RCC_OscConfig+0x44a>
 8003318:	2302      	movs	r3, #2
 800331a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8003322:	fa93 f3a3 	rbit	r3, r3
 8003326:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800332a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332e:	fab3 f383 	clz	r3, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	095b      	lsrs	r3, r3, #5
 8003336:	b2db      	uxtb	r3, r3
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b01      	cmp	r3, #1
 8003340:	d102      	bne.n	8003348 <HAL_RCC_OscConfig+0x3a0>
 8003342:	4b93      	ldr	r3, [pc, #588]	@ (8003590 <HAL_RCC_OscConfig+0x5e8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	e013      	b.n	8003370 <HAL_RCC_OscConfig+0x3c8>
 8003348:	2302      	movs	r3, #2
 800334a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800335a:	2302      	movs	r3, #2
 800335c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003360:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8003364:	fa93 f3a3 	rbit	r3, r3
 8003368:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800336c:	4b88      	ldr	r3, [pc, #544]	@ (8003590 <HAL_RCC_OscConfig+0x5e8>)
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	2202      	movs	r2, #2
 8003372:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8003376:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800337a:	fa92 f2a2 	rbit	r2, r2
 800337e:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8003382:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8003386:	fab2 f282 	clz	r2, r2
 800338a:	b2d2      	uxtb	r2, r2
 800338c:	f042 0220 	orr.w	r2, r2, #32
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	f002 021f 	and.w	r2, r2, #31
 8003396:	2101      	movs	r1, #1
 8003398:	fa01 f202 	lsl.w	r2, r1, r2
 800339c:	4013      	ands	r3, r2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HAL_RCC_OscConfig+0x410>
 80033a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d002      	beq.n	80033b8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f000 be2e 	b.w	8004014 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033b8:	4b75      	ldr	r3, [pc, #468]	@ (8003590 <HAL_RCC_OscConfig+0x5e8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	21f8      	movs	r1, #248	@ 0xf8
 80033ce:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d2:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80033d6:	fa91 f1a1 	rbit	r1, r1
 80033da:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80033de:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80033e2:	fab1 f181 	clz	r1, r1
 80033e6:	b2c9      	uxtb	r1, r1
 80033e8:	408b      	lsls	r3, r1
 80033ea:	4969      	ldr	r1, [pc, #420]	@ (8003590 <HAL_RCC_OscConfig+0x5e8>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033f0:	e0fd      	b.n	80035ee <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	691b      	ldr	r3, [r3, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 8088 	beq.w	8003514 <HAL_RCC_OscConfig+0x56c>
 8003404:	2301      	movs	r3, #1
 8003406:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8003416:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800341a:	fab3 f383 	clz	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003424:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	461a      	mov	r2, r3
 800342c:	2301      	movs	r3, #1
 800342e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fb76 	bl	8001b20 <HAL_GetTick>
 8003434:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800343a:	f7fe fb71 	bl	8001b20 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d902      	bls.n	8003450 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	f000 bde2 	b.w	8004014 <HAL_RCC_OscConfig+0x106c>
 8003450:	2302      	movs	r3, #2
 8003452:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003456:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800345a:	fa93 f3a3 	rbit	r3, r3
 800345e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8003462:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003466:	fab3 f383 	clz	r3, r3
 800346a:	b2db      	uxtb	r3, r3
 800346c:	095b      	lsrs	r3, r3, #5
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f043 0301 	orr.w	r3, r3, #1
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b01      	cmp	r3, #1
 8003478:	d102      	bne.n	8003480 <HAL_RCC_OscConfig+0x4d8>
 800347a:	4b45      	ldr	r3, [pc, #276]	@ (8003590 <HAL_RCC_OscConfig+0x5e8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	e013      	b.n	80034a8 <HAL_RCC_OscConfig+0x500>
 8003480:	2302      	movs	r3, #2
 8003482:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003486:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003492:	2302      	movs	r3, #2
 8003494:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003498:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80034a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003590 <HAL_RCC_OscConfig+0x5e8>)
 80034a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a8:	2202      	movs	r2, #2
 80034aa:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80034ae:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80034b2:	fa92 f2a2 	rbit	r2, r2
 80034b6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80034ba:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80034be:	fab2 f282 	clz	r2, r2
 80034c2:	b2d2      	uxtb	r2, r2
 80034c4:	f042 0220 	orr.w	r2, r2, #32
 80034c8:	b2d2      	uxtb	r2, r2
 80034ca:	f002 021f 	and.w	r2, r2, #31
 80034ce:	2101      	movs	r1, #1
 80034d0:	fa01 f202 	lsl.w	r2, r1, r2
 80034d4:	4013      	ands	r3, r2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0af      	beq.n	800343a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034da:	4b2d      	ldr	r3, [pc, #180]	@ (8003590 <HAL_RCC_OscConfig+0x5e8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	695b      	ldr	r3, [r3, #20]
 80034ee:	21f8      	movs	r1, #248	@ 0xf8
 80034f0:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f4:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80034f8:	fa91 f1a1 	rbit	r1, r1
 80034fc:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8003500:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8003504:	fab1 f181 	clz	r1, r1
 8003508:	b2c9      	uxtb	r1, r1
 800350a:	408b      	lsls	r3, r1
 800350c:	4920      	ldr	r1, [pc, #128]	@ (8003590 <HAL_RCC_OscConfig+0x5e8>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]
 8003512:	e06c      	b.n	80035ee <HAL_RCC_OscConfig+0x646>
 8003514:	2301      	movs	r3, #1
 8003516:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8003526:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352a:	fab3 f383 	clz	r3, r3
 800352e:	b2db      	uxtb	r3, r3
 8003530:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003534:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	461a      	mov	r2, r3
 800353c:	2300      	movs	r3, #0
 800353e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003540:	f7fe faee 	bl	8001b20 <HAL_GetTick>
 8003544:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354a:	f7fe fae9 	bl	8001b20 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003554:	1ad3      	subs	r3, r2, r3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d902      	bls.n	8003560 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	f000 bd5a 	b.w	8004014 <HAL_RCC_OscConfig+0x106c>
 8003560:	2302      	movs	r3, #2
 8003562:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800356a:	fa93 f3a3 	rbit	r3, r3
 800356e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8003572:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003576:	fab3 f383 	clz	r3, r3
 800357a:	b2db      	uxtb	r3, r3
 800357c:	095b      	lsrs	r3, r3, #5
 800357e:	b2db      	uxtb	r3, r3
 8003580:	f043 0301 	orr.w	r3, r3, #1
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b01      	cmp	r3, #1
 8003588:	d104      	bne.n	8003594 <HAL_RCC_OscConfig+0x5ec>
 800358a:	4b01      	ldr	r3, [pc, #4]	@ (8003590 <HAL_RCC_OscConfig+0x5e8>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	e015      	b.n	80035bc <HAL_RCC_OscConfig+0x614>
 8003590:	40021000 	.word	0x40021000
 8003594:	2302      	movs	r3, #2
 8003596:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800359e:	fa93 f3a3 	rbit	r3, r3
 80035a2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80035a6:	2302      	movs	r3, #2
 80035a8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80035ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80035b0:	fa93 f3a3 	rbit	r3, r3
 80035b4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80035b8:	4bc8      	ldr	r3, [pc, #800]	@ (80038dc <HAL_RCC_OscConfig+0x934>)
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	2202      	movs	r2, #2
 80035be:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80035c2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80035c6:	fa92 f2a2 	rbit	r2, r2
 80035ca:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80035ce:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80035d2:	fab2 f282 	clz	r2, r2
 80035d6:	b2d2      	uxtb	r2, r2
 80035d8:	f042 0220 	orr.w	r2, r2, #32
 80035dc:	b2d2      	uxtb	r2, r2
 80035de:	f002 021f 	and.w	r2, r2, #31
 80035e2:	2101      	movs	r1, #1
 80035e4:	fa01 f202 	lsl.w	r2, r1, r2
 80035e8:	4013      	ands	r3, r2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1ad      	bne.n	800354a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8110 	beq.w	8003824 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003608:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d079      	beq.n	8003708 <HAL_RCC_OscConfig+0x760>
 8003614:	2301      	movs	r3, #1
 8003616:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800361e:	fa93 f3a3 	rbit	r3, r3
 8003622:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8003626:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800362a:	fab3 f383 	clz	r3, r3
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	4bab      	ldr	r3, [pc, #684]	@ (80038e0 <HAL_RCC_OscConfig+0x938>)
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	461a      	mov	r2, r3
 800363a:	2301      	movs	r3, #1
 800363c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800363e:	f7fe fa6f 	bl	8001b20 <HAL_GetTick>
 8003642:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003646:	e00a      	b.n	800365e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003648:	f7fe fa6a 	bl	8001b20 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	2b02      	cmp	r3, #2
 8003656:	d902      	bls.n	800365e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	f000 bcdb 	b.w	8004014 <HAL_RCC_OscConfig+0x106c>
 800365e:	2302      	movs	r3, #2
 8003660:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003668:	fa93 f3a3 	rbit	r3, r3
 800366c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003670:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003674:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003678:	2202      	movs	r2, #2
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003680:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	fa93 f2a3 	rbit	r2, r3
 800368a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800368e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800369c:	2202      	movs	r2, #2
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	fa93 f2a3 	rbit	r2, r3
 80036ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80036b6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b8:	4b88      	ldr	r3, [pc, #544]	@ (80038dc <HAL_RCC_OscConfig+0x934>)
 80036ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80036c4:	2102      	movs	r1, #2
 80036c6:	6019      	str	r1, [r3, #0]
 80036c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036cc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	fa93 f1a3 	rbit	r1, r3
 80036d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80036de:	6019      	str	r1, [r3, #0]
  return result;
 80036e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f003 031f 	and.w	r3, r3, #31
 80036fa:	2101      	movs	r1, #1
 80036fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003700:	4013      	ands	r3, r2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0a0      	beq.n	8003648 <HAL_RCC_OscConfig+0x6a0>
 8003706:	e08d      	b.n	8003824 <HAL_RCC_OscConfig+0x87c>
 8003708:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800370c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003718:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	fa93 f2a3 	rbit	r2, r3
 8003722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003726:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800372a:	601a      	str	r2, [r3, #0]
  return result;
 800372c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003730:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003734:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003736:	fab3 f383 	clz	r3, r3
 800373a:	b2db      	uxtb	r3, r3
 800373c:	461a      	mov	r2, r3
 800373e:	4b68      	ldr	r3, [pc, #416]	@ (80038e0 <HAL_RCC_OscConfig+0x938>)
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	461a      	mov	r2, r3
 8003746:	2300      	movs	r3, #0
 8003748:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800374a:	f7fe f9e9 	bl	8001b20 <HAL_GetTick>
 800374e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003752:	e00a      	b.n	800376a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003754:	f7fe f9e4 	bl	8001b20 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	2b02      	cmp	r3, #2
 8003762:	d902      	bls.n	800376a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	f000 bc55 	b.w	8004014 <HAL_RCC_OscConfig+0x106c>
 800376a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003772:	2202      	movs	r2, #2
 8003774:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003776:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800377a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	fa93 f2a3 	rbit	r2, r3
 8003784:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003788:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800378c:	601a      	str	r2, [r3, #0]
 800378e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003792:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003796:	2202      	movs	r2, #2
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800379e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	fa93 f2a3 	rbit	r2, r3
 80037a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80037b0:	601a      	str	r2, [r3, #0]
 80037b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80037ba:	2202      	movs	r2, #2
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	fa93 f2a3 	rbit	r2, r3
 80037cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80037d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037d6:	4b41      	ldr	r3, [pc, #260]	@ (80038dc <HAL_RCC_OscConfig+0x934>)
 80037d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037de:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80037e2:	2102      	movs	r1, #2
 80037e4:	6019      	str	r1, [r3, #0]
 80037e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	fa93 f1a3 	rbit	r1, r3
 80037f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80037fc:	6019      	str	r1, [r3, #0]
  return result;
 80037fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003802:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	fab3 f383 	clz	r3, r3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f003 031f 	and.w	r3, r3, #31
 8003818:	2101      	movs	r1, #1
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	4013      	ands	r3, r2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d197      	bne.n	8003754 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003824:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003828:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 81a1 	beq.w	8003b7c <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003840:	4b26      	ldr	r3, [pc, #152]	@ (80038dc <HAL_RCC_OscConfig+0x934>)
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d116      	bne.n	800387a <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384c:	4b23      	ldr	r3, [pc, #140]	@ (80038dc <HAL_RCC_OscConfig+0x934>)
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	4a22      	ldr	r2, [pc, #136]	@ (80038dc <HAL_RCC_OscConfig+0x934>)
 8003852:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003856:	61d3      	str	r3, [r2, #28]
 8003858:	4b20      	ldr	r3, [pc, #128]	@ (80038dc <HAL_RCC_OscConfig+0x934>)
 800385a:	69db      	ldr	r3, [r3, #28]
 800385c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003864:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003868:	601a      	str	r2, [r3, #0]
 800386a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8003872:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387a:	4b1a      	ldr	r3, [pc, #104]	@ (80038e4 <HAL_RCC_OscConfig+0x93c>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003882:	2b00      	cmp	r3, #0
 8003884:	d11a      	bne.n	80038bc <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003886:	4b17      	ldr	r3, [pc, #92]	@ (80038e4 <HAL_RCC_OscConfig+0x93c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a16      	ldr	r2, [pc, #88]	@ (80038e4 <HAL_RCC_OscConfig+0x93c>)
 800388c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003890:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003892:	f7fe f945 	bl	8001b20 <HAL_GetTick>
 8003896:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389a:	e009      	b.n	80038b0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389c:	f7fe f940 	bl	8001b20 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b64      	cmp	r3, #100	@ 0x64
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e3b1      	b.n	8004014 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <HAL_RCC_OscConfig+0x93c>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0ef      	beq.n	800389c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d10d      	bne.n	80038e8 <HAL_RCC_OscConfig+0x940>
 80038cc:	4b03      	ldr	r3, [pc, #12]	@ (80038dc <HAL_RCC_OscConfig+0x934>)
 80038ce:	6a1b      	ldr	r3, [r3, #32]
 80038d0:	4a02      	ldr	r2, [pc, #8]	@ (80038dc <HAL_RCC_OscConfig+0x934>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	6213      	str	r3, [r2, #32]
 80038d8:	e03c      	b.n	8003954 <HAL_RCC_OscConfig+0x9ac>
 80038da:	bf00      	nop
 80038dc:	40021000 	.word	0x40021000
 80038e0:	10908120 	.word	0x10908120
 80038e4:	40007000 	.word	0x40007000
 80038e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80038ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10c      	bne.n	8003912 <HAL_RCC_OscConfig+0x96a>
 80038f8:	4bc1      	ldr	r3, [pc, #772]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	4ac0      	ldr	r2, [pc, #768]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 80038fe:	f023 0301 	bic.w	r3, r3, #1
 8003902:	6213      	str	r3, [r2, #32]
 8003904:	4bbe      	ldr	r3, [pc, #760]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	4abd      	ldr	r2, [pc, #756]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 800390a:	f023 0304 	bic.w	r3, r3, #4
 800390e:	6213      	str	r3, [r2, #32]
 8003910:	e020      	b.n	8003954 <HAL_RCC_OscConfig+0x9ac>
 8003912:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003916:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	2b05      	cmp	r3, #5
 8003920:	d10c      	bne.n	800393c <HAL_RCC_OscConfig+0x994>
 8003922:	4bb7      	ldr	r3, [pc, #732]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 8003924:	6a1b      	ldr	r3, [r3, #32]
 8003926:	4ab6      	ldr	r2, [pc, #728]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 8003928:	f043 0304 	orr.w	r3, r3, #4
 800392c:	6213      	str	r3, [r2, #32]
 800392e:	4bb4      	ldr	r3, [pc, #720]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	4ab3      	ldr	r2, [pc, #716]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6213      	str	r3, [r2, #32]
 800393a:	e00b      	b.n	8003954 <HAL_RCC_OscConfig+0x9ac>
 800393c:	4bb0      	ldr	r3, [pc, #704]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 800393e:	6a1b      	ldr	r3, [r3, #32]
 8003940:	4aaf      	ldr	r2, [pc, #700]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	6213      	str	r3, [r2, #32]
 8003948:	4bad      	ldr	r3, [pc, #692]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 800394a:	6a1b      	ldr	r3, [r3, #32]
 800394c:	4aac      	ldr	r2, [pc, #688]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 800394e:	f023 0304 	bic.w	r3, r3, #4
 8003952:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003958:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	68db      	ldr	r3, [r3, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 8081 	beq.w	8003a68 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003966:	f7fe f8db 	bl	8001b20 <HAL_GetTick>
 800396a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800396e:	e00b      	b.n	8003988 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7fe f8d6 	bl	8001b20 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003980:	4293      	cmp	r3, r2
 8003982:	d901      	bls.n	8003988 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e345      	b.n	8004014 <HAL_RCC_OscConfig+0x106c>
 8003988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800398c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003990:	2202      	movs	r2, #2
 8003992:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003998:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	fa93 f2a3 	rbit	r2, r3
 80039a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039a6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039b0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80039b4:	2202      	movs	r2, #2
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039bc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	fa93 f2a3 	rbit	r2, r3
 80039c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039ca:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80039ce:	601a      	str	r2, [r3, #0]
  return result;
 80039d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039d4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80039d8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039da:	fab3 f383 	clz	r3, r3
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	f043 0302 	orr.w	r3, r3, #2
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d102      	bne.n	80039f4 <HAL_RCC_OscConfig+0xa4c>
 80039ee:	4b84      	ldr	r3, [pc, #528]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	e013      	b.n	8003a1c <HAL_RCC_OscConfig+0xa74>
 80039f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80039f8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80039fc:	2202      	movs	r2, #2
 80039fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a04:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	fa93 f2a3 	rbit	r2, r3
 8003a0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a12:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003a16:	601a      	str	r2, [r3, #0]
 8003a18:	4b79      	ldr	r3, [pc, #484]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 8003a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a1c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a20:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003a24:	2102      	movs	r1, #2
 8003a26:	6011      	str	r1, [r2, #0]
 8003a28:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a2c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	fa92 f1a2 	rbit	r1, r2
 8003a36:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a3a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a3e:	6011      	str	r1, [r2, #0]
  return result;
 8003a40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003a44:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a48:	6812      	ldr	r2, [r2, #0]
 8003a4a:	fab2 f282 	clz	r2, r2
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a54:	b2d2      	uxtb	r2, r2
 8003a56:	f002 021f 	and.w	r2, r2, #31
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a60:	4013      	ands	r3, r2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d084      	beq.n	8003970 <HAL_RCC_OscConfig+0x9c8>
 8003a66:	e07f      	b.n	8003b68 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a68:	f7fe f85a 	bl	8001b20 <HAL_GetTick>
 8003a6c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a70:	e00b      	b.n	8003a8a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a72:	f7fe f855 	bl	8001b20 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d901      	bls.n	8003a8a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003a86:	2303      	movs	r3, #3
 8003a88:	e2c4      	b.n	8004014 <HAL_RCC_OscConfig+0x106c>
 8003a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a8e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003a92:	2202      	movs	r2, #2
 8003a94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003a9a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	fa93 f2a3 	rbit	r2, r3
 8003aa4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003aa8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003aac:	601a      	str	r2, [r3, #0]
 8003aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ab2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	601a      	str	r2, [r3, #0]
 8003aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003abe:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	fa93 f2a3 	rbit	r2, r3
 8003ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003acc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003ad0:	601a      	str	r2, [r3, #0]
  return result;
 8003ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ad6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003ada:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003adc:	fab3 f383 	clz	r3, r3
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	b2db      	uxtb	r3, r3
 8003ae6:	f043 0302 	orr.w	r3, r3, #2
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d102      	bne.n	8003af6 <HAL_RCC_OscConfig+0xb4e>
 8003af0:	4b43      	ldr	r3, [pc, #268]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	e013      	b.n	8003b1e <HAL_RCC_OscConfig+0xb76>
 8003af6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003afa:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003afe:	2202      	movs	r2, #2
 8003b00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b06:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	fa93 f2a3 	rbit	r2, r3
 8003b10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b14:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	4b39      	ldr	r3, [pc, #228]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b22:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003b26:	2102      	movs	r1, #2
 8003b28:	6011      	str	r1, [r2, #0]
 8003b2a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b2e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003b32:	6812      	ldr	r2, [r2, #0]
 8003b34:	fa92 f1a2 	rbit	r1, r2
 8003b38:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b3c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b40:	6011      	str	r1, [r2, #0]
  return result;
 8003b42:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003b46:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	fab2 f282 	clz	r2, r2
 8003b50:	b2d2      	uxtb	r2, r2
 8003b52:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	f002 021f 	and.w	r2, r2, #31
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d184      	bne.n	8003a72 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b68:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d105      	bne.n	8003b7c <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b70:	4b23      	ldr	r3, [pc, #140]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	4a22      	ldr	r2, [pc, #136]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 8003b76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b7a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003b80:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	f000 8242 	beq.w	8004012 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c00 <HAL_RCC_OscConfig+0xc58>)
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	f000 8213 	beq.w	8003fc2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ba0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	69db      	ldr	r3, [r3, #28]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	f040 8162 	bne.w	8003e72 <HAL_RCC_OscConfig+0xeca>
 8003bae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bb2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003bb6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bc0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	fa93 f2a3 	rbit	r2, r3
 8003bca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bce:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003bd2:	601a      	str	r2, [r3, #0]
  return result;
 8003bd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003bd8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003bdc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bde:	fab3 f383 	clz	r3, r3
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003be8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	461a      	mov	r2, r3
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7fd ff94 	bl	8001b20 <HAL_GetTick>
 8003bf8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfc:	e00c      	b.n	8003c18 <HAL_RCC_OscConfig+0xc70>
 8003bfe:	bf00      	nop
 8003c00:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c04:	f7fd ff8c 	bl	8001b20 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e1fd      	b.n	8004014 <HAL_RCC_OscConfig+0x106c>
 8003c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c1c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c20:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c24:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c2a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	fa93 f2a3 	rbit	r2, r3
 8003c34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c38:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c3c:	601a      	str	r2, [r3, #0]
  return result;
 8003c3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c42:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c46:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	095b      	lsrs	r3, r3, #5
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f043 0301 	orr.w	r3, r3, #1
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d102      	bne.n	8003c62 <HAL_RCC_OscConfig+0xcba>
 8003c5c:	4bb0      	ldr	r3, [pc, #704]	@ (8003f20 <HAL_RCC_OscConfig+0xf78>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	e027      	b.n	8003cb2 <HAL_RCC_OscConfig+0xd0a>
 8003c62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c66:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c74:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	fa93 f2a3 	rbit	r2, r3
 8003c7e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c82:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c8c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003c90:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003c9a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	fa93 f2a3 	rbit	r2, r3
 8003ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ca8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	4b9c      	ldr	r3, [pc, #624]	@ (8003f20 <HAL_RCC_OscConfig+0xf78>)
 8003cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cb6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003cba:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003cbe:	6011      	str	r1, [r2, #0]
 8003cc0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cc4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003cc8:	6812      	ldr	r2, [r2, #0]
 8003cca:	fa92 f1a2 	rbit	r1, r2
 8003cce:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cd2:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003cd6:	6011      	str	r1, [r2, #0]
  return result;
 8003cd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003cdc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003ce0:	6812      	ldr	r2, [r2, #0]
 8003ce2:	fab2 f282 	clz	r2, r2
 8003ce6:	b2d2      	uxtb	r2, r2
 8003ce8:	f042 0220 	orr.w	r2, r2, #32
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	f002 021f 	and.w	r2, r2, #31
 8003cf2:	2101      	movs	r1, #1
 8003cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d182      	bne.n	8003c04 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cfe:	4b88      	ldr	r3, [pc, #544]	@ (8003f20 <HAL_RCC_OscConfig+0xf78>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003d06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d0a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8003d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	497f      	ldr	r1, [pc, #508]	@ (8003f20 <HAL_RCC_OscConfig+0xf78>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	604b      	str	r3, [r1, #4]
 8003d26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d2a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003d2e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d38:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	fa93 f2a3 	rbit	r2, r3
 8003d42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d46:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d4a:	601a      	str	r2, [r3, #0]
  return result;
 8003d4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d50:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d54:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d56:	fab3 f383 	clz	r3, r3
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d60:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	461a      	mov	r2, r3
 8003d68:	2301      	movs	r3, #1
 8003d6a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6c:	f7fd fed8 	bl	8001b20 <HAL_GetTick>
 8003d70:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d74:	e009      	b.n	8003d8a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fd fed3 	bl	8001b20 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e144      	b.n	8004014 <HAL_RCC_OscConfig+0x106c>
 8003d8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d8e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003d92:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003d9c:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	fa93 f2a3 	rbit	r2, r3
 8003da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003daa:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003dae:	601a      	str	r2, [r3, #0]
  return result;
 8003db0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003db4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003db8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dba:	fab3 f383 	clz	r3, r3
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	095b      	lsrs	r3, r3, #5
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d102      	bne.n	8003dd4 <HAL_RCC_OscConfig+0xe2c>
 8003dce:	4b54      	ldr	r3, [pc, #336]	@ (8003f20 <HAL_RCC_OscConfig+0xf78>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	e027      	b.n	8003e24 <HAL_RCC_OscConfig+0xe7c>
 8003dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dd8:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003ddc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003de0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003de6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	fa93 f2a3 	rbit	r2, r3
 8003df0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003df4:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003df8:	601a      	str	r2, [r3, #0]
 8003dfa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003dfe:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003e02:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e0c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	fa93 f2a3 	rbit	r2, r3
 8003e16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e1a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	4b3f      	ldr	r3, [pc, #252]	@ (8003f20 <HAL_RCC_OscConfig+0xf78>)
 8003e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e28:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003e2c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e30:	6011      	str	r1, [r2, #0]
 8003e32:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e36:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003e3a:	6812      	ldr	r2, [r2, #0]
 8003e3c:	fa92 f1a2 	rbit	r1, r2
 8003e40:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e44:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e48:	6011      	str	r1, [r2, #0]
  return result;
 8003e4a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003e4e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	fab2 f282 	clz	r2, r2
 8003e58:	b2d2      	uxtb	r2, r2
 8003e5a:	f042 0220 	orr.w	r2, r2, #32
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	f002 021f 	and.w	r2, r2, #31
 8003e64:	2101      	movs	r1, #1
 8003e66:	fa01 f202 	lsl.w	r2, r1, r2
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d082      	beq.n	8003d76 <HAL_RCC_OscConfig+0xdce>
 8003e70:	e0cf      	b.n	8004012 <HAL_RCC_OscConfig+0x106a>
 8003e72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e76:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003e7a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e84:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	fa93 f2a3 	rbit	r2, r3
 8003e8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e92:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003e96:	601a      	str	r2, [r3, #0]
  return result;
 8003e98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003e9c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003ea0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea2:	fab3 f383 	clz	r3, r3
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003eac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb8:	f7fd fe32 	bl	8001b20 <HAL_GetTick>
 8003ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ec0:	e009      	b.n	8003ed6 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ec2:	f7fd fe2d 	bl	8001b20 <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e09e      	b.n	8004014 <HAL_RCC_OscConfig+0x106c>
 8003ed6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003eda:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003ede:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003ee2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ee8:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	fa93 f2a3 	rbit	r2, r3
 8003ef2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003ef6:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003efa:	601a      	str	r2, [r3, #0]
  return result;
 8003efc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f00:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003f04:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f06:	fab3 f383 	clz	r3, r3
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d104      	bne.n	8003f24 <HAL_RCC_OscConfig+0xf7c>
 8003f1a:	4b01      	ldr	r3, [pc, #4]	@ (8003f20 <HAL_RCC_OscConfig+0xf78>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	e029      	b.n	8003f74 <HAL_RCC_OscConfig+0xfcc>
 8003f20:	40021000 	.word	0x40021000
 8003f24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f28:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f2c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f36:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	fa93 f2a3 	rbit	r2, r3
 8003f40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f44:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003f48:	601a      	str	r2, [r3, #0]
 8003f4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f4e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003f52:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f5c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	fa93 f2a3 	rbit	r2, r3
 8003f66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003f6a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	4b2b      	ldr	r3, [pc, #172]	@ (8004020 <HAL_RCC_OscConfig+0x1078>)
 8003f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f78:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003f7c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f80:	6011      	str	r1, [r2, #0]
 8003f82:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f86:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	fa92 f1a2 	rbit	r1, r2
 8003f90:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f94:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003f98:	6011      	str	r1, [r2, #0]
  return result;
 8003f9a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003f9e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003fa2:	6812      	ldr	r2, [r2, #0]
 8003fa4:	fab2 f282 	clz	r2, r2
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	f042 0220 	orr.w	r2, r2, #32
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	f002 021f 	and.w	r2, r2, #31
 8003fb4:	2101      	movs	r1, #1
 8003fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8003fba:	4013      	ands	r3, r2
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d180      	bne.n	8003ec2 <HAL_RCC_OscConfig+0xf1a>
 8003fc0:	e027      	b.n	8004012 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	69db      	ldr	r3, [r3, #28]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e01e      	b.n	8004014 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fd6:	4b12      	ldr	r3, [pc, #72]	@ (8004020 <HAL_RCC_OscConfig+0x1078>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003fde:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003fe2:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d10b      	bne.n	800400e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003ff6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003ffa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004002:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800400a:	429a      	cmp	r2, r3
 800400c:	d001      	beq.n	8004012 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e000      	b.n	8004014 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	40021000 	.word	0x40021000

08004024 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b09e      	sub	sp, #120	@ 0x78
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800402e:	2300      	movs	r3, #0
 8004030:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e162      	b.n	8004302 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800403c:	4b90      	ldr	r3, [pc, #576]	@ (8004280 <HAL_RCC_ClockConfig+0x25c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d910      	bls.n	800406c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b8d      	ldr	r3, [pc, #564]	@ (8004280 <HAL_RCC_ClockConfig+0x25c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f023 0207 	bic.w	r2, r3, #7
 8004052:	498b      	ldr	r1, [pc, #556]	@ (8004280 <HAL_RCC_ClockConfig+0x25c>)
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	4313      	orrs	r3, r2
 8004058:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800405a:	4b89      	ldr	r3, [pc, #548]	@ (8004280 <HAL_RCC_ClockConfig+0x25c>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0307 	and.w	r3, r3, #7
 8004062:	683a      	ldr	r2, [r7, #0]
 8004064:	429a      	cmp	r2, r3
 8004066:	d001      	beq.n	800406c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e14a      	b.n	8004302 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d008      	beq.n	800408a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004078:	4b82      	ldr	r3, [pc, #520]	@ (8004284 <HAL_RCC_ClockConfig+0x260>)
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	497f      	ldr	r1, [pc, #508]	@ (8004284 <HAL_RCC_ClockConfig+0x260>)
 8004086:	4313      	orrs	r3, r2
 8004088:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0301 	and.w	r3, r3, #1
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80dc 	beq.w	8004250 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d13c      	bne.n	800411a <HAL_RCC_ClockConfig+0xf6>
 80040a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040a4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040a8:	fa93 f3a3 	rbit	r3, r3
 80040ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80040ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b0:	fab3 f383 	clz	r3, r3
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d102      	bne.n	80040ca <HAL_RCC_ClockConfig+0xa6>
 80040c4:	4b6f      	ldr	r3, [pc, #444]	@ (8004284 <HAL_RCC_ClockConfig+0x260>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	e00f      	b.n	80040ea <HAL_RCC_ClockConfig+0xc6>
 80040ca:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040d2:	fa93 f3a3 	rbit	r3, r3
 80040d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80040d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80040de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80040e0:	fa93 f3a3 	rbit	r3, r3
 80040e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040e6:	4b67      	ldr	r3, [pc, #412]	@ (8004284 <HAL_RCC_ClockConfig+0x260>)
 80040e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ea:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80040ee:	65ba      	str	r2, [r7, #88]	@ 0x58
 80040f0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80040f2:	fa92 f2a2 	rbit	r2, r2
 80040f6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80040f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80040fa:	fab2 f282 	clz	r2, r2
 80040fe:	b2d2      	uxtb	r2, r2
 8004100:	f042 0220 	orr.w	r2, r2, #32
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	f002 021f 	and.w	r2, r2, #31
 800410a:	2101      	movs	r1, #1
 800410c:	fa01 f202 	lsl.w	r2, r1, r2
 8004110:	4013      	ands	r3, r2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d17b      	bne.n	800420e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	e0f3      	b.n	8004302 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2b02      	cmp	r3, #2
 8004120:	d13c      	bne.n	800419c <HAL_RCC_ClockConfig+0x178>
 8004122:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004126:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004128:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800412a:	fa93 f3a3 	rbit	r3, r3
 800412e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004132:	fab3 f383 	clz	r3, r3
 8004136:	b2db      	uxtb	r3, r3
 8004138:	095b      	lsrs	r3, r3, #5
 800413a:	b2db      	uxtb	r3, r3
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b01      	cmp	r3, #1
 8004144:	d102      	bne.n	800414c <HAL_RCC_ClockConfig+0x128>
 8004146:	4b4f      	ldr	r3, [pc, #316]	@ (8004284 <HAL_RCC_ClockConfig+0x260>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	e00f      	b.n	800416c <HAL_RCC_ClockConfig+0x148>
 800414c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004150:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004154:	fa93 f3a3 	rbit	r3, r3
 8004158:	647b      	str	r3, [r7, #68]	@ 0x44
 800415a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800415e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004160:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004168:	4b46      	ldr	r3, [pc, #280]	@ (8004284 <HAL_RCC_ClockConfig+0x260>)
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004170:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004172:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004174:	fa92 f2a2 	rbit	r2, r2
 8004178:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800417a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800417c:	fab2 f282 	clz	r2, r2
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	f042 0220 	orr.w	r2, r2, #32
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	f002 021f 	and.w	r2, r2, #31
 800418c:	2101      	movs	r1, #1
 800418e:	fa01 f202 	lsl.w	r2, r1, r2
 8004192:	4013      	ands	r3, r2
 8004194:	2b00      	cmp	r3, #0
 8004196:	d13a      	bne.n	800420e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e0b2      	b.n	8004302 <HAL_RCC_ClockConfig+0x2de>
 800419c:	2302      	movs	r3, #2
 800419e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a2:	fa93 f3a3 	rbit	r3, r3
 80041a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80041a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041aa:	fab3 f383 	clz	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	095b      	lsrs	r3, r3, #5
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b01      	cmp	r3, #1
 80041bc:	d102      	bne.n	80041c4 <HAL_RCC_ClockConfig+0x1a0>
 80041be:	4b31      	ldr	r3, [pc, #196]	@ (8004284 <HAL_RCC_ClockConfig+0x260>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	e00d      	b.n	80041e0 <HAL_RCC_ClockConfig+0x1bc>
 80041c4:	2302      	movs	r3, #2
 80041c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ca:	fa93 f3a3 	rbit	r3, r3
 80041ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d0:	2302      	movs	r3, #2
 80041d2:	623b      	str	r3, [r7, #32]
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	fa93 f3a3 	rbit	r3, r3
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	4b29      	ldr	r3, [pc, #164]	@ (8004284 <HAL_RCC_ClockConfig+0x260>)
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	2202      	movs	r2, #2
 80041e2:	61ba      	str	r2, [r7, #24]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	fa92 f2a2 	rbit	r2, r2
 80041ea:	617a      	str	r2, [r7, #20]
  return result;
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	fab2 f282 	clz	r2, r2
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	f042 0220 	orr.w	r2, r2, #32
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	f002 021f 	and.w	r2, r2, #31
 80041fe:	2101      	movs	r1, #1
 8004200:	fa01 f202 	lsl.w	r2, r1, r2
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d101      	bne.n	800420e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e079      	b.n	8004302 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800420e:	4b1d      	ldr	r3, [pc, #116]	@ (8004284 <HAL_RCC_ClockConfig+0x260>)
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f023 0203 	bic.w	r2, r3, #3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	685b      	ldr	r3, [r3, #4]
 800421a:	491a      	ldr	r1, [pc, #104]	@ (8004284 <HAL_RCC_ClockConfig+0x260>)
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004220:	f7fd fc7e 	bl	8001b20 <HAL_GetTick>
 8004224:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004226:	e00a      	b.n	800423e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004228:	f7fd fc7a 	bl	8001b20 <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004236:	4293      	cmp	r3, r2
 8004238:	d901      	bls.n	800423e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e061      	b.n	8004302 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800423e:	4b11      	ldr	r3, [pc, #68]	@ (8004284 <HAL_RCC_ClockConfig+0x260>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f003 020c 	and.w	r2, r3, #12
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	429a      	cmp	r2, r3
 800424e:	d1eb      	bne.n	8004228 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004250:	4b0b      	ldr	r3, [pc, #44]	@ (8004280 <HAL_RCC_ClockConfig+0x25c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d214      	bcs.n	8004288 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b08      	ldr	r3, [pc, #32]	@ (8004280 <HAL_RCC_ClockConfig+0x25c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 0207 	bic.w	r2, r3, #7
 8004266:	4906      	ldr	r1, [pc, #24]	@ (8004280 <HAL_RCC_ClockConfig+0x25c>)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b04      	ldr	r3, [pc, #16]	@ (8004280 <HAL_RCC_ClockConfig+0x25c>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d005      	beq.n	8004288 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e040      	b.n	8004302 <HAL_RCC_ClockConfig+0x2de>
 8004280:	40022000 	.word	0x40022000
 8004284:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0304 	and.w	r3, r3, #4
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004294:	4b1d      	ldr	r3, [pc, #116]	@ (800430c <HAL_RCC_ClockConfig+0x2e8>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	491a      	ldr	r1, [pc, #104]	@ (800430c <HAL_RCC_ClockConfig+0x2e8>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0308 	and.w	r3, r3, #8
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042b2:	4b16      	ldr	r3, [pc, #88]	@ (800430c <HAL_RCC_ClockConfig+0x2e8>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4912      	ldr	r1, [pc, #72]	@ (800430c <HAL_RCC_ClockConfig+0x2e8>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042c6:	f000 f829 	bl	800431c <HAL_RCC_GetSysClockFreq>
 80042ca:	4601      	mov	r1, r0
 80042cc:	4b0f      	ldr	r3, [pc, #60]	@ (800430c <HAL_RCC_ClockConfig+0x2e8>)
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042d4:	22f0      	movs	r2, #240	@ 0xf0
 80042d6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	fa92 f2a2 	rbit	r2, r2
 80042de:	60fa      	str	r2, [r7, #12]
  return result;
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	fab2 f282 	clz	r2, r2
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	40d3      	lsrs	r3, r2
 80042ea:	4a09      	ldr	r2, [pc, #36]	@ (8004310 <HAL_RCC_ClockConfig+0x2ec>)
 80042ec:	5cd3      	ldrb	r3, [r2, r3]
 80042ee:	fa21 f303 	lsr.w	r3, r1, r3
 80042f2:	4a08      	ldr	r2, [pc, #32]	@ (8004314 <HAL_RCC_ClockConfig+0x2f0>)
 80042f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80042f6:	4b08      	ldr	r3, [pc, #32]	@ (8004318 <HAL_RCC_ClockConfig+0x2f4>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7fd fbcc 	bl	8001a98 <HAL_InitTick>
  
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	3778      	adds	r7, #120	@ 0x78
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
 800430a:	bf00      	nop
 800430c:	40021000 	.word	0x40021000
 8004310:	080096dc 	.word	0x080096dc
 8004314:	20000000 	.word	0x20000000
 8004318:	20000004 	.word	0x20000004

0800431c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	60fb      	str	r3, [r7, #12]
 8004326:	2300      	movs	r3, #0
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	2300      	movs	r3, #0
 800432c:	617b      	str	r3, [r7, #20]
 800432e:	2300      	movs	r3, #0
 8004330:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004332:	2300      	movs	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004336:	4b1e      	ldr	r3, [pc, #120]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 030c 	and.w	r3, r3, #12
 8004342:	2b04      	cmp	r3, #4
 8004344:	d002      	beq.n	800434c <HAL_RCC_GetSysClockFreq+0x30>
 8004346:	2b08      	cmp	r3, #8
 8004348:	d003      	beq.n	8004352 <HAL_RCC_GetSysClockFreq+0x36>
 800434a:	e026      	b.n	800439a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800434c:	4b19      	ldr	r3, [pc, #100]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800434e:	613b      	str	r3, [r7, #16]
      break;
 8004350:	e026      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	0c9b      	lsrs	r3, r3, #18
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	4a17      	ldr	r2, [pc, #92]	@ (80043b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800435c:	5cd3      	ldrb	r3, [r2, r3]
 800435e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004360:	4b13      	ldr	r3, [pc, #76]	@ (80043b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	4a14      	ldr	r2, [pc, #80]	@ (80043bc <HAL_RCC_GetSysClockFreq+0xa0>)
 800436a:	5cd3      	ldrb	r3, [r2, r3]
 800436c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004378:	4a0e      	ldr	r2, [pc, #56]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	fb02 f303 	mul.w	r3, r2, r3
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	e004      	b.n	8004394 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a0c      	ldr	r2, [pc, #48]	@ (80043c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800438e:	fb02 f303 	mul.w	r3, r2, r3
 8004392:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	613b      	str	r3, [r7, #16]
      break;
 8004398:	e002      	b.n	80043a0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800439a:	4b06      	ldr	r3, [pc, #24]	@ (80043b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800439c:	613b      	str	r3, [r7, #16]
      break;
 800439e:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a0:	693b      	ldr	r3, [r7, #16]
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	371c      	adds	r7, #28
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40021000 	.word	0x40021000
 80043b4:	007a1200 	.word	0x007a1200
 80043b8:	080096f4 	.word	0x080096f4
 80043bc:	08009704 	.word	0x08009704
 80043c0:	003d0900 	.word	0x003d0900

080043c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043c4:	b480      	push	{r7}
 80043c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c8:	4b03      	ldr	r3, [pc, #12]	@ (80043d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80043ca:	681b      	ldr	r3, [r3, #0]
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000000 	.word	0x20000000

080043dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b082      	sub	sp, #8
 80043e0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80043e2:	f7ff ffef 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 80043e6:	4601      	mov	r1, r0
 80043e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004418 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043f0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80043f4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	fa92 f2a2 	rbit	r2, r2
 80043fc:	603a      	str	r2, [r7, #0]
  return result;
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	fab2 f282 	clz	r2, r2
 8004404:	b2d2      	uxtb	r2, r2
 8004406:	40d3      	lsrs	r3, r2
 8004408:	4a04      	ldr	r2, [pc, #16]	@ (800441c <HAL_RCC_GetPCLK1Freq+0x40>)
 800440a:	5cd3      	ldrb	r3, [r2, r3]
 800440c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004410:	4618      	mov	r0, r3
 8004412:	3708      	adds	r7, #8
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	40021000 	.word	0x40021000
 800441c:	080096ec 	.word	0x080096ec

08004420 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004426:	f7ff ffcd 	bl	80043c4 <HAL_RCC_GetHCLKFreq>
 800442a:	4601      	mov	r1, r0
 800442c:	4b0b      	ldr	r3, [pc, #44]	@ (800445c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004434:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004438:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800443a:	687a      	ldr	r2, [r7, #4]
 800443c:	fa92 f2a2 	rbit	r2, r2
 8004440:	603a      	str	r2, [r7, #0]
  return result;
 8004442:	683a      	ldr	r2, [r7, #0]
 8004444:	fab2 f282 	clz	r2, r2
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	40d3      	lsrs	r3, r2
 800444c:	4a04      	ldr	r2, [pc, #16]	@ (8004460 <HAL_RCC_GetPCLK2Freq+0x40>)
 800444e:	5cd3      	ldrb	r3, [r2, r3]
 8004450:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	40021000 	.word	0x40021000
 8004460:	080096ec 	.word	0x080096ec

08004464 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b092      	sub	sp, #72	@ 0x48
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004474:	2300      	movs	r3, #0
 8004476:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 80d4 	beq.w	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004488:	4b4e      	ldr	r3, [pc, #312]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10e      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004494:	4b4b      	ldr	r3, [pc, #300]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4a4a      	ldr	r2, [pc, #296]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800449a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800449e:	61d3      	str	r3, [r2, #28]
 80044a0:	4b48      	ldr	r3, [pc, #288]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b2:	4b45      	ldr	r3, [pc, #276]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d118      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044be:	4b42      	ldr	r3, [pc, #264]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a41      	ldr	r2, [pc, #260]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044c8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044ca:	f7fd fb29 	bl	8001b20 <HAL_GetTick>
 80044ce:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d0:	e008      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044d2:	f7fd fb25 	bl	8001b20 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b64      	cmp	r3, #100	@ 0x64
 80044de:	d901      	bls.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e14b      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e4:	4b38      	ldr	r3, [pc, #224]	@ (80045c8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d0f0      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044f0:	4b34      	ldr	r3, [pc, #208]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8084 	beq.w	800460a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800450a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800450c:	429a      	cmp	r2, r3
 800450e:	d07c      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004510:	4b2c      	ldr	r3, [pc, #176]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004518:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800451a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800451e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004522:	fa93 f3a3 	rbit	r3, r3
 8004526:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800452a:	fab3 f383 	clz	r3, r3
 800452e:	b2db      	uxtb	r3, r3
 8004530:	461a      	mov	r2, r3
 8004532:	4b26      	ldr	r3, [pc, #152]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004534:	4413      	add	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	461a      	mov	r2, r3
 800453a:	2301      	movs	r3, #1
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004542:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004546:	fa93 f3a3 	rbit	r3, r3
 800454a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800454c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800454e:	fab3 f383 	clz	r3, r3
 8004552:	b2db      	uxtb	r3, r3
 8004554:	461a      	mov	r2, r3
 8004556:	4b1d      	ldr	r3, [pc, #116]	@ (80045cc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004558:	4413      	add	r3, r2
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	461a      	mov	r2, r3
 800455e:	2300      	movs	r3, #0
 8004560:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004562:	4a18      	ldr	r2, [pc, #96]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004566:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004568:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d04b      	beq.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004572:	f7fd fad5 	bl	8001b20 <HAL_GetTick>
 8004576:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004578:	e00a      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800457a:	f7fd fad1 	bl	8001b20 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004588:	4293      	cmp	r3, r2
 800458a:	d901      	bls.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e0f5      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x318>
 8004590:	2302      	movs	r3, #2
 8004592:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004596:	fa93 f3a3 	rbit	r3, r3
 800459a:	627b      	str	r3, [r7, #36]	@ 0x24
 800459c:	2302      	movs	r3, #2
 800459e:	623b      	str	r3, [r7, #32]
 80045a0:	6a3b      	ldr	r3, [r7, #32]
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	61fb      	str	r3, [r7, #28]
  return result;
 80045a8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045aa:	fab3 f383 	clz	r3, r3
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	f043 0302 	orr.w	r3, r3, #2
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d108      	bne.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80045be:	4b01      	ldr	r3, [pc, #4]	@ (80045c4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c0:	6a1b      	ldr	r3, [r3, #32]
 80045c2:	e00d      	b.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40007000 	.word	0x40007000
 80045cc:	10908100 	.word	0x10908100
 80045d0:	2302      	movs	r3, #2
 80045d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	fa93 f3a3 	rbit	r3, r3
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	4b69      	ldr	r3, [pc, #420]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80045de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e0:	2202      	movs	r2, #2
 80045e2:	613a      	str	r2, [r7, #16]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	fa92 f2a2 	rbit	r2, r2
 80045ea:	60fa      	str	r2, [r7, #12]
  return result;
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	fab2 f282 	clz	r2, r2
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	f002 021f 	and.w	r2, r2, #31
 80045fe:	2101      	movs	r1, #1
 8004600:	fa01 f202 	lsl.w	r2, r1, r2
 8004604:	4013      	ands	r3, r2
 8004606:	2b00      	cmp	r3, #0
 8004608:	d0b7      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800460a:	4b5e      	ldr	r3, [pc, #376]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800460c:	6a1b      	ldr	r3, [r3, #32]
 800460e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	495b      	ldr	r1, [pc, #364]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004618:	4313      	orrs	r3, r2
 800461a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800461c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004620:	2b01      	cmp	r3, #1
 8004622:	d105      	bne.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004624:	4b57      	ldr	r3, [pc, #348]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	4a56      	ldr	r2, [pc, #344]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800462a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800462e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800463c:	4b51      	ldr	r3, [pc, #324]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800463e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004640:	f023 0203 	bic.w	r2, r3, #3
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	494e      	ldr	r1, [pc, #312]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800464a:	4313      	orrs	r3, r2
 800464c:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800465a:	4b4a      	ldr	r3, [pc, #296]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	f023 0210 	bic.w	r2, r3, #16
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	4947      	ldr	r1, [pc, #284]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004668:	4313      	orrs	r3, r2
 800466a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004678:	4b42      	ldr	r3, [pc, #264]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004684:	493f      	ldr	r1, [pc, #252]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004686:	4313      	orrs	r3, r2
 8004688:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004696:	4b3b      	ldr	r3, [pc, #236]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800469a:	f023 0220 	bic.w	r2, r3, #32
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	4938      	ldr	r1, [pc, #224]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d008      	beq.n	80046c6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046b4:	4b33      	ldr	r3, [pc, #204]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	695b      	ldr	r3, [r3, #20]
 80046c0:	4930      	ldr	r1, [pc, #192]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d008      	beq.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	4929      	ldr	r1, [pc, #164]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 80046f0:	4b24      	ldr	r3, [pc, #144]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046f4:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	4921      	ldr	r1, [pc, #132]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d008      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800470e:	4b1d      	ldr	r3, [pc, #116]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004712:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	491a      	ldr	r1, [pc, #104]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800471c:	4313      	orrs	r3, r2
 800471e:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800472c:	4b15      	ldr	r3, [pc, #84]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800472e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004730:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	4912      	ldr	r1, [pc, #72]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800473a:	4313      	orrs	r3, r2
 800473c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d008      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800474a:	4b0e      	ldr	r3, [pc, #56]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800474c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800474e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004756:	490b      	ldr	r1, [pc, #44]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004758:	4313      	orrs	r3, r2
 800475a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004764:	2b00      	cmp	r3, #0
 8004766:	d008      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004768:	4b06      	ldr	r3, [pc, #24]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800476a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800476c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	4903      	ldr	r1, [pc, #12]	@ (8004784 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8004776:	4313      	orrs	r3, r2
 8004778:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3748      	adds	r7, #72	@ 0x48
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40021000 	.word	0x40021000

08004788 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d101      	bne.n	800479a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e040      	b.n	800481c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fc ffd6 	bl	800175c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2224      	movs	r2, #36	@ 0x24
 80047b4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0201 	bic.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d002      	beq.n	80047d4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f000 f9e8 	bl	8004ba4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 f8af 	bl	8004938 <UART_SetConfig>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d101      	bne.n	80047e4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e01b      	b.n	800481c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	689a      	ldr	r2, [r3, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004802:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0201 	orr.w	r2, r2, #1
 8004812:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fa67 	bl	8004ce8 <UART_CheckIdleState>
 800481a:	4603      	mov	r3, r0
}
 800481c:	4618      	mov	r0, r3
 800481e:	3708      	adds	r7, #8
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}

08004824 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b08a      	sub	sp, #40	@ 0x28
 8004828:	af02      	add	r7, sp, #8
 800482a:	60f8      	str	r0, [r7, #12]
 800482c:	60b9      	str	r1, [r7, #8]
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	4613      	mov	r3, r2
 8004832:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004838:	2b20      	cmp	r3, #32
 800483a:	d177      	bne.n	800492c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_UART_Transmit+0x24>
 8004842:	88fb      	ldrh	r3, [r7, #6]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e070      	b.n	800492e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2221      	movs	r2, #33	@ 0x21
 8004858:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800485a:	f7fd f961 	bl	8001b20 <HAL_GetTick>
 800485e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	88fa      	ldrh	r2, [r7, #6]
 8004864:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	88fa      	ldrh	r2, [r7, #6]
 800486c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004878:	d108      	bne.n	800488c <HAL_UART_Transmit+0x68>
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d104      	bne.n	800488c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	61bb      	str	r3, [r7, #24]
 800488a:	e003      	b.n	8004894 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004890:	2300      	movs	r3, #0
 8004892:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004894:	e02f      	b.n	80048f6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	2200      	movs	r2, #0
 800489e:	2180      	movs	r1, #128	@ 0x80
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 fac9 	bl	8004e38 <UART_WaitOnFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d004      	beq.n	80048b6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2220      	movs	r2, #32
 80048b0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e03b      	b.n	800492e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d10b      	bne.n	80048d4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	881a      	ldrh	r2, [r3, #0]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048c8:	b292      	uxth	r2, r2
 80048ca:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	3302      	adds	r3, #2
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	e007      	b.n	80048e4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	781a      	ldrb	r2, [r3, #0]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80048de:	69fb      	ldr	r3, [r7, #28]
 80048e0:	3301      	adds	r3, #1
 80048e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	3b01      	subs	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1c9      	bne.n	8004896 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	9300      	str	r3, [sp, #0]
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	2200      	movs	r2, #0
 800490a:	2140      	movs	r1, #64	@ 0x40
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f000 fa93 	bl	8004e38 <UART_WaitOnFlagUntilTimeout>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2220      	movs	r2, #32
 800491c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e005      	b.n	800492e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2220      	movs	r2, #32
 8004926:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004928:	2300      	movs	r3, #0
 800492a:	e000      	b.n	800492e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800492c:	2302      	movs	r3, #2
  }
}
 800492e:	4618      	mov	r0, r3
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004940:	2300      	movs	r3, #0
 8004942:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689a      	ldr	r2, [r3, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b8a      	ldr	r3, [pc, #552]	@ (8004b8c <UART_SetConfig+0x254>)
 8004964:	4013      	ands	r3, r2
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	6979      	ldr	r1, [r7, #20]
 800496c:	430b      	orrs	r3, r1
 800496e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	430a      	orrs	r2, r1
 8004984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a1b      	ldr	r3, [r3, #32]
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	697a      	ldr	r2, [r7, #20]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a78      	ldr	r2, [pc, #480]	@ (8004b90 <UART_SetConfig+0x258>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d120      	bne.n	80049f6 <UART_SetConfig+0xbe>
 80049b4:	4b77      	ldr	r3, [pc, #476]	@ (8004b94 <UART_SetConfig+0x25c>)
 80049b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b8:	f003 0303 	and.w	r3, r3, #3
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d817      	bhi.n	80049f0 <UART_SetConfig+0xb8>
 80049c0:	a201      	add	r2, pc, #4	@ (adr r2, 80049c8 <UART_SetConfig+0x90>)
 80049c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049c6:	bf00      	nop
 80049c8:	080049d9 	.word	0x080049d9
 80049cc:	080049e5 	.word	0x080049e5
 80049d0:	080049eb 	.word	0x080049eb
 80049d4:	080049df 	.word	0x080049df
 80049d8:	2300      	movs	r3, #0
 80049da:	77fb      	strb	r3, [r7, #31]
 80049dc:	e01d      	b.n	8004a1a <UART_SetConfig+0xe2>
 80049de:	2302      	movs	r3, #2
 80049e0:	77fb      	strb	r3, [r7, #31]
 80049e2:	e01a      	b.n	8004a1a <UART_SetConfig+0xe2>
 80049e4:	2304      	movs	r3, #4
 80049e6:	77fb      	strb	r3, [r7, #31]
 80049e8:	e017      	b.n	8004a1a <UART_SetConfig+0xe2>
 80049ea:	2308      	movs	r3, #8
 80049ec:	77fb      	strb	r3, [r7, #31]
 80049ee:	e014      	b.n	8004a1a <UART_SetConfig+0xe2>
 80049f0:	2310      	movs	r3, #16
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e011      	b.n	8004a1a <UART_SetConfig+0xe2>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a67      	ldr	r2, [pc, #412]	@ (8004b98 <UART_SetConfig+0x260>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d102      	bne.n	8004a06 <UART_SetConfig+0xce>
 8004a00:	2300      	movs	r3, #0
 8004a02:	77fb      	strb	r3, [r7, #31]
 8004a04:	e009      	b.n	8004a1a <UART_SetConfig+0xe2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a64      	ldr	r2, [pc, #400]	@ (8004b9c <UART_SetConfig+0x264>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d102      	bne.n	8004a16 <UART_SetConfig+0xde>
 8004a10:	2300      	movs	r3, #0
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e001      	b.n	8004a1a <UART_SetConfig+0xe2>
 8004a16:	2310      	movs	r3, #16
 8004a18:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	69db      	ldr	r3, [r3, #28]
 8004a1e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a22:	d15a      	bne.n	8004ada <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004a24:	7ffb      	ldrb	r3, [r7, #31]
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d827      	bhi.n	8004a7a <UART_SetConfig+0x142>
 8004a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a30 <UART_SetConfig+0xf8>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004a55 	.word	0x08004a55
 8004a34:	08004a5d 	.word	0x08004a5d
 8004a38:	08004a65 	.word	0x08004a65
 8004a3c:	08004a7b 	.word	0x08004a7b
 8004a40:	08004a6b 	.word	0x08004a6b
 8004a44:	08004a7b 	.word	0x08004a7b
 8004a48:	08004a7b 	.word	0x08004a7b
 8004a4c:	08004a7b 	.word	0x08004a7b
 8004a50:	08004a73 	.word	0x08004a73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a54:	f7ff fcc2 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8004a58:	61b8      	str	r0, [r7, #24]
        break;
 8004a5a:	e013      	b.n	8004a84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a5c:	f7ff fce0 	bl	8004420 <HAL_RCC_GetPCLK2Freq>
 8004a60:	61b8      	str	r0, [r7, #24]
        break;
 8004a62:	e00f      	b.n	8004a84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a64:	4b4e      	ldr	r3, [pc, #312]	@ (8004ba0 <UART_SetConfig+0x268>)
 8004a66:	61bb      	str	r3, [r7, #24]
        break;
 8004a68:	e00c      	b.n	8004a84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a6a:	f7ff fc57 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8004a6e:	61b8      	str	r0, [r7, #24]
        break;
 8004a70:	e008      	b.n	8004a84 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a72:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a76:	61bb      	str	r3, [r7, #24]
        break;
 8004a78:	e004      	b.n	8004a84 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	77bb      	strb	r3, [r7, #30]
        break;
 8004a82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d074      	beq.n	8004b74 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	005a      	lsls	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	085b      	lsrs	r3, r3, #1
 8004a94:	441a      	add	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b0f      	cmp	r3, #15
 8004aa4:	d916      	bls.n	8004ad4 <UART_SetConfig+0x19c>
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aac:	d212      	bcs.n	8004ad4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f023 030f 	bic.w	r3, r3, #15
 8004ab6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	89fb      	ldrh	r3, [r7, #14]
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	89fa      	ldrh	r2, [r7, #14]
 8004ad0:	60da      	str	r2, [r3, #12]
 8004ad2:	e04f      	b.n	8004b74 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	77bb      	strb	r3, [r7, #30]
 8004ad8:	e04c      	b.n	8004b74 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ada:	7ffb      	ldrb	r3, [r7, #31]
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d828      	bhi.n	8004b32 <UART_SetConfig+0x1fa>
 8004ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae8 <UART_SetConfig+0x1b0>)
 8004ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae6:	bf00      	nop
 8004ae8:	08004b0d 	.word	0x08004b0d
 8004aec:	08004b15 	.word	0x08004b15
 8004af0:	08004b1d 	.word	0x08004b1d
 8004af4:	08004b33 	.word	0x08004b33
 8004af8:	08004b23 	.word	0x08004b23
 8004afc:	08004b33 	.word	0x08004b33
 8004b00:	08004b33 	.word	0x08004b33
 8004b04:	08004b33 	.word	0x08004b33
 8004b08:	08004b2b 	.word	0x08004b2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b0c:	f7ff fc66 	bl	80043dc <HAL_RCC_GetPCLK1Freq>
 8004b10:	61b8      	str	r0, [r7, #24]
        break;
 8004b12:	e013      	b.n	8004b3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b14:	f7ff fc84 	bl	8004420 <HAL_RCC_GetPCLK2Freq>
 8004b18:	61b8      	str	r0, [r7, #24]
        break;
 8004b1a:	e00f      	b.n	8004b3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b1c:	4b20      	ldr	r3, [pc, #128]	@ (8004ba0 <UART_SetConfig+0x268>)
 8004b1e:	61bb      	str	r3, [r7, #24]
        break;
 8004b20:	e00c      	b.n	8004b3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b22:	f7ff fbfb 	bl	800431c <HAL_RCC_GetSysClockFreq>
 8004b26:	61b8      	str	r0, [r7, #24]
        break;
 8004b28:	e008      	b.n	8004b3c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b2e:	61bb      	str	r3, [r7, #24]
        break;
 8004b30:	e004      	b.n	8004b3c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	77bb      	strb	r3, [r7, #30]
        break;
 8004b3a:	bf00      	nop
    }

    if (pclk != 0U)
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d018      	beq.n	8004b74 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	085a      	lsrs	r2, r3, #1
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	441a      	add	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	2b0f      	cmp	r3, #15
 8004b5a:	d909      	bls.n	8004b70 <UART_SetConfig+0x238>
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b62:	d205      	bcs.n	8004b70 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	60da      	str	r2, [r3, #12]
 8004b6e:	e001      	b.n	8004b74 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004b80:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3720      	adds	r7, #32
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	efff69f3 	.word	0xefff69f3
 8004b90:	40013800 	.word	0x40013800
 8004b94:	40021000 	.word	0x40021000
 8004b98:	40004400 	.word	0x40004400
 8004b9c:	40004800 	.word	0x40004800
 8004ba0:	007a1200 	.word	0x007a1200

08004ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b083      	sub	sp, #12
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	f003 0308 	and.w	r3, r3, #8
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d00a      	beq.n	8004bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00a      	beq.n	8004c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	430a      	orrs	r2, r1
 8004c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00a      	beq.n	8004c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d00a      	beq.n	8004c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	430a      	orrs	r2, r1
 8004c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c5a:	f003 0320 	and.w	r3, r3, #32
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d00a      	beq.n	8004c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d01a      	beq.n	8004cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ca2:	d10a      	bne.n	8004cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	605a      	str	r2, [r3, #4]
  }
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b098      	sub	sp, #96	@ 0x60
 8004cec:	af02      	add	r7, sp, #8
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cf8:	f7fc ff12 	bl	8001b20 <HAL_GetTick>
 8004cfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f003 0308 	and.w	r3, r3, #8
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d12e      	bne.n	8004d6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d14:	2200      	movs	r2, #0
 8004d16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f88c 	bl	8004e38 <UART_WaitOnFlagUntilTimeout>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d021      	beq.n	8004d6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004d3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e6      	bne.n	8004d26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e062      	b.n	8004e30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b04      	cmp	r3, #4
 8004d76:	d149      	bne.n	8004e0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004d7c:	9300      	str	r3, [sp, #0]
 8004d7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d80:	2200      	movs	r2, #0
 8004d82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f856 	bl	8004e38 <UART_WaitOnFlagUntilTimeout>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d03c      	beq.n	8004e0c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d9a:	e853 3f00 	ldrex	r3, [r3]
 8004d9e:	623b      	str	r3, [r7, #32]
   return(result);
 8004da0:	6a3b      	ldr	r3, [r7, #32]
 8004da2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8004db2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db8:	e841 2300 	strex	r3, r2, [r1]
 8004dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1e6      	bne.n	8004d92 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3308      	adds	r3, #8
 8004de2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004de4:	61fa      	str	r2, [r7, #28]
 8004de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	69b9      	ldr	r1, [r7, #24]
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	617b      	str	r3, [r7, #20]
   return(result);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e5      	bne.n	8004dc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e011      	b.n	8004e30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2220      	movs	r2, #32
 8004e10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2220      	movs	r2, #32
 8004e16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3758      	adds	r7, #88	@ 0x58
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	603b      	str	r3, [r7, #0]
 8004e44:	4613      	mov	r3, r2
 8004e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e48:	e04f      	b.n	8004eea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e50:	d04b      	beq.n	8004eea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e52:	f7fc fe65 	bl	8001b20 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d302      	bcc.n	8004e68 <UART_WaitOnFlagUntilTimeout+0x30>
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d101      	bne.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e04e      	b.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d037      	beq.n	8004eea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	2b80      	cmp	r3, #128	@ 0x80
 8004e7e:	d034      	beq.n	8004eea <UART_WaitOnFlagUntilTimeout+0xb2>
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	2b40      	cmp	r3, #64	@ 0x40
 8004e84:	d031      	beq.n	8004eea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69db      	ldr	r3, [r3, #28]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b08      	cmp	r3, #8
 8004e92:	d110      	bne.n	8004eb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	2208      	movs	r2, #8
 8004e9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e9c:	68f8      	ldr	r0, [r7, #12]
 8004e9e:	f000 f838 	bl	8004f12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2208      	movs	r2, #8
 8004ea6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e029      	b.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ec0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ec4:	d111      	bne.n	8004eea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ece:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ed0:	68f8      	ldr	r0, [r7, #12]
 8004ed2:	f000 f81e 	bl	8004f12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2220      	movs	r2, #32
 8004eda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e00f      	b.n	8004f0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	69da      	ldr	r2, [r3, #28]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	bf0c      	ite	eq
 8004efa:	2301      	moveq	r3, #1
 8004efc:	2300      	movne	r3, #0
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	461a      	mov	r2, r3
 8004f02:	79fb      	ldrb	r3, [r7, #7]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d0a0      	beq.n	8004e4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f08:	2300      	movs	r3, #0
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f12:	b480      	push	{r7}
 8004f14:	b095      	sub	sp, #84	@ 0x54
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004f28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	461a      	mov	r2, r3
 8004f36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f38:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004f3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004f40:	e841 2300 	strex	r3, r2, [r1]
 8004f44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1e6      	bne.n	8004f1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3308      	adds	r3, #8
 8004f52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f54:	6a3b      	ldr	r3, [r7, #32]
 8004f56:	e853 3f00 	ldrex	r3, [r3]
 8004f5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	3308      	adds	r3, #8
 8004f6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004f6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f74:	e841 2300 	strex	r3, r2, [r1]
 8004f78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1e5      	bne.n	8004f4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d118      	bne.n	8004fba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	e853 3f00 	ldrex	r3, [r3]
 8004f94:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f023 0310 	bic.w	r3, r3, #16
 8004f9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004faa:	6979      	ldr	r1, [r7, #20]
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	e841 2300 	strex	r3, r2, [r1]
 8004fb2:	613b      	str	r3, [r7, #16]
   return(result);
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1e6      	bne.n	8004f88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fce:	bf00      	nop
 8004fd0:	3754      	adds	r7, #84	@ 0x54
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <__cvt>:
 8004fda:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fde:	ec57 6b10 	vmov	r6, r7, d0
 8004fe2:	2f00      	cmp	r7, #0
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	463b      	mov	r3, r7
 8004fea:	bfbb      	ittet	lt
 8004fec:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004ff0:	461f      	movlt	r7, r3
 8004ff2:	2300      	movge	r3, #0
 8004ff4:	232d      	movlt	r3, #45	@ 0x2d
 8004ff6:	700b      	strb	r3, [r1, #0]
 8004ff8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ffa:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004ffe:	4691      	mov	r9, r2
 8005000:	f023 0820 	bic.w	r8, r3, #32
 8005004:	bfbc      	itt	lt
 8005006:	4632      	movlt	r2, r6
 8005008:	4616      	movlt	r6, r2
 800500a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800500e:	d005      	beq.n	800501c <__cvt+0x42>
 8005010:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005014:	d100      	bne.n	8005018 <__cvt+0x3e>
 8005016:	3401      	adds	r4, #1
 8005018:	2102      	movs	r1, #2
 800501a:	e000      	b.n	800501e <__cvt+0x44>
 800501c:	2103      	movs	r1, #3
 800501e:	ab03      	add	r3, sp, #12
 8005020:	9301      	str	r3, [sp, #4]
 8005022:	ab02      	add	r3, sp, #8
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	ec47 6b10 	vmov	d0, r6, r7
 800502a:	4653      	mov	r3, sl
 800502c:	4622      	mov	r2, r4
 800502e:	f001 f873 	bl	8006118 <_dtoa_r>
 8005032:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005036:	4605      	mov	r5, r0
 8005038:	d119      	bne.n	800506e <__cvt+0x94>
 800503a:	f019 0f01 	tst.w	r9, #1
 800503e:	d00e      	beq.n	800505e <__cvt+0x84>
 8005040:	eb00 0904 	add.w	r9, r0, r4
 8005044:	2200      	movs	r2, #0
 8005046:	2300      	movs	r3, #0
 8005048:	4630      	mov	r0, r6
 800504a:	4639      	mov	r1, r7
 800504c:	f7fb fd3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005050:	b108      	cbz	r0, 8005056 <__cvt+0x7c>
 8005052:	f8cd 900c 	str.w	r9, [sp, #12]
 8005056:	2230      	movs	r2, #48	@ 0x30
 8005058:	9b03      	ldr	r3, [sp, #12]
 800505a:	454b      	cmp	r3, r9
 800505c:	d31e      	bcc.n	800509c <__cvt+0xc2>
 800505e:	9b03      	ldr	r3, [sp, #12]
 8005060:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005062:	1b5b      	subs	r3, r3, r5
 8005064:	4628      	mov	r0, r5
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	b004      	add	sp, #16
 800506a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005072:	eb00 0904 	add.w	r9, r0, r4
 8005076:	d1e5      	bne.n	8005044 <__cvt+0x6a>
 8005078:	7803      	ldrb	r3, [r0, #0]
 800507a:	2b30      	cmp	r3, #48	@ 0x30
 800507c:	d10a      	bne.n	8005094 <__cvt+0xba>
 800507e:	2200      	movs	r2, #0
 8005080:	2300      	movs	r3, #0
 8005082:	4630      	mov	r0, r6
 8005084:	4639      	mov	r1, r7
 8005086:	f7fb fd1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800508a:	b918      	cbnz	r0, 8005094 <__cvt+0xba>
 800508c:	f1c4 0401 	rsb	r4, r4, #1
 8005090:	f8ca 4000 	str.w	r4, [sl]
 8005094:	f8da 3000 	ldr.w	r3, [sl]
 8005098:	4499      	add	r9, r3
 800509a:	e7d3      	b.n	8005044 <__cvt+0x6a>
 800509c:	1c59      	adds	r1, r3, #1
 800509e:	9103      	str	r1, [sp, #12]
 80050a0:	701a      	strb	r2, [r3, #0]
 80050a2:	e7d9      	b.n	8005058 <__cvt+0x7e>

080050a4 <__exponent>:
 80050a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050a6:	2900      	cmp	r1, #0
 80050a8:	bfba      	itte	lt
 80050aa:	4249      	neglt	r1, r1
 80050ac:	232d      	movlt	r3, #45	@ 0x2d
 80050ae:	232b      	movge	r3, #43	@ 0x2b
 80050b0:	2909      	cmp	r1, #9
 80050b2:	7002      	strb	r2, [r0, #0]
 80050b4:	7043      	strb	r3, [r0, #1]
 80050b6:	dd29      	ble.n	800510c <__exponent+0x68>
 80050b8:	f10d 0307 	add.w	r3, sp, #7
 80050bc:	461d      	mov	r5, r3
 80050be:	270a      	movs	r7, #10
 80050c0:	461a      	mov	r2, r3
 80050c2:	fbb1 f6f7 	udiv	r6, r1, r7
 80050c6:	fb07 1416 	mls	r4, r7, r6, r1
 80050ca:	3430      	adds	r4, #48	@ 0x30
 80050cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80050d0:	460c      	mov	r4, r1
 80050d2:	2c63      	cmp	r4, #99	@ 0x63
 80050d4:	f103 33ff 	add.w	r3, r3, #4294967295
 80050d8:	4631      	mov	r1, r6
 80050da:	dcf1      	bgt.n	80050c0 <__exponent+0x1c>
 80050dc:	3130      	adds	r1, #48	@ 0x30
 80050de:	1e94      	subs	r4, r2, #2
 80050e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80050e4:	1c41      	adds	r1, r0, #1
 80050e6:	4623      	mov	r3, r4
 80050e8:	42ab      	cmp	r3, r5
 80050ea:	d30a      	bcc.n	8005102 <__exponent+0x5e>
 80050ec:	f10d 0309 	add.w	r3, sp, #9
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	42ac      	cmp	r4, r5
 80050f4:	bf88      	it	hi
 80050f6:	2300      	movhi	r3, #0
 80050f8:	3302      	adds	r3, #2
 80050fa:	4403      	add	r3, r0
 80050fc:	1a18      	subs	r0, r3, r0
 80050fe:	b003      	add	sp, #12
 8005100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005102:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005106:	f801 6f01 	strb.w	r6, [r1, #1]!
 800510a:	e7ed      	b.n	80050e8 <__exponent+0x44>
 800510c:	2330      	movs	r3, #48	@ 0x30
 800510e:	3130      	adds	r1, #48	@ 0x30
 8005110:	7083      	strb	r3, [r0, #2]
 8005112:	70c1      	strb	r1, [r0, #3]
 8005114:	1d03      	adds	r3, r0, #4
 8005116:	e7f1      	b.n	80050fc <__exponent+0x58>

08005118 <_printf_float>:
 8005118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800511c:	b08d      	sub	sp, #52	@ 0x34
 800511e:	460c      	mov	r4, r1
 8005120:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005124:	4616      	mov	r6, r2
 8005126:	461f      	mov	r7, r3
 8005128:	4605      	mov	r5, r0
 800512a:	f000 feef 	bl	8005f0c <_localeconv_r>
 800512e:	6803      	ldr	r3, [r0, #0]
 8005130:	9304      	str	r3, [sp, #16]
 8005132:	4618      	mov	r0, r3
 8005134:	f7fb f89c 	bl	8000270 <strlen>
 8005138:	2300      	movs	r3, #0
 800513a:	930a      	str	r3, [sp, #40]	@ 0x28
 800513c:	f8d8 3000 	ldr.w	r3, [r8]
 8005140:	9005      	str	r0, [sp, #20]
 8005142:	3307      	adds	r3, #7
 8005144:	f023 0307 	bic.w	r3, r3, #7
 8005148:	f103 0208 	add.w	r2, r3, #8
 800514c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005150:	f8d4 b000 	ldr.w	fp, [r4]
 8005154:	f8c8 2000 	str.w	r2, [r8]
 8005158:	e9d3 8900 	ldrd	r8, r9, [r3]
 800515c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005160:	9307      	str	r3, [sp, #28]
 8005162:	f8cd 8018 	str.w	r8, [sp, #24]
 8005166:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800516a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800516e:	4b9c      	ldr	r3, [pc, #624]	@ (80053e0 <_printf_float+0x2c8>)
 8005170:	f04f 32ff 	mov.w	r2, #4294967295
 8005174:	f7fb fcda 	bl	8000b2c <__aeabi_dcmpun>
 8005178:	bb70      	cbnz	r0, 80051d8 <_printf_float+0xc0>
 800517a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800517e:	4b98      	ldr	r3, [pc, #608]	@ (80053e0 <_printf_float+0x2c8>)
 8005180:	f04f 32ff 	mov.w	r2, #4294967295
 8005184:	f7fb fcb4 	bl	8000af0 <__aeabi_dcmple>
 8005188:	bb30      	cbnz	r0, 80051d8 <_printf_float+0xc0>
 800518a:	2200      	movs	r2, #0
 800518c:	2300      	movs	r3, #0
 800518e:	4640      	mov	r0, r8
 8005190:	4649      	mov	r1, r9
 8005192:	f7fb fca3 	bl	8000adc <__aeabi_dcmplt>
 8005196:	b110      	cbz	r0, 800519e <_printf_float+0x86>
 8005198:	232d      	movs	r3, #45	@ 0x2d
 800519a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800519e:	4a91      	ldr	r2, [pc, #580]	@ (80053e4 <_printf_float+0x2cc>)
 80051a0:	4b91      	ldr	r3, [pc, #580]	@ (80053e8 <_printf_float+0x2d0>)
 80051a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80051a6:	bf94      	ite	ls
 80051a8:	4690      	movls	r8, r2
 80051aa:	4698      	movhi	r8, r3
 80051ac:	2303      	movs	r3, #3
 80051ae:	6123      	str	r3, [r4, #16]
 80051b0:	f02b 0304 	bic.w	r3, fp, #4
 80051b4:	6023      	str	r3, [r4, #0]
 80051b6:	f04f 0900 	mov.w	r9, #0
 80051ba:	9700      	str	r7, [sp, #0]
 80051bc:	4633      	mov	r3, r6
 80051be:	aa0b      	add	r2, sp, #44	@ 0x2c
 80051c0:	4621      	mov	r1, r4
 80051c2:	4628      	mov	r0, r5
 80051c4:	f000 f9d2 	bl	800556c <_printf_common>
 80051c8:	3001      	adds	r0, #1
 80051ca:	f040 808d 	bne.w	80052e8 <_printf_float+0x1d0>
 80051ce:	f04f 30ff 	mov.w	r0, #4294967295
 80051d2:	b00d      	add	sp, #52	@ 0x34
 80051d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d8:	4642      	mov	r2, r8
 80051da:	464b      	mov	r3, r9
 80051dc:	4640      	mov	r0, r8
 80051de:	4649      	mov	r1, r9
 80051e0:	f7fb fca4 	bl	8000b2c <__aeabi_dcmpun>
 80051e4:	b140      	cbz	r0, 80051f8 <_printf_float+0xe0>
 80051e6:	464b      	mov	r3, r9
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	bfbc      	itt	lt
 80051ec:	232d      	movlt	r3, #45	@ 0x2d
 80051ee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80051f2:	4a7e      	ldr	r2, [pc, #504]	@ (80053ec <_printf_float+0x2d4>)
 80051f4:	4b7e      	ldr	r3, [pc, #504]	@ (80053f0 <_printf_float+0x2d8>)
 80051f6:	e7d4      	b.n	80051a2 <_printf_float+0x8a>
 80051f8:	6863      	ldr	r3, [r4, #4]
 80051fa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80051fe:	9206      	str	r2, [sp, #24]
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	d13b      	bne.n	800527c <_printf_float+0x164>
 8005204:	2306      	movs	r3, #6
 8005206:	6063      	str	r3, [r4, #4]
 8005208:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800520c:	2300      	movs	r3, #0
 800520e:	6022      	str	r2, [r4, #0]
 8005210:	9303      	str	r3, [sp, #12]
 8005212:	ab0a      	add	r3, sp, #40	@ 0x28
 8005214:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005218:	ab09      	add	r3, sp, #36	@ 0x24
 800521a:	9300      	str	r3, [sp, #0]
 800521c:	6861      	ldr	r1, [r4, #4]
 800521e:	ec49 8b10 	vmov	d0, r8, r9
 8005222:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005226:	4628      	mov	r0, r5
 8005228:	f7ff fed7 	bl	8004fda <__cvt>
 800522c:	9b06      	ldr	r3, [sp, #24]
 800522e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005230:	2b47      	cmp	r3, #71	@ 0x47
 8005232:	4680      	mov	r8, r0
 8005234:	d129      	bne.n	800528a <_printf_float+0x172>
 8005236:	1cc8      	adds	r0, r1, #3
 8005238:	db02      	blt.n	8005240 <_printf_float+0x128>
 800523a:	6863      	ldr	r3, [r4, #4]
 800523c:	4299      	cmp	r1, r3
 800523e:	dd41      	ble.n	80052c4 <_printf_float+0x1ac>
 8005240:	f1aa 0a02 	sub.w	sl, sl, #2
 8005244:	fa5f fa8a 	uxtb.w	sl, sl
 8005248:	3901      	subs	r1, #1
 800524a:	4652      	mov	r2, sl
 800524c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005250:	9109      	str	r1, [sp, #36]	@ 0x24
 8005252:	f7ff ff27 	bl	80050a4 <__exponent>
 8005256:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005258:	1813      	adds	r3, r2, r0
 800525a:	2a01      	cmp	r2, #1
 800525c:	4681      	mov	r9, r0
 800525e:	6123      	str	r3, [r4, #16]
 8005260:	dc02      	bgt.n	8005268 <_printf_float+0x150>
 8005262:	6822      	ldr	r2, [r4, #0]
 8005264:	07d2      	lsls	r2, r2, #31
 8005266:	d501      	bpl.n	800526c <_printf_float+0x154>
 8005268:	3301      	adds	r3, #1
 800526a:	6123      	str	r3, [r4, #16]
 800526c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0a2      	beq.n	80051ba <_printf_float+0xa2>
 8005274:	232d      	movs	r3, #45	@ 0x2d
 8005276:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800527a:	e79e      	b.n	80051ba <_printf_float+0xa2>
 800527c:	9a06      	ldr	r2, [sp, #24]
 800527e:	2a47      	cmp	r2, #71	@ 0x47
 8005280:	d1c2      	bne.n	8005208 <_printf_float+0xf0>
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1c0      	bne.n	8005208 <_printf_float+0xf0>
 8005286:	2301      	movs	r3, #1
 8005288:	e7bd      	b.n	8005206 <_printf_float+0xee>
 800528a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800528e:	d9db      	bls.n	8005248 <_printf_float+0x130>
 8005290:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005294:	d118      	bne.n	80052c8 <_printf_float+0x1b0>
 8005296:	2900      	cmp	r1, #0
 8005298:	6863      	ldr	r3, [r4, #4]
 800529a:	dd0b      	ble.n	80052b4 <_printf_float+0x19c>
 800529c:	6121      	str	r1, [r4, #16]
 800529e:	b913      	cbnz	r3, 80052a6 <_printf_float+0x18e>
 80052a0:	6822      	ldr	r2, [r4, #0]
 80052a2:	07d0      	lsls	r0, r2, #31
 80052a4:	d502      	bpl.n	80052ac <_printf_float+0x194>
 80052a6:	3301      	adds	r3, #1
 80052a8:	440b      	add	r3, r1
 80052aa:	6123      	str	r3, [r4, #16]
 80052ac:	65a1      	str	r1, [r4, #88]	@ 0x58
 80052ae:	f04f 0900 	mov.w	r9, #0
 80052b2:	e7db      	b.n	800526c <_printf_float+0x154>
 80052b4:	b913      	cbnz	r3, 80052bc <_printf_float+0x1a4>
 80052b6:	6822      	ldr	r2, [r4, #0]
 80052b8:	07d2      	lsls	r2, r2, #31
 80052ba:	d501      	bpl.n	80052c0 <_printf_float+0x1a8>
 80052bc:	3302      	adds	r3, #2
 80052be:	e7f4      	b.n	80052aa <_printf_float+0x192>
 80052c0:	2301      	movs	r3, #1
 80052c2:	e7f2      	b.n	80052aa <_printf_float+0x192>
 80052c4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80052c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80052ca:	4299      	cmp	r1, r3
 80052cc:	db05      	blt.n	80052da <_printf_float+0x1c2>
 80052ce:	6823      	ldr	r3, [r4, #0]
 80052d0:	6121      	str	r1, [r4, #16]
 80052d2:	07d8      	lsls	r0, r3, #31
 80052d4:	d5ea      	bpl.n	80052ac <_printf_float+0x194>
 80052d6:	1c4b      	adds	r3, r1, #1
 80052d8:	e7e7      	b.n	80052aa <_printf_float+0x192>
 80052da:	2900      	cmp	r1, #0
 80052dc:	bfd4      	ite	le
 80052de:	f1c1 0202 	rsble	r2, r1, #2
 80052e2:	2201      	movgt	r2, #1
 80052e4:	4413      	add	r3, r2
 80052e6:	e7e0      	b.n	80052aa <_printf_float+0x192>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	055a      	lsls	r2, r3, #21
 80052ec:	d407      	bmi.n	80052fe <_printf_float+0x1e6>
 80052ee:	6923      	ldr	r3, [r4, #16]
 80052f0:	4642      	mov	r2, r8
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b8      	blx	r7
 80052f8:	3001      	adds	r0, #1
 80052fa:	d12b      	bne.n	8005354 <_printf_float+0x23c>
 80052fc:	e767      	b.n	80051ce <_printf_float+0xb6>
 80052fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005302:	f240 80dd 	bls.w	80054c0 <_printf_float+0x3a8>
 8005306:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800530a:	2200      	movs	r2, #0
 800530c:	2300      	movs	r3, #0
 800530e:	f7fb fbdb 	bl	8000ac8 <__aeabi_dcmpeq>
 8005312:	2800      	cmp	r0, #0
 8005314:	d033      	beq.n	800537e <_printf_float+0x266>
 8005316:	4a37      	ldr	r2, [pc, #220]	@ (80053f4 <_printf_float+0x2dc>)
 8005318:	2301      	movs	r3, #1
 800531a:	4631      	mov	r1, r6
 800531c:	4628      	mov	r0, r5
 800531e:	47b8      	blx	r7
 8005320:	3001      	adds	r0, #1
 8005322:	f43f af54 	beq.w	80051ce <_printf_float+0xb6>
 8005326:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800532a:	4543      	cmp	r3, r8
 800532c:	db02      	blt.n	8005334 <_printf_float+0x21c>
 800532e:	6823      	ldr	r3, [r4, #0]
 8005330:	07d8      	lsls	r0, r3, #31
 8005332:	d50f      	bpl.n	8005354 <_printf_float+0x23c>
 8005334:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005338:	4631      	mov	r1, r6
 800533a:	4628      	mov	r0, r5
 800533c:	47b8      	blx	r7
 800533e:	3001      	adds	r0, #1
 8005340:	f43f af45 	beq.w	80051ce <_printf_float+0xb6>
 8005344:	f04f 0900 	mov.w	r9, #0
 8005348:	f108 38ff 	add.w	r8, r8, #4294967295
 800534c:	f104 0a1a 	add.w	sl, r4, #26
 8005350:	45c8      	cmp	r8, r9
 8005352:	dc09      	bgt.n	8005368 <_printf_float+0x250>
 8005354:	6823      	ldr	r3, [r4, #0]
 8005356:	079b      	lsls	r3, r3, #30
 8005358:	f100 8103 	bmi.w	8005562 <_printf_float+0x44a>
 800535c:	68e0      	ldr	r0, [r4, #12]
 800535e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005360:	4298      	cmp	r0, r3
 8005362:	bfb8      	it	lt
 8005364:	4618      	movlt	r0, r3
 8005366:	e734      	b.n	80051d2 <_printf_float+0xba>
 8005368:	2301      	movs	r3, #1
 800536a:	4652      	mov	r2, sl
 800536c:	4631      	mov	r1, r6
 800536e:	4628      	mov	r0, r5
 8005370:	47b8      	blx	r7
 8005372:	3001      	adds	r0, #1
 8005374:	f43f af2b 	beq.w	80051ce <_printf_float+0xb6>
 8005378:	f109 0901 	add.w	r9, r9, #1
 800537c:	e7e8      	b.n	8005350 <_printf_float+0x238>
 800537e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005380:	2b00      	cmp	r3, #0
 8005382:	dc39      	bgt.n	80053f8 <_printf_float+0x2e0>
 8005384:	4a1b      	ldr	r2, [pc, #108]	@ (80053f4 <_printf_float+0x2dc>)
 8005386:	2301      	movs	r3, #1
 8005388:	4631      	mov	r1, r6
 800538a:	4628      	mov	r0, r5
 800538c:	47b8      	blx	r7
 800538e:	3001      	adds	r0, #1
 8005390:	f43f af1d 	beq.w	80051ce <_printf_float+0xb6>
 8005394:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005398:	ea59 0303 	orrs.w	r3, r9, r3
 800539c:	d102      	bne.n	80053a4 <_printf_float+0x28c>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	07d9      	lsls	r1, r3, #31
 80053a2:	d5d7      	bpl.n	8005354 <_printf_float+0x23c>
 80053a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053a8:	4631      	mov	r1, r6
 80053aa:	4628      	mov	r0, r5
 80053ac:	47b8      	blx	r7
 80053ae:	3001      	adds	r0, #1
 80053b0:	f43f af0d 	beq.w	80051ce <_printf_float+0xb6>
 80053b4:	f04f 0a00 	mov.w	sl, #0
 80053b8:	f104 0b1a 	add.w	fp, r4, #26
 80053bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80053be:	425b      	negs	r3, r3
 80053c0:	4553      	cmp	r3, sl
 80053c2:	dc01      	bgt.n	80053c8 <_printf_float+0x2b0>
 80053c4:	464b      	mov	r3, r9
 80053c6:	e793      	b.n	80052f0 <_printf_float+0x1d8>
 80053c8:	2301      	movs	r3, #1
 80053ca:	465a      	mov	r2, fp
 80053cc:	4631      	mov	r1, r6
 80053ce:	4628      	mov	r0, r5
 80053d0:	47b8      	blx	r7
 80053d2:	3001      	adds	r0, #1
 80053d4:	f43f aefb 	beq.w	80051ce <_printf_float+0xb6>
 80053d8:	f10a 0a01 	add.w	sl, sl, #1
 80053dc:	e7ee      	b.n	80053bc <_printf_float+0x2a4>
 80053de:	bf00      	nop
 80053e0:	7fefffff 	.word	0x7fefffff
 80053e4:	08009714 	.word	0x08009714
 80053e8:	08009718 	.word	0x08009718
 80053ec:	0800971c 	.word	0x0800971c
 80053f0:	08009720 	.word	0x08009720
 80053f4:	08009724 	.word	0x08009724
 80053f8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80053fa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80053fe:	4553      	cmp	r3, sl
 8005400:	bfa8      	it	ge
 8005402:	4653      	movge	r3, sl
 8005404:	2b00      	cmp	r3, #0
 8005406:	4699      	mov	r9, r3
 8005408:	dc36      	bgt.n	8005478 <_printf_float+0x360>
 800540a:	f04f 0b00 	mov.w	fp, #0
 800540e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005412:	f104 021a 	add.w	r2, r4, #26
 8005416:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005418:	9306      	str	r3, [sp, #24]
 800541a:	eba3 0309 	sub.w	r3, r3, r9
 800541e:	455b      	cmp	r3, fp
 8005420:	dc31      	bgt.n	8005486 <_printf_float+0x36e>
 8005422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005424:	459a      	cmp	sl, r3
 8005426:	dc3a      	bgt.n	800549e <_printf_float+0x386>
 8005428:	6823      	ldr	r3, [r4, #0]
 800542a:	07da      	lsls	r2, r3, #31
 800542c:	d437      	bmi.n	800549e <_printf_float+0x386>
 800542e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005430:	ebaa 0903 	sub.w	r9, sl, r3
 8005434:	9b06      	ldr	r3, [sp, #24]
 8005436:	ebaa 0303 	sub.w	r3, sl, r3
 800543a:	4599      	cmp	r9, r3
 800543c:	bfa8      	it	ge
 800543e:	4699      	movge	r9, r3
 8005440:	f1b9 0f00 	cmp.w	r9, #0
 8005444:	dc33      	bgt.n	80054ae <_printf_float+0x396>
 8005446:	f04f 0800 	mov.w	r8, #0
 800544a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800544e:	f104 0b1a 	add.w	fp, r4, #26
 8005452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005454:	ebaa 0303 	sub.w	r3, sl, r3
 8005458:	eba3 0309 	sub.w	r3, r3, r9
 800545c:	4543      	cmp	r3, r8
 800545e:	f77f af79 	ble.w	8005354 <_printf_float+0x23c>
 8005462:	2301      	movs	r3, #1
 8005464:	465a      	mov	r2, fp
 8005466:	4631      	mov	r1, r6
 8005468:	4628      	mov	r0, r5
 800546a:	47b8      	blx	r7
 800546c:	3001      	adds	r0, #1
 800546e:	f43f aeae 	beq.w	80051ce <_printf_float+0xb6>
 8005472:	f108 0801 	add.w	r8, r8, #1
 8005476:	e7ec      	b.n	8005452 <_printf_float+0x33a>
 8005478:	4642      	mov	r2, r8
 800547a:	4631      	mov	r1, r6
 800547c:	4628      	mov	r0, r5
 800547e:	47b8      	blx	r7
 8005480:	3001      	adds	r0, #1
 8005482:	d1c2      	bne.n	800540a <_printf_float+0x2f2>
 8005484:	e6a3      	b.n	80051ce <_printf_float+0xb6>
 8005486:	2301      	movs	r3, #1
 8005488:	4631      	mov	r1, r6
 800548a:	4628      	mov	r0, r5
 800548c:	9206      	str	r2, [sp, #24]
 800548e:	47b8      	blx	r7
 8005490:	3001      	adds	r0, #1
 8005492:	f43f ae9c 	beq.w	80051ce <_printf_float+0xb6>
 8005496:	9a06      	ldr	r2, [sp, #24]
 8005498:	f10b 0b01 	add.w	fp, fp, #1
 800549c:	e7bb      	b.n	8005416 <_printf_float+0x2fe>
 800549e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054a2:	4631      	mov	r1, r6
 80054a4:	4628      	mov	r0, r5
 80054a6:	47b8      	blx	r7
 80054a8:	3001      	adds	r0, #1
 80054aa:	d1c0      	bne.n	800542e <_printf_float+0x316>
 80054ac:	e68f      	b.n	80051ce <_printf_float+0xb6>
 80054ae:	9a06      	ldr	r2, [sp, #24]
 80054b0:	464b      	mov	r3, r9
 80054b2:	4442      	add	r2, r8
 80054b4:	4631      	mov	r1, r6
 80054b6:	4628      	mov	r0, r5
 80054b8:	47b8      	blx	r7
 80054ba:	3001      	adds	r0, #1
 80054bc:	d1c3      	bne.n	8005446 <_printf_float+0x32e>
 80054be:	e686      	b.n	80051ce <_printf_float+0xb6>
 80054c0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80054c4:	f1ba 0f01 	cmp.w	sl, #1
 80054c8:	dc01      	bgt.n	80054ce <_printf_float+0x3b6>
 80054ca:	07db      	lsls	r3, r3, #31
 80054cc:	d536      	bpl.n	800553c <_printf_float+0x424>
 80054ce:	2301      	movs	r3, #1
 80054d0:	4642      	mov	r2, r8
 80054d2:	4631      	mov	r1, r6
 80054d4:	4628      	mov	r0, r5
 80054d6:	47b8      	blx	r7
 80054d8:	3001      	adds	r0, #1
 80054da:	f43f ae78 	beq.w	80051ce <_printf_float+0xb6>
 80054de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054e2:	4631      	mov	r1, r6
 80054e4:	4628      	mov	r0, r5
 80054e6:	47b8      	blx	r7
 80054e8:	3001      	adds	r0, #1
 80054ea:	f43f ae70 	beq.w	80051ce <_printf_float+0xb6>
 80054ee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80054f2:	2200      	movs	r2, #0
 80054f4:	2300      	movs	r3, #0
 80054f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054fa:	f7fb fae5 	bl	8000ac8 <__aeabi_dcmpeq>
 80054fe:	b9c0      	cbnz	r0, 8005532 <_printf_float+0x41a>
 8005500:	4653      	mov	r3, sl
 8005502:	f108 0201 	add.w	r2, r8, #1
 8005506:	4631      	mov	r1, r6
 8005508:	4628      	mov	r0, r5
 800550a:	47b8      	blx	r7
 800550c:	3001      	adds	r0, #1
 800550e:	d10c      	bne.n	800552a <_printf_float+0x412>
 8005510:	e65d      	b.n	80051ce <_printf_float+0xb6>
 8005512:	2301      	movs	r3, #1
 8005514:	465a      	mov	r2, fp
 8005516:	4631      	mov	r1, r6
 8005518:	4628      	mov	r0, r5
 800551a:	47b8      	blx	r7
 800551c:	3001      	adds	r0, #1
 800551e:	f43f ae56 	beq.w	80051ce <_printf_float+0xb6>
 8005522:	f108 0801 	add.w	r8, r8, #1
 8005526:	45d0      	cmp	r8, sl
 8005528:	dbf3      	blt.n	8005512 <_printf_float+0x3fa>
 800552a:	464b      	mov	r3, r9
 800552c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005530:	e6df      	b.n	80052f2 <_printf_float+0x1da>
 8005532:	f04f 0800 	mov.w	r8, #0
 8005536:	f104 0b1a 	add.w	fp, r4, #26
 800553a:	e7f4      	b.n	8005526 <_printf_float+0x40e>
 800553c:	2301      	movs	r3, #1
 800553e:	4642      	mov	r2, r8
 8005540:	e7e1      	b.n	8005506 <_printf_float+0x3ee>
 8005542:	2301      	movs	r3, #1
 8005544:	464a      	mov	r2, r9
 8005546:	4631      	mov	r1, r6
 8005548:	4628      	mov	r0, r5
 800554a:	47b8      	blx	r7
 800554c:	3001      	adds	r0, #1
 800554e:	f43f ae3e 	beq.w	80051ce <_printf_float+0xb6>
 8005552:	f108 0801 	add.w	r8, r8, #1
 8005556:	68e3      	ldr	r3, [r4, #12]
 8005558:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800555a:	1a5b      	subs	r3, r3, r1
 800555c:	4543      	cmp	r3, r8
 800555e:	dcf0      	bgt.n	8005542 <_printf_float+0x42a>
 8005560:	e6fc      	b.n	800535c <_printf_float+0x244>
 8005562:	f04f 0800 	mov.w	r8, #0
 8005566:	f104 0919 	add.w	r9, r4, #25
 800556a:	e7f4      	b.n	8005556 <_printf_float+0x43e>

0800556c <_printf_common>:
 800556c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005570:	4616      	mov	r6, r2
 8005572:	4698      	mov	r8, r3
 8005574:	688a      	ldr	r2, [r1, #8]
 8005576:	690b      	ldr	r3, [r1, #16]
 8005578:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800557c:	4293      	cmp	r3, r2
 800557e:	bfb8      	it	lt
 8005580:	4613      	movlt	r3, r2
 8005582:	6033      	str	r3, [r6, #0]
 8005584:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005588:	4607      	mov	r7, r0
 800558a:	460c      	mov	r4, r1
 800558c:	b10a      	cbz	r2, 8005592 <_printf_common+0x26>
 800558e:	3301      	adds	r3, #1
 8005590:	6033      	str	r3, [r6, #0]
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	0699      	lsls	r1, r3, #26
 8005596:	bf42      	ittt	mi
 8005598:	6833      	ldrmi	r3, [r6, #0]
 800559a:	3302      	addmi	r3, #2
 800559c:	6033      	strmi	r3, [r6, #0]
 800559e:	6825      	ldr	r5, [r4, #0]
 80055a0:	f015 0506 	ands.w	r5, r5, #6
 80055a4:	d106      	bne.n	80055b4 <_printf_common+0x48>
 80055a6:	f104 0a19 	add.w	sl, r4, #25
 80055aa:	68e3      	ldr	r3, [r4, #12]
 80055ac:	6832      	ldr	r2, [r6, #0]
 80055ae:	1a9b      	subs	r3, r3, r2
 80055b0:	42ab      	cmp	r3, r5
 80055b2:	dc26      	bgt.n	8005602 <_printf_common+0x96>
 80055b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80055b8:	6822      	ldr	r2, [r4, #0]
 80055ba:	3b00      	subs	r3, #0
 80055bc:	bf18      	it	ne
 80055be:	2301      	movne	r3, #1
 80055c0:	0692      	lsls	r2, r2, #26
 80055c2:	d42b      	bmi.n	800561c <_printf_common+0xb0>
 80055c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055c8:	4641      	mov	r1, r8
 80055ca:	4638      	mov	r0, r7
 80055cc:	47c8      	blx	r9
 80055ce:	3001      	adds	r0, #1
 80055d0:	d01e      	beq.n	8005610 <_printf_common+0xa4>
 80055d2:	6823      	ldr	r3, [r4, #0]
 80055d4:	6922      	ldr	r2, [r4, #16]
 80055d6:	f003 0306 	and.w	r3, r3, #6
 80055da:	2b04      	cmp	r3, #4
 80055dc:	bf02      	ittt	eq
 80055de:	68e5      	ldreq	r5, [r4, #12]
 80055e0:	6833      	ldreq	r3, [r6, #0]
 80055e2:	1aed      	subeq	r5, r5, r3
 80055e4:	68a3      	ldr	r3, [r4, #8]
 80055e6:	bf0c      	ite	eq
 80055e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055ec:	2500      	movne	r5, #0
 80055ee:	4293      	cmp	r3, r2
 80055f0:	bfc4      	itt	gt
 80055f2:	1a9b      	subgt	r3, r3, r2
 80055f4:	18ed      	addgt	r5, r5, r3
 80055f6:	2600      	movs	r6, #0
 80055f8:	341a      	adds	r4, #26
 80055fa:	42b5      	cmp	r5, r6
 80055fc:	d11a      	bne.n	8005634 <_printf_common+0xc8>
 80055fe:	2000      	movs	r0, #0
 8005600:	e008      	b.n	8005614 <_printf_common+0xa8>
 8005602:	2301      	movs	r3, #1
 8005604:	4652      	mov	r2, sl
 8005606:	4641      	mov	r1, r8
 8005608:	4638      	mov	r0, r7
 800560a:	47c8      	blx	r9
 800560c:	3001      	adds	r0, #1
 800560e:	d103      	bne.n	8005618 <_printf_common+0xac>
 8005610:	f04f 30ff 	mov.w	r0, #4294967295
 8005614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005618:	3501      	adds	r5, #1
 800561a:	e7c6      	b.n	80055aa <_printf_common+0x3e>
 800561c:	18e1      	adds	r1, r4, r3
 800561e:	1c5a      	adds	r2, r3, #1
 8005620:	2030      	movs	r0, #48	@ 0x30
 8005622:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005626:	4422      	add	r2, r4
 8005628:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800562c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005630:	3302      	adds	r3, #2
 8005632:	e7c7      	b.n	80055c4 <_printf_common+0x58>
 8005634:	2301      	movs	r3, #1
 8005636:	4622      	mov	r2, r4
 8005638:	4641      	mov	r1, r8
 800563a:	4638      	mov	r0, r7
 800563c:	47c8      	blx	r9
 800563e:	3001      	adds	r0, #1
 8005640:	d0e6      	beq.n	8005610 <_printf_common+0xa4>
 8005642:	3601      	adds	r6, #1
 8005644:	e7d9      	b.n	80055fa <_printf_common+0x8e>
	...

08005648 <_printf_i>:
 8005648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800564c:	7e0f      	ldrb	r7, [r1, #24]
 800564e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005650:	2f78      	cmp	r7, #120	@ 0x78
 8005652:	4691      	mov	r9, r2
 8005654:	4680      	mov	r8, r0
 8005656:	460c      	mov	r4, r1
 8005658:	469a      	mov	sl, r3
 800565a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800565e:	d807      	bhi.n	8005670 <_printf_i+0x28>
 8005660:	2f62      	cmp	r7, #98	@ 0x62
 8005662:	d80a      	bhi.n	800567a <_printf_i+0x32>
 8005664:	2f00      	cmp	r7, #0
 8005666:	f000 80d2 	beq.w	800580e <_printf_i+0x1c6>
 800566a:	2f58      	cmp	r7, #88	@ 0x58
 800566c:	f000 80b9 	beq.w	80057e2 <_printf_i+0x19a>
 8005670:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005674:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005678:	e03a      	b.n	80056f0 <_printf_i+0xa8>
 800567a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800567e:	2b15      	cmp	r3, #21
 8005680:	d8f6      	bhi.n	8005670 <_printf_i+0x28>
 8005682:	a101      	add	r1, pc, #4	@ (adr r1, 8005688 <_printf_i+0x40>)
 8005684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005688:	080056e1 	.word	0x080056e1
 800568c:	080056f5 	.word	0x080056f5
 8005690:	08005671 	.word	0x08005671
 8005694:	08005671 	.word	0x08005671
 8005698:	08005671 	.word	0x08005671
 800569c:	08005671 	.word	0x08005671
 80056a0:	080056f5 	.word	0x080056f5
 80056a4:	08005671 	.word	0x08005671
 80056a8:	08005671 	.word	0x08005671
 80056ac:	08005671 	.word	0x08005671
 80056b0:	08005671 	.word	0x08005671
 80056b4:	080057f5 	.word	0x080057f5
 80056b8:	0800571f 	.word	0x0800571f
 80056bc:	080057af 	.word	0x080057af
 80056c0:	08005671 	.word	0x08005671
 80056c4:	08005671 	.word	0x08005671
 80056c8:	08005817 	.word	0x08005817
 80056cc:	08005671 	.word	0x08005671
 80056d0:	0800571f 	.word	0x0800571f
 80056d4:	08005671 	.word	0x08005671
 80056d8:	08005671 	.word	0x08005671
 80056dc:	080057b7 	.word	0x080057b7
 80056e0:	6833      	ldr	r3, [r6, #0]
 80056e2:	1d1a      	adds	r2, r3, #4
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	6032      	str	r2, [r6, #0]
 80056e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056f0:	2301      	movs	r3, #1
 80056f2:	e09d      	b.n	8005830 <_printf_i+0x1e8>
 80056f4:	6833      	ldr	r3, [r6, #0]
 80056f6:	6820      	ldr	r0, [r4, #0]
 80056f8:	1d19      	adds	r1, r3, #4
 80056fa:	6031      	str	r1, [r6, #0]
 80056fc:	0606      	lsls	r6, r0, #24
 80056fe:	d501      	bpl.n	8005704 <_printf_i+0xbc>
 8005700:	681d      	ldr	r5, [r3, #0]
 8005702:	e003      	b.n	800570c <_printf_i+0xc4>
 8005704:	0645      	lsls	r5, r0, #25
 8005706:	d5fb      	bpl.n	8005700 <_printf_i+0xb8>
 8005708:	f9b3 5000 	ldrsh.w	r5, [r3]
 800570c:	2d00      	cmp	r5, #0
 800570e:	da03      	bge.n	8005718 <_printf_i+0xd0>
 8005710:	232d      	movs	r3, #45	@ 0x2d
 8005712:	426d      	negs	r5, r5
 8005714:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005718:	4859      	ldr	r0, [pc, #356]	@ (8005880 <_printf_i+0x238>)
 800571a:	230a      	movs	r3, #10
 800571c:	e011      	b.n	8005742 <_printf_i+0xfa>
 800571e:	6821      	ldr	r1, [r4, #0]
 8005720:	6833      	ldr	r3, [r6, #0]
 8005722:	0608      	lsls	r0, r1, #24
 8005724:	f853 5b04 	ldr.w	r5, [r3], #4
 8005728:	d402      	bmi.n	8005730 <_printf_i+0xe8>
 800572a:	0649      	lsls	r1, r1, #25
 800572c:	bf48      	it	mi
 800572e:	b2ad      	uxthmi	r5, r5
 8005730:	2f6f      	cmp	r7, #111	@ 0x6f
 8005732:	4853      	ldr	r0, [pc, #332]	@ (8005880 <_printf_i+0x238>)
 8005734:	6033      	str	r3, [r6, #0]
 8005736:	bf14      	ite	ne
 8005738:	230a      	movne	r3, #10
 800573a:	2308      	moveq	r3, #8
 800573c:	2100      	movs	r1, #0
 800573e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005742:	6866      	ldr	r6, [r4, #4]
 8005744:	60a6      	str	r6, [r4, #8]
 8005746:	2e00      	cmp	r6, #0
 8005748:	bfa2      	ittt	ge
 800574a:	6821      	ldrge	r1, [r4, #0]
 800574c:	f021 0104 	bicge.w	r1, r1, #4
 8005750:	6021      	strge	r1, [r4, #0]
 8005752:	b90d      	cbnz	r5, 8005758 <_printf_i+0x110>
 8005754:	2e00      	cmp	r6, #0
 8005756:	d04b      	beq.n	80057f0 <_printf_i+0x1a8>
 8005758:	4616      	mov	r6, r2
 800575a:	fbb5 f1f3 	udiv	r1, r5, r3
 800575e:	fb03 5711 	mls	r7, r3, r1, r5
 8005762:	5dc7      	ldrb	r7, [r0, r7]
 8005764:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005768:	462f      	mov	r7, r5
 800576a:	42bb      	cmp	r3, r7
 800576c:	460d      	mov	r5, r1
 800576e:	d9f4      	bls.n	800575a <_printf_i+0x112>
 8005770:	2b08      	cmp	r3, #8
 8005772:	d10b      	bne.n	800578c <_printf_i+0x144>
 8005774:	6823      	ldr	r3, [r4, #0]
 8005776:	07df      	lsls	r7, r3, #31
 8005778:	d508      	bpl.n	800578c <_printf_i+0x144>
 800577a:	6923      	ldr	r3, [r4, #16]
 800577c:	6861      	ldr	r1, [r4, #4]
 800577e:	4299      	cmp	r1, r3
 8005780:	bfde      	ittt	le
 8005782:	2330      	movle	r3, #48	@ 0x30
 8005784:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005788:	f106 36ff 	addle.w	r6, r6, #4294967295
 800578c:	1b92      	subs	r2, r2, r6
 800578e:	6122      	str	r2, [r4, #16]
 8005790:	f8cd a000 	str.w	sl, [sp]
 8005794:	464b      	mov	r3, r9
 8005796:	aa03      	add	r2, sp, #12
 8005798:	4621      	mov	r1, r4
 800579a:	4640      	mov	r0, r8
 800579c:	f7ff fee6 	bl	800556c <_printf_common>
 80057a0:	3001      	adds	r0, #1
 80057a2:	d14a      	bne.n	800583a <_printf_i+0x1f2>
 80057a4:	f04f 30ff 	mov.w	r0, #4294967295
 80057a8:	b004      	add	sp, #16
 80057aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ae:	6823      	ldr	r3, [r4, #0]
 80057b0:	f043 0320 	orr.w	r3, r3, #32
 80057b4:	6023      	str	r3, [r4, #0]
 80057b6:	4833      	ldr	r0, [pc, #204]	@ (8005884 <_printf_i+0x23c>)
 80057b8:	2778      	movs	r7, #120	@ 0x78
 80057ba:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80057be:	6823      	ldr	r3, [r4, #0]
 80057c0:	6831      	ldr	r1, [r6, #0]
 80057c2:	061f      	lsls	r7, r3, #24
 80057c4:	f851 5b04 	ldr.w	r5, [r1], #4
 80057c8:	d402      	bmi.n	80057d0 <_printf_i+0x188>
 80057ca:	065f      	lsls	r7, r3, #25
 80057cc:	bf48      	it	mi
 80057ce:	b2ad      	uxthmi	r5, r5
 80057d0:	6031      	str	r1, [r6, #0]
 80057d2:	07d9      	lsls	r1, r3, #31
 80057d4:	bf44      	itt	mi
 80057d6:	f043 0320 	orrmi.w	r3, r3, #32
 80057da:	6023      	strmi	r3, [r4, #0]
 80057dc:	b11d      	cbz	r5, 80057e6 <_printf_i+0x19e>
 80057de:	2310      	movs	r3, #16
 80057e0:	e7ac      	b.n	800573c <_printf_i+0xf4>
 80057e2:	4827      	ldr	r0, [pc, #156]	@ (8005880 <_printf_i+0x238>)
 80057e4:	e7e9      	b.n	80057ba <_printf_i+0x172>
 80057e6:	6823      	ldr	r3, [r4, #0]
 80057e8:	f023 0320 	bic.w	r3, r3, #32
 80057ec:	6023      	str	r3, [r4, #0]
 80057ee:	e7f6      	b.n	80057de <_printf_i+0x196>
 80057f0:	4616      	mov	r6, r2
 80057f2:	e7bd      	b.n	8005770 <_printf_i+0x128>
 80057f4:	6833      	ldr	r3, [r6, #0]
 80057f6:	6825      	ldr	r5, [r4, #0]
 80057f8:	6961      	ldr	r1, [r4, #20]
 80057fa:	1d18      	adds	r0, r3, #4
 80057fc:	6030      	str	r0, [r6, #0]
 80057fe:	062e      	lsls	r6, r5, #24
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	d501      	bpl.n	8005808 <_printf_i+0x1c0>
 8005804:	6019      	str	r1, [r3, #0]
 8005806:	e002      	b.n	800580e <_printf_i+0x1c6>
 8005808:	0668      	lsls	r0, r5, #25
 800580a:	d5fb      	bpl.n	8005804 <_printf_i+0x1bc>
 800580c:	8019      	strh	r1, [r3, #0]
 800580e:	2300      	movs	r3, #0
 8005810:	6123      	str	r3, [r4, #16]
 8005812:	4616      	mov	r6, r2
 8005814:	e7bc      	b.n	8005790 <_printf_i+0x148>
 8005816:	6833      	ldr	r3, [r6, #0]
 8005818:	1d1a      	adds	r2, r3, #4
 800581a:	6032      	str	r2, [r6, #0]
 800581c:	681e      	ldr	r6, [r3, #0]
 800581e:	6862      	ldr	r2, [r4, #4]
 8005820:	2100      	movs	r1, #0
 8005822:	4630      	mov	r0, r6
 8005824:	f7fa fcd4 	bl	80001d0 <memchr>
 8005828:	b108      	cbz	r0, 800582e <_printf_i+0x1e6>
 800582a:	1b80      	subs	r0, r0, r6
 800582c:	6060      	str	r0, [r4, #4]
 800582e:	6863      	ldr	r3, [r4, #4]
 8005830:	6123      	str	r3, [r4, #16]
 8005832:	2300      	movs	r3, #0
 8005834:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005838:	e7aa      	b.n	8005790 <_printf_i+0x148>
 800583a:	6923      	ldr	r3, [r4, #16]
 800583c:	4632      	mov	r2, r6
 800583e:	4649      	mov	r1, r9
 8005840:	4640      	mov	r0, r8
 8005842:	47d0      	blx	sl
 8005844:	3001      	adds	r0, #1
 8005846:	d0ad      	beq.n	80057a4 <_printf_i+0x15c>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	079b      	lsls	r3, r3, #30
 800584c:	d413      	bmi.n	8005876 <_printf_i+0x22e>
 800584e:	68e0      	ldr	r0, [r4, #12]
 8005850:	9b03      	ldr	r3, [sp, #12]
 8005852:	4298      	cmp	r0, r3
 8005854:	bfb8      	it	lt
 8005856:	4618      	movlt	r0, r3
 8005858:	e7a6      	b.n	80057a8 <_printf_i+0x160>
 800585a:	2301      	movs	r3, #1
 800585c:	4632      	mov	r2, r6
 800585e:	4649      	mov	r1, r9
 8005860:	4640      	mov	r0, r8
 8005862:	47d0      	blx	sl
 8005864:	3001      	adds	r0, #1
 8005866:	d09d      	beq.n	80057a4 <_printf_i+0x15c>
 8005868:	3501      	adds	r5, #1
 800586a:	68e3      	ldr	r3, [r4, #12]
 800586c:	9903      	ldr	r1, [sp, #12]
 800586e:	1a5b      	subs	r3, r3, r1
 8005870:	42ab      	cmp	r3, r5
 8005872:	dcf2      	bgt.n	800585a <_printf_i+0x212>
 8005874:	e7eb      	b.n	800584e <_printf_i+0x206>
 8005876:	2500      	movs	r5, #0
 8005878:	f104 0619 	add.w	r6, r4, #25
 800587c:	e7f5      	b.n	800586a <_printf_i+0x222>
 800587e:	bf00      	nop
 8005880:	08009726 	.word	0x08009726
 8005884:	08009737 	.word	0x08009737

08005888 <_scanf_float>:
 8005888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588c:	b087      	sub	sp, #28
 800588e:	4617      	mov	r7, r2
 8005890:	9303      	str	r3, [sp, #12]
 8005892:	688b      	ldr	r3, [r1, #8]
 8005894:	1e5a      	subs	r2, r3, #1
 8005896:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800589a:	bf81      	itttt	hi
 800589c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80058a0:	eb03 0b05 	addhi.w	fp, r3, r5
 80058a4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80058a8:	608b      	strhi	r3, [r1, #8]
 80058aa:	680b      	ldr	r3, [r1, #0]
 80058ac:	460a      	mov	r2, r1
 80058ae:	f04f 0500 	mov.w	r5, #0
 80058b2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80058b6:	f842 3b1c 	str.w	r3, [r2], #28
 80058ba:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80058be:	4680      	mov	r8, r0
 80058c0:	460c      	mov	r4, r1
 80058c2:	bf98      	it	ls
 80058c4:	f04f 0b00 	movls.w	fp, #0
 80058c8:	9201      	str	r2, [sp, #4]
 80058ca:	4616      	mov	r6, r2
 80058cc:	46aa      	mov	sl, r5
 80058ce:	46a9      	mov	r9, r5
 80058d0:	9502      	str	r5, [sp, #8]
 80058d2:	68a2      	ldr	r2, [r4, #8]
 80058d4:	b152      	cbz	r2, 80058ec <_scanf_float+0x64>
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b4e      	cmp	r3, #78	@ 0x4e
 80058dc:	d864      	bhi.n	80059a8 <_scanf_float+0x120>
 80058de:	2b40      	cmp	r3, #64	@ 0x40
 80058e0:	d83c      	bhi.n	800595c <_scanf_float+0xd4>
 80058e2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80058e6:	b2c8      	uxtb	r0, r1
 80058e8:	280e      	cmp	r0, #14
 80058ea:	d93a      	bls.n	8005962 <_scanf_float+0xda>
 80058ec:	f1b9 0f00 	cmp.w	r9, #0
 80058f0:	d003      	beq.n	80058fa <_scanf_float+0x72>
 80058f2:	6823      	ldr	r3, [r4, #0]
 80058f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058f8:	6023      	str	r3, [r4, #0]
 80058fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058fe:	f1ba 0f01 	cmp.w	sl, #1
 8005902:	f200 8117 	bhi.w	8005b34 <_scanf_float+0x2ac>
 8005906:	9b01      	ldr	r3, [sp, #4]
 8005908:	429e      	cmp	r6, r3
 800590a:	f200 8108 	bhi.w	8005b1e <_scanf_float+0x296>
 800590e:	2001      	movs	r0, #1
 8005910:	b007      	add	sp, #28
 8005912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005916:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800591a:	2a0d      	cmp	r2, #13
 800591c:	d8e6      	bhi.n	80058ec <_scanf_float+0x64>
 800591e:	a101      	add	r1, pc, #4	@ (adr r1, 8005924 <_scanf_float+0x9c>)
 8005920:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005924:	08005a6b 	.word	0x08005a6b
 8005928:	080058ed 	.word	0x080058ed
 800592c:	080058ed 	.word	0x080058ed
 8005930:	080058ed 	.word	0x080058ed
 8005934:	08005acb 	.word	0x08005acb
 8005938:	08005aa3 	.word	0x08005aa3
 800593c:	080058ed 	.word	0x080058ed
 8005940:	080058ed 	.word	0x080058ed
 8005944:	08005a79 	.word	0x08005a79
 8005948:	080058ed 	.word	0x080058ed
 800594c:	080058ed 	.word	0x080058ed
 8005950:	080058ed 	.word	0x080058ed
 8005954:	080058ed 	.word	0x080058ed
 8005958:	08005a31 	.word	0x08005a31
 800595c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8005960:	e7db      	b.n	800591a <_scanf_float+0x92>
 8005962:	290e      	cmp	r1, #14
 8005964:	d8c2      	bhi.n	80058ec <_scanf_float+0x64>
 8005966:	a001      	add	r0, pc, #4	@ (adr r0, 800596c <_scanf_float+0xe4>)
 8005968:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800596c:	08005a21 	.word	0x08005a21
 8005970:	080058ed 	.word	0x080058ed
 8005974:	08005a21 	.word	0x08005a21
 8005978:	08005ab7 	.word	0x08005ab7
 800597c:	080058ed 	.word	0x080058ed
 8005980:	080059c9 	.word	0x080059c9
 8005984:	08005a07 	.word	0x08005a07
 8005988:	08005a07 	.word	0x08005a07
 800598c:	08005a07 	.word	0x08005a07
 8005990:	08005a07 	.word	0x08005a07
 8005994:	08005a07 	.word	0x08005a07
 8005998:	08005a07 	.word	0x08005a07
 800599c:	08005a07 	.word	0x08005a07
 80059a0:	08005a07 	.word	0x08005a07
 80059a4:	08005a07 	.word	0x08005a07
 80059a8:	2b6e      	cmp	r3, #110	@ 0x6e
 80059aa:	d809      	bhi.n	80059c0 <_scanf_float+0x138>
 80059ac:	2b60      	cmp	r3, #96	@ 0x60
 80059ae:	d8b2      	bhi.n	8005916 <_scanf_float+0x8e>
 80059b0:	2b54      	cmp	r3, #84	@ 0x54
 80059b2:	d07b      	beq.n	8005aac <_scanf_float+0x224>
 80059b4:	2b59      	cmp	r3, #89	@ 0x59
 80059b6:	d199      	bne.n	80058ec <_scanf_float+0x64>
 80059b8:	2d07      	cmp	r5, #7
 80059ba:	d197      	bne.n	80058ec <_scanf_float+0x64>
 80059bc:	2508      	movs	r5, #8
 80059be:	e02c      	b.n	8005a1a <_scanf_float+0x192>
 80059c0:	2b74      	cmp	r3, #116	@ 0x74
 80059c2:	d073      	beq.n	8005aac <_scanf_float+0x224>
 80059c4:	2b79      	cmp	r3, #121	@ 0x79
 80059c6:	e7f6      	b.n	80059b6 <_scanf_float+0x12e>
 80059c8:	6821      	ldr	r1, [r4, #0]
 80059ca:	05c8      	lsls	r0, r1, #23
 80059cc:	d51b      	bpl.n	8005a06 <_scanf_float+0x17e>
 80059ce:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80059d2:	6021      	str	r1, [r4, #0]
 80059d4:	f109 0901 	add.w	r9, r9, #1
 80059d8:	f1bb 0f00 	cmp.w	fp, #0
 80059dc:	d003      	beq.n	80059e6 <_scanf_float+0x15e>
 80059de:	3201      	adds	r2, #1
 80059e0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80059e4:	60a2      	str	r2, [r4, #8]
 80059e6:	68a3      	ldr	r3, [r4, #8]
 80059e8:	3b01      	subs	r3, #1
 80059ea:	60a3      	str	r3, [r4, #8]
 80059ec:	6923      	ldr	r3, [r4, #16]
 80059ee:	3301      	adds	r3, #1
 80059f0:	6123      	str	r3, [r4, #16]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3b01      	subs	r3, #1
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	607b      	str	r3, [r7, #4]
 80059fa:	f340 8087 	ble.w	8005b0c <_scanf_float+0x284>
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	3301      	adds	r3, #1
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	e765      	b.n	80058d2 <_scanf_float+0x4a>
 8005a06:	eb1a 0105 	adds.w	r1, sl, r5
 8005a0a:	f47f af6f 	bne.w	80058ec <_scanf_float+0x64>
 8005a0e:	6822      	ldr	r2, [r4, #0]
 8005a10:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005a14:	6022      	str	r2, [r4, #0]
 8005a16:	460d      	mov	r5, r1
 8005a18:	468a      	mov	sl, r1
 8005a1a:	f806 3b01 	strb.w	r3, [r6], #1
 8005a1e:	e7e2      	b.n	80059e6 <_scanf_float+0x15e>
 8005a20:	6822      	ldr	r2, [r4, #0]
 8005a22:	0610      	lsls	r0, r2, #24
 8005a24:	f57f af62 	bpl.w	80058ec <_scanf_float+0x64>
 8005a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a2c:	6022      	str	r2, [r4, #0]
 8005a2e:	e7f4      	b.n	8005a1a <_scanf_float+0x192>
 8005a30:	f1ba 0f00 	cmp.w	sl, #0
 8005a34:	d10e      	bne.n	8005a54 <_scanf_float+0x1cc>
 8005a36:	f1b9 0f00 	cmp.w	r9, #0
 8005a3a:	d10e      	bne.n	8005a5a <_scanf_float+0x1d2>
 8005a3c:	6822      	ldr	r2, [r4, #0]
 8005a3e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005a42:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005a46:	d108      	bne.n	8005a5a <_scanf_float+0x1d2>
 8005a48:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005a4c:	6022      	str	r2, [r4, #0]
 8005a4e:	f04f 0a01 	mov.w	sl, #1
 8005a52:	e7e2      	b.n	8005a1a <_scanf_float+0x192>
 8005a54:	f1ba 0f02 	cmp.w	sl, #2
 8005a58:	d055      	beq.n	8005b06 <_scanf_float+0x27e>
 8005a5a:	2d01      	cmp	r5, #1
 8005a5c:	d002      	beq.n	8005a64 <_scanf_float+0x1dc>
 8005a5e:	2d04      	cmp	r5, #4
 8005a60:	f47f af44 	bne.w	80058ec <_scanf_float+0x64>
 8005a64:	3501      	adds	r5, #1
 8005a66:	b2ed      	uxtb	r5, r5
 8005a68:	e7d7      	b.n	8005a1a <_scanf_float+0x192>
 8005a6a:	f1ba 0f01 	cmp.w	sl, #1
 8005a6e:	f47f af3d 	bne.w	80058ec <_scanf_float+0x64>
 8005a72:	f04f 0a02 	mov.w	sl, #2
 8005a76:	e7d0      	b.n	8005a1a <_scanf_float+0x192>
 8005a78:	b97d      	cbnz	r5, 8005a9a <_scanf_float+0x212>
 8005a7a:	f1b9 0f00 	cmp.w	r9, #0
 8005a7e:	f47f af38 	bne.w	80058f2 <_scanf_float+0x6a>
 8005a82:	6822      	ldr	r2, [r4, #0]
 8005a84:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005a88:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005a8c:	f040 8108 	bne.w	8005ca0 <_scanf_float+0x418>
 8005a90:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005a94:	6022      	str	r2, [r4, #0]
 8005a96:	2501      	movs	r5, #1
 8005a98:	e7bf      	b.n	8005a1a <_scanf_float+0x192>
 8005a9a:	2d03      	cmp	r5, #3
 8005a9c:	d0e2      	beq.n	8005a64 <_scanf_float+0x1dc>
 8005a9e:	2d05      	cmp	r5, #5
 8005aa0:	e7de      	b.n	8005a60 <_scanf_float+0x1d8>
 8005aa2:	2d02      	cmp	r5, #2
 8005aa4:	f47f af22 	bne.w	80058ec <_scanf_float+0x64>
 8005aa8:	2503      	movs	r5, #3
 8005aaa:	e7b6      	b.n	8005a1a <_scanf_float+0x192>
 8005aac:	2d06      	cmp	r5, #6
 8005aae:	f47f af1d 	bne.w	80058ec <_scanf_float+0x64>
 8005ab2:	2507      	movs	r5, #7
 8005ab4:	e7b1      	b.n	8005a1a <_scanf_float+0x192>
 8005ab6:	6822      	ldr	r2, [r4, #0]
 8005ab8:	0591      	lsls	r1, r2, #22
 8005aba:	f57f af17 	bpl.w	80058ec <_scanf_float+0x64>
 8005abe:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8005ac2:	6022      	str	r2, [r4, #0]
 8005ac4:	f8cd 9008 	str.w	r9, [sp, #8]
 8005ac8:	e7a7      	b.n	8005a1a <_scanf_float+0x192>
 8005aca:	6822      	ldr	r2, [r4, #0]
 8005acc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8005ad0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005ad4:	d006      	beq.n	8005ae4 <_scanf_float+0x25c>
 8005ad6:	0550      	lsls	r0, r2, #21
 8005ad8:	f57f af08 	bpl.w	80058ec <_scanf_float+0x64>
 8005adc:	f1b9 0f00 	cmp.w	r9, #0
 8005ae0:	f000 80de 	beq.w	8005ca0 <_scanf_float+0x418>
 8005ae4:	0591      	lsls	r1, r2, #22
 8005ae6:	bf58      	it	pl
 8005ae8:	9902      	ldrpl	r1, [sp, #8]
 8005aea:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005aee:	bf58      	it	pl
 8005af0:	eba9 0101 	subpl.w	r1, r9, r1
 8005af4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005af8:	bf58      	it	pl
 8005afa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005afe:	6022      	str	r2, [r4, #0]
 8005b00:	f04f 0900 	mov.w	r9, #0
 8005b04:	e789      	b.n	8005a1a <_scanf_float+0x192>
 8005b06:	f04f 0a03 	mov.w	sl, #3
 8005b0a:	e786      	b.n	8005a1a <_scanf_float+0x192>
 8005b0c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005b10:	4639      	mov	r1, r7
 8005b12:	4640      	mov	r0, r8
 8005b14:	4798      	blx	r3
 8005b16:	2800      	cmp	r0, #0
 8005b18:	f43f aedb 	beq.w	80058d2 <_scanf_float+0x4a>
 8005b1c:	e6e6      	b.n	80058ec <_scanf_float+0x64>
 8005b1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b26:	463a      	mov	r2, r7
 8005b28:	4640      	mov	r0, r8
 8005b2a:	4798      	blx	r3
 8005b2c:	6923      	ldr	r3, [r4, #16]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	6123      	str	r3, [r4, #16]
 8005b32:	e6e8      	b.n	8005906 <_scanf_float+0x7e>
 8005b34:	1e6b      	subs	r3, r5, #1
 8005b36:	2b06      	cmp	r3, #6
 8005b38:	d824      	bhi.n	8005b84 <_scanf_float+0x2fc>
 8005b3a:	2d02      	cmp	r5, #2
 8005b3c:	d836      	bhi.n	8005bac <_scanf_float+0x324>
 8005b3e:	9b01      	ldr	r3, [sp, #4]
 8005b40:	429e      	cmp	r6, r3
 8005b42:	f67f aee4 	bls.w	800590e <_scanf_float+0x86>
 8005b46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b4e:	463a      	mov	r2, r7
 8005b50:	4640      	mov	r0, r8
 8005b52:	4798      	blx	r3
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	3b01      	subs	r3, #1
 8005b58:	6123      	str	r3, [r4, #16]
 8005b5a:	e7f0      	b.n	8005b3e <_scanf_float+0x2b6>
 8005b5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b60:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005b64:	463a      	mov	r2, r7
 8005b66:	4640      	mov	r0, r8
 8005b68:	4798      	blx	r3
 8005b6a:	6923      	ldr	r3, [r4, #16]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	6123      	str	r3, [r4, #16]
 8005b70:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b74:	fa5f fa8a 	uxtb.w	sl, sl
 8005b78:	f1ba 0f02 	cmp.w	sl, #2
 8005b7c:	d1ee      	bne.n	8005b5c <_scanf_float+0x2d4>
 8005b7e:	3d03      	subs	r5, #3
 8005b80:	b2ed      	uxtb	r5, r5
 8005b82:	1b76      	subs	r6, r6, r5
 8005b84:	6823      	ldr	r3, [r4, #0]
 8005b86:	05da      	lsls	r2, r3, #23
 8005b88:	d530      	bpl.n	8005bec <_scanf_float+0x364>
 8005b8a:	055b      	lsls	r3, r3, #21
 8005b8c:	d511      	bpl.n	8005bb2 <_scanf_float+0x32a>
 8005b8e:	9b01      	ldr	r3, [sp, #4]
 8005b90:	429e      	cmp	r6, r3
 8005b92:	f67f aebc 	bls.w	800590e <_scanf_float+0x86>
 8005b96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005b9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005b9e:	463a      	mov	r2, r7
 8005ba0:	4640      	mov	r0, r8
 8005ba2:	4798      	blx	r3
 8005ba4:	6923      	ldr	r3, [r4, #16]
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	6123      	str	r3, [r4, #16]
 8005baa:	e7f0      	b.n	8005b8e <_scanf_float+0x306>
 8005bac:	46aa      	mov	sl, r5
 8005bae:	46b3      	mov	fp, r6
 8005bb0:	e7de      	b.n	8005b70 <_scanf_float+0x2e8>
 8005bb2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005bb6:	6923      	ldr	r3, [r4, #16]
 8005bb8:	2965      	cmp	r1, #101	@ 0x65
 8005bba:	f103 33ff 	add.w	r3, r3, #4294967295
 8005bbe:	f106 35ff 	add.w	r5, r6, #4294967295
 8005bc2:	6123      	str	r3, [r4, #16]
 8005bc4:	d00c      	beq.n	8005be0 <_scanf_float+0x358>
 8005bc6:	2945      	cmp	r1, #69	@ 0x45
 8005bc8:	d00a      	beq.n	8005be0 <_scanf_float+0x358>
 8005bca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005bce:	463a      	mov	r2, r7
 8005bd0:	4640      	mov	r0, r8
 8005bd2:	4798      	blx	r3
 8005bd4:	6923      	ldr	r3, [r4, #16]
 8005bd6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	1eb5      	subs	r5, r6, #2
 8005bde:	6123      	str	r3, [r4, #16]
 8005be0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005be4:	463a      	mov	r2, r7
 8005be6:	4640      	mov	r0, r8
 8005be8:	4798      	blx	r3
 8005bea:	462e      	mov	r6, r5
 8005bec:	6822      	ldr	r2, [r4, #0]
 8005bee:	f012 0210 	ands.w	r2, r2, #16
 8005bf2:	d001      	beq.n	8005bf8 <_scanf_float+0x370>
 8005bf4:	2000      	movs	r0, #0
 8005bf6:	e68b      	b.n	8005910 <_scanf_float+0x88>
 8005bf8:	7032      	strb	r2, [r6, #0]
 8005bfa:	6823      	ldr	r3, [r4, #0]
 8005bfc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005c00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c04:	d11c      	bne.n	8005c40 <_scanf_float+0x3b8>
 8005c06:	9b02      	ldr	r3, [sp, #8]
 8005c08:	454b      	cmp	r3, r9
 8005c0a:	eba3 0209 	sub.w	r2, r3, r9
 8005c0e:	d123      	bne.n	8005c58 <_scanf_float+0x3d0>
 8005c10:	9901      	ldr	r1, [sp, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	4640      	mov	r0, r8
 8005c16:	f002 fbf7 	bl	8008408 <_strtod_r>
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	6821      	ldr	r1, [r4, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f011 0f02 	tst.w	r1, #2
 8005c24:	ec57 6b10 	vmov	r6, r7, d0
 8005c28:	f103 0204 	add.w	r2, r3, #4
 8005c2c:	d01f      	beq.n	8005c6e <_scanf_float+0x3e6>
 8005c2e:	9903      	ldr	r1, [sp, #12]
 8005c30:	600a      	str	r2, [r1, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	e9c3 6700 	strd	r6, r7, [r3]
 8005c38:	68e3      	ldr	r3, [r4, #12]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	60e3      	str	r3, [r4, #12]
 8005c3e:	e7d9      	b.n	8005bf4 <_scanf_float+0x36c>
 8005c40:	9b04      	ldr	r3, [sp, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d0e4      	beq.n	8005c10 <_scanf_float+0x388>
 8005c46:	9905      	ldr	r1, [sp, #20]
 8005c48:	230a      	movs	r3, #10
 8005c4a:	3101      	adds	r1, #1
 8005c4c:	4640      	mov	r0, r8
 8005c4e:	f002 fc5b 	bl	8008508 <_strtol_r>
 8005c52:	9b04      	ldr	r3, [sp, #16]
 8005c54:	9e05      	ldr	r6, [sp, #20]
 8005c56:	1ac2      	subs	r2, r0, r3
 8005c58:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005c5c:	429e      	cmp	r6, r3
 8005c5e:	bf28      	it	cs
 8005c60:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005c64:	4910      	ldr	r1, [pc, #64]	@ (8005ca8 <_scanf_float+0x420>)
 8005c66:	4630      	mov	r0, r6
 8005c68:	f000 f8e4 	bl	8005e34 <siprintf>
 8005c6c:	e7d0      	b.n	8005c10 <_scanf_float+0x388>
 8005c6e:	f011 0f04 	tst.w	r1, #4
 8005c72:	9903      	ldr	r1, [sp, #12]
 8005c74:	600a      	str	r2, [r1, #0]
 8005c76:	d1dc      	bne.n	8005c32 <_scanf_float+0x3aa>
 8005c78:	681d      	ldr	r5, [r3, #0]
 8005c7a:	4632      	mov	r2, r6
 8005c7c:	463b      	mov	r3, r7
 8005c7e:	4630      	mov	r0, r6
 8005c80:	4639      	mov	r1, r7
 8005c82:	f7fa ff53 	bl	8000b2c <__aeabi_dcmpun>
 8005c86:	b128      	cbz	r0, 8005c94 <_scanf_float+0x40c>
 8005c88:	4808      	ldr	r0, [pc, #32]	@ (8005cac <_scanf_float+0x424>)
 8005c8a:	f000 f9b7 	bl	8005ffc <nanf>
 8005c8e:	ed85 0a00 	vstr	s0, [r5]
 8005c92:	e7d1      	b.n	8005c38 <_scanf_float+0x3b0>
 8005c94:	4630      	mov	r0, r6
 8005c96:	4639      	mov	r1, r7
 8005c98:	f7fa ffa6 	bl	8000be8 <__aeabi_d2f>
 8005c9c:	6028      	str	r0, [r5, #0]
 8005c9e:	e7cb      	b.n	8005c38 <_scanf_float+0x3b0>
 8005ca0:	f04f 0900 	mov.w	r9, #0
 8005ca4:	e629      	b.n	80058fa <_scanf_float+0x72>
 8005ca6:	bf00      	nop
 8005ca8:	08009748 	.word	0x08009748
 8005cac:	08009add 	.word	0x08009add

08005cb0 <std>:
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	b510      	push	{r4, lr}
 8005cb4:	4604      	mov	r4, r0
 8005cb6:	e9c0 3300 	strd	r3, r3, [r0]
 8005cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cbe:	6083      	str	r3, [r0, #8]
 8005cc0:	8181      	strh	r1, [r0, #12]
 8005cc2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cc4:	81c2      	strh	r2, [r0, #14]
 8005cc6:	6183      	str	r3, [r0, #24]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	2208      	movs	r2, #8
 8005ccc:	305c      	adds	r0, #92	@ 0x5c
 8005cce:	f000 f914 	bl	8005efa <memset>
 8005cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8005d08 <std+0x58>)
 8005cd4:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d0c <std+0x5c>)
 8005cd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cda:	4b0d      	ldr	r3, [pc, #52]	@ (8005d10 <std+0x60>)
 8005cdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cde:	4b0d      	ldr	r3, [pc, #52]	@ (8005d14 <std+0x64>)
 8005ce0:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8005d18 <std+0x68>)
 8005ce4:	6224      	str	r4, [r4, #32]
 8005ce6:	429c      	cmp	r4, r3
 8005ce8:	d006      	beq.n	8005cf8 <std+0x48>
 8005cea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005cee:	4294      	cmp	r4, r2
 8005cf0:	d002      	beq.n	8005cf8 <std+0x48>
 8005cf2:	33d0      	adds	r3, #208	@ 0xd0
 8005cf4:	429c      	cmp	r4, r3
 8005cf6:	d105      	bne.n	8005d04 <std+0x54>
 8005cf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d00:	f000 b978 	b.w	8005ff4 <__retarget_lock_init_recursive>
 8005d04:	bd10      	pop	{r4, pc}
 8005d06:	bf00      	nop
 8005d08:	08005e75 	.word	0x08005e75
 8005d0c:	08005e97 	.word	0x08005e97
 8005d10:	08005ecf 	.word	0x08005ecf
 8005d14:	08005ef3 	.word	0x08005ef3
 8005d18:	20000340 	.word	0x20000340

08005d1c <stdio_exit_handler>:
 8005d1c:	4a02      	ldr	r2, [pc, #8]	@ (8005d28 <stdio_exit_handler+0xc>)
 8005d1e:	4903      	ldr	r1, [pc, #12]	@ (8005d2c <stdio_exit_handler+0x10>)
 8005d20:	4803      	ldr	r0, [pc, #12]	@ (8005d30 <stdio_exit_handler+0x14>)
 8005d22:	f000 b869 	b.w	8005df8 <_fwalk_sglue>
 8005d26:	bf00      	nop
 8005d28:	2000000c 	.word	0x2000000c
 8005d2c:	080088c5 	.word	0x080088c5
 8005d30:	2000001c 	.word	0x2000001c

08005d34 <cleanup_stdio>:
 8005d34:	6841      	ldr	r1, [r0, #4]
 8005d36:	4b0c      	ldr	r3, [pc, #48]	@ (8005d68 <cleanup_stdio+0x34>)
 8005d38:	4299      	cmp	r1, r3
 8005d3a:	b510      	push	{r4, lr}
 8005d3c:	4604      	mov	r4, r0
 8005d3e:	d001      	beq.n	8005d44 <cleanup_stdio+0x10>
 8005d40:	f002 fdc0 	bl	80088c4 <_fflush_r>
 8005d44:	68a1      	ldr	r1, [r4, #8]
 8005d46:	4b09      	ldr	r3, [pc, #36]	@ (8005d6c <cleanup_stdio+0x38>)
 8005d48:	4299      	cmp	r1, r3
 8005d4a:	d002      	beq.n	8005d52 <cleanup_stdio+0x1e>
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f002 fdb9 	bl	80088c4 <_fflush_r>
 8005d52:	68e1      	ldr	r1, [r4, #12]
 8005d54:	4b06      	ldr	r3, [pc, #24]	@ (8005d70 <cleanup_stdio+0x3c>)
 8005d56:	4299      	cmp	r1, r3
 8005d58:	d004      	beq.n	8005d64 <cleanup_stdio+0x30>
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d60:	f002 bdb0 	b.w	80088c4 <_fflush_r>
 8005d64:	bd10      	pop	{r4, pc}
 8005d66:	bf00      	nop
 8005d68:	20000340 	.word	0x20000340
 8005d6c:	200003a8 	.word	0x200003a8
 8005d70:	20000410 	.word	0x20000410

08005d74 <global_stdio_init.part.0>:
 8005d74:	b510      	push	{r4, lr}
 8005d76:	4b0b      	ldr	r3, [pc, #44]	@ (8005da4 <global_stdio_init.part.0+0x30>)
 8005d78:	4c0b      	ldr	r4, [pc, #44]	@ (8005da8 <global_stdio_init.part.0+0x34>)
 8005d7a:	4a0c      	ldr	r2, [pc, #48]	@ (8005dac <global_stdio_init.part.0+0x38>)
 8005d7c:	601a      	str	r2, [r3, #0]
 8005d7e:	4620      	mov	r0, r4
 8005d80:	2200      	movs	r2, #0
 8005d82:	2104      	movs	r1, #4
 8005d84:	f7ff ff94 	bl	8005cb0 <std>
 8005d88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	2109      	movs	r1, #9
 8005d90:	f7ff ff8e 	bl	8005cb0 <std>
 8005d94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d98:	2202      	movs	r2, #2
 8005d9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d9e:	2112      	movs	r1, #18
 8005da0:	f7ff bf86 	b.w	8005cb0 <std>
 8005da4:	20000478 	.word	0x20000478
 8005da8:	20000340 	.word	0x20000340
 8005dac:	08005d1d 	.word	0x08005d1d

08005db0 <__sfp_lock_acquire>:
 8005db0:	4801      	ldr	r0, [pc, #4]	@ (8005db8 <__sfp_lock_acquire+0x8>)
 8005db2:	f000 b920 	b.w	8005ff6 <__retarget_lock_acquire_recursive>
 8005db6:	bf00      	nop
 8005db8:	20000481 	.word	0x20000481

08005dbc <__sfp_lock_release>:
 8005dbc:	4801      	ldr	r0, [pc, #4]	@ (8005dc4 <__sfp_lock_release+0x8>)
 8005dbe:	f000 b91b 	b.w	8005ff8 <__retarget_lock_release_recursive>
 8005dc2:	bf00      	nop
 8005dc4:	20000481 	.word	0x20000481

08005dc8 <__sinit>:
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	4604      	mov	r4, r0
 8005dcc:	f7ff fff0 	bl	8005db0 <__sfp_lock_acquire>
 8005dd0:	6a23      	ldr	r3, [r4, #32]
 8005dd2:	b11b      	cbz	r3, 8005ddc <__sinit+0x14>
 8005dd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dd8:	f7ff bff0 	b.w	8005dbc <__sfp_lock_release>
 8005ddc:	4b04      	ldr	r3, [pc, #16]	@ (8005df0 <__sinit+0x28>)
 8005dde:	6223      	str	r3, [r4, #32]
 8005de0:	4b04      	ldr	r3, [pc, #16]	@ (8005df4 <__sinit+0x2c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1f5      	bne.n	8005dd4 <__sinit+0xc>
 8005de8:	f7ff ffc4 	bl	8005d74 <global_stdio_init.part.0>
 8005dec:	e7f2      	b.n	8005dd4 <__sinit+0xc>
 8005dee:	bf00      	nop
 8005df0:	08005d35 	.word	0x08005d35
 8005df4:	20000478 	.word	0x20000478

08005df8 <_fwalk_sglue>:
 8005df8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	4688      	mov	r8, r1
 8005e00:	4614      	mov	r4, r2
 8005e02:	2600      	movs	r6, #0
 8005e04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e08:	f1b9 0901 	subs.w	r9, r9, #1
 8005e0c:	d505      	bpl.n	8005e1a <_fwalk_sglue+0x22>
 8005e0e:	6824      	ldr	r4, [r4, #0]
 8005e10:	2c00      	cmp	r4, #0
 8005e12:	d1f7      	bne.n	8005e04 <_fwalk_sglue+0xc>
 8005e14:	4630      	mov	r0, r6
 8005e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e1a:	89ab      	ldrh	r3, [r5, #12]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d907      	bls.n	8005e30 <_fwalk_sglue+0x38>
 8005e20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e24:	3301      	adds	r3, #1
 8005e26:	d003      	beq.n	8005e30 <_fwalk_sglue+0x38>
 8005e28:	4629      	mov	r1, r5
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	47c0      	blx	r8
 8005e2e:	4306      	orrs	r6, r0
 8005e30:	3568      	adds	r5, #104	@ 0x68
 8005e32:	e7e9      	b.n	8005e08 <_fwalk_sglue+0x10>

08005e34 <siprintf>:
 8005e34:	b40e      	push	{r1, r2, r3}
 8005e36:	b500      	push	{lr}
 8005e38:	b09c      	sub	sp, #112	@ 0x70
 8005e3a:	ab1d      	add	r3, sp, #116	@ 0x74
 8005e3c:	9002      	str	r0, [sp, #8]
 8005e3e:	9006      	str	r0, [sp, #24]
 8005e40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005e44:	4809      	ldr	r0, [pc, #36]	@ (8005e6c <siprintf+0x38>)
 8005e46:	9107      	str	r1, [sp, #28]
 8005e48:	9104      	str	r1, [sp, #16]
 8005e4a:	4909      	ldr	r1, [pc, #36]	@ (8005e70 <siprintf+0x3c>)
 8005e4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e50:	9105      	str	r1, [sp, #20]
 8005e52:	6800      	ldr	r0, [r0, #0]
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	a902      	add	r1, sp, #8
 8005e58:	f002 fbb4 	bl	80085c4 <_svfiprintf_r>
 8005e5c:	9b02      	ldr	r3, [sp, #8]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	b01c      	add	sp, #112	@ 0x70
 8005e64:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e68:	b003      	add	sp, #12
 8005e6a:	4770      	bx	lr
 8005e6c:	20000018 	.word	0x20000018
 8005e70:	ffff0208 	.word	0xffff0208

08005e74 <__sread>:
 8005e74:	b510      	push	{r4, lr}
 8005e76:	460c      	mov	r4, r1
 8005e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7c:	f000 f86c 	bl	8005f58 <_read_r>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	bfab      	itete	ge
 8005e84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e86:	89a3      	ldrhlt	r3, [r4, #12]
 8005e88:	181b      	addge	r3, r3, r0
 8005e8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e8e:	bfac      	ite	ge
 8005e90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e92:	81a3      	strhlt	r3, [r4, #12]
 8005e94:	bd10      	pop	{r4, pc}

08005e96 <__swrite>:
 8005e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9a:	461f      	mov	r7, r3
 8005e9c:	898b      	ldrh	r3, [r1, #12]
 8005e9e:	05db      	lsls	r3, r3, #23
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	4616      	mov	r6, r2
 8005ea6:	d505      	bpl.n	8005eb4 <__swrite+0x1e>
 8005ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eac:	2302      	movs	r3, #2
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f000 f840 	bl	8005f34 <_lseek_r>
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ebe:	81a3      	strh	r3, [r4, #12]
 8005ec0:	4632      	mov	r2, r6
 8005ec2:	463b      	mov	r3, r7
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eca:	f000 b857 	b.w	8005f7c <_write_r>

08005ece <__sseek>:
 8005ece:	b510      	push	{r4, lr}
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed6:	f000 f82d 	bl	8005f34 <_lseek_r>
 8005eda:	1c43      	adds	r3, r0, #1
 8005edc:	89a3      	ldrh	r3, [r4, #12]
 8005ede:	bf15      	itete	ne
 8005ee0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ee2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ee6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005eea:	81a3      	strheq	r3, [r4, #12]
 8005eec:	bf18      	it	ne
 8005eee:	81a3      	strhne	r3, [r4, #12]
 8005ef0:	bd10      	pop	{r4, pc}

08005ef2 <__sclose>:
 8005ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef6:	f000 b80d 	b.w	8005f14 <_close_r>

08005efa <memset>:
 8005efa:	4402      	add	r2, r0
 8005efc:	4603      	mov	r3, r0
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d100      	bne.n	8005f04 <memset+0xa>
 8005f02:	4770      	bx	lr
 8005f04:	f803 1b01 	strb.w	r1, [r3], #1
 8005f08:	e7f9      	b.n	8005efe <memset+0x4>
	...

08005f0c <_localeconv_r>:
 8005f0c:	4800      	ldr	r0, [pc, #0]	@ (8005f10 <_localeconv_r+0x4>)
 8005f0e:	4770      	bx	lr
 8005f10:	20000158 	.word	0x20000158

08005f14 <_close_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4d06      	ldr	r5, [pc, #24]	@ (8005f30 <_close_r+0x1c>)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	f7fb fcfe 	bl	8001920 <_close>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d102      	bne.n	8005f2e <_close_r+0x1a>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	b103      	cbz	r3, 8005f2e <_close_r+0x1a>
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	2000047c 	.word	0x2000047c

08005f34 <_lseek_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d07      	ldr	r5, [pc, #28]	@ (8005f54 <_lseek_r+0x20>)
 8005f38:	4604      	mov	r4, r0
 8005f3a:	4608      	mov	r0, r1
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	2200      	movs	r2, #0
 8005f40:	602a      	str	r2, [r5, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f7fb fd13 	bl	800196e <_lseek>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d102      	bne.n	8005f52 <_lseek_r+0x1e>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b103      	cbz	r3, 8005f52 <_lseek_r+0x1e>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	2000047c 	.word	0x2000047c

08005f58 <_read_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4d07      	ldr	r5, [pc, #28]	@ (8005f78 <_read_r+0x20>)
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	4608      	mov	r0, r1
 8005f60:	4611      	mov	r1, r2
 8005f62:	2200      	movs	r2, #0
 8005f64:	602a      	str	r2, [r5, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f7fb fca1 	bl	80018ae <_read>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_read_r+0x1e>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_read_r+0x1e>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	2000047c 	.word	0x2000047c

08005f7c <_write_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4d07      	ldr	r5, [pc, #28]	@ (8005f9c <_write_r+0x20>)
 8005f80:	4604      	mov	r4, r0
 8005f82:	4608      	mov	r0, r1
 8005f84:	4611      	mov	r1, r2
 8005f86:	2200      	movs	r2, #0
 8005f88:	602a      	str	r2, [r5, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f7fb fcac 	bl	80018e8 <_write>
 8005f90:	1c43      	adds	r3, r0, #1
 8005f92:	d102      	bne.n	8005f9a <_write_r+0x1e>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	b103      	cbz	r3, 8005f9a <_write_r+0x1e>
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	bd38      	pop	{r3, r4, r5, pc}
 8005f9c:	2000047c 	.word	0x2000047c

08005fa0 <__errno>:
 8005fa0:	4b01      	ldr	r3, [pc, #4]	@ (8005fa8 <__errno+0x8>)
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	20000018 	.word	0x20000018

08005fac <__libc_init_array>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4d0d      	ldr	r5, [pc, #52]	@ (8005fe4 <__libc_init_array+0x38>)
 8005fb0:	4c0d      	ldr	r4, [pc, #52]	@ (8005fe8 <__libc_init_array+0x3c>)
 8005fb2:	1b64      	subs	r4, r4, r5
 8005fb4:	10a4      	asrs	r4, r4, #2
 8005fb6:	2600      	movs	r6, #0
 8005fb8:	42a6      	cmp	r6, r4
 8005fba:	d109      	bne.n	8005fd0 <__libc_init_array+0x24>
 8005fbc:	4d0b      	ldr	r5, [pc, #44]	@ (8005fec <__libc_init_array+0x40>)
 8005fbe:	4c0c      	ldr	r4, [pc, #48]	@ (8005ff0 <__libc_init_array+0x44>)
 8005fc0:	f003 fb70 	bl	80096a4 <_init>
 8005fc4:	1b64      	subs	r4, r4, r5
 8005fc6:	10a4      	asrs	r4, r4, #2
 8005fc8:	2600      	movs	r6, #0
 8005fca:	42a6      	cmp	r6, r4
 8005fcc:	d105      	bne.n	8005fda <__libc_init_array+0x2e>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd4:	4798      	blx	r3
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	e7ee      	b.n	8005fb8 <__libc_init_array+0xc>
 8005fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fde:	4798      	blx	r3
 8005fe0:	3601      	adds	r6, #1
 8005fe2:	e7f2      	b.n	8005fca <__libc_init_array+0x1e>
 8005fe4:	08009b48 	.word	0x08009b48
 8005fe8:	08009b48 	.word	0x08009b48
 8005fec:	08009b48 	.word	0x08009b48
 8005ff0:	08009b4c 	.word	0x08009b4c

08005ff4 <__retarget_lock_init_recursive>:
 8005ff4:	4770      	bx	lr

08005ff6 <__retarget_lock_acquire_recursive>:
 8005ff6:	4770      	bx	lr

08005ff8 <__retarget_lock_release_recursive>:
 8005ff8:	4770      	bx	lr
	...

08005ffc <nanf>:
 8005ffc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006004 <nanf+0x8>
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	7fc00000 	.word	0x7fc00000

08006008 <quorem>:
 8006008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600c:	6903      	ldr	r3, [r0, #16]
 800600e:	690c      	ldr	r4, [r1, #16]
 8006010:	42a3      	cmp	r3, r4
 8006012:	4607      	mov	r7, r0
 8006014:	db7e      	blt.n	8006114 <quorem+0x10c>
 8006016:	3c01      	subs	r4, #1
 8006018:	f101 0814 	add.w	r8, r1, #20
 800601c:	00a3      	lsls	r3, r4, #2
 800601e:	f100 0514 	add.w	r5, r0, #20
 8006022:	9300      	str	r3, [sp, #0]
 8006024:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006028:	9301      	str	r3, [sp, #4]
 800602a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800602e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006032:	3301      	adds	r3, #1
 8006034:	429a      	cmp	r2, r3
 8006036:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800603a:	fbb2 f6f3 	udiv	r6, r2, r3
 800603e:	d32e      	bcc.n	800609e <quorem+0x96>
 8006040:	f04f 0a00 	mov.w	sl, #0
 8006044:	46c4      	mov	ip, r8
 8006046:	46ae      	mov	lr, r5
 8006048:	46d3      	mov	fp, sl
 800604a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800604e:	b298      	uxth	r0, r3
 8006050:	fb06 a000 	mla	r0, r6, r0, sl
 8006054:	0c02      	lsrs	r2, r0, #16
 8006056:	0c1b      	lsrs	r3, r3, #16
 8006058:	fb06 2303 	mla	r3, r6, r3, r2
 800605c:	f8de 2000 	ldr.w	r2, [lr]
 8006060:	b280      	uxth	r0, r0
 8006062:	b292      	uxth	r2, r2
 8006064:	1a12      	subs	r2, r2, r0
 8006066:	445a      	add	r2, fp
 8006068:	f8de 0000 	ldr.w	r0, [lr]
 800606c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006070:	b29b      	uxth	r3, r3
 8006072:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006076:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800607a:	b292      	uxth	r2, r2
 800607c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006080:	45e1      	cmp	r9, ip
 8006082:	f84e 2b04 	str.w	r2, [lr], #4
 8006086:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800608a:	d2de      	bcs.n	800604a <quorem+0x42>
 800608c:	9b00      	ldr	r3, [sp, #0]
 800608e:	58eb      	ldr	r3, [r5, r3]
 8006090:	b92b      	cbnz	r3, 800609e <quorem+0x96>
 8006092:	9b01      	ldr	r3, [sp, #4]
 8006094:	3b04      	subs	r3, #4
 8006096:	429d      	cmp	r5, r3
 8006098:	461a      	mov	r2, r3
 800609a:	d32f      	bcc.n	80060fc <quorem+0xf4>
 800609c:	613c      	str	r4, [r7, #16]
 800609e:	4638      	mov	r0, r7
 80060a0:	f001 f9c2 	bl	8007428 <__mcmp>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	db25      	blt.n	80060f4 <quorem+0xec>
 80060a8:	4629      	mov	r1, r5
 80060aa:	2000      	movs	r0, #0
 80060ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80060b0:	f8d1 c000 	ldr.w	ip, [r1]
 80060b4:	fa1f fe82 	uxth.w	lr, r2
 80060b8:	fa1f f38c 	uxth.w	r3, ip
 80060bc:	eba3 030e 	sub.w	r3, r3, lr
 80060c0:	4403      	add	r3, r0
 80060c2:	0c12      	lsrs	r2, r2, #16
 80060c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80060c8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060d2:	45c1      	cmp	r9, r8
 80060d4:	f841 3b04 	str.w	r3, [r1], #4
 80060d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060dc:	d2e6      	bcs.n	80060ac <quorem+0xa4>
 80060de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060e6:	b922      	cbnz	r2, 80060f2 <quorem+0xea>
 80060e8:	3b04      	subs	r3, #4
 80060ea:	429d      	cmp	r5, r3
 80060ec:	461a      	mov	r2, r3
 80060ee:	d30b      	bcc.n	8006108 <quorem+0x100>
 80060f0:	613c      	str	r4, [r7, #16]
 80060f2:	3601      	adds	r6, #1
 80060f4:	4630      	mov	r0, r6
 80060f6:	b003      	add	sp, #12
 80060f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fc:	6812      	ldr	r2, [r2, #0]
 80060fe:	3b04      	subs	r3, #4
 8006100:	2a00      	cmp	r2, #0
 8006102:	d1cb      	bne.n	800609c <quorem+0x94>
 8006104:	3c01      	subs	r4, #1
 8006106:	e7c6      	b.n	8006096 <quorem+0x8e>
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	3b04      	subs	r3, #4
 800610c:	2a00      	cmp	r2, #0
 800610e:	d1ef      	bne.n	80060f0 <quorem+0xe8>
 8006110:	3c01      	subs	r4, #1
 8006112:	e7ea      	b.n	80060ea <quorem+0xe2>
 8006114:	2000      	movs	r0, #0
 8006116:	e7ee      	b.n	80060f6 <quorem+0xee>

08006118 <_dtoa_r>:
 8006118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800611c:	69c7      	ldr	r7, [r0, #28]
 800611e:	b099      	sub	sp, #100	@ 0x64
 8006120:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006124:	ec55 4b10 	vmov	r4, r5, d0
 8006128:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800612a:	9109      	str	r1, [sp, #36]	@ 0x24
 800612c:	4683      	mov	fp, r0
 800612e:	920e      	str	r2, [sp, #56]	@ 0x38
 8006130:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006132:	b97f      	cbnz	r7, 8006154 <_dtoa_r+0x3c>
 8006134:	2010      	movs	r0, #16
 8006136:	f000 fdfd 	bl	8006d34 <malloc>
 800613a:	4602      	mov	r2, r0
 800613c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006140:	b920      	cbnz	r0, 800614c <_dtoa_r+0x34>
 8006142:	4ba7      	ldr	r3, [pc, #668]	@ (80063e0 <_dtoa_r+0x2c8>)
 8006144:	21ef      	movs	r1, #239	@ 0xef
 8006146:	48a7      	ldr	r0, [pc, #668]	@ (80063e4 <_dtoa_r+0x2cc>)
 8006148:	f002 fc36 	bl	80089b8 <__assert_func>
 800614c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006150:	6007      	str	r7, [r0, #0]
 8006152:	60c7      	str	r7, [r0, #12]
 8006154:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006158:	6819      	ldr	r1, [r3, #0]
 800615a:	b159      	cbz	r1, 8006174 <_dtoa_r+0x5c>
 800615c:	685a      	ldr	r2, [r3, #4]
 800615e:	604a      	str	r2, [r1, #4]
 8006160:	2301      	movs	r3, #1
 8006162:	4093      	lsls	r3, r2
 8006164:	608b      	str	r3, [r1, #8]
 8006166:	4658      	mov	r0, fp
 8006168:	f000 feda 	bl	8006f20 <_Bfree>
 800616c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006170:	2200      	movs	r2, #0
 8006172:	601a      	str	r2, [r3, #0]
 8006174:	1e2b      	subs	r3, r5, #0
 8006176:	bfb9      	ittee	lt
 8006178:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800617c:	9303      	strlt	r3, [sp, #12]
 800617e:	2300      	movge	r3, #0
 8006180:	6033      	strge	r3, [r6, #0]
 8006182:	9f03      	ldr	r7, [sp, #12]
 8006184:	4b98      	ldr	r3, [pc, #608]	@ (80063e8 <_dtoa_r+0x2d0>)
 8006186:	bfbc      	itt	lt
 8006188:	2201      	movlt	r2, #1
 800618a:	6032      	strlt	r2, [r6, #0]
 800618c:	43bb      	bics	r3, r7
 800618e:	d112      	bne.n	80061b6 <_dtoa_r+0x9e>
 8006190:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006192:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006196:	6013      	str	r3, [r2, #0]
 8006198:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800619c:	4323      	orrs	r3, r4
 800619e:	f000 854d 	beq.w	8006c3c <_dtoa_r+0xb24>
 80061a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061a4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80063fc <_dtoa_r+0x2e4>
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f000 854f 	beq.w	8006c4c <_dtoa_r+0xb34>
 80061ae:	f10a 0303 	add.w	r3, sl, #3
 80061b2:	f000 bd49 	b.w	8006c48 <_dtoa_r+0xb30>
 80061b6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061ba:	2200      	movs	r2, #0
 80061bc:	ec51 0b17 	vmov	r0, r1, d7
 80061c0:	2300      	movs	r3, #0
 80061c2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80061c6:	f7fa fc7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80061ca:	4680      	mov	r8, r0
 80061cc:	b158      	cbz	r0, 80061e6 <_dtoa_r+0xce>
 80061ce:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80061d0:	2301      	movs	r3, #1
 80061d2:	6013      	str	r3, [r2, #0]
 80061d4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061d6:	b113      	cbz	r3, 80061de <_dtoa_r+0xc6>
 80061d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061da:	4b84      	ldr	r3, [pc, #528]	@ (80063ec <_dtoa_r+0x2d4>)
 80061dc:	6013      	str	r3, [r2, #0]
 80061de:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006400 <_dtoa_r+0x2e8>
 80061e2:	f000 bd33 	b.w	8006c4c <_dtoa_r+0xb34>
 80061e6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80061ea:	aa16      	add	r2, sp, #88	@ 0x58
 80061ec:	a917      	add	r1, sp, #92	@ 0x5c
 80061ee:	4658      	mov	r0, fp
 80061f0:	f001 fa3a 	bl	8007668 <__d2b>
 80061f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80061f8:	4681      	mov	r9, r0
 80061fa:	2e00      	cmp	r6, #0
 80061fc:	d077      	beq.n	80062ee <_dtoa_r+0x1d6>
 80061fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006200:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006204:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006208:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800620c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006210:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006214:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006218:	4619      	mov	r1, r3
 800621a:	2200      	movs	r2, #0
 800621c:	4b74      	ldr	r3, [pc, #464]	@ (80063f0 <_dtoa_r+0x2d8>)
 800621e:	f7fa f833 	bl	8000288 <__aeabi_dsub>
 8006222:	a369      	add	r3, pc, #420	@ (adr r3, 80063c8 <_dtoa_r+0x2b0>)
 8006224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006228:	f7fa f9e6 	bl	80005f8 <__aeabi_dmul>
 800622c:	a368      	add	r3, pc, #416	@ (adr r3, 80063d0 <_dtoa_r+0x2b8>)
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	f7fa f82b 	bl	800028c <__adddf3>
 8006236:	4604      	mov	r4, r0
 8006238:	4630      	mov	r0, r6
 800623a:	460d      	mov	r5, r1
 800623c:	f7fa f972 	bl	8000524 <__aeabi_i2d>
 8006240:	a365      	add	r3, pc, #404	@ (adr r3, 80063d8 <_dtoa_r+0x2c0>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	f7fa f9d7 	bl	80005f8 <__aeabi_dmul>
 800624a:	4602      	mov	r2, r0
 800624c:	460b      	mov	r3, r1
 800624e:	4620      	mov	r0, r4
 8006250:	4629      	mov	r1, r5
 8006252:	f7fa f81b 	bl	800028c <__adddf3>
 8006256:	4604      	mov	r4, r0
 8006258:	460d      	mov	r5, r1
 800625a:	f7fa fc7d 	bl	8000b58 <__aeabi_d2iz>
 800625e:	2200      	movs	r2, #0
 8006260:	4607      	mov	r7, r0
 8006262:	2300      	movs	r3, #0
 8006264:	4620      	mov	r0, r4
 8006266:	4629      	mov	r1, r5
 8006268:	f7fa fc38 	bl	8000adc <__aeabi_dcmplt>
 800626c:	b140      	cbz	r0, 8006280 <_dtoa_r+0x168>
 800626e:	4638      	mov	r0, r7
 8006270:	f7fa f958 	bl	8000524 <__aeabi_i2d>
 8006274:	4622      	mov	r2, r4
 8006276:	462b      	mov	r3, r5
 8006278:	f7fa fc26 	bl	8000ac8 <__aeabi_dcmpeq>
 800627c:	b900      	cbnz	r0, 8006280 <_dtoa_r+0x168>
 800627e:	3f01      	subs	r7, #1
 8006280:	2f16      	cmp	r7, #22
 8006282:	d851      	bhi.n	8006328 <_dtoa_r+0x210>
 8006284:	4b5b      	ldr	r3, [pc, #364]	@ (80063f4 <_dtoa_r+0x2dc>)
 8006286:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006292:	f7fa fc23 	bl	8000adc <__aeabi_dcmplt>
 8006296:	2800      	cmp	r0, #0
 8006298:	d048      	beq.n	800632c <_dtoa_r+0x214>
 800629a:	3f01      	subs	r7, #1
 800629c:	2300      	movs	r3, #0
 800629e:	9312      	str	r3, [sp, #72]	@ 0x48
 80062a0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80062a2:	1b9b      	subs	r3, r3, r6
 80062a4:	1e5a      	subs	r2, r3, #1
 80062a6:	bf44      	itt	mi
 80062a8:	f1c3 0801 	rsbmi	r8, r3, #1
 80062ac:	2300      	movmi	r3, #0
 80062ae:	9208      	str	r2, [sp, #32]
 80062b0:	bf54      	ite	pl
 80062b2:	f04f 0800 	movpl.w	r8, #0
 80062b6:	9308      	strmi	r3, [sp, #32]
 80062b8:	2f00      	cmp	r7, #0
 80062ba:	db39      	blt.n	8006330 <_dtoa_r+0x218>
 80062bc:	9b08      	ldr	r3, [sp, #32]
 80062be:	970f      	str	r7, [sp, #60]	@ 0x3c
 80062c0:	443b      	add	r3, r7
 80062c2:	9308      	str	r3, [sp, #32]
 80062c4:	2300      	movs	r3, #0
 80062c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80062c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062ca:	2b09      	cmp	r3, #9
 80062cc:	d864      	bhi.n	8006398 <_dtoa_r+0x280>
 80062ce:	2b05      	cmp	r3, #5
 80062d0:	bfc4      	itt	gt
 80062d2:	3b04      	subgt	r3, #4
 80062d4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80062d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d8:	f1a3 0302 	sub.w	r3, r3, #2
 80062dc:	bfcc      	ite	gt
 80062de:	2400      	movgt	r4, #0
 80062e0:	2401      	movle	r4, #1
 80062e2:	2b03      	cmp	r3, #3
 80062e4:	d863      	bhi.n	80063ae <_dtoa_r+0x296>
 80062e6:	e8df f003 	tbb	[pc, r3]
 80062ea:	372a      	.short	0x372a
 80062ec:	5535      	.short	0x5535
 80062ee:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80062f2:	441e      	add	r6, r3
 80062f4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80062f8:	2b20      	cmp	r3, #32
 80062fa:	bfc1      	itttt	gt
 80062fc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006300:	409f      	lslgt	r7, r3
 8006302:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006306:	fa24 f303 	lsrgt.w	r3, r4, r3
 800630a:	bfd6      	itet	le
 800630c:	f1c3 0320 	rsble	r3, r3, #32
 8006310:	ea47 0003 	orrgt.w	r0, r7, r3
 8006314:	fa04 f003 	lslle.w	r0, r4, r3
 8006318:	f7fa f8f4 	bl	8000504 <__aeabi_ui2d>
 800631c:	2201      	movs	r2, #1
 800631e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006322:	3e01      	subs	r6, #1
 8006324:	9214      	str	r2, [sp, #80]	@ 0x50
 8006326:	e777      	b.n	8006218 <_dtoa_r+0x100>
 8006328:	2301      	movs	r3, #1
 800632a:	e7b8      	b.n	800629e <_dtoa_r+0x186>
 800632c:	9012      	str	r0, [sp, #72]	@ 0x48
 800632e:	e7b7      	b.n	80062a0 <_dtoa_r+0x188>
 8006330:	427b      	negs	r3, r7
 8006332:	930a      	str	r3, [sp, #40]	@ 0x28
 8006334:	2300      	movs	r3, #0
 8006336:	eba8 0807 	sub.w	r8, r8, r7
 800633a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800633c:	e7c4      	b.n	80062c8 <_dtoa_r+0x1b0>
 800633e:	2300      	movs	r3, #0
 8006340:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006342:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006344:	2b00      	cmp	r3, #0
 8006346:	dc35      	bgt.n	80063b4 <_dtoa_r+0x29c>
 8006348:	2301      	movs	r3, #1
 800634a:	9300      	str	r3, [sp, #0]
 800634c:	9307      	str	r3, [sp, #28]
 800634e:	461a      	mov	r2, r3
 8006350:	920e      	str	r2, [sp, #56]	@ 0x38
 8006352:	e00b      	b.n	800636c <_dtoa_r+0x254>
 8006354:	2301      	movs	r3, #1
 8006356:	e7f3      	b.n	8006340 <_dtoa_r+0x228>
 8006358:	2300      	movs	r3, #0
 800635a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800635c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	3301      	adds	r3, #1
 8006364:	2b01      	cmp	r3, #1
 8006366:	9307      	str	r3, [sp, #28]
 8006368:	bfb8      	it	lt
 800636a:	2301      	movlt	r3, #1
 800636c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006370:	2100      	movs	r1, #0
 8006372:	2204      	movs	r2, #4
 8006374:	f102 0514 	add.w	r5, r2, #20
 8006378:	429d      	cmp	r5, r3
 800637a:	d91f      	bls.n	80063bc <_dtoa_r+0x2a4>
 800637c:	6041      	str	r1, [r0, #4]
 800637e:	4658      	mov	r0, fp
 8006380:	f000 fd8e 	bl	8006ea0 <_Balloc>
 8006384:	4682      	mov	sl, r0
 8006386:	2800      	cmp	r0, #0
 8006388:	d13c      	bne.n	8006404 <_dtoa_r+0x2ec>
 800638a:	4b1b      	ldr	r3, [pc, #108]	@ (80063f8 <_dtoa_r+0x2e0>)
 800638c:	4602      	mov	r2, r0
 800638e:	f240 11af 	movw	r1, #431	@ 0x1af
 8006392:	e6d8      	b.n	8006146 <_dtoa_r+0x2e>
 8006394:	2301      	movs	r3, #1
 8006396:	e7e0      	b.n	800635a <_dtoa_r+0x242>
 8006398:	2401      	movs	r4, #1
 800639a:	2300      	movs	r3, #0
 800639c:	9309      	str	r3, [sp, #36]	@ 0x24
 800639e:	940b      	str	r4, [sp, #44]	@ 0x2c
 80063a0:	f04f 33ff 	mov.w	r3, #4294967295
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	9307      	str	r3, [sp, #28]
 80063a8:	2200      	movs	r2, #0
 80063aa:	2312      	movs	r3, #18
 80063ac:	e7d0      	b.n	8006350 <_dtoa_r+0x238>
 80063ae:	2301      	movs	r3, #1
 80063b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063b2:	e7f5      	b.n	80063a0 <_dtoa_r+0x288>
 80063b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063b6:	9300      	str	r3, [sp, #0]
 80063b8:	9307      	str	r3, [sp, #28]
 80063ba:	e7d7      	b.n	800636c <_dtoa_r+0x254>
 80063bc:	3101      	adds	r1, #1
 80063be:	0052      	lsls	r2, r2, #1
 80063c0:	e7d8      	b.n	8006374 <_dtoa_r+0x25c>
 80063c2:	bf00      	nop
 80063c4:	f3af 8000 	nop.w
 80063c8:	636f4361 	.word	0x636f4361
 80063cc:	3fd287a7 	.word	0x3fd287a7
 80063d0:	8b60c8b3 	.word	0x8b60c8b3
 80063d4:	3fc68a28 	.word	0x3fc68a28
 80063d8:	509f79fb 	.word	0x509f79fb
 80063dc:	3fd34413 	.word	0x3fd34413
 80063e0:	0800975a 	.word	0x0800975a
 80063e4:	08009771 	.word	0x08009771
 80063e8:	7ff00000 	.word	0x7ff00000
 80063ec:	08009725 	.word	0x08009725
 80063f0:	3ff80000 	.word	0x3ff80000
 80063f4:	08009868 	.word	0x08009868
 80063f8:	080097c9 	.word	0x080097c9
 80063fc:	08009756 	.word	0x08009756
 8006400:	08009724 	.word	0x08009724
 8006404:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006408:	6018      	str	r0, [r3, #0]
 800640a:	9b07      	ldr	r3, [sp, #28]
 800640c:	2b0e      	cmp	r3, #14
 800640e:	f200 80a4 	bhi.w	800655a <_dtoa_r+0x442>
 8006412:	2c00      	cmp	r4, #0
 8006414:	f000 80a1 	beq.w	800655a <_dtoa_r+0x442>
 8006418:	2f00      	cmp	r7, #0
 800641a:	dd33      	ble.n	8006484 <_dtoa_r+0x36c>
 800641c:	4bad      	ldr	r3, [pc, #692]	@ (80066d4 <_dtoa_r+0x5bc>)
 800641e:	f007 020f 	and.w	r2, r7, #15
 8006422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006426:	ed93 7b00 	vldr	d7, [r3]
 800642a:	05f8      	lsls	r0, r7, #23
 800642c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006430:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006434:	d516      	bpl.n	8006464 <_dtoa_r+0x34c>
 8006436:	4ba8      	ldr	r3, [pc, #672]	@ (80066d8 <_dtoa_r+0x5c0>)
 8006438:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800643c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006440:	f7fa fa04 	bl	800084c <__aeabi_ddiv>
 8006444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006448:	f004 040f 	and.w	r4, r4, #15
 800644c:	2603      	movs	r6, #3
 800644e:	4da2      	ldr	r5, [pc, #648]	@ (80066d8 <_dtoa_r+0x5c0>)
 8006450:	b954      	cbnz	r4, 8006468 <_dtoa_r+0x350>
 8006452:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006456:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800645a:	f7fa f9f7 	bl	800084c <__aeabi_ddiv>
 800645e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006462:	e028      	b.n	80064b6 <_dtoa_r+0x39e>
 8006464:	2602      	movs	r6, #2
 8006466:	e7f2      	b.n	800644e <_dtoa_r+0x336>
 8006468:	07e1      	lsls	r1, r4, #31
 800646a:	d508      	bpl.n	800647e <_dtoa_r+0x366>
 800646c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006470:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006474:	f7fa f8c0 	bl	80005f8 <__aeabi_dmul>
 8006478:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800647c:	3601      	adds	r6, #1
 800647e:	1064      	asrs	r4, r4, #1
 8006480:	3508      	adds	r5, #8
 8006482:	e7e5      	b.n	8006450 <_dtoa_r+0x338>
 8006484:	f000 80d2 	beq.w	800662c <_dtoa_r+0x514>
 8006488:	427c      	negs	r4, r7
 800648a:	4b92      	ldr	r3, [pc, #584]	@ (80066d4 <_dtoa_r+0x5bc>)
 800648c:	4d92      	ldr	r5, [pc, #584]	@ (80066d8 <_dtoa_r+0x5c0>)
 800648e:	f004 020f 	and.w	r2, r4, #15
 8006492:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800649e:	f7fa f8ab 	bl	80005f8 <__aeabi_dmul>
 80064a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a6:	1124      	asrs	r4, r4, #4
 80064a8:	2300      	movs	r3, #0
 80064aa:	2602      	movs	r6, #2
 80064ac:	2c00      	cmp	r4, #0
 80064ae:	f040 80b2 	bne.w	8006616 <_dtoa_r+0x4fe>
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1d3      	bne.n	800645e <_dtoa_r+0x346>
 80064b6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80064b8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	f000 80b7 	beq.w	8006630 <_dtoa_r+0x518>
 80064c2:	4b86      	ldr	r3, [pc, #536]	@ (80066dc <_dtoa_r+0x5c4>)
 80064c4:	2200      	movs	r2, #0
 80064c6:	4620      	mov	r0, r4
 80064c8:	4629      	mov	r1, r5
 80064ca:	f7fa fb07 	bl	8000adc <__aeabi_dcmplt>
 80064ce:	2800      	cmp	r0, #0
 80064d0:	f000 80ae 	beq.w	8006630 <_dtoa_r+0x518>
 80064d4:	9b07      	ldr	r3, [sp, #28]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 80aa 	beq.w	8006630 <_dtoa_r+0x518>
 80064dc:	9b00      	ldr	r3, [sp, #0]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	dd37      	ble.n	8006552 <_dtoa_r+0x43a>
 80064e2:	1e7b      	subs	r3, r7, #1
 80064e4:	9304      	str	r3, [sp, #16]
 80064e6:	4620      	mov	r0, r4
 80064e8:	4b7d      	ldr	r3, [pc, #500]	@ (80066e0 <_dtoa_r+0x5c8>)
 80064ea:	2200      	movs	r2, #0
 80064ec:	4629      	mov	r1, r5
 80064ee:	f7fa f883 	bl	80005f8 <__aeabi_dmul>
 80064f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064f6:	9c00      	ldr	r4, [sp, #0]
 80064f8:	3601      	adds	r6, #1
 80064fa:	4630      	mov	r0, r6
 80064fc:	f7fa f812 	bl	8000524 <__aeabi_i2d>
 8006500:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006504:	f7fa f878 	bl	80005f8 <__aeabi_dmul>
 8006508:	4b76      	ldr	r3, [pc, #472]	@ (80066e4 <_dtoa_r+0x5cc>)
 800650a:	2200      	movs	r2, #0
 800650c:	f7f9 febe 	bl	800028c <__adddf3>
 8006510:	4605      	mov	r5, r0
 8006512:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006516:	2c00      	cmp	r4, #0
 8006518:	f040 808d 	bne.w	8006636 <_dtoa_r+0x51e>
 800651c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006520:	4b71      	ldr	r3, [pc, #452]	@ (80066e8 <_dtoa_r+0x5d0>)
 8006522:	2200      	movs	r2, #0
 8006524:	f7f9 feb0 	bl	8000288 <__aeabi_dsub>
 8006528:	4602      	mov	r2, r0
 800652a:	460b      	mov	r3, r1
 800652c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006530:	462a      	mov	r2, r5
 8006532:	4633      	mov	r3, r6
 8006534:	f7fa faf0 	bl	8000b18 <__aeabi_dcmpgt>
 8006538:	2800      	cmp	r0, #0
 800653a:	f040 828b 	bne.w	8006a54 <_dtoa_r+0x93c>
 800653e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006542:	462a      	mov	r2, r5
 8006544:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006548:	f7fa fac8 	bl	8000adc <__aeabi_dcmplt>
 800654c:	2800      	cmp	r0, #0
 800654e:	f040 8128 	bne.w	80067a2 <_dtoa_r+0x68a>
 8006552:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006556:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800655a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800655c:	2b00      	cmp	r3, #0
 800655e:	f2c0 815a 	blt.w	8006816 <_dtoa_r+0x6fe>
 8006562:	2f0e      	cmp	r7, #14
 8006564:	f300 8157 	bgt.w	8006816 <_dtoa_r+0x6fe>
 8006568:	4b5a      	ldr	r3, [pc, #360]	@ (80066d4 <_dtoa_r+0x5bc>)
 800656a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800656e:	ed93 7b00 	vldr	d7, [r3]
 8006572:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006574:	2b00      	cmp	r3, #0
 8006576:	ed8d 7b00 	vstr	d7, [sp]
 800657a:	da03      	bge.n	8006584 <_dtoa_r+0x46c>
 800657c:	9b07      	ldr	r3, [sp, #28]
 800657e:	2b00      	cmp	r3, #0
 8006580:	f340 8101 	ble.w	8006786 <_dtoa_r+0x66e>
 8006584:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006588:	4656      	mov	r6, sl
 800658a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800658e:	4620      	mov	r0, r4
 8006590:	4629      	mov	r1, r5
 8006592:	f7fa f95b 	bl	800084c <__aeabi_ddiv>
 8006596:	f7fa fadf 	bl	8000b58 <__aeabi_d2iz>
 800659a:	4680      	mov	r8, r0
 800659c:	f7f9 ffc2 	bl	8000524 <__aeabi_i2d>
 80065a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065a4:	f7fa f828 	bl	80005f8 <__aeabi_dmul>
 80065a8:	4602      	mov	r2, r0
 80065aa:	460b      	mov	r3, r1
 80065ac:	4620      	mov	r0, r4
 80065ae:	4629      	mov	r1, r5
 80065b0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80065b4:	f7f9 fe68 	bl	8000288 <__aeabi_dsub>
 80065b8:	f806 4b01 	strb.w	r4, [r6], #1
 80065bc:	9d07      	ldr	r5, [sp, #28]
 80065be:	eba6 040a 	sub.w	r4, r6, sl
 80065c2:	42a5      	cmp	r5, r4
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	f040 8117 	bne.w	80067fa <_dtoa_r+0x6e2>
 80065cc:	f7f9 fe5e 	bl	800028c <__adddf3>
 80065d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065d4:	4604      	mov	r4, r0
 80065d6:	460d      	mov	r5, r1
 80065d8:	f7fa fa9e 	bl	8000b18 <__aeabi_dcmpgt>
 80065dc:	2800      	cmp	r0, #0
 80065de:	f040 80f9 	bne.w	80067d4 <_dtoa_r+0x6bc>
 80065e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065e6:	4620      	mov	r0, r4
 80065e8:	4629      	mov	r1, r5
 80065ea:	f7fa fa6d 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ee:	b118      	cbz	r0, 80065f8 <_dtoa_r+0x4e0>
 80065f0:	f018 0f01 	tst.w	r8, #1
 80065f4:	f040 80ee 	bne.w	80067d4 <_dtoa_r+0x6bc>
 80065f8:	4649      	mov	r1, r9
 80065fa:	4658      	mov	r0, fp
 80065fc:	f000 fc90 	bl	8006f20 <_Bfree>
 8006600:	2300      	movs	r3, #0
 8006602:	7033      	strb	r3, [r6, #0]
 8006604:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006606:	3701      	adds	r7, #1
 8006608:	601f      	str	r7, [r3, #0]
 800660a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800660c:	2b00      	cmp	r3, #0
 800660e:	f000 831d 	beq.w	8006c4c <_dtoa_r+0xb34>
 8006612:	601e      	str	r6, [r3, #0]
 8006614:	e31a      	b.n	8006c4c <_dtoa_r+0xb34>
 8006616:	07e2      	lsls	r2, r4, #31
 8006618:	d505      	bpl.n	8006626 <_dtoa_r+0x50e>
 800661a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800661e:	f7f9 ffeb 	bl	80005f8 <__aeabi_dmul>
 8006622:	3601      	adds	r6, #1
 8006624:	2301      	movs	r3, #1
 8006626:	1064      	asrs	r4, r4, #1
 8006628:	3508      	adds	r5, #8
 800662a:	e73f      	b.n	80064ac <_dtoa_r+0x394>
 800662c:	2602      	movs	r6, #2
 800662e:	e742      	b.n	80064b6 <_dtoa_r+0x39e>
 8006630:	9c07      	ldr	r4, [sp, #28]
 8006632:	9704      	str	r7, [sp, #16]
 8006634:	e761      	b.n	80064fa <_dtoa_r+0x3e2>
 8006636:	4b27      	ldr	r3, [pc, #156]	@ (80066d4 <_dtoa_r+0x5bc>)
 8006638:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800663a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800663e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006642:	4454      	add	r4, sl
 8006644:	2900      	cmp	r1, #0
 8006646:	d053      	beq.n	80066f0 <_dtoa_r+0x5d8>
 8006648:	4928      	ldr	r1, [pc, #160]	@ (80066ec <_dtoa_r+0x5d4>)
 800664a:	2000      	movs	r0, #0
 800664c:	f7fa f8fe 	bl	800084c <__aeabi_ddiv>
 8006650:	4633      	mov	r3, r6
 8006652:	462a      	mov	r2, r5
 8006654:	f7f9 fe18 	bl	8000288 <__aeabi_dsub>
 8006658:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800665c:	4656      	mov	r6, sl
 800665e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006662:	f7fa fa79 	bl	8000b58 <__aeabi_d2iz>
 8006666:	4605      	mov	r5, r0
 8006668:	f7f9 ff5c 	bl	8000524 <__aeabi_i2d>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006674:	f7f9 fe08 	bl	8000288 <__aeabi_dsub>
 8006678:	3530      	adds	r5, #48	@ 0x30
 800667a:	4602      	mov	r2, r0
 800667c:	460b      	mov	r3, r1
 800667e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006682:	f806 5b01 	strb.w	r5, [r6], #1
 8006686:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800668a:	f7fa fa27 	bl	8000adc <__aeabi_dcmplt>
 800668e:	2800      	cmp	r0, #0
 8006690:	d171      	bne.n	8006776 <_dtoa_r+0x65e>
 8006692:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006696:	4911      	ldr	r1, [pc, #68]	@ (80066dc <_dtoa_r+0x5c4>)
 8006698:	2000      	movs	r0, #0
 800669a:	f7f9 fdf5 	bl	8000288 <__aeabi_dsub>
 800669e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066a2:	f7fa fa1b 	bl	8000adc <__aeabi_dcmplt>
 80066a6:	2800      	cmp	r0, #0
 80066a8:	f040 8095 	bne.w	80067d6 <_dtoa_r+0x6be>
 80066ac:	42a6      	cmp	r6, r4
 80066ae:	f43f af50 	beq.w	8006552 <_dtoa_r+0x43a>
 80066b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066b6:	4b0a      	ldr	r3, [pc, #40]	@ (80066e0 <_dtoa_r+0x5c8>)
 80066b8:	2200      	movs	r2, #0
 80066ba:	f7f9 ff9d 	bl	80005f8 <__aeabi_dmul>
 80066be:	4b08      	ldr	r3, [pc, #32]	@ (80066e0 <_dtoa_r+0x5c8>)
 80066c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066c4:	2200      	movs	r2, #0
 80066c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ca:	f7f9 ff95 	bl	80005f8 <__aeabi_dmul>
 80066ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066d2:	e7c4      	b.n	800665e <_dtoa_r+0x546>
 80066d4:	08009868 	.word	0x08009868
 80066d8:	08009840 	.word	0x08009840
 80066dc:	3ff00000 	.word	0x3ff00000
 80066e0:	40240000 	.word	0x40240000
 80066e4:	401c0000 	.word	0x401c0000
 80066e8:	40140000 	.word	0x40140000
 80066ec:	3fe00000 	.word	0x3fe00000
 80066f0:	4631      	mov	r1, r6
 80066f2:	4628      	mov	r0, r5
 80066f4:	f7f9 ff80 	bl	80005f8 <__aeabi_dmul>
 80066f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066fc:	9415      	str	r4, [sp, #84]	@ 0x54
 80066fe:	4656      	mov	r6, sl
 8006700:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006704:	f7fa fa28 	bl	8000b58 <__aeabi_d2iz>
 8006708:	4605      	mov	r5, r0
 800670a:	f7f9 ff0b 	bl	8000524 <__aeabi_i2d>
 800670e:	4602      	mov	r2, r0
 8006710:	460b      	mov	r3, r1
 8006712:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006716:	f7f9 fdb7 	bl	8000288 <__aeabi_dsub>
 800671a:	3530      	adds	r5, #48	@ 0x30
 800671c:	f806 5b01 	strb.w	r5, [r6], #1
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	42a6      	cmp	r6, r4
 8006726:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	d124      	bne.n	800677a <_dtoa_r+0x662>
 8006730:	4bac      	ldr	r3, [pc, #688]	@ (80069e4 <_dtoa_r+0x8cc>)
 8006732:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006736:	f7f9 fda9 	bl	800028c <__adddf3>
 800673a:	4602      	mov	r2, r0
 800673c:	460b      	mov	r3, r1
 800673e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006742:	f7fa f9e9 	bl	8000b18 <__aeabi_dcmpgt>
 8006746:	2800      	cmp	r0, #0
 8006748:	d145      	bne.n	80067d6 <_dtoa_r+0x6be>
 800674a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800674e:	49a5      	ldr	r1, [pc, #660]	@ (80069e4 <_dtoa_r+0x8cc>)
 8006750:	2000      	movs	r0, #0
 8006752:	f7f9 fd99 	bl	8000288 <__aeabi_dsub>
 8006756:	4602      	mov	r2, r0
 8006758:	460b      	mov	r3, r1
 800675a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800675e:	f7fa f9bd 	bl	8000adc <__aeabi_dcmplt>
 8006762:	2800      	cmp	r0, #0
 8006764:	f43f aef5 	beq.w	8006552 <_dtoa_r+0x43a>
 8006768:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800676a:	1e73      	subs	r3, r6, #1
 800676c:	9315      	str	r3, [sp, #84]	@ 0x54
 800676e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006772:	2b30      	cmp	r3, #48	@ 0x30
 8006774:	d0f8      	beq.n	8006768 <_dtoa_r+0x650>
 8006776:	9f04      	ldr	r7, [sp, #16]
 8006778:	e73e      	b.n	80065f8 <_dtoa_r+0x4e0>
 800677a:	4b9b      	ldr	r3, [pc, #620]	@ (80069e8 <_dtoa_r+0x8d0>)
 800677c:	f7f9 ff3c 	bl	80005f8 <__aeabi_dmul>
 8006780:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006784:	e7bc      	b.n	8006700 <_dtoa_r+0x5e8>
 8006786:	d10c      	bne.n	80067a2 <_dtoa_r+0x68a>
 8006788:	4b98      	ldr	r3, [pc, #608]	@ (80069ec <_dtoa_r+0x8d4>)
 800678a:	2200      	movs	r2, #0
 800678c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006790:	f7f9 ff32 	bl	80005f8 <__aeabi_dmul>
 8006794:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006798:	f7fa f9b4 	bl	8000b04 <__aeabi_dcmpge>
 800679c:	2800      	cmp	r0, #0
 800679e:	f000 8157 	beq.w	8006a50 <_dtoa_r+0x938>
 80067a2:	2400      	movs	r4, #0
 80067a4:	4625      	mov	r5, r4
 80067a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067a8:	43db      	mvns	r3, r3
 80067aa:	9304      	str	r3, [sp, #16]
 80067ac:	4656      	mov	r6, sl
 80067ae:	2700      	movs	r7, #0
 80067b0:	4621      	mov	r1, r4
 80067b2:	4658      	mov	r0, fp
 80067b4:	f000 fbb4 	bl	8006f20 <_Bfree>
 80067b8:	2d00      	cmp	r5, #0
 80067ba:	d0dc      	beq.n	8006776 <_dtoa_r+0x65e>
 80067bc:	b12f      	cbz	r7, 80067ca <_dtoa_r+0x6b2>
 80067be:	42af      	cmp	r7, r5
 80067c0:	d003      	beq.n	80067ca <_dtoa_r+0x6b2>
 80067c2:	4639      	mov	r1, r7
 80067c4:	4658      	mov	r0, fp
 80067c6:	f000 fbab 	bl	8006f20 <_Bfree>
 80067ca:	4629      	mov	r1, r5
 80067cc:	4658      	mov	r0, fp
 80067ce:	f000 fba7 	bl	8006f20 <_Bfree>
 80067d2:	e7d0      	b.n	8006776 <_dtoa_r+0x65e>
 80067d4:	9704      	str	r7, [sp, #16]
 80067d6:	4633      	mov	r3, r6
 80067d8:	461e      	mov	r6, r3
 80067da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067de:	2a39      	cmp	r2, #57	@ 0x39
 80067e0:	d107      	bne.n	80067f2 <_dtoa_r+0x6da>
 80067e2:	459a      	cmp	sl, r3
 80067e4:	d1f8      	bne.n	80067d8 <_dtoa_r+0x6c0>
 80067e6:	9a04      	ldr	r2, [sp, #16]
 80067e8:	3201      	adds	r2, #1
 80067ea:	9204      	str	r2, [sp, #16]
 80067ec:	2230      	movs	r2, #48	@ 0x30
 80067ee:	f88a 2000 	strb.w	r2, [sl]
 80067f2:	781a      	ldrb	r2, [r3, #0]
 80067f4:	3201      	adds	r2, #1
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	e7bd      	b.n	8006776 <_dtoa_r+0x65e>
 80067fa:	4b7b      	ldr	r3, [pc, #492]	@ (80069e8 <_dtoa_r+0x8d0>)
 80067fc:	2200      	movs	r2, #0
 80067fe:	f7f9 fefb 	bl	80005f8 <__aeabi_dmul>
 8006802:	2200      	movs	r2, #0
 8006804:	2300      	movs	r3, #0
 8006806:	4604      	mov	r4, r0
 8006808:	460d      	mov	r5, r1
 800680a:	f7fa f95d 	bl	8000ac8 <__aeabi_dcmpeq>
 800680e:	2800      	cmp	r0, #0
 8006810:	f43f aebb 	beq.w	800658a <_dtoa_r+0x472>
 8006814:	e6f0      	b.n	80065f8 <_dtoa_r+0x4e0>
 8006816:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006818:	2a00      	cmp	r2, #0
 800681a:	f000 80db 	beq.w	80069d4 <_dtoa_r+0x8bc>
 800681e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006820:	2a01      	cmp	r2, #1
 8006822:	f300 80bf 	bgt.w	80069a4 <_dtoa_r+0x88c>
 8006826:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006828:	2a00      	cmp	r2, #0
 800682a:	f000 80b7 	beq.w	800699c <_dtoa_r+0x884>
 800682e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006832:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006834:	4646      	mov	r6, r8
 8006836:	9a08      	ldr	r2, [sp, #32]
 8006838:	2101      	movs	r1, #1
 800683a:	441a      	add	r2, r3
 800683c:	4658      	mov	r0, fp
 800683e:	4498      	add	r8, r3
 8006840:	9208      	str	r2, [sp, #32]
 8006842:	f000 fc6b 	bl	800711c <__i2b>
 8006846:	4605      	mov	r5, r0
 8006848:	b15e      	cbz	r6, 8006862 <_dtoa_r+0x74a>
 800684a:	9b08      	ldr	r3, [sp, #32]
 800684c:	2b00      	cmp	r3, #0
 800684e:	dd08      	ble.n	8006862 <_dtoa_r+0x74a>
 8006850:	42b3      	cmp	r3, r6
 8006852:	9a08      	ldr	r2, [sp, #32]
 8006854:	bfa8      	it	ge
 8006856:	4633      	movge	r3, r6
 8006858:	eba8 0803 	sub.w	r8, r8, r3
 800685c:	1af6      	subs	r6, r6, r3
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	9308      	str	r3, [sp, #32]
 8006862:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006864:	b1f3      	cbz	r3, 80068a4 <_dtoa_r+0x78c>
 8006866:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 80b7 	beq.w	80069dc <_dtoa_r+0x8c4>
 800686e:	b18c      	cbz	r4, 8006894 <_dtoa_r+0x77c>
 8006870:	4629      	mov	r1, r5
 8006872:	4622      	mov	r2, r4
 8006874:	4658      	mov	r0, fp
 8006876:	f000 fd11 	bl	800729c <__pow5mult>
 800687a:	464a      	mov	r2, r9
 800687c:	4601      	mov	r1, r0
 800687e:	4605      	mov	r5, r0
 8006880:	4658      	mov	r0, fp
 8006882:	f000 fc61 	bl	8007148 <__multiply>
 8006886:	4649      	mov	r1, r9
 8006888:	9004      	str	r0, [sp, #16]
 800688a:	4658      	mov	r0, fp
 800688c:	f000 fb48 	bl	8006f20 <_Bfree>
 8006890:	9b04      	ldr	r3, [sp, #16]
 8006892:	4699      	mov	r9, r3
 8006894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006896:	1b1a      	subs	r2, r3, r4
 8006898:	d004      	beq.n	80068a4 <_dtoa_r+0x78c>
 800689a:	4649      	mov	r1, r9
 800689c:	4658      	mov	r0, fp
 800689e:	f000 fcfd 	bl	800729c <__pow5mult>
 80068a2:	4681      	mov	r9, r0
 80068a4:	2101      	movs	r1, #1
 80068a6:	4658      	mov	r0, fp
 80068a8:	f000 fc38 	bl	800711c <__i2b>
 80068ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068ae:	4604      	mov	r4, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	f000 81cf 	beq.w	8006c54 <_dtoa_r+0xb3c>
 80068b6:	461a      	mov	r2, r3
 80068b8:	4601      	mov	r1, r0
 80068ba:	4658      	mov	r0, fp
 80068bc:	f000 fcee 	bl	800729c <__pow5mult>
 80068c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	4604      	mov	r4, r0
 80068c6:	f300 8095 	bgt.w	80069f4 <_dtoa_r+0x8dc>
 80068ca:	9b02      	ldr	r3, [sp, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f040 8087 	bne.w	80069e0 <_dtoa_r+0x8c8>
 80068d2:	9b03      	ldr	r3, [sp, #12]
 80068d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068d8:	2b00      	cmp	r3, #0
 80068da:	f040 8089 	bne.w	80069f0 <_dtoa_r+0x8d8>
 80068de:	9b03      	ldr	r3, [sp, #12]
 80068e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068e4:	0d1b      	lsrs	r3, r3, #20
 80068e6:	051b      	lsls	r3, r3, #20
 80068e8:	b12b      	cbz	r3, 80068f6 <_dtoa_r+0x7de>
 80068ea:	9b08      	ldr	r3, [sp, #32]
 80068ec:	3301      	adds	r3, #1
 80068ee:	9308      	str	r3, [sp, #32]
 80068f0:	f108 0801 	add.w	r8, r8, #1
 80068f4:	2301      	movs	r3, #1
 80068f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80068f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	f000 81b0 	beq.w	8006c60 <_dtoa_r+0xb48>
 8006900:	6923      	ldr	r3, [r4, #16]
 8006902:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006906:	6918      	ldr	r0, [r3, #16]
 8006908:	f000 fbbc 	bl	8007084 <__hi0bits>
 800690c:	f1c0 0020 	rsb	r0, r0, #32
 8006910:	9b08      	ldr	r3, [sp, #32]
 8006912:	4418      	add	r0, r3
 8006914:	f010 001f 	ands.w	r0, r0, #31
 8006918:	d077      	beq.n	8006a0a <_dtoa_r+0x8f2>
 800691a:	f1c0 0320 	rsb	r3, r0, #32
 800691e:	2b04      	cmp	r3, #4
 8006920:	dd6b      	ble.n	80069fa <_dtoa_r+0x8e2>
 8006922:	9b08      	ldr	r3, [sp, #32]
 8006924:	f1c0 001c 	rsb	r0, r0, #28
 8006928:	4403      	add	r3, r0
 800692a:	4480      	add	r8, r0
 800692c:	4406      	add	r6, r0
 800692e:	9308      	str	r3, [sp, #32]
 8006930:	f1b8 0f00 	cmp.w	r8, #0
 8006934:	dd05      	ble.n	8006942 <_dtoa_r+0x82a>
 8006936:	4649      	mov	r1, r9
 8006938:	4642      	mov	r2, r8
 800693a:	4658      	mov	r0, fp
 800693c:	f000 fd08 	bl	8007350 <__lshift>
 8006940:	4681      	mov	r9, r0
 8006942:	9b08      	ldr	r3, [sp, #32]
 8006944:	2b00      	cmp	r3, #0
 8006946:	dd05      	ble.n	8006954 <_dtoa_r+0x83c>
 8006948:	4621      	mov	r1, r4
 800694a:	461a      	mov	r2, r3
 800694c:	4658      	mov	r0, fp
 800694e:	f000 fcff 	bl	8007350 <__lshift>
 8006952:	4604      	mov	r4, r0
 8006954:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006956:	2b00      	cmp	r3, #0
 8006958:	d059      	beq.n	8006a0e <_dtoa_r+0x8f6>
 800695a:	4621      	mov	r1, r4
 800695c:	4648      	mov	r0, r9
 800695e:	f000 fd63 	bl	8007428 <__mcmp>
 8006962:	2800      	cmp	r0, #0
 8006964:	da53      	bge.n	8006a0e <_dtoa_r+0x8f6>
 8006966:	1e7b      	subs	r3, r7, #1
 8006968:	9304      	str	r3, [sp, #16]
 800696a:	4649      	mov	r1, r9
 800696c:	2300      	movs	r3, #0
 800696e:	220a      	movs	r2, #10
 8006970:	4658      	mov	r0, fp
 8006972:	f000 faf7 	bl	8006f64 <__multadd>
 8006976:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006978:	4681      	mov	r9, r0
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 8172 	beq.w	8006c64 <_dtoa_r+0xb4c>
 8006980:	2300      	movs	r3, #0
 8006982:	4629      	mov	r1, r5
 8006984:	220a      	movs	r2, #10
 8006986:	4658      	mov	r0, fp
 8006988:	f000 faec 	bl	8006f64 <__multadd>
 800698c:	9b00      	ldr	r3, [sp, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	4605      	mov	r5, r0
 8006992:	dc67      	bgt.n	8006a64 <_dtoa_r+0x94c>
 8006994:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006996:	2b02      	cmp	r3, #2
 8006998:	dc41      	bgt.n	8006a1e <_dtoa_r+0x906>
 800699a:	e063      	b.n	8006a64 <_dtoa_r+0x94c>
 800699c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800699e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80069a2:	e746      	b.n	8006832 <_dtoa_r+0x71a>
 80069a4:	9b07      	ldr	r3, [sp, #28]
 80069a6:	1e5c      	subs	r4, r3, #1
 80069a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069aa:	42a3      	cmp	r3, r4
 80069ac:	bfbf      	itttt	lt
 80069ae:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80069b0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80069b2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80069b4:	1ae3      	sublt	r3, r4, r3
 80069b6:	bfb4      	ite	lt
 80069b8:	18d2      	addlt	r2, r2, r3
 80069ba:	1b1c      	subge	r4, r3, r4
 80069bc:	9b07      	ldr	r3, [sp, #28]
 80069be:	bfbc      	itt	lt
 80069c0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80069c2:	2400      	movlt	r4, #0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	bfb5      	itete	lt
 80069c8:	eba8 0603 	sublt.w	r6, r8, r3
 80069cc:	9b07      	ldrge	r3, [sp, #28]
 80069ce:	2300      	movlt	r3, #0
 80069d0:	4646      	movge	r6, r8
 80069d2:	e730      	b.n	8006836 <_dtoa_r+0x71e>
 80069d4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80069d6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80069d8:	4646      	mov	r6, r8
 80069da:	e735      	b.n	8006848 <_dtoa_r+0x730>
 80069dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069de:	e75c      	b.n	800689a <_dtoa_r+0x782>
 80069e0:	2300      	movs	r3, #0
 80069e2:	e788      	b.n	80068f6 <_dtoa_r+0x7de>
 80069e4:	3fe00000 	.word	0x3fe00000
 80069e8:	40240000 	.word	0x40240000
 80069ec:	40140000 	.word	0x40140000
 80069f0:	9b02      	ldr	r3, [sp, #8]
 80069f2:	e780      	b.n	80068f6 <_dtoa_r+0x7de>
 80069f4:	2300      	movs	r3, #0
 80069f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80069f8:	e782      	b.n	8006900 <_dtoa_r+0x7e8>
 80069fa:	d099      	beq.n	8006930 <_dtoa_r+0x818>
 80069fc:	9a08      	ldr	r2, [sp, #32]
 80069fe:	331c      	adds	r3, #28
 8006a00:	441a      	add	r2, r3
 8006a02:	4498      	add	r8, r3
 8006a04:	441e      	add	r6, r3
 8006a06:	9208      	str	r2, [sp, #32]
 8006a08:	e792      	b.n	8006930 <_dtoa_r+0x818>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	e7f6      	b.n	80069fc <_dtoa_r+0x8e4>
 8006a0e:	9b07      	ldr	r3, [sp, #28]
 8006a10:	9704      	str	r7, [sp, #16]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	dc20      	bgt.n	8006a58 <_dtoa_r+0x940>
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	dd1e      	ble.n	8006a5c <_dtoa_r+0x944>
 8006a1e:	9b00      	ldr	r3, [sp, #0]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f47f aec0 	bne.w	80067a6 <_dtoa_r+0x68e>
 8006a26:	4621      	mov	r1, r4
 8006a28:	2205      	movs	r2, #5
 8006a2a:	4658      	mov	r0, fp
 8006a2c:	f000 fa9a 	bl	8006f64 <__multadd>
 8006a30:	4601      	mov	r1, r0
 8006a32:	4604      	mov	r4, r0
 8006a34:	4648      	mov	r0, r9
 8006a36:	f000 fcf7 	bl	8007428 <__mcmp>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	f77f aeb3 	ble.w	80067a6 <_dtoa_r+0x68e>
 8006a40:	4656      	mov	r6, sl
 8006a42:	2331      	movs	r3, #49	@ 0x31
 8006a44:	f806 3b01 	strb.w	r3, [r6], #1
 8006a48:	9b04      	ldr	r3, [sp, #16]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	9304      	str	r3, [sp, #16]
 8006a4e:	e6ae      	b.n	80067ae <_dtoa_r+0x696>
 8006a50:	9c07      	ldr	r4, [sp, #28]
 8006a52:	9704      	str	r7, [sp, #16]
 8006a54:	4625      	mov	r5, r4
 8006a56:	e7f3      	b.n	8006a40 <_dtoa_r+0x928>
 8006a58:	9b07      	ldr	r3, [sp, #28]
 8006a5a:	9300      	str	r3, [sp, #0]
 8006a5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f000 8104 	beq.w	8006c6c <_dtoa_r+0xb54>
 8006a64:	2e00      	cmp	r6, #0
 8006a66:	dd05      	ble.n	8006a74 <_dtoa_r+0x95c>
 8006a68:	4629      	mov	r1, r5
 8006a6a:	4632      	mov	r2, r6
 8006a6c:	4658      	mov	r0, fp
 8006a6e:	f000 fc6f 	bl	8007350 <__lshift>
 8006a72:	4605      	mov	r5, r0
 8006a74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d05a      	beq.n	8006b30 <_dtoa_r+0xa18>
 8006a7a:	6869      	ldr	r1, [r5, #4]
 8006a7c:	4658      	mov	r0, fp
 8006a7e:	f000 fa0f 	bl	8006ea0 <_Balloc>
 8006a82:	4606      	mov	r6, r0
 8006a84:	b928      	cbnz	r0, 8006a92 <_dtoa_r+0x97a>
 8006a86:	4b84      	ldr	r3, [pc, #528]	@ (8006c98 <_dtoa_r+0xb80>)
 8006a88:	4602      	mov	r2, r0
 8006a8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a8e:	f7ff bb5a 	b.w	8006146 <_dtoa_r+0x2e>
 8006a92:	692a      	ldr	r2, [r5, #16]
 8006a94:	3202      	adds	r2, #2
 8006a96:	0092      	lsls	r2, r2, #2
 8006a98:	f105 010c 	add.w	r1, r5, #12
 8006a9c:	300c      	adds	r0, #12
 8006a9e:	f001 ff75 	bl	800898c <memcpy>
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	4631      	mov	r1, r6
 8006aa6:	4658      	mov	r0, fp
 8006aa8:	f000 fc52 	bl	8007350 <__lshift>
 8006aac:	f10a 0301 	add.w	r3, sl, #1
 8006ab0:	9307      	str	r3, [sp, #28]
 8006ab2:	9b00      	ldr	r3, [sp, #0]
 8006ab4:	4453      	add	r3, sl
 8006ab6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ab8:	9b02      	ldr	r3, [sp, #8]
 8006aba:	f003 0301 	and.w	r3, r3, #1
 8006abe:	462f      	mov	r7, r5
 8006ac0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	9b07      	ldr	r3, [sp, #28]
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	4648      	mov	r0, r9
 8006acc:	9300      	str	r3, [sp, #0]
 8006ace:	f7ff fa9b 	bl	8006008 <quorem>
 8006ad2:	4639      	mov	r1, r7
 8006ad4:	9002      	str	r0, [sp, #8]
 8006ad6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ada:	4648      	mov	r0, r9
 8006adc:	f000 fca4 	bl	8007428 <__mcmp>
 8006ae0:	462a      	mov	r2, r5
 8006ae2:	9008      	str	r0, [sp, #32]
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	4658      	mov	r0, fp
 8006ae8:	f000 fcba 	bl	8007460 <__mdiff>
 8006aec:	68c2      	ldr	r2, [r0, #12]
 8006aee:	4606      	mov	r6, r0
 8006af0:	bb02      	cbnz	r2, 8006b34 <_dtoa_r+0xa1c>
 8006af2:	4601      	mov	r1, r0
 8006af4:	4648      	mov	r0, r9
 8006af6:	f000 fc97 	bl	8007428 <__mcmp>
 8006afa:	4602      	mov	r2, r0
 8006afc:	4631      	mov	r1, r6
 8006afe:	4658      	mov	r0, fp
 8006b00:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b02:	f000 fa0d 	bl	8006f20 <_Bfree>
 8006b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b08:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b0a:	9e07      	ldr	r6, [sp, #28]
 8006b0c:	ea43 0102 	orr.w	r1, r3, r2
 8006b10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b12:	4319      	orrs	r1, r3
 8006b14:	d110      	bne.n	8006b38 <_dtoa_r+0xa20>
 8006b16:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b1a:	d029      	beq.n	8006b70 <_dtoa_r+0xa58>
 8006b1c:	9b08      	ldr	r3, [sp, #32]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	dd02      	ble.n	8006b28 <_dtoa_r+0xa10>
 8006b22:	9b02      	ldr	r3, [sp, #8]
 8006b24:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006b28:	9b00      	ldr	r3, [sp, #0]
 8006b2a:	f883 8000 	strb.w	r8, [r3]
 8006b2e:	e63f      	b.n	80067b0 <_dtoa_r+0x698>
 8006b30:	4628      	mov	r0, r5
 8006b32:	e7bb      	b.n	8006aac <_dtoa_r+0x994>
 8006b34:	2201      	movs	r2, #1
 8006b36:	e7e1      	b.n	8006afc <_dtoa_r+0x9e4>
 8006b38:	9b08      	ldr	r3, [sp, #32]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	db04      	blt.n	8006b48 <_dtoa_r+0xa30>
 8006b3e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b40:	430b      	orrs	r3, r1
 8006b42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b44:	430b      	orrs	r3, r1
 8006b46:	d120      	bne.n	8006b8a <_dtoa_r+0xa72>
 8006b48:	2a00      	cmp	r2, #0
 8006b4a:	dded      	ble.n	8006b28 <_dtoa_r+0xa10>
 8006b4c:	4649      	mov	r1, r9
 8006b4e:	2201      	movs	r2, #1
 8006b50:	4658      	mov	r0, fp
 8006b52:	f000 fbfd 	bl	8007350 <__lshift>
 8006b56:	4621      	mov	r1, r4
 8006b58:	4681      	mov	r9, r0
 8006b5a:	f000 fc65 	bl	8007428 <__mcmp>
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	dc03      	bgt.n	8006b6a <_dtoa_r+0xa52>
 8006b62:	d1e1      	bne.n	8006b28 <_dtoa_r+0xa10>
 8006b64:	f018 0f01 	tst.w	r8, #1
 8006b68:	d0de      	beq.n	8006b28 <_dtoa_r+0xa10>
 8006b6a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b6e:	d1d8      	bne.n	8006b22 <_dtoa_r+0xa0a>
 8006b70:	9a00      	ldr	r2, [sp, #0]
 8006b72:	2339      	movs	r3, #57	@ 0x39
 8006b74:	7013      	strb	r3, [r2, #0]
 8006b76:	4633      	mov	r3, r6
 8006b78:	461e      	mov	r6, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b80:	2a39      	cmp	r2, #57	@ 0x39
 8006b82:	d052      	beq.n	8006c2a <_dtoa_r+0xb12>
 8006b84:	3201      	adds	r2, #1
 8006b86:	701a      	strb	r2, [r3, #0]
 8006b88:	e612      	b.n	80067b0 <_dtoa_r+0x698>
 8006b8a:	2a00      	cmp	r2, #0
 8006b8c:	dd07      	ble.n	8006b9e <_dtoa_r+0xa86>
 8006b8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b92:	d0ed      	beq.n	8006b70 <_dtoa_r+0xa58>
 8006b94:	9a00      	ldr	r2, [sp, #0]
 8006b96:	f108 0301 	add.w	r3, r8, #1
 8006b9a:	7013      	strb	r3, [r2, #0]
 8006b9c:	e608      	b.n	80067b0 <_dtoa_r+0x698>
 8006b9e:	9b07      	ldr	r3, [sp, #28]
 8006ba0:	9a07      	ldr	r2, [sp, #28]
 8006ba2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006ba6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d028      	beq.n	8006bfe <_dtoa_r+0xae6>
 8006bac:	4649      	mov	r1, r9
 8006bae:	2300      	movs	r3, #0
 8006bb0:	220a      	movs	r2, #10
 8006bb2:	4658      	mov	r0, fp
 8006bb4:	f000 f9d6 	bl	8006f64 <__multadd>
 8006bb8:	42af      	cmp	r7, r5
 8006bba:	4681      	mov	r9, r0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	f04f 020a 	mov.w	r2, #10
 8006bc4:	4639      	mov	r1, r7
 8006bc6:	4658      	mov	r0, fp
 8006bc8:	d107      	bne.n	8006bda <_dtoa_r+0xac2>
 8006bca:	f000 f9cb 	bl	8006f64 <__multadd>
 8006bce:	4607      	mov	r7, r0
 8006bd0:	4605      	mov	r5, r0
 8006bd2:	9b07      	ldr	r3, [sp, #28]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	9307      	str	r3, [sp, #28]
 8006bd8:	e774      	b.n	8006ac4 <_dtoa_r+0x9ac>
 8006bda:	f000 f9c3 	bl	8006f64 <__multadd>
 8006bde:	4629      	mov	r1, r5
 8006be0:	4607      	mov	r7, r0
 8006be2:	2300      	movs	r3, #0
 8006be4:	220a      	movs	r2, #10
 8006be6:	4658      	mov	r0, fp
 8006be8:	f000 f9bc 	bl	8006f64 <__multadd>
 8006bec:	4605      	mov	r5, r0
 8006bee:	e7f0      	b.n	8006bd2 <_dtoa_r+0xaba>
 8006bf0:	9b00      	ldr	r3, [sp, #0]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	bfcc      	ite	gt
 8006bf6:	461e      	movgt	r6, r3
 8006bf8:	2601      	movle	r6, #1
 8006bfa:	4456      	add	r6, sl
 8006bfc:	2700      	movs	r7, #0
 8006bfe:	4649      	mov	r1, r9
 8006c00:	2201      	movs	r2, #1
 8006c02:	4658      	mov	r0, fp
 8006c04:	f000 fba4 	bl	8007350 <__lshift>
 8006c08:	4621      	mov	r1, r4
 8006c0a:	4681      	mov	r9, r0
 8006c0c:	f000 fc0c 	bl	8007428 <__mcmp>
 8006c10:	2800      	cmp	r0, #0
 8006c12:	dcb0      	bgt.n	8006b76 <_dtoa_r+0xa5e>
 8006c14:	d102      	bne.n	8006c1c <_dtoa_r+0xb04>
 8006c16:	f018 0f01 	tst.w	r8, #1
 8006c1a:	d1ac      	bne.n	8006b76 <_dtoa_r+0xa5e>
 8006c1c:	4633      	mov	r3, r6
 8006c1e:	461e      	mov	r6, r3
 8006c20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c24:	2a30      	cmp	r2, #48	@ 0x30
 8006c26:	d0fa      	beq.n	8006c1e <_dtoa_r+0xb06>
 8006c28:	e5c2      	b.n	80067b0 <_dtoa_r+0x698>
 8006c2a:	459a      	cmp	sl, r3
 8006c2c:	d1a4      	bne.n	8006b78 <_dtoa_r+0xa60>
 8006c2e:	9b04      	ldr	r3, [sp, #16]
 8006c30:	3301      	adds	r3, #1
 8006c32:	9304      	str	r3, [sp, #16]
 8006c34:	2331      	movs	r3, #49	@ 0x31
 8006c36:	f88a 3000 	strb.w	r3, [sl]
 8006c3a:	e5b9      	b.n	80067b0 <_dtoa_r+0x698>
 8006c3c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c3e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006c9c <_dtoa_r+0xb84>
 8006c42:	b11b      	cbz	r3, 8006c4c <_dtoa_r+0xb34>
 8006c44:	f10a 0308 	add.w	r3, sl, #8
 8006c48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c4a:	6013      	str	r3, [r2, #0]
 8006c4c:	4650      	mov	r0, sl
 8006c4e:	b019      	add	sp, #100	@ 0x64
 8006c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	f77f ae37 	ble.w	80068ca <_dtoa_r+0x7b2>
 8006c5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c5e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c60:	2001      	movs	r0, #1
 8006c62:	e655      	b.n	8006910 <_dtoa_r+0x7f8>
 8006c64:	9b00      	ldr	r3, [sp, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f77f aed6 	ble.w	8006a18 <_dtoa_r+0x900>
 8006c6c:	4656      	mov	r6, sl
 8006c6e:	4621      	mov	r1, r4
 8006c70:	4648      	mov	r0, r9
 8006c72:	f7ff f9c9 	bl	8006008 <quorem>
 8006c76:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006c7a:	f806 8b01 	strb.w	r8, [r6], #1
 8006c7e:	9b00      	ldr	r3, [sp, #0]
 8006c80:	eba6 020a 	sub.w	r2, r6, sl
 8006c84:	4293      	cmp	r3, r2
 8006c86:	ddb3      	ble.n	8006bf0 <_dtoa_r+0xad8>
 8006c88:	4649      	mov	r1, r9
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	220a      	movs	r2, #10
 8006c8e:	4658      	mov	r0, fp
 8006c90:	f000 f968 	bl	8006f64 <__multadd>
 8006c94:	4681      	mov	r9, r0
 8006c96:	e7ea      	b.n	8006c6e <_dtoa_r+0xb56>
 8006c98:	080097c9 	.word	0x080097c9
 8006c9c:	0800974d 	.word	0x0800974d

08006ca0 <_free_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	4605      	mov	r5, r0
 8006ca4:	2900      	cmp	r1, #0
 8006ca6:	d041      	beq.n	8006d2c <_free_r+0x8c>
 8006ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cac:	1f0c      	subs	r4, r1, #4
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	bfb8      	it	lt
 8006cb2:	18e4      	addlt	r4, r4, r3
 8006cb4:	f000 f8e8 	bl	8006e88 <__malloc_lock>
 8006cb8:	4a1d      	ldr	r2, [pc, #116]	@ (8006d30 <_free_r+0x90>)
 8006cba:	6813      	ldr	r3, [r2, #0]
 8006cbc:	b933      	cbnz	r3, 8006ccc <_free_r+0x2c>
 8006cbe:	6063      	str	r3, [r4, #4]
 8006cc0:	6014      	str	r4, [r2, #0]
 8006cc2:	4628      	mov	r0, r5
 8006cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cc8:	f000 b8e4 	b.w	8006e94 <__malloc_unlock>
 8006ccc:	42a3      	cmp	r3, r4
 8006cce:	d908      	bls.n	8006ce2 <_free_r+0x42>
 8006cd0:	6820      	ldr	r0, [r4, #0]
 8006cd2:	1821      	adds	r1, r4, r0
 8006cd4:	428b      	cmp	r3, r1
 8006cd6:	bf01      	itttt	eq
 8006cd8:	6819      	ldreq	r1, [r3, #0]
 8006cda:	685b      	ldreq	r3, [r3, #4]
 8006cdc:	1809      	addeq	r1, r1, r0
 8006cde:	6021      	streq	r1, [r4, #0]
 8006ce0:	e7ed      	b.n	8006cbe <_free_r+0x1e>
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	b10b      	cbz	r3, 8006cec <_free_r+0x4c>
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	d9fa      	bls.n	8006ce2 <_free_r+0x42>
 8006cec:	6811      	ldr	r1, [r2, #0]
 8006cee:	1850      	adds	r0, r2, r1
 8006cf0:	42a0      	cmp	r0, r4
 8006cf2:	d10b      	bne.n	8006d0c <_free_r+0x6c>
 8006cf4:	6820      	ldr	r0, [r4, #0]
 8006cf6:	4401      	add	r1, r0
 8006cf8:	1850      	adds	r0, r2, r1
 8006cfa:	4283      	cmp	r3, r0
 8006cfc:	6011      	str	r1, [r2, #0]
 8006cfe:	d1e0      	bne.n	8006cc2 <_free_r+0x22>
 8006d00:	6818      	ldr	r0, [r3, #0]
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	6053      	str	r3, [r2, #4]
 8006d06:	4408      	add	r0, r1
 8006d08:	6010      	str	r0, [r2, #0]
 8006d0a:	e7da      	b.n	8006cc2 <_free_r+0x22>
 8006d0c:	d902      	bls.n	8006d14 <_free_r+0x74>
 8006d0e:	230c      	movs	r3, #12
 8006d10:	602b      	str	r3, [r5, #0]
 8006d12:	e7d6      	b.n	8006cc2 <_free_r+0x22>
 8006d14:	6820      	ldr	r0, [r4, #0]
 8006d16:	1821      	adds	r1, r4, r0
 8006d18:	428b      	cmp	r3, r1
 8006d1a:	bf04      	itt	eq
 8006d1c:	6819      	ldreq	r1, [r3, #0]
 8006d1e:	685b      	ldreq	r3, [r3, #4]
 8006d20:	6063      	str	r3, [r4, #4]
 8006d22:	bf04      	itt	eq
 8006d24:	1809      	addeq	r1, r1, r0
 8006d26:	6021      	streq	r1, [r4, #0]
 8006d28:	6054      	str	r4, [r2, #4]
 8006d2a:	e7ca      	b.n	8006cc2 <_free_r+0x22>
 8006d2c:	bd38      	pop	{r3, r4, r5, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000488 	.word	0x20000488

08006d34 <malloc>:
 8006d34:	4b02      	ldr	r3, [pc, #8]	@ (8006d40 <malloc+0xc>)
 8006d36:	4601      	mov	r1, r0
 8006d38:	6818      	ldr	r0, [r3, #0]
 8006d3a:	f000 b825 	b.w	8006d88 <_malloc_r>
 8006d3e:	bf00      	nop
 8006d40:	20000018 	.word	0x20000018

08006d44 <sbrk_aligned>:
 8006d44:	b570      	push	{r4, r5, r6, lr}
 8006d46:	4e0f      	ldr	r6, [pc, #60]	@ (8006d84 <sbrk_aligned+0x40>)
 8006d48:	460c      	mov	r4, r1
 8006d4a:	6831      	ldr	r1, [r6, #0]
 8006d4c:	4605      	mov	r5, r0
 8006d4e:	b911      	cbnz	r1, 8006d56 <sbrk_aligned+0x12>
 8006d50:	f001 fe0c 	bl	800896c <_sbrk_r>
 8006d54:	6030      	str	r0, [r6, #0]
 8006d56:	4621      	mov	r1, r4
 8006d58:	4628      	mov	r0, r5
 8006d5a:	f001 fe07 	bl	800896c <_sbrk_r>
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	d103      	bne.n	8006d6a <sbrk_aligned+0x26>
 8006d62:	f04f 34ff 	mov.w	r4, #4294967295
 8006d66:	4620      	mov	r0, r4
 8006d68:	bd70      	pop	{r4, r5, r6, pc}
 8006d6a:	1cc4      	adds	r4, r0, #3
 8006d6c:	f024 0403 	bic.w	r4, r4, #3
 8006d70:	42a0      	cmp	r0, r4
 8006d72:	d0f8      	beq.n	8006d66 <sbrk_aligned+0x22>
 8006d74:	1a21      	subs	r1, r4, r0
 8006d76:	4628      	mov	r0, r5
 8006d78:	f001 fdf8 	bl	800896c <_sbrk_r>
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d1f2      	bne.n	8006d66 <sbrk_aligned+0x22>
 8006d80:	e7ef      	b.n	8006d62 <sbrk_aligned+0x1e>
 8006d82:	bf00      	nop
 8006d84:	20000484 	.word	0x20000484

08006d88 <_malloc_r>:
 8006d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d8c:	1ccd      	adds	r5, r1, #3
 8006d8e:	f025 0503 	bic.w	r5, r5, #3
 8006d92:	3508      	adds	r5, #8
 8006d94:	2d0c      	cmp	r5, #12
 8006d96:	bf38      	it	cc
 8006d98:	250c      	movcc	r5, #12
 8006d9a:	2d00      	cmp	r5, #0
 8006d9c:	4606      	mov	r6, r0
 8006d9e:	db01      	blt.n	8006da4 <_malloc_r+0x1c>
 8006da0:	42a9      	cmp	r1, r5
 8006da2:	d904      	bls.n	8006dae <_malloc_r+0x26>
 8006da4:	230c      	movs	r3, #12
 8006da6:	6033      	str	r3, [r6, #0]
 8006da8:	2000      	movs	r0, #0
 8006daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e84 <_malloc_r+0xfc>
 8006db2:	f000 f869 	bl	8006e88 <__malloc_lock>
 8006db6:	f8d8 3000 	ldr.w	r3, [r8]
 8006dba:	461c      	mov	r4, r3
 8006dbc:	bb44      	cbnz	r4, 8006e10 <_malloc_r+0x88>
 8006dbe:	4629      	mov	r1, r5
 8006dc0:	4630      	mov	r0, r6
 8006dc2:	f7ff ffbf 	bl	8006d44 <sbrk_aligned>
 8006dc6:	1c43      	adds	r3, r0, #1
 8006dc8:	4604      	mov	r4, r0
 8006dca:	d158      	bne.n	8006e7e <_malloc_r+0xf6>
 8006dcc:	f8d8 4000 	ldr.w	r4, [r8]
 8006dd0:	4627      	mov	r7, r4
 8006dd2:	2f00      	cmp	r7, #0
 8006dd4:	d143      	bne.n	8006e5e <_malloc_r+0xd6>
 8006dd6:	2c00      	cmp	r4, #0
 8006dd8:	d04b      	beq.n	8006e72 <_malloc_r+0xea>
 8006dda:	6823      	ldr	r3, [r4, #0]
 8006ddc:	4639      	mov	r1, r7
 8006dde:	4630      	mov	r0, r6
 8006de0:	eb04 0903 	add.w	r9, r4, r3
 8006de4:	f001 fdc2 	bl	800896c <_sbrk_r>
 8006de8:	4581      	cmp	r9, r0
 8006dea:	d142      	bne.n	8006e72 <_malloc_r+0xea>
 8006dec:	6821      	ldr	r1, [r4, #0]
 8006dee:	1a6d      	subs	r5, r5, r1
 8006df0:	4629      	mov	r1, r5
 8006df2:	4630      	mov	r0, r6
 8006df4:	f7ff ffa6 	bl	8006d44 <sbrk_aligned>
 8006df8:	3001      	adds	r0, #1
 8006dfa:	d03a      	beq.n	8006e72 <_malloc_r+0xea>
 8006dfc:	6823      	ldr	r3, [r4, #0]
 8006dfe:	442b      	add	r3, r5
 8006e00:	6023      	str	r3, [r4, #0]
 8006e02:	f8d8 3000 	ldr.w	r3, [r8]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	bb62      	cbnz	r2, 8006e64 <_malloc_r+0xdc>
 8006e0a:	f8c8 7000 	str.w	r7, [r8]
 8006e0e:	e00f      	b.n	8006e30 <_malloc_r+0xa8>
 8006e10:	6822      	ldr	r2, [r4, #0]
 8006e12:	1b52      	subs	r2, r2, r5
 8006e14:	d420      	bmi.n	8006e58 <_malloc_r+0xd0>
 8006e16:	2a0b      	cmp	r2, #11
 8006e18:	d917      	bls.n	8006e4a <_malloc_r+0xc2>
 8006e1a:	1961      	adds	r1, r4, r5
 8006e1c:	42a3      	cmp	r3, r4
 8006e1e:	6025      	str	r5, [r4, #0]
 8006e20:	bf18      	it	ne
 8006e22:	6059      	strne	r1, [r3, #4]
 8006e24:	6863      	ldr	r3, [r4, #4]
 8006e26:	bf08      	it	eq
 8006e28:	f8c8 1000 	streq.w	r1, [r8]
 8006e2c:	5162      	str	r2, [r4, r5]
 8006e2e:	604b      	str	r3, [r1, #4]
 8006e30:	4630      	mov	r0, r6
 8006e32:	f000 f82f 	bl	8006e94 <__malloc_unlock>
 8006e36:	f104 000b 	add.w	r0, r4, #11
 8006e3a:	1d23      	adds	r3, r4, #4
 8006e3c:	f020 0007 	bic.w	r0, r0, #7
 8006e40:	1ac2      	subs	r2, r0, r3
 8006e42:	bf1c      	itt	ne
 8006e44:	1a1b      	subne	r3, r3, r0
 8006e46:	50a3      	strne	r3, [r4, r2]
 8006e48:	e7af      	b.n	8006daa <_malloc_r+0x22>
 8006e4a:	6862      	ldr	r2, [r4, #4]
 8006e4c:	42a3      	cmp	r3, r4
 8006e4e:	bf0c      	ite	eq
 8006e50:	f8c8 2000 	streq.w	r2, [r8]
 8006e54:	605a      	strne	r2, [r3, #4]
 8006e56:	e7eb      	b.n	8006e30 <_malloc_r+0xa8>
 8006e58:	4623      	mov	r3, r4
 8006e5a:	6864      	ldr	r4, [r4, #4]
 8006e5c:	e7ae      	b.n	8006dbc <_malloc_r+0x34>
 8006e5e:	463c      	mov	r4, r7
 8006e60:	687f      	ldr	r7, [r7, #4]
 8006e62:	e7b6      	b.n	8006dd2 <_malloc_r+0x4a>
 8006e64:	461a      	mov	r2, r3
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	42a3      	cmp	r3, r4
 8006e6a:	d1fb      	bne.n	8006e64 <_malloc_r+0xdc>
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	6053      	str	r3, [r2, #4]
 8006e70:	e7de      	b.n	8006e30 <_malloc_r+0xa8>
 8006e72:	230c      	movs	r3, #12
 8006e74:	6033      	str	r3, [r6, #0]
 8006e76:	4630      	mov	r0, r6
 8006e78:	f000 f80c 	bl	8006e94 <__malloc_unlock>
 8006e7c:	e794      	b.n	8006da8 <_malloc_r+0x20>
 8006e7e:	6005      	str	r5, [r0, #0]
 8006e80:	e7d6      	b.n	8006e30 <_malloc_r+0xa8>
 8006e82:	bf00      	nop
 8006e84:	20000488 	.word	0x20000488

08006e88 <__malloc_lock>:
 8006e88:	4801      	ldr	r0, [pc, #4]	@ (8006e90 <__malloc_lock+0x8>)
 8006e8a:	f7ff b8b4 	b.w	8005ff6 <__retarget_lock_acquire_recursive>
 8006e8e:	bf00      	nop
 8006e90:	20000480 	.word	0x20000480

08006e94 <__malloc_unlock>:
 8006e94:	4801      	ldr	r0, [pc, #4]	@ (8006e9c <__malloc_unlock+0x8>)
 8006e96:	f7ff b8af 	b.w	8005ff8 <__retarget_lock_release_recursive>
 8006e9a:	bf00      	nop
 8006e9c:	20000480 	.word	0x20000480

08006ea0 <_Balloc>:
 8006ea0:	b570      	push	{r4, r5, r6, lr}
 8006ea2:	69c6      	ldr	r6, [r0, #28]
 8006ea4:	4604      	mov	r4, r0
 8006ea6:	460d      	mov	r5, r1
 8006ea8:	b976      	cbnz	r6, 8006ec8 <_Balloc+0x28>
 8006eaa:	2010      	movs	r0, #16
 8006eac:	f7ff ff42 	bl	8006d34 <malloc>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	61e0      	str	r0, [r4, #28]
 8006eb4:	b920      	cbnz	r0, 8006ec0 <_Balloc+0x20>
 8006eb6:	4b18      	ldr	r3, [pc, #96]	@ (8006f18 <_Balloc+0x78>)
 8006eb8:	4818      	ldr	r0, [pc, #96]	@ (8006f1c <_Balloc+0x7c>)
 8006eba:	216b      	movs	r1, #107	@ 0x6b
 8006ebc:	f001 fd7c 	bl	80089b8 <__assert_func>
 8006ec0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ec4:	6006      	str	r6, [r0, #0]
 8006ec6:	60c6      	str	r6, [r0, #12]
 8006ec8:	69e6      	ldr	r6, [r4, #28]
 8006eca:	68f3      	ldr	r3, [r6, #12]
 8006ecc:	b183      	cbz	r3, 8006ef0 <_Balloc+0x50>
 8006ece:	69e3      	ldr	r3, [r4, #28]
 8006ed0:	68db      	ldr	r3, [r3, #12]
 8006ed2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ed6:	b9b8      	cbnz	r0, 8006f08 <_Balloc+0x68>
 8006ed8:	2101      	movs	r1, #1
 8006eda:	fa01 f605 	lsl.w	r6, r1, r5
 8006ede:	1d72      	adds	r2, r6, #5
 8006ee0:	0092      	lsls	r2, r2, #2
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	f001 fd86 	bl	80089f4 <_calloc_r>
 8006ee8:	b160      	cbz	r0, 8006f04 <_Balloc+0x64>
 8006eea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006eee:	e00e      	b.n	8006f0e <_Balloc+0x6e>
 8006ef0:	2221      	movs	r2, #33	@ 0x21
 8006ef2:	2104      	movs	r1, #4
 8006ef4:	4620      	mov	r0, r4
 8006ef6:	f001 fd7d 	bl	80089f4 <_calloc_r>
 8006efa:	69e3      	ldr	r3, [r4, #28]
 8006efc:	60f0      	str	r0, [r6, #12]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d1e4      	bne.n	8006ece <_Balloc+0x2e>
 8006f04:	2000      	movs	r0, #0
 8006f06:	bd70      	pop	{r4, r5, r6, pc}
 8006f08:	6802      	ldr	r2, [r0, #0]
 8006f0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f14:	e7f7      	b.n	8006f06 <_Balloc+0x66>
 8006f16:	bf00      	nop
 8006f18:	0800975a 	.word	0x0800975a
 8006f1c:	080097da 	.word	0x080097da

08006f20 <_Bfree>:
 8006f20:	b570      	push	{r4, r5, r6, lr}
 8006f22:	69c6      	ldr	r6, [r0, #28]
 8006f24:	4605      	mov	r5, r0
 8006f26:	460c      	mov	r4, r1
 8006f28:	b976      	cbnz	r6, 8006f48 <_Bfree+0x28>
 8006f2a:	2010      	movs	r0, #16
 8006f2c:	f7ff ff02 	bl	8006d34 <malloc>
 8006f30:	4602      	mov	r2, r0
 8006f32:	61e8      	str	r0, [r5, #28]
 8006f34:	b920      	cbnz	r0, 8006f40 <_Bfree+0x20>
 8006f36:	4b09      	ldr	r3, [pc, #36]	@ (8006f5c <_Bfree+0x3c>)
 8006f38:	4809      	ldr	r0, [pc, #36]	@ (8006f60 <_Bfree+0x40>)
 8006f3a:	218f      	movs	r1, #143	@ 0x8f
 8006f3c:	f001 fd3c 	bl	80089b8 <__assert_func>
 8006f40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f44:	6006      	str	r6, [r0, #0]
 8006f46:	60c6      	str	r6, [r0, #12]
 8006f48:	b13c      	cbz	r4, 8006f5a <_Bfree+0x3a>
 8006f4a:	69eb      	ldr	r3, [r5, #28]
 8006f4c:	6862      	ldr	r2, [r4, #4]
 8006f4e:	68db      	ldr	r3, [r3, #12]
 8006f50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f54:	6021      	str	r1, [r4, #0]
 8006f56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f5a:	bd70      	pop	{r4, r5, r6, pc}
 8006f5c:	0800975a 	.word	0x0800975a
 8006f60:	080097da 	.word	0x080097da

08006f64 <__multadd>:
 8006f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f68:	690d      	ldr	r5, [r1, #16]
 8006f6a:	4607      	mov	r7, r0
 8006f6c:	460c      	mov	r4, r1
 8006f6e:	461e      	mov	r6, r3
 8006f70:	f101 0c14 	add.w	ip, r1, #20
 8006f74:	2000      	movs	r0, #0
 8006f76:	f8dc 3000 	ldr.w	r3, [ip]
 8006f7a:	b299      	uxth	r1, r3
 8006f7c:	fb02 6101 	mla	r1, r2, r1, r6
 8006f80:	0c1e      	lsrs	r6, r3, #16
 8006f82:	0c0b      	lsrs	r3, r1, #16
 8006f84:	fb02 3306 	mla	r3, r2, r6, r3
 8006f88:	b289      	uxth	r1, r1
 8006f8a:	3001      	adds	r0, #1
 8006f8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f90:	4285      	cmp	r5, r0
 8006f92:	f84c 1b04 	str.w	r1, [ip], #4
 8006f96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f9a:	dcec      	bgt.n	8006f76 <__multadd+0x12>
 8006f9c:	b30e      	cbz	r6, 8006fe2 <__multadd+0x7e>
 8006f9e:	68a3      	ldr	r3, [r4, #8]
 8006fa0:	42ab      	cmp	r3, r5
 8006fa2:	dc19      	bgt.n	8006fd8 <__multadd+0x74>
 8006fa4:	6861      	ldr	r1, [r4, #4]
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	3101      	adds	r1, #1
 8006faa:	f7ff ff79 	bl	8006ea0 <_Balloc>
 8006fae:	4680      	mov	r8, r0
 8006fb0:	b928      	cbnz	r0, 8006fbe <__multadd+0x5a>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe8 <__multadd+0x84>)
 8006fb6:	480d      	ldr	r0, [pc, #52]	@ (8006fec <__multadd+0x88>)
 8006fb8:	21ba      	movs	r1, #186	@ 0xba
 8006fba:	f001 fcfd 	bl	80089b8 <__assert_func>
 8006fbe:	6922      	ldr	r2, [r4, #16]
 8006fc0:	3202      	adds	r2, #2
 8006fc2:	f104 010c 	add.w	r1, r4, #12
 8006fc6:	0092      	lsls	r2, r2, #2
 8006fc8:	300c      	adds	r0, #12
 8006fca:	f001 fcdf 	bl	800898c <memcpy>
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4638      	mov	r0, r7
 8006fd2:	f7ff ffa5 	bl	8006f20 <_Bfree>
 8006fd6:	4644      	mov	r4, r8
 8006fd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fdc:	3501      	adds	r5, #1
 8006fde:	615e      	str	r6, [r3, #20]
 8006fe0:	6125      	str	r5, [r4, #16]
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe8:	080097c9 	.word	0x080097c9
 8006fec:	080097da 	.word	0x080097da

08006ff0 <__s2b>:
 8006ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ff4:	460c      	mov	r4, r1
 8006ff6:	4615      	mov	r5, r2
 8006ff8:	461f      	mov	r7, r3
 8006ffa:	2209      	movs	r2, #9
 8006ffc:	3308      	adds	r3, #8
 8006ffe:	4606      	mov	r6, r0
 8007000:	fb93 f3f2 	sdiv	r3, r3, r2
 8007004:	2100      	movs	r1, #0
 8007006:	2201      	movs	r2, #1
 8007008:	429a      	cmp	r2, r3
 800700a:	db09      	blt.n	8007020 <__s2b+0x30>
 800700c:	4630      	mov	r0, r6
 800700e:	f7ff ff47 	bl	8006ea0 <_Balloc>
 8007012:	b940      	cbnz	r0, 8007026 <__s2b+0x36>
 8007014:	4602      	mov	r2, r0
 8007016:	4b19      	ldr	r3, [pc, #100]	@ (800707c <__s2b+0x8c>)
 8007018:	4819      	ldr	r0, [pc, #100]	@ (8007080 <__s2b+0x90>)
 800701a:	21d3      	movs	r1, #211	@ 0xd3
 800701c:	f001 fccc 	bl	80089b8 <__assert_func>
 8007020:	0052      	lsls	r2, r2, #1
 8007022:	3101      	adds	r1, #1
 8007024:	e7f0      	b.n	8007008 <__s2b+0x18>
 8007026:	9b08      	ldr	r3, [sp, #32]
 8007028:	6143      	str	r3, [r0, #20]
 800702a:	2d09      	cmp	r5, #9
 800702c:	f04f 0301 	mov.w	r3, #1
 8007030:	6103      	str	r3, [r0, #16]
 8007032:	dd16      	ble.n	8007062 <__s2b+0x72>
 8007034:	f104 0909 	add.w	r9, r4, #9
 8007038:	46c8      	mov	r8, r9
 800703a:	442c      	add	r4, r5
 800703c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007040:	4601      	mov	r1, r0
 8007042:	3b30      	subs	r3, #48	@ 0x30
 8007044:	220a      	movs	r2, #10
 8007046:	4630      	mov	r0, r6
 8007048:	f7ff ff8c 	bl	8006f64 <__multadd>
 800704c:	45a0      	cmp	r8, r4
 800704e:	d1f5      	bne.n	800703c <__s2b+0x4c>
 8007050:	f1a5 0408 	sub.w	r4, r5, #8
 8007054:	444c      	add	r4, r9
 8007056:	1b2d      	subs	r5, r5, r4
 8007058:	1963      	adds	r3, r4, r5
 800705a:	42bb      	cmp	r3, r7
 800705c:	db04      	blt.n	8007068 <__s2b+0x78>
 800705e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007062:	340a      	adds	r4, #10
 8007064:	2509      	movs	r5, #9
 8007066:	e7f6      	b.n	8007056 <__s2b+0x66>
 8007068:	f814 3b01 	ldrb.w	r3, [r4], #1
 800706c:	4601      	mov	r1, r0
 800706e:	3b30      	subs	r3, #48	@ 0x30
 8007070:	220a      	movs	r2, #10
 8007072:	4630      	mov	r0, r6
 8007074:	f7ff ff76 	bl	8006f64 <__multadd>
 8007078:	e7ee      	b.n	8007058 <__s2b+0x68>
 800707a:	bf00      	nop
 800707c:	080097c9 	.word	0x080097c9
 8007080:	080097da 	.word	0x080097da

08007084 <__hi0bits>:
 8007084:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007088:	4603      	mov	r3, r0
 800708a:	bf36      	itet	cc
 800708c:	0403      	lslcc	r3, r0, #16
 800708e:	2000      	movcs	r0, #0
 8007090:	2010      	movcc	r0, #16
 8007092:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007096:	bf3c      	itt	cc
 8007098:	021b      	lslcc	r3, r3, #8
 800709a:	3008      	addcc	r0, #8
 800709c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80070a0:	bf3c      	itt	cc
 80070a2:	011b      	lslcc	r3, r3, #4
 80070a4:	3004      	addcc	r0, #4
 80070a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070aa:	bf3c      	itt	cc
 80070ac:	009b      	lslcc	r3, r3, #2
 80070ae:	3002      	addcc	r0, #2
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	db05      	blt.n	80070c0 <__hi0bits+0x3c>
 80070b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80070b8:	f100 0001 	add.w	r0, r0, #1
 80070bc:	bf08      	it	eq
 80070be:	2020      	moveq	r0, #32
 80070c0:	4770      	bx	lr

080070c2 <__lo0bits>:
 80070c2:	6803      	ldr	r3, [r0, #0]
 80070c4:	4602      	mov	r2, r0
 80070c6:	f013 0007 	ands.w	r0, r3, #7
 80070ca:	d00b      	beq.n	80070e4 <__lo0bits+0x22>
 80070cc:	07d9      	lsls	r1, r3, #31
 80070ce:	d421      	bmi.n	8007114 <__lo0bits+0x52>
 80070d0:	0798      	lsls	r0, r3, #30
 80070d2:	bf49      	itett	mi
 80070d4:	085b      	lsrmi	r3, r3, #1
 80070d6:	089b      	lsrpl	r3, r3, #2
 80070d8:	2001      	movmi	r0, #1
 80070da:	6013      	strmi	r3, [r2, #0]
 80070dc:	bf5c      	itt	pl
 80070de:	6013      	strpl	r3, [r2, #0]
 80070e0:	2002      	movpl	r0, #2
 80070e2:	4770      	bx	lr
 80070e4:	b299      	uxth	r1, r3
 80070e6:	b909      	cbnz	r1, 80070ec <__lo0bits+0x2a>
 80070e8:	0c1b      	lsrs	r3, r3, #16
 80070ea:	2010      	movs	r0, #16
 80070ec:	b2d9      	uxtb	r1, r3
 80070ee:	b909      	cbnz	r1, 80070f4 <__lo0bits+0x32>
 80070f0:	3008      	adds	r0, #8
 80070f2:	0a1b      	lsrs	r3, r3, #8
 80070f4:	0719      	lsls	r1, r3, #28
 80070f6:	bf04      	itt	eq
 80070f8:	091b      	lsreq	r3, r3, #4
 80070fa:	3004      	addeq	r0, #4
 80070fc:	0799      	lsls	r1, r3, #30
 80070fe:	bf04      	itt	eq
 8007100:	089b      	lsreq	r3, r3, #2
 8007102:	3002      	addeq	r0, #2
 8007104:	07d9      	lsls	r1, r3, #31
 8007106:	d403      	bmi.n	8007110 <__lo0bits+0x4e>
 8007108:	085b      	lsrs	r3, r3, #1
 800710a:	f100 0001 	add.w	r0, r0, #1
 800710e:	d003      	beq.n	8007118 <__lo0bits+0x56>
 8007110:	6013      	str	r3, [r2, #0]
 8007112:	4770      	bx	lr
 8007114:	2000      	movs	r0, #0
 8007116:	4770      	bx	lr
 8007118:	2020      	movs	r0, #32
 800711a:	4770      	bx	lr

0800711c <__i2b>:
 800711c:	b510      	push	{r4, lr}
 800711e:	460c      	mov	r4, r1
 8007120:	2101      	movs	r1, #1
 8007122:	f7ff febd 	bl	8006ea0 <_Balloc>
 8007126:	4602      	mov	r2, r0
 8007128:	b928      	cbnz	r0, 8007136 <__i2b+0x1a>
 800712a:	4b05      	ldr	r3, [pc, #20]	@ (8007140 <__i2b+0x24>)
 800712c:	4805      	ldr	r0, [pc, #20]	@ (8007144 <__i2b+0x28>)
 800712e:	f240 1145 	movw	r1, #325	@ 0x145
 8007132:	f001 fc41 	bl	80089b8 <__assert_func>
 8007136:	2301      	movs	r3, #1
 8007138:	6144      	str	r4, [r0, #20]
 800713a:	6103      	str	r3, [r0, #16]
 800713c:	bd10      	pop	{r4, pc}
 800713e:	bf00      	nop
 8007140:	080097c9 	.word	0x080097c9
 8007144:	080097da 	.word	0x080097da

08007148 <__multiply>:
 8007148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	4614      	mov	r4, r2
 800714e:	690a      	ldr	r2, [r1, #16]
 8007150:	6923      	ldr	r3, [r4, #16]
 8007152:	429a      	cmp	r2, r3
 8007154:	bfa8      	it	ge
 8007156:	4623      	movge	r3, r4
 8007158:	460f      	mov	r7, r1
 800715a:	bfa4      	itt	ge
 800715c:	460c      	movge	r4, r1
 800715e:	461f      	movge	r7, r3
 8007160:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007164:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007168:	68a3      	ldr	r3, [r4, #8]
 800716a:	6861      	ldr	r1, [r4, #4]
 800716c:	eb0a 0609 	add.w	r6, sl, r9
 8007170:	42b3      	cmp	r3, r6
 8007172:	b085      	sub	sp, #20
 8007174:	bfb8      	it	lt
 8007176:	3101      	addlt	r1, #1
 8007178:	f7ff fe92 	bl	8006ea0 <_Balloc>
 800717c:	b930      	cbnz	r0, 800718c <__multiply+0x44>
 800717e:	4602      	mov	r2, r0
 8007180:	4b44      	ldr	r3, [pc, #272]	@ (8007294 <__multiply+0x14c>)
 8007182:	4845      	ldr	r0, [pc, #276]	@ (8007298 <__multiply+0x150>)
 8007184:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007188:	f001 fc16 	bl	80089b8 <__assert_func>
 800718c:	f100 0514 	add.w	r5, r0, #20
 8007190:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007194:	462b      	mov	r3, r5
 8007196:	2200      	movs	r2, #0
 8007198:	4543      	cmp	r3, r8
 800719a:	d321      	bcc.n	80071e0 <__multiply+0x98>
 800719c:	f107 0114 	add.w	r1, r7, #20
 80071a0:	f104 0214 	add.w	r2, r4, #20
 80071a4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80071a8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80071ac:	9302      	str	r3, [sp, #8]
 80071ae:	1b13      	subs	r3, r2, r4
 80071b0:	3b15      	subs	r3, #21
 80071b2:	f023 0303 	bic.w	r3, r3, #3
 80071b6:	3304      	adds	r3, #4
 80071b8:	f104 0715 	add.w	r7, r4, #21
 80071bc:	42ba      	cmp	r2, r7
 80071be:	bf38      	it	cc
 80071c0:	2304      	movcc	r3, #4
 80071c2:	9301      	str	r3, [sp, #4]
 80071c4:	9b02      	ldr	r3, [sp, #8]
 80071c6:	9103      	str	r1, [sp, #12]
 80071c8:	428b      	cmp	r3, r1
 80071ca:	d80c      	bhi.n	80071e6 <__multiply+0x9e>
 80071cc:	2e00      	cmp	r6, #0
 80071ce:	dd03      	ble.n	80071d8 <__multiply+0x90>
 80071d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d05b      	beq.n	8007290 <__multiply+0x148>
 80071d8:	6106      	str	r6, [r0, #16]
 80071da:	b005      	add	sp, #20
 80071dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071e0:	f843 2b04 	str.w	r2, [r3], #4
 80071e4:	e7d8      	b.n	8007198 <__multiply+0x50>
 80071e6:	f8b1 a000 	ldrh.w	sl, [r1]
 80071ea:	f1ba 0f00 	cmp.w	sl, #0
 80071ee:	d024      	beq.n	800723a <__multiply+0xf2>
 80071f0:	f104 0e14 	add.w	lr, r4, #20
 80071f4:	46a9      	mov	r9, r5
 80071f6:	f04f 0c00 	mov.w	ip, #0
 80071fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80071fe:	f8d9 3000 	ldr.w	r3, [r9]
 8007202:	fa1f fb87 	uxth.w	fp, r7
 8007206:	b29b      	uxth	r3, r3
 8007208:	fb0a 330b 	mla	r3, sl, fp, r3
 800720c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007210:	f8d9 7000 	ldr.w	r7, [r9]
 8007214:	4463      	add	r3, ip
 8007216:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800721a:	fb0a c70b 	mla	r7, sl, fp, ip
 800721e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007222:	b29b      	uxth	r3, r3
 8007224:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007228:	4572      	cmp	r2, lr
 800722a:	f849 3b04 	str.w	r3, [r9], #4
 800722e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007232:	d8e2      	bhi.n	80071fa <__multiply+0xb2>
 8007234:	9b01      	ldr	r3, [sp, #4]
 8007236:	f845 c003 	str.w	ip, [r5, r3]
 800723a:	9b03      	ldr	r3, [sp, #12]
 800723c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007240:	3104      	adds	r1, #4
 8007242:	f1b9 0f00 	cmp.w	r9, #0
 8007246:	d021      	beq.n	800728c <__multiply+0x144>
 8007248:	682b      	ldr	r3, [r5, #0]
 800724a:	f104 0c14 	add.w	ip, r4, #20
 800724e:	46ae      	mov	lr, r5
 8007250:	f04f 0a00 	mov.w	sl, #0
 8007254:	f8bc b000 	ldrh.w	fp, [ip]
 8007258:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800725c:	fb09 770b 	mla	r7, r9, fp, r7
 8007260:	4457      	add	r7, sl
 8007262:	b29b      	uxth	r3, r3
 8007264:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007268:	f84e 3b04 	str.w	r3, [lr], #4
 800726c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007270:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007274:	f8be 3000 	ldrh.w	r3, [lr]
 8007278:	fb09 330a 	mla	r3, r9, sl, r3
 800727c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007280:	4562      	cmp	r2, ip
 8007282:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007286:	d8e5      	bhi.n	8007254 <__multiply+0x10c>
 8007288:	9f01      	ldr	r7, [sp, #4]
 800728a:	51eb      	str	r3, [r5, r7]
 800728c:	3504      	adds	r5, #4
 800728e:	e799      	b.n	80071c4 <__multiply+0x7c>
 8007290:	3e01      	subs	r6, #1
 8007292:	e79b      	b.n	80071cc <__multiply+0x84>
 8007294:	080097c9 	.word	0x080097c9
 8007298:	080097da 	.word	0x080097da

0800729c <__pow5mult>:
 800729c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072a0:	4615      	mov	r5, r2
 80072a2:	f012 0203 	ands.w	r2, r2, #3
 80072a6:	4607      	mov	r7, r0
 80072a8:	460e      	mov	r6, r1
 80072aa:	d007      	beq.n	80072bc <__pow5mult+0x20>
 80072ac:	4c25      	ldr	r4, [pc, #148]	@ (8007344 <__pow5mult+0xa8>)
 80072ae:	3a01      	subs	r2, #1
 80072b0:	2300      	movs	r3, #0
 80072b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80072b6:	f7ff fe55 	bl	8006f64 <__multadd>
 80072ba:	4606      	mov	r6, r0
 80072bc:	10ad      	asrs	r5, r5, #2
 80072be:	d03d      	beq.n	800733c <__pow5mult+0xa0>
 80072c0:	69fc      	ldr	r4, [r7, #28]
 80072c2:	b97c      	cbnz	r4, 80072e4 <__pow5mult+0x48>
 80072c4:	2010      	movs	r0, #16
 80072c6:	f7ff fd35 	bl	8006d34 <malloc>
 80072ca:	4602      	mov	r2, r0
 80072cc:	61f8      	str	r0, [r7, #28]
 80072ce:	b928      	cbnz	r0, 80072dc <__pow5mult+0x40>
 80072d0:	4b1d      	ldr	r3, [pc, #116]	@ (8007348 <__pow5mult+0xac>)
 80072d2:	481e      	ldr	r0, [pc, #120]	@ (800734c <__pow5mult+0xb0>)
 80072d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80072d8:	f001 fb6e 	bl	80089b8 <__assert_func>
 80072dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072e0:	6004      	str	r4, [r0, #0]
 80072e2:	60c4      	str	r4, [r0, #12]
 80072e4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80072e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072ec:	b94c      	cbnz	r4, 8007302 <__pow5mult+0x66>
 80072ee:	f240 2171 	movw	r1, #625	@ 0x271
 80072f2:	4638      	mov	r0, r7
 80072f4:	f7ff ff12 	bl	800711c <__i2b>
 80072f8:	2300      	movs	r3, #0
 80072fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80072fe:	4604      	mov	r4, r0
 8007300:	6003      	str	r3, [r0, #0]
 8007302:	f04f 0900 	mov.w	r9, #0
 8007306:	07eb      	lsls	r3, r5, #31
 8007308:	d50a      	bpl.n	8007320 <__pow5mult+0x84>
 800730a:	4631      	mov	r1, r6
 800730c:	4622      	mov	r2, r4
 800730e:	4638      	mov	r0, r7
 8007310:	f7ff ff1a 	bl	8007148 <__multiply>
 8007314:	4631      	mov	r1, r6
 8007316:	4680      	mov	r8, r0
 8007318:	4638      	mov	r0, r7
 800731a:	f7ff fe01 	bl	8006f20 <_Bfree>
 800731e:	4646      	mov	r6, r8
 8007320:	106d      	asrs	r5, r5, #1
 8007322:	d00b      	beq.n	800733c <__pow5mult+0xa0>
 8007324:	6820      	ldr	r0, [r4, #0]
 8007326:	b938      	cbnz	r0, 8007338 <__pow5mult+0x9c>
 8007328:	4622      	mov	r2, r4
 800732a:	4621      	mov	r1, r4
 800732c:	4638      	mov	r0, r7
 800732e:	f7ff ff0b 	bl	8007148 <__multiply>
 8007332:	6020      	str	r0, [r4, #0]
 8007334:	f8c0 9000 	str.w	r9, [r0]
 8007338:	4604      	mov	r4, r0
 800733a:	e7e4      	b.n	8007306 <__pow5mult+0x6a>
 800733c:	4630      	mov	r0, r6
 800733e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007342:	bf00      	nop
 8007344:	08009834 	.word	0x08009834
 8007348:	0800975a 	.word	0x0800975a
 800734c:	080097da 	.word	0x080097da

08007350 <__lshift>:
 8007350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007354:	460c      	mov	r4, r1
 8007356:	6849      	ldr	r1, [r1, #4]
 8007358:	6923      	ldr	r3, [r4, #16]
 800735a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800735e:	68a3      	ldr	r3, [r4, #8]
 8007360:	4607      	mov	r7, r0
 8007362:	4691      	mov	r9, r2
 8007364:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007368:	f108 0601 	add.w	r6, r8, #1
 800736c:	42b3      	cmp	r3, r6
 800736e:	db0b      	blt.n	8007388 <__lshift+0x38>
 8007370:	4638      	mov	r0, r7
 8007372:	f7ff fd95 	bl	8006ea0 <_Balloc>
 8007376:	4605      	mov	r5, r0
 8007378:	b948      	cbnz	r0, 800738e <__lshift+0x3e>
 800737a:	4602      	mov	r2, r0
 800737c:	4b28      	ldr	r3, [pc, #160]	@ (8007420 <__lshift+0xd0>)
 800737e:	4829      	ldr	r0, [pc, #164]	@ (8007424 <__lshift+0xd4>)
 8007380:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007384:	f001 fb18 	bl	80089b8 <__assert_func>
 8007388:	3101      	adds	r1, #1
 800738a:	005b      	lsls	r3, r3, #1
 800738c:	e7ee      	b.n	800736c <__lshift+0x1c>
 800738e:	2300      	movs	r3, #0
 8007390:	f100 0114 	add.w	r1, r0, #20
 8007394:	f100 0210 	add.w	r2, r0, #16
 8007398:	4618      	mov	r0, r3
 800739a:	4553      	cmp	r3, sl
 800739c:	db33      	blt.n	8007406 <__lshift+0xb6>
 800739e:	6920      	ldr	r0, [r4, #16]
 80073a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073a4:	f104 0314 	add.w	r3, r4, #20
 80073a8:	f019 091f 	ands.w	r9, r9, #31
 80073ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80073b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80073b4:	d02b      	beq.n	800740e <__lshift+0xbe>
 80073b6:	f1c9 0e20 	rsb	lr, r9, #32
 80073ba:	468a      	mov	sl, r1
 80073bc:	2200      	movs	r2, #0
 80073be:	6818      	ldr	r0, [r3, #0]
 80073c0:	fa00 f009 	lsl.w	r0, r0, r9
 80073c4:	4310      	orrs	r0, r2
 80073c6:	f84a 0b04 	str.w	r0, [sl], #4
 80073ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80073ce:	459c      	cmp	ip, r3
 80073d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80073d4:	d8f3      	bhi.n	80073be <__lshift+0x6e>
 80073d6:	ebac 0304 	sub.w	r3, ip, r4
 80073da:	3b15      	subs	r3, #21
 80073dc:	f023 0303 	bic.w	r3, r3, #3
 80073e0:	3304      	adds	r3, #4
 80073e2:	f104 0015 	add.w	r0, r4, #21
 80073e6:	4584      	cmp	ip, r0
 80073e8:	bf38      	it	cc
 80073ea:	2304      	movcc	r3, #4
 80073ec:	50ca      	str	r2, [r1, r3]
 80073ee:	b10a      	cbz	r2, 80073f4 <__lshift+0xa4>
 80073f0:	f108 0602 	add.w	r6, r8, #2
 80073f4:	3e01      	subs	r6, #1
 80073f6:	4638      	mov	r0, r7
 80073f8:	612e      	str	r6, [r5, #16]
 80073fa:	4621      	mov	r1, r4
 80073fc:	f7ff fd90 	bl	8006f20 <_Bfree>
 8007400:	4628      	mov	r0, r5
 8007402:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007406:	f842 0f04 	str.w	r0, [r2, #4]!
 800740a:	3301      	adds	r3, #1
 800740c:	e7c5      	b.n	800739a <__lshift+0x4a>
 800740e:	3904      	subs	r1, #4
 8007410:	f853 2b04 	ldr.w	r2, [r3], #4
 8007414:	f841 2f04 	str.w	r2, [r1, #4]!
 8007418:	459c      	cmp	ip, r3
 800741a:	d8f9      	bhi.n	8007410 <__lshift+0xc0>
 800741c:	e7ea      	b.n	80073f4 <__lshift+0xa4>
 800741e:	bf00      	nop
 8007420:	080097c9 	.word	0x080097c9
 8007424:	080097da 	.word	0x080097da

08007428 <__mcmp>:
 8007428:	690a      	ldr	r2, [r1, #16]
 800742a:	4603      	mov	r3, r0
 800742c:	6900      	ldr	r0, [r0, #16]
 800742e:	1a80      	subs	r0, r0, r2
 8007430:	b530      	push	{r4, r5, lr}
 8007432:	d10e      	bne.n	8007452 <__mcmp+0x2a>
 8007434:	3314      	adds	r3, #20
 8007436:	3114      	adds	r1, #20
 8007438:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800743c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007440:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007444:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007448:	4295      	cmp	r5, r2
 800744a:	d003      	beq.n	8007454 <__mcmp+0x2c>
 800744c:	d205      	bcs.n	800745a <__mcmp+0x32>
 800744e:	f04f 30ff 	mov.w	r0, #4294967295
 8007452:	bd30      	pop	{r4, r5, pc}
 8007454:	42a3      	cmp	r3, r4
 8007456:	d3f3      	bcc.n	8007440 <__mcmp+0x18>
 8007458:	e7fb      	b.n	8007452 <__mcmp+0x2a>
 800745a:	2001      	movs	r0, #1
 800745c:	e7f9      	b.n	8007452 <__mcmp+0x2a>
	...

08007460 <__mdiff>:
 8007460:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007464:	4689      	mov	r9, r1
 8007466:	4606      	mov	r6, r0
 8007468:	4611      	mov	r1, r2
 800746a:	4648      	mov	r0, r9
 800746c:	4614      	mov	r4, r2
 800746e:	f7ff ffdb 	bl	8007428 <__mcmp>
 8007472:	1e05      	subs	r5, r0, #0
 8007474:	d112      	bne.n	800749c <__mdiff+0x3c>
 8007476:	4629      	mov	r1, r5
 8007478:	4630      	mov	r0, r6
 800747a:	f7ff fd11 	bl	8006ea0 <_Balloc>
 800747e:	4602      	mov	r2, r0
 8007480:	b928      	cbnz	r0, 800748e <__mdiff+0x2e>
 8007482:	4b3f      	ldr	r3, [pc, #252]	@ (8007580 <__mdiff+0x120>)
 8007484:	f240 2137 	movw	r1, #567	@ 0x237
 8007488:	483e      	ldr	r0, [pc, #248]	@ (8007584 <__mdiff+0x124>)
 800748a:	f001 fa95 	bl	80089b8 <__assert_func>
 800748e:	2301      	movs	r3, #1
 8007490:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007494:	4610      	mov	r0, r2
 8007496:	b003      	add	sp, #12
 8007498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800749c:	bfbc      	itt	lt
 800749e:	464b      	movlt	r3, r9
 80074a0:	46a1      	movlt	r9, r4
 80074a2:	4630      	mov	r0, r6
 80074a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80074a8:	bfba      	itte	lt
 80074aa:	461c      	movlt	r4, r3
 80074ac:	2501      	movlt	r5, #1
 80074ae:	2500      	movge	r5, #0
 80074b0:	f7ff fcf6 	bl	8006ea0 <_Balloc>
 80074b4:	4602      	mov	r2, r0
 80074b6:	b918      	cbnz	r0, 80074c0 <__mdiff+0x60>
 80074b8:	4b31      	ldr	r3, [pc, #196]	@ (8007580 <__mdiff+0x120>)
 80074ba:	f240 2145 	movw	r1, #581	@ 0x245
 80074be:	e7e3      	b.n	8007488 <__mdiff+0x28>
 80074c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80074c4:	6926      	ldr	r6, [r4, #16]
 80074c6:	60c5      	str	r5, [r0, #12]
 80074c8:	f109 0310 	add.w	r3, r9, #16
 80074cc:	f109 0514 	add.w	r5, r9, #20
 80074d0:	f104 0e14 	add.w	lr, r4, #20
 80074d4:	f100 0b14 	add.w	fp, r0, #20
 80074d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80074dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80074e0:	9301      	str	r3, [sp, #4]
 80074e2:	46d9      	mov	r9, fp
 80074e4:	f04f 0c00 	mov.w	ip, #0
 80074e8:	9b01      	ldr	r3, [sp, #4]
 80074ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80074ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80074f2:	9301      	str	r3, [sp, #4]
 80074f4:	fa1f f38a 	uxth.w	r3, sl
 80074f8:	4619      	mov	r1, r3
 80074fa:	b283      	uxth	r3, r0
 80074fc:	1acb      	subs	r3, r1, r3
 80074fe:	0c00      	lsrs	r0, r0, #16
 8007500:	4463      	add	r3, ip
 8007502:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007506:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800750a:	b29b      	uxth	r3, r3
 800750c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007510:	4576      	cmp	r6, lr
 8007512:	f849 3b04 	str.w	r3, [r9], #4
 8007516:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800751a:	d8e5      	bhi.n	80074e8 <__mdiff+0x88>
 800751c:	1b33      	subs	r3, r6, r4
 800751e:	3b15      	subs	r3, #21
 8007520:	f023 0303 	bic.w	r3, r3, #3
 8007524:	3415      	adds	r4, #21
 8007526:	3304      	adds	r3, #4
 8007528:	42a6      	cmp	r6, r4
 800752a:	bf38      	it	cc
 800752c:	2304      	movcc	r3, #4
 800752e:	441d      	add	r5, r3
 8007530:	445b      	add	r3, fp
 8007532:	461e      	mov	r6, r3
 8007534:	462c      	mov	r4, r5
 8007536:	4544      	cmp	r4, r8
 8007538:	d30e      	bcc.n	8007558 <__mdiff+0xf8>
 800753a:	f108 0103 	add.w	r1, r8, #3
 800753e:	1b49      	subs	r1, r1, r5
 8007540:	f021 0103 	bic.w	r1, r1, #3
 8007544:	3d03      	subs	r5, #3
 8007546:	45a8      	cmp	r8, r5
 8007548:	bf38      	it	cc
 800754a:	2100      	movcc	r1, #0
 800754c:	440b      	add	r3, r1
 800754e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007552:	b191      	cbz	r1, 800757a <__mdiff+0x11a>
 8007554:	6117      	str	r7, [r2, #16]
 8007556:	e79d      	b.n	8007494 <__mdiff+0x34>
 8007558:	f854 1b04 	ldr.w	r1, [r4], #4
 800755c:	46e6      	mov	lr, ip
 800755e:	0c08      	lsrs	r0, r1, #16
 8007560:	fa1c fc81 	uxtah	ip, ip, r1
 8007564:	4471      	add	r1, lr
 8007566:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800756a:	b289      	uxth	r1, r1
 800756c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007570:	f846 1b04 	str.w	r1, [r6], #4
 8007574:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007578:	e7dd      	b.n	8007536 <__mdiff+0xd6>
 800757a:	3f01      	subs	r7, #1
 800757c:	e7e7      	b.n	800754e <__mdiff+0xee>
 800757e:	bf00      	nop
 8007580:	080097c9 	.word	0x080097c9
 8007584:	080097da 	.word	0x080097da

08007588 <__ulp>:
 8007588:	b082      	sub	sp, #8
 800758a:	ed8d 0b00 	vstr	d0, [sp]
 800758e:	9a01      	ldr	r2, [sp, #4]
 8007590:	4b0f      	ldr	r3, [pc, #60]	@ (80075d0 <__ulp+0x48>)
 8007592:	4013      	ands	r3, r2
 8007594:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007598:	2b00      	cmp	r3, #0
 800759a:	dc08      	bgt.n	80075ae <__ulp+0x26>
 800759c:	425b      	negs	r3, r3
 800759e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80075a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80075a6:	da04      	bge.n	80075b2 <__ulp+0x2a>
 80075a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80075ac:	4113      	asrs	r3, r2
 80075ae:	2200      	movs	r2, #0
 80075b0:	e008      	b.n	80075c4 <__ulp+0x3c>
 80075b2:	f1a2 0314 	sub.w	r3, r2, #20
 80075b6:	2b1e      	cmp	r3, #30
 80075b8:	bfda      	itte	le
 80075ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80075be:	40da      	lsrle	r2, r3
 80075c0:	2201      	movgt	r2, #1
 80075c2:	2300      	movs	r3, #0
 80075c4:	4619      	mov	r1, r3
 80075c6:	4610      	mov	r0, r2
 80075c8:	ec41 0b10 	vmov	d0, r0, r1
 80075cc:	b002      	add	sp, #8
 80075ce:	4770      	bx	lr
 80075d0:	7ff00000 	.word	0x7ff00000

080075d4 <__b2d>:
 80075d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075d8:	6906      	ldr	r6, [r0, #16]
 80075da:	f100 0814 	add.w	r8, r0, #20
 80075de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80075e2:	1f37      	subs	r7, r6, #4
 80075e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80075e8:	4610      	mov	r0, r2
 80075ea:	f7ff fd4b 	bl	8007084 <__hi0bits>
 80075ee:	f1c0 0320 	rsb	r3, r0, #32
 80075f2:	280a      	cmp	r0, #10
 80075f4:	600b      	str	r3, [r1, #0]
 80075f6:	491b      	ldr	r1, [pc, #108]	@ (8007664 <__b2d+0x90>)
 80075f8:	dc15      	bgt.n	8007626 <__b2d+0x52>
 80075fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80075fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8007602:	45b8      	cmp	r8, r7
 8007604:	ea43 0501 	orr.w	r5, r3, r1
 8007608:	bf34      	ite	cc
 800760a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800760e:	2300      	movcs	r3, #0
 8007610:	3015      	adds	r0, #21
 8007612:	fa02 f000 	lsl.w	r0, r2, r0
 8007616:	fa23 f30c 	lsr.w	r3, r3, ip
 800761a:	4303      	orrs	r3, r0
 800761c:	461c      	mov	r4, r3
 800761e:	ec45 4b10 	vmov	d0, r4, r5
 8007622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007626:	45b8      	cmp	r8, r7
 8007628:	bf3a      	itte	cc
 800762a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800762e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007632:	2300      	movcs	r3, #0
 8007634:	380b      	subs	r0, #11
 8007636:	d012      	beq.n	800765e <__b2d+0x8a>
 8007638:	f1c0 0120 	rsb	r1, r0, #32
 800763c:	fa23 f401 	lsr.w	r4, r3, r1
 8007640:	4082      	lsls	r2, r0
 8007642:	4322      	orrs	r2, r4
 8007644:	4547      	cmp	r7, r8
 8007646:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800764a:	bf8c      	ite	hi
 800764c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007650:	2200      	movls	r2, #0
 8007652:	4083      	lsls	r3, r0
 8007654:	40ca      	lsrs	r2, r1
 8007656:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800765a:	4313      	orrs	r3, r2
 800765c:	e7de      	b.n	800761c <__b2d+0x48>
 800765e:	ea42 0501 	orr.w	r5, r2, r1
 8007662:	e7db      	b.n	800761c <__b2d+0x48>
 8007664:	3ff00000 	.word	0x3ff00000

08007668 <__d2b>:
 8007668:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800766c:	460f      	mov	r7, r1
 800766e:	2101      	movs	r1, #1
 8007670:	ec59 8b10 	vmov	r8, r9, d0
 8007674:	4616      	mov	r6, r2
 8007676:	f7ff fc13 	bl	8006ea0 <_Balloc>
 800767a:	4604      	mov	r4, r0
 800767c:	b930      	cbnz	r0, 800768c <__d2b+0x24>
 800767e:	4602      	mov	r2, r0
 8007680:	4b23      	ldr	r3, [pc, #140]	@ (8007710 <__d2b+0xa8>)
 8007682:	4824      	ldr	r0, [pc, #144]	@ (8007714 <__d2b+0xac>)
 8007684:	f240 310f 	movw	r1, #783	@ 0x30f
 8007688:	f001 f996 	bl	80089b8 <__assert_func>
 800768c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007690:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007694:	b10d      	cbz	r5, 800769a <__d2b+0x32>
 8007696:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800769a:	9301      	str	r3, [sp, #4]
 800769c:	f1b8 0300 	subs.w	r3, r8, #0
 80076a0:	d023      	beq.n	80076ea <__d2b+0x82>
 80076a2:	4668      	mov	r0, sp
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	f7ff fd0c 	bl	80070c2 <__lo0bits>
 80076aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80076ae:	b1d0      	cbz	r0, 80076e6 <__d2b+0x7e>
 80076b0:	f1c0 0320 	rsb	r3, r0, #32
 80076b4:	fa02 f303 	lsl.w	r3, r2, r3
 80076b8:	430b      	orrs	r3, r1
 80076ba:	40c2      	lsrs	r2, r0
 80076bc:	6163      	str	r3, [r4, #20]
 80076be:	9201      	str	r2, [sp, #4]
 80076c0:	9b01      	ldr	r3, [sp, #4]
 80076c2:	61a3      	str	r3, [r4, #24]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	bf0c      	ite	eq
 80076c8:	2201      	moveq	r2, #1
 80076ca:	2202      	movne	r2, #2
 80076cc:	6122      	str	r2, [r4, #16]
 80076ce:	b1a5      	cbz	r5, 80076fa <__d2b+0x92>
 80076d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80076d4:	4405      	add	r5, r0
 80076d6:	603d      	str	r5, [r7, #0]
 80076d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80076dc:	6030      	str	r0, [r6, #0]
 80076de:	4620      	mov	r0, r4
 80076e0:	b003      	add	sp, #12
 80076e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076e6:	6161      	str	r1, [r4, #20]
 80076e8:	e7ea      	b.n	80076c0 <__d2b+0x58>
 80076ea:	a801      	add	r0, sp, #4
 80076ec:	f7ff fce9 	bl	80070c2 <__lo0bits>
 80076f0:	9b01      	ldr	r3, [sp, #4]
 80076f2:	6163      	str	r3, [r4, #20]
 80076f4:	3020      	adds	r0, #32
 80076f6:	2201      	movs	r2, #1
 80076f8:	e7e8      	b.n	80076cc <__d2b+0x64>
 80076fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007702:	6038      	str	r0, [r7, #0]
 8007704:	6918      	ldr	r0, [r3, #16]
 8007706:	f7ff fcbd 	bl	8007084 <__hi0bits>
 800770a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800770e:	e7e5      	b.n	80076dc <__d2b+0x74>
 8007710:	080097c9 	.word	0x080097c9
 8007714:	080097da 	.word	0x080097da

08007718 <__ratio>:
 8007718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800771c:	b085      	sub	sp, #20
 800771e:	e9cd 1000 	strd	r1, r0, [sp]
 8007722:	a902      	add	r1, sp, #8
 8007724:	f7ff ff56 	bl	80075d4 <__b2d>
 8007728:	9800      	ldr	r0, [sp, #0]
 800772a:	a903      	add	r1, sp, #12
 800772c:	ec55 4b10 	vmov	r4, r5, d0
 8007730:	f7ff ff50 	bl	80075d4 <__b2d>
 8007734:	9b01      	ldr	r3, [sp, #4]
 8007736:	6919      	ldr	r1, [r3, #16]
 8007738:	9b00      	ldr	r3, [sp, #0]
 800773a:	691b      	ldr	r3, [r3, #16]
 800773c:	1ac9      	subs	r1, r1, r3
 800773e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007742:	1a9b      	subs	r3, r3, r2
 8007744:	ec5b ab10 	vmov	sl, fp, d0
 8007748:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800774c:	2b00      	cmp	r3, #0
 800774e:	bfce      	itee	gt
 8007750:	462a      	movgt	r2, r5
 8007752:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007756:	465a      	movle	r2, fp
 8007758:	462f      	mov	r7, r5
 800775a:	46d9      	mov	r9, fp
 800775c:	bfcc      	ite	gt
 800775e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007762:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007766:	464b      	mov	r3, r9
 8007768:	4652      	mov	r2, sl
 800776a:	4620      	mov	r0, r4
 800776c:	4639      	mov	r1, r7
 800776e:	f7f9 f86d 	bl	800084c <__aeabi_ddiv>
 8007772:	ec41 0b10 	vmov	d0, r0, r1
 8007776:	b005      	add	sp, #20
 8007778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800777c <__copybits>:
 800777c:	3901      	subs	r1, #1
 800777e:	b570      	push	{r4, r5, r6, lr}
 8007780:	1149      	asrs	r1, r1, #5
 8007782:	6914      	ldr	r4, [r2, #16]
 8007784:	3101      	adds	r1, #1
 8007786:	f102 0314 	add.w	r3, r2, #20
 800778a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800778e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007792:	1f05      	subs	r5, r0, #4
 8007794:	42a3      	cmp	r3, r4
 8007796:	d30c      	bcc.n	80077b2 <__copybits+0x36>
 8007798:	1aa3      	subs	r3, r4, r2
 800779a:	3b11      	subs	r3, #17
 800779c:	f023 0303 	bic.w	r3, r3, #3
 80077a0:	3211      	adds	r2, #17
 80077a2:	42a2      	cmp	r2, r4
 80077a4:	bf88      	it	hi
 80077a6:	2300      	movhi	r3, #0
 80077a8:	4418      	add	r0, r3
 80077aa:	2300      	movs	r3, #0
 80077ac:	4288      	cmp	r0, r1
 80077ae:	d305      	bcc.n	80077bc <__copybits+0x40>
 80077b0:	bd70      	pop	{r4, r5, r6, pc}
 80077b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80077b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80077ba:	e7eb      	b.n	8007794 <__copybits+0x18>
 80077bc:	f840 3b04 	str.w	r3, [r0], #4
 80077c0:	e7f4      	b.n	80077ac <__copybits+0x30>

080077c2 <__any_on>:
 80077c2:	f100 0214 	add.w	r2, r0, #20
 80077c6:	6900      	ldr	r0, [r0, #16]
 80077c8:	114b      	asrs	r3, r1, #5
 80077ca:	4298      	cmp	r0, r3
 80077cc:	b510      	push	{r4, lr}
 80077ce:	db11      	blt.n	80077f4 <__any_on+0x32>
 80077d0:	dd0a      	ble.n	80077e8 <__any_on+0x26>
 80077d2:	f011 011f 	ands.w	r1, r1, #31
 80077d6:	d007      	beq.n	80077e8 <__any_on+0x26>
 80077d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80077dc:	fa24 f001 	lsr.w	r0, r4, r1
 80077e0:	fa00 f101 	lsl.w	r1, r0, r1
 80077e4:	428c      	cmp	r4, r1
 80077e6:	d10b      	bne.n	8007800 <__any_on+0x3e>
 80077e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d803      	bhi.n	80077f8 <__any_on+0x36>
 80077f0:	2000      	movs	r0, #0
 80077f2:	bd10      	pop	{r4, pc}
 80077f4:	4603      	mov	r3, r0
 80077f6:	e7f7      	b.n	80077e8 <__any_on+0x26>
 80077f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80077fc:	2900      	cmp	r1, #0
 80077fe:	d0f5      	beq.n	80077ec <__any_on+0x2a>
 8007800:	2001      	movs	r0, #1
 8007802:	e7f6      	b.n	80077f2 <__any_on+0x30>

08007804 <sulp>:
 8007804:	b570      	push	{r4, r5, r6, lr}
 8007806:	4604      	mov	r4, r0
 8007808:	460d      	mov	r5, r1
 800780a:	ec45 4b10 	vmov	d0, r4, r5
 800780e:	4616      	mov	r6, r2
 8007810:	f7ff feba 	bl	8007588 <__ulp>
 8007814:	ec51 0b10 	vmov	r0, r1, d0
 8007818:	b17e      	cbz	r6, 800783a <sulp+0x36>
 800781a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800781e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007822:	2b00      	cmp	r3, #0
 8007824:	dd09      	ble.n	800783a <sulp+0x36>
 8007826:	051b      	lsls	r3, r3, #20
 8007828:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800782c:	2400      	movs	r4, #0
 800782e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007832:	4622      	mov	r2, r4
 8007834:	462b      	mov	r3, r5
 8007836:	f7f8 fedf 	bl	80005f8 <__aeabi_dmul>
 800783a:	ec41 0b10 	vmov	d0, r0, r1
 800783e:	bd70      	pop	{r4, r5, r6, pc}

08007840 <_strtod_l>:
 8007840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007844:	b09f      	sub	sp, #124	@ 0x7c
 8007846:	460c      	mov	r4, r1
 8007848:	9217      	str	r2, [sp, #92]	@ 0x5c
 800784a:	2200      	movs	r2, #0
 800784c:	921a      	str	r2, [sp, #104]	@ 0x68
 800784e:	9005      	str	r0, [sp, #20]
 8007850:	f04f 0a00 	mov.w	sl, #0
 8007854:	f04f 0b00 	mov.w	fp, #0
 8007858:	460a      	mov	r2, r1
 800785a:	9219      	str	r2, [sp, #100]	@ 0x64
 800785c:	7811      	ldrb	r1, [r2, #0]
 800785e:	292b      	cmp	r1, #43	@ 0x2b
 8007860:	d04a      	beq.n	80078f8 <_strtod_l+0xb8>
 8007862:	d838      	bhi.n	80078d6 <_strtod_l+0x96>
 8007864:	290d      	cmp	r1, #13
 8007866:	d832      	bhi.n	80078ce <_strtod_l+0x8e>
 8007868:	2908      	cmp	r1, #8
 800786a:	d832      	bhi.n	80078d2 <_strtod_l+0x92>
 800786c:	2900      	cmp	r1, #0
 800786e:	d03b      	beq.n	80078e8 <_strtod_l+0xa8>
 8007870:	2200      	movs	r2, #0
 8007872:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007874:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007876:	782a      	ldrb	r2, [r5, #0]
 8007878:	2a30      	cmp	r2, #48	@ 0x30
 800787a:	f040 80b3 	bne.w	80079e4 <_strtod_l+0x1a4>
 800787e:	786a      	ldrb	r2, [r5, #1]
 8007880:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007884:	2a58      	cmp	r2, #88	@ 0x58
 8007886:	d16e      	bne.n	8007966 <_strtod_l+0x126>
 8007888:	9302      	str	r3, [sp, #8]
 800788a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800788c:	9301      	str	r3, [sp, #4]
 800788e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	4a8e      	ldr	r2, [pc, #568]	@ (8007acc <_strtod_l+0x28c>)
 8007894:	9805      	ldr	r0, [sp, #20]
 8007896:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007898:	a919      	add	r1, sp, #100	@ 0x64
 800789a:	f001 f927 	bl	8008aec <__gethex>
 800789e:	f010 060f 	ands.w	r6, r0, #15
 80078a2:	4604      	mov	r4, r0
 80078a4:	d005      	beq.n	80078b2 <_strtod_l+0x72>
 80078a6:	2e06      	cmp	r6, #6
 80078a8:	d128      	bne.n	80078fc <_strtod_l+0xbc>
 80078aa:	3501      	adds	r5, #1
 80078ac:	2300      	movs	r3, #0
 80078ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80078b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80078b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	f040 858e 	bne.w	80083d6 <_strtod_l+0xb96>
 80078ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078bc:	b1cb      	cbz	r3, 80078f2 <_strtod_l+0xb2>
 80078be:	4652      	mov	r2, sl
 80078c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80078c4:	ec43 2b10 	vmov	d0, r2, r3
 80078c8:	b01f      	add	sp, #124	@ 0x7c
 80078ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ce:	2920      	cmp	r1, #32
 80078d0:	d1ce      	bne.n	8007870 <_strtod_l+0x30>
 80078d2:	3201      	adds	r2, #1
 80078d4:	e7c1      	b.n	800785a <_strtod_l+0x1a>
 80078d6:	292d      	cmp	r1, #45	@ 0x2d
 80078d8:	d1ca      	bne.n	8007870 <_strtod_l+0x30>
 80078da:	2101      	movs	r1, #1
 80078dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80078de:	1c51      	adds	r1, r2, #1
 80078e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80078e2:	7852      	ldrb	r2, [r2, #1]
 80078e4:	2a00      	cmp	r2, #0
 80078e6:	d1c5      	bne.n	8007874 <_strtod_l+0x34>
 80078e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80078ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f040 8570 	bne.w	80083d2 <_strtod_l+0xb92>
 80078f2:	4652      	mov	r2, sl
 80078f4:	465b      	mov	r3, fp
 80078f6:	e7e5      	b.n	80078c4 <_strtod_l+0x84>
 80078f8:	2100      	movs	r1, #0
 80078fa:	e7ef      	b.n	80078dc <_strtod_l+0x9c>
 80078fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80078fe:	b13a      	cbz	r2, 8007910 <_strtod_l+0xd0>
 8007900:	2135      	movs	r1, #53	@ 0x35
 8007902:	a81c      	add	r0, sp, #112	@ 0x70
 8007904:	f7ff ff3a 	bl	800777c <__copybits>
 8007908:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800790a:	9805      	ldr	r0, [sp, #20]
 800790c:	f7ff fb08 	bl	8006f20 <_Bfree>
 8007910:	3e01      	subs	r6, #1
 8007912:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007914:	2e04      	cmp	r6, #4
 8007916:	d806      	bhi.n	8007926 <_strtod_l+0xe6>
 8007918:	e8df f006 	tbb	[pc, r6]
 800791c:	201d0314 	.word	0x201d0314
 8007920:	14          	.byte	0x14
 8007921:	00          	.byte	0x00
 8007922:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007926:	05e1      	lsls	r1, r4, #23
 8007928:	bf48      	it	mi
 800792a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800792e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007932:	0d1b      	lsrs	r3, r3, #20
 8007934:	051b      	lsls	r3, r3, #20
 8007936:	2b00      	cmp	r3, #0
 8007938:	d1bb      	bne.n	80078b2 <_strtod_l+0x72>
 800793a:	f7fe fb31 	bl	8005fa0 <__errno>
 800793e:	2322      	movs	r3, #34	@ 0x22
 8007940:	6003      	str	r3, [r0, #0]
 8007942:	e7b6      	b.n	80078b2 <_strtod_l+0x72>
 8007944:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007948:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800794c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007950:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007954:	e7e7      	b.n	8007926 <_strtod_l+0xe6>
 8007956:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007ad4 <_strtod_l+0x294>
 800795a:	e7e4      	b.n	8007926 <_strtod_l+0xe6>
 800795c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007960:	f04f 3aff 	mov.w	sl, #4294967295
 8007964:	e7df      	b.n	8007926 <_strtod_l+0xe6>
 8007966:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007968:	1c5a      	adds	r2, r3, #1
 800796a:	9219      	str	r2, [sp, #100]	@ 0x64
 800796c:	785b      	ldrb	r3, [r3, #1]
 800796e:	2b30      	cmp	r3, #48	@ 0x30
 8007970:	d0f9      	beq.n	8007966 <_strtod_l+0x126>
 8007972:	2b00      	cmp	r3, #0
 8007974:	d09d      	beq.n	80078b2 <_strtod_l+0x72>
 8007976:	2301      	movs	r3, #1
 8007978:	9309      	str	r3, [sp, #36]	@ 0x24
 800797a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800797c:	930c      	str	r3, [sp, #48]	@ 0x30
 800797e:	2300      	movs	r3, #0
 8007980:	9308      	str	r3, [sp, #32]
 8007982:	930a      	str	r3, [sp, #40]	@ 0x28
 8007984:	461f      	mov	r7, r3
 8007986:	220a      	movs	r2, #10
 8007988:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800798a:	7805      	ldrb	r5, [r0, #0]
 800798c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007990:	b2d9      	uxtb	r1, r3
 8007992:	2909      	cmp	r1, #9
 8007994:	d928      	bls.n	80079e8 <_strtod_l+0x1a8>
 8007996:	494e      	ldr	r1, [pc, #312]	@ (8007ad0 <_strtod_l+0x290>)
 8007998:	2201      	movs	r2, #1
 800799a:	f000 ffd5 	bl	8008948 <strncmp>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d032      	beq.n	8007a08 <_strtod_l+0x1c8>
 80079a2:	2000      	movs	r0, #0
 80079a4:	462a      	mov	r2, r5
 80079a6:	4681      	mov	r9, r0
 80079a8:	463d      	mov	r5, r7
 80079aa:	4603      	mov	r3, r0
 80079ac:	2a65      	cmp	r2, #101	@ 0x65
 80079ae:	d001      	beq.n	80079b4 <_strtod_l+0x174>
 80079b0:	2a45      	cmp	r2, #69	@ 0x45
 80079b2:	d114      	bne.n	80079de <_strtod_l+0x19e>
 80079b4:	b91d      	cbnz	r5, 80079be <_strtod_l+0x17e>
 80079b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079b8:	4302      	orrs	r2, r0
 80079ba:	d095      	beq.n	80078e8 <_strtod_l+0xa8>
 80079bc:	2500      	movs	r5, #0
 80079be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80079c0:	1c62      	adds	r2, r4, #1
 80079c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80079c4:	7862      	ldrb	r2, [r4, #1]
 80079c6:	2a2b      	cmp	r2, #43	@ 0x2b
 80079c8:	d077      	beq.n	8007aba <_strtod_l+0x27a>
 80079ca:	2a2d      	cmp	r2, #45	@ 0x2d
 80079cc:	d07b      	beq.n	8007ac6 <_strtod_l+0x286>
 80079ce:	f04f 0c00 	mov.w	ip, #0
 80079d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80079d6:	2909      	cmp	r1, #9
 80079d8:	f240 8082 	bls.w	8007ae0 <_strtod_l+0x2a0>
 80079dc:	9419      	str	r4, [sp, #100]	@ 0x64
 80079de:	f04f 0800 	mov.w	r8, #0
 80079e2:	e0a2      	b.n	8007b2a <_strtod_l+0x2ea>
 80079e4:	2300      	movs	r3, #0
 80079e6:	e7c7      	b.n	8007978 <_strtod_l+0x138>
 80079e8:	2f08      	cmp	r7, #8
 80079ea:	bfd5      	itete	le
 80079ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80079ee:	9908      	ldrgt	r1, [sp, #32]
 80079f0:	fb02 3301 	mlale	r3, r2, r1, r3
 80079f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 80079f8:	f100 0001 	add.w	r0, r0, #1
 80079fc:	bfd4      	ite	le
 80079fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007a00:	9308      	strgt	r3, [sp, #32]
 8007a02:	3701      	adds	r7, #1
 8007a04:	9019      	str	r0, [sp, #100]	@ 0x64
 8007a06:	e7bf      	b.n	8007988 <_strtod_l+0x148>
 8007a08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a0e:	785a      	ldrb	r2, [r3, #1]
 8007a10:	b37f      	cbz	r7, 8007a72 <_strtod_l+0x232>
 8007a12:	4681      	mov	r9, r0
 8007a14:	463d      	mov	r5, r7
 8007a16:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007a1a:	2b09      	cmp	r3, #9
 8007a1c:	d912      	bls.n	8007a44 <_strtod_l+0x204>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e7c4      	b.n	80079ac <_strtod_l+0x16c>
 8007a22:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a24:	1c5a      	adds	r2, r3, #1
 8007a26:	9219      	str	r2, [sp, #100]	@ 0x64
 8007a28:	785a      	ldrb	r2, [r3, #1]
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	2a30      	cmp	r2, #48	@ 0x30
 8007a2e:	d0f8      	beq.n	8007a22 <_strtod_l+0x1e2>
 8007a30:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007a34:	2b08      	cmp	r3, #8
 8007a36:	f200 84d3 	bhi.w	80083e0 <_strtod_l+0xba0>
 8007a3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007a3c:	930c      	str	r3, [sp, #48]	@ 0x30
 8007a3e:	4681      	mov	r9, r0
 8007a40:	2000      	movs	r0, #0
 8007a42:	4605      	mov	r5, r0
 8007a44:	3a30      	subs	r2, #48	@ 0x30
 8007a46:	f100 0301 	add.w	r3, r0, #1
 8007a4a:	d02a      	beq.n	8007aa2 <_strtod_l+0x262>
 8007a4c:	4499      	add	r9, r3
 8007a4e:	eb00 0c05 	add.w	ip, r0, r5
 8007a52:	462b      	mov	r3, r5
 8007a54:	210a      	movs	r1, #10
 8007a56:	4563      	cmp	r3, ip
 8007a58:	d10d      	bne.n	8007a76 <_strtod_l+0x236>
 8007a5a:	1c69      	adds	r1, r5, #1
 8007a5c:	4401      	add	r1, r0
 8007a5e:	4428      	add	r0, r5
 8007a60:	2808      	cmp	r0, #8
 8007a62:	dc16      	bgt.n	8007a92 <_strtod_l+0x252>
 8007a64:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007a66:	230a      	movs	r3, #10
 8007a68:	fb03 2300 	mla	r3, r3, r0, r2
 8007a6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e018      	b.n	8007aa4 <_strtod_l+0x264>
 8007a72:	4638      	mov	r0, r7
 8007a74:	e7da      	b.n	8007a2c <_strtod_l+0x1ec>
 8007a76:	2b08      	cmp	r3, #8
 8007a78:	f103 0301 	add.w	r3, r3, #1
 8007a7c:	dc03      	bgt.n	8007a86 <_strtod_l+0x246>
 8007a7e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007a80:	434e      	muls	r6, r1
 8007a82:	960a      	str	r6, [sp, #40]	@ 0x28
 8007a84:	e7e7      	b.n	8007a56 <_strtod_l+0x216>
 8007a86:	2b10      	cmp	r3, #16
 8007a88:	bfde      	ittt	le
 8007a8a:	9e08      	ldrle	r6, [sp, #32]
 8007a8c:	434e      	mulle	r6, r1
 8007a8e:	9608      	strle	r6, [sp, #32]
 8007a90:	e7e1      	b.n	8007a56 <_strtod_l+0x216>
 8007a92:	280f      	cmp	r0, #15
 8007a94:	dceb      	bgt.n	8007a6e <_strtod_l+0x22e>
 8007a96:	9808      	ldr	r0, [sp, #32]
 8007a98:	230a      	movs	r3, #10
 8007a9a:	fb03 2300 	mla	r3, r3, r0, r2
 8007a9e:	9308      	str	r3, [sp, #32]
 8007aa0:	e7e5      	b.n	8007a6e <_strtod_l+0x22e>
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007aa6:	1c50      	adds	r0, r2, #1
 8007aa8:	9019      	str	r0, [sp, #100]	@ 0x64
 8007aaa:	7852      	ldrb	r2, [r2, #1]
 8007aac:	4618      	mov	r0, r3
 8007aae:	460d      	mov	r5, r1
 8007ab0:	e7b1      	b.n	8007a16 <_strtod_l+0x1d6>
 8007ab2:	f04f 0900 	mov.w	r9, #0
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	e77d      	b.n	80079b6 <_strtod_l+0x176>
 8007aba:	f04f 0c00 	mov.w	ip, #0
 8007abe:	1ca2      	adds	r2, r4, #2
 8007ac0:	9219      	str	r2, [sp, #100]	@ 0x64
 8007ac2:	78a2      	ldrb	r2, [r4, #2]
 8007ac4:	e785      	b.n	80079d2 <_strtod_l+0x192>
 8007ac6:	f04f 0c01 	mov.w	ip, #1
 8007aca:	e7f8      	b.n	8007abe <_strtod_l+0x27e>
 8007acc:	08009948 	.word	0x08009948
 8007ad0:	08009930 	.word	0x08009930
 8007ad4:	7ff00000 	.word	0x7ff00000
 8007ad8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007ada:	1c51      	adds	r1, r2, #1
 8007adc:	9119      	str	r1, [sp, #100]	@ 0x64
 8007ade:	7852      	ldrb	r2, [r2, #1]
 8007ae0:	2a30      	cmp	r2, #48	@ 0x30
 8007ae2:	d0f9      	beq.n	8007ad8 <_strtod_l+0x298>
 8007ae4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007ae8:	2908      	cmp	r1, #8
 8007aea:	f63f af78 	bhi.w	80079de <_strtod_l+0x19e>
 8007aee:	3a30      	subs	r2, #48	@ 0x30
 8007af0:	920e      	str	r2, [sp, #56]	@ 0x38
 8007af2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007af4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007af6:	f04f 080a 	mov.w	r8, #10
 8007afa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007afc:	1c56      	adds	r6, r2, #1
 8007afe:	9619      	str	r6, [sp, #100]	@ 0x64
 8007b00:	7852      	ldrb	r2, [r2, #1]
 8007b02:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007b06:	f1be 0f09 	cmp.w	lr, #9
 8007b0a:	d939      	bls.n	8007b80 <_strtod_l+0x340>
 8007b0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007b0e:	1a76      	subs	r6, r6, r1
 8007b10:	2e08      	cmp	r6, #8
 8007b12:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007b16:	dc03      	bgt.n	8007b20 <_strtod_l+0x2e0>
 8007b18:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007b1a:	4588      	cmp	r8, r1
 8007b1c:	bfa8      	it	ge
 8007b1e:	4688      	movge	r8, r1
 8007b20:	f1bc 0f00 	cmp.w	ip, #0
 8007b24:	d001      	beq.n	8007b2a <_strtod_l+0x2ea>
 8007b26:	f1c8 0800 	rsb	r8, r8, #0
 8007b2a:	2d00      	cmp	r5, #0
 8007b2c:	d14e      	bne.n	8007bcc <_strtod_l+0x38c>
 8007b2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007b30:	4308      	orrs	r0, r1
 8007b32:	f47f aebe 	bne.w	80078b2 <_strtod_l+0x72>
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	f47f aed6 	bne.w	80078e8 <_strtod_l+0xa8>
 8007b3c:	2a69      	cmp	r2, #105	@ 0x69
 8007b3e:	d028      	beq.n	8007b92 <_strtod_l+0x352>
 8007b40:	dc25      	bgt.n	8007b8e <_strtod_l+0x34e>
 8007b42:	2a49      	cmp	r2, #73	@ 0x49
 8007b44:	d025      	beq.n	8007b92 <_strtod_l+0x352>
 8007b46:	2a4e      	cmp	r2, #78	@ 0x4e
 8007b48:	f47f aece 	bne.w	80078e8 <_strtod_l+0xa8>
 8007b4c:	499b      	ldr	r1, [pc, #620]	@ (8007dbc <_strtod_l+0x57c>)
 8007b4e:	a819      	add	r0, sp, #100	@ 0x64
 8007b50:	f001 f9ee 	bl	8008f30 <__match>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f43f aec7 	beq.w	80078e8 <_strtod_l+0xa8>
 8007b5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b28      	cmp	r3, #40	@ 0x28
 8007b60:	d12e      	bne.n	8007bc0 <_strtod_l+0x380>
 8007b62:	4997      	ldr	r1, [pc, #604]	@ (8007dc0 <_strtod_l+0x580>)
 8007b64:	aa1c      	add	r2, sp, #112	@ 0x70
 8007b66:	a819      	add	r0, sp, #100	@ 0x64
 8007b68:	f001 f9f6 	bl	8008f58 <__hexnan>
 8007b6c:	2805      	cmp	r0, #5
 8007b6e:	d127      	bne.n	8007bc0 <_strtod_l+0x380>
 8007b70:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007b72:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8007b76:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8007b7a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007b7e:	e698      	b.n	80078b2 <_strtod_l+0x72>
 8007b80:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007b82:	fb08 2101 	mla	r1, r8, r1, r2
 8007b86:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8007b8a:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b8c:	e7b5      	b.n	8007afa <_strtod_l+0x2ba>
 8007b8e:	2a6e      	cmp	r2, #110	@ 0x6e
 8007b90:	e7da      	b.n	8007b48 <_strtod_l+0x308>
 8007b92:	498c      	ldr	r1, [pc, #560]	@ (8007dc4 <_strtod_l+0x584>)
 8007b94:	a819      	add	r0, sp, #100	@ 0x64
 8007b96:	f001 f9cb 	bl	8008f30 <__match>
 8007b9a:	2800      	cmp	r0, #0
 8007b9c:	f43f aea4 	beq.w	80078e8 <_strtod_l+0xa8>
 8007ba0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007ba2:	4989      	ldr	r1, [pc, #548]	@ (8007dc8 <_strtod_l+0x588>)
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	a819      	add	r0, sp, #100	@ 0x64
 8007ba8:	9319      	str	r3, [sp, #100]	@ 0x64
 8007baa:	f001 f9c1 	bl	8008f30 <__match>
 8007bae:	b910      	cbnz	r0, 8007bb6 <_strtod_l+0x376>
 8007bb0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	9319      	str	r3, [sp, #100]	@ 0x64
 8007bb6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007dd8 <_strtod_l+0x598>
 8007bba:	f04f 0a00 	mov.w	sl, #0
 8007bbe:	e678      	b.n	80078b2 <_strtod_l+0x72>
 8007bc0:	4882      	ldr	r0, [pc, #520]	@ (8007dcc <_strtod_l+0x58c>)
 8007bc2:	f000 fef1 	bl	80089a8 <nan>
 8007bc6:	ec5b ab10 	vmov	sl, fp, d0
 8007bca:	e672      	b.n	80078b2 <_strtod_l+0x72>
 8007bcc:	eba8 0309 	sub.w	r3, r8, r9
 8007bd0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bd4:	2f00      	cmp	r7, #0
 8007bd6:	bf08      	it	eq
 8007bd8:	462f      	moveq	r7, r5
 8007bda:	2d10      	cmp	r5, #16
 8007bdc:	462c      	mov	r4, r5
 8007bde:	bfa8      	it	ge
 8007be0:	2410      	movge	r4, #16
 8007be2:	f7f8 fc8f 	bl	8000504 <__aeabi_ui2d>
 8007be6:	2d09      	cmp	r5, #9
 8007be8:	4682      	mov	sl, r0
 8007bea:	468b      	mov	fp, r1
 8007bec:	dc13      	bgt.n	8007c16 <_strtod_l+0x3d6>
 8007bee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	f43f ae5e 	beq.w	80078b2 <_strtod_l+0x72>
 8007bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bf8:	dd78      	ble.n	8007cec <_strtod_l+0x4ac>
 8007bfa:	2b16      	cmp	r3, #22
 8007bfc:	dc5f      	bgt.n	8007cbe <_strtod_l+0x47e>
 8007bfe:	4974      	ldr	r1, [pc, #464]	@ (8007dd0 <_strtod_l+0x590>)
 8007c00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c08:	4652      	mov	r2, sl
 8007c0a:	465b      	mov	r3, fp
 8007c0c:	f7f8 fcf4 	bl	80005f8 <__aeabi_dmul>
 8007c10:	4682      	mov	sl, r0
 8007c12:	468b      	mov	fp, r1
 8007c14:	e64d      	b.n	80078b2 <_strtod_l+0x72>
 8007c16:	4b6e      	ldr	r3, [pc, #440]	@ (8007dd0 <_strtod_l+0x590>)
 8007c18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c1c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007c20:	f7f8 fcea 	bl	80005f8 <__aeabi_dmul>
 8007c24:	4682      	mov	sl, r0
 8007c26:	9808      	ldr	r0, [sp, #32]
 8007c28:	468b      	mov	fp, r1
 8007c2a:	f7f8 fc6b 	bl	8000504 <__aeabi_ui2d>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	460b      	mov	r3, r1
 8007c32:	4650      	mov	r0, sl
 8007c34:	4659      	mov	r1, fp
 8007c36:	f7f8 fb29 	bl	800028c <__adddf3>
 8007c3a:	2d0f      	cmp	r5, #15
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	468b      	mov	fp, r1
 8007c40:	ddd5      	ble.n	8007bee <_strtod_l+0x3ae>
 8007c42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c44:	1b2c      	subs	r4, r5, r4
 8007c46:	441c      	add	r4, r3
 8007c48:	2c00      	cmp	r4, #0
 8007c4a:	f340 8096 	ble.w	8007d7a <_strtod_l+0x53a>
 8007c4e:	f014 030f 	ands.w	r3, r4, #15
 8007c52:	d00a      	beq.n	8007c6a <_strtod_l+0x42a>
 8007c54:	495e      	ldr	r1, [pc, #376]	@ (8007dd0 <_strtod_l+0x590>)
 8007c56:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c5a:	4652      	mov	r2, sl
 8007c5c:	465b      	mov	r3, fp
 8007c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c62:	f7f8 fcc9 	bl	80005f8 <__aeabi_dmul>
 8007c66:	4682      	mov	sl, r0
 8007c68:	468b      	mov	fp, r1
 8007c6a:	f034 040f 	bics.w	r4, r4, #15
 8007c6e:	d073      	beq.n	8007d58 <_strtod_l+0x518>
 8007c70:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8007c74:	dd48      	ble.n	8007d08 <_strtod_l+0x4c8>
 8007c76:	2400      	movs	r4, #0
 8007c78:	46a0      	mov	r8, r4
 8007c7a:	940a      	str	r4, [sp, #40]	@ 0x28
 8007c7c:	46a1      	mov	r9, r4
 8007c7e:	9a05      	ldr	r2, [sp, #20]
 8007c80:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007dd8 <_strtod_l+0x598>
 8007c84:	2322      	movs	r3, #34	@ 0x22
 8007c86:	6013      	str	r3, [r2, #0]
 8007c88:	f04f 0a00 	mov.w	sl, #0
 8007c8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	f43f ae0f 	beq.w	80078b2 <_strtod_l+0x72>
 8007c94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007c96:	9805      	ldr	r0, [sp, #20]
 8007c98:	f7ff f942 	bl	8006f20 <_Bfree>
 8007c9c:	9805      	ldr	r0, [sp, #20]
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	f7ff f93e 	bl	8006f20 <_Bfree>
 8007ca4:	9805      	ldr	r0, [sp, #20]
 8007ca6:	4641      	mov	r1, r8
 8007ca8:	f7ff f93a 	bl	8006f20 <_Bfree>
 8007cac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007cae:	9805      	ldr	r0, [sp, #20]
 8007cb0:	f7ff f936 	bl	8006f20 <_Bfree>
 8007cb4:	9805      	ldr	r0, [sp, #20]
 8007cb6:	4621      	mov	r1, r4
 8007cb8:	f7ff f932 	bl	8006f20 <_Bfree>
 8007cbc:	e5f9      	b.n	80078b2 <_strtod_l+0x72>
 8007cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cc0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	dbbc      	blt.n	8007c42 <_strtod_l+0x402>
 8007cc8:	4c41      	ldr	r4, [pc, #260]	@ (8007dd0 <_strtod_l+0x590>)
 8007cca:	f1c5 050f 	rsb	r5, r5, #15
 8007cce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007cd2:	4652      	mov	r2, sl
 8007cd4:	465b      	mov	r3, fp
 8007cd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cda:	f7f8 fc8d 	bl	80005f8 <__aeabi_dmul>
 8007cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ce0:	1b5d      	subs	r5, r3, r5
 8007ce2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007ce6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007cea:	e78f      	b.n	8007c0c <_strtod_l+0x3cc>
 8007cec:	3316      	adds	r3, #22
 8007cee:	dba8      	blt.n	8007c42 <_strtod_l+0x402>
 8007cf0:	4b37      	ldr	r3, [pc, #220]	@ (8007dd0 <_strtod_l+0x590>)
 8007cf2:	eba9 0808 	sub.w	r8, r9, r8
 8007cf6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007cfa:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007cfe:	4650      	mov	r0, sl
 8007d00:	4659      	mov	r1, fp
 8007d02:	f7f8 fda3 	bl	800084c <__aeabi_ddiv>
 8007d06:	e783      	b.n	8007c10 <_strtod_l+0x3d0>
 8007d08:	4b32      	ldr	r3, [pc, #200]	@ (8007dd4 <_strtod_l+0x594>)
 8007d0a:	9308      	str	r3, [sp, #32]
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	1124      	asrs	r4, r4, #4
 8007d10:	4650      	mov	r0, sl
 8007d12:	4659      	mov	r1, fp
 8007d14:	461e      	mov	r6, r3
 8007d16:	2c01      	cmp	r4, #1
 8007d18:	dc21      	bgt.n	8007d5e <_strtod_l+0x51e>
 8007d1a:	b10b      	cbz	r3, 8007d20 <_strtod_l+0x4e0>
 8007d1c:	4682      	mov	sl, r0
 8007d1e:	468b      	mov	fp, r1
 8007d20:	492c      	ldr	r1, [pc, #176]	@ (8007dd4 <_strtod_l+0x594>)
 8007d22:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007d26:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007d2a:	4652      	mov	r2, sl
 8007d2c:	465b      	mov	r3, fp
 8007d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d32:	f7f8 fc61 	bl	80005f8 <__aeabi_dmul>
 8007d36:	4b28      	ldr	r3, [pc, #160]	@ (8007dd8 <_strtod_l+0x598>)
 8007d38:	460a      	mov	r2, r1
 8007d3a:	400b      	ands	r3, r1
 8007d3c:	4927      	ldr	r1, [pc, #156]	@ (8007ddc <_strtod_l+0x59c>)
 8007d3e:	428b      	cmp	r3, r1
 8007d40:	4682      	mov	sl, r0
 8007d42:	d898      	bhi.n	8007c76 <_strtod_l+0x436>
 8007d44:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007d48:	428b      	cmp	r3, r1
 8007d4a:	bf86      	itte	hi
 8007d4c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007de0 <_strtod_l+0x5a0>
 8007d50:	f04f 3aff 	movhi.w	sl, #4294967295
 8007d54:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007d58:	2300      	movs	r3, #0
 8007d5a:	9308      	str	r3, [sp, #32]
 8007d5c:	e07a      	b.n	8007e54 <_strtod_l+0x614>
 8007d5e:	07e2      	lsls	r2, r4, #31
 8007d60:	d505      	bpl.n	8007d6e <_strtod_l+0x52e>
 8007d62:	9b08      	ldr	r3, [sp, #32]
 8007d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d68:	f7f8 fc46 	bl	80005f8 <__aeabi_dmul>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	9a08      	ldr	r2, [sp, #32]
 8007d70:	3208      	adds	r2, #8
 8007d72:	3601      	adds	r6, #1
 8007d74:	1064      	asrs	r4, r4, #1
 8007d76:	9208      	str	r2, [sp, #32]
 8007d78:	e7cd      	b.n	8007d16 <_strtod_l+0x4d6>
 8007d7a:	d0ed      	beq.n	8007d58 <_strtod_l+0x518>
 8007d7c:	4264      	negs	r4, r4
 8007d7e:	f014 020f 	ands.w	r2, r4, #15
 8007d82:	d00a      	beq.n	8007d9a <_strtod_l+0x55a>
 8007d84:	4b12      	ldr	r3, [pc, #72]	@ (8007dd0 <_strtod_l+0x590>)
 8007d86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d8a:	4650      	mov	r0, sl
 8007d8c:	4659      	mov	r1, fp
 8007d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d92:	f7f8 fd5b 	bl	800084c <__aeabi_ddiv>
 8007d96:	4682      	mov	sl, r0
 8007d98:	468b      	mov	fp, r1
 8007d9a:	1124      	asrs	r4, r4, #4
 8007d9c:	d0dc      	beq.n	8007d58 <_strtod_l+0x518>
 8007d9e:	2c1f      	cmp	r4, #31
 8007da0:	dd20      	ble.n	8007de4 <_strtod_l+0x5a4>
 8007da2:	2400      	movs	r4, #0
 8007da4:	46a0      	mov	r8, r4
 8007da6:	940a      	str	r4, [sp, #40]	@ 0x28
 8007da8:	46a1      	mov	r9, r4
 8007daa:	9a05      	ldr	r2, [sp, #20]
 8007dac:	2322      	movs	r3, #34	@ 0x22
 8007dae:	f04f 0a00 	mov.w	sl, #0
 8007db2:	f04f 0b00 	mov.w	fp, #0
 8007db6:	6013      	str	r3, [r2, #0]
 8007db8:	e768      	b.n	8007c8c <_strtod_l+0x44c>
 8007dba:	bf00      	nop
 8007dbc:	08009721 	.word	0x08009721
 8007dc0:	08009934 	.word	0x08009934
 8007dc4:	08009719 	.word	0x08009719
 8007dc8:	08009750 	.word	0x08009750
 8007dcc:	08009add 	.word	0x08009add
 8007dd0:	08009868 	.word	0x08009868
 8007dd4:	08009840 	.word	0x08009840
 8007dd8:	7ff00000 	.word	0x7ff00000
 8007ddc:	7ca00000 	.word	0x7ca00000
 8007de0:	7fefffff 	.word	0x7fefffff
 8007de4:	f014 0310 	ands.w	r3, r4, #16
 8007de8:	bf18      	it	ne
 8007dea:	236a      	movne	r3, #106	@ 0x6a
 8007dec:	4ea9      	ldr	r6, [pc, #676]	@ (8008094 <_strtod_l+0x854>)
 8007dee:	9308      	str	r3, [sp, #32]
 8007df0:	4650      	mov	r0, sl
 8007df2:	4659      	mov	r1, fp
 8007df4:	2300      	movs	r3, #0
 8007df6:	07e2      	lsls	r2, r4, #31
 8007df8:	d504      	bpl.n	8007e04 <_strtod_l+0x5c4>
 8007dfa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007dfe:	f7f8 fbfb 	bl	80005f8 <__aeabi_dmul>
 8007e02:	2301      	movs	r3, #1
 8007e04:	1064      	asrs	r4, r4, #1
 8007e06:	f106 0608 	add.w	r6, r6, #8
 8007e0a:	d1f4      	bne.n	8007df6 <_strtod_l+0x5b6>
 8007e0c:	b10b      	cbz	r3, 8007e12 <_strtod_l+0x5d2>
 8007e0e:	4682      	mov	sl, r0
 8007e10:	468b      	mov	fp, r1
 8007e12:	9b08      	ldr	r3, [sp, #32]
 8007e14:	b1b3      	cbz	r3, 8007e44 <_strtod_l+0x604>
 8007e16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007e1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	4659      	mov	r1, fp
 8007e22:	dd0f      	ble.n	8007e44 <_strtod_l+0x604>
 8007e24:	2b1f      	cmp	r3, #31
 8007e26:	dd55      	ble.n	8007ed4 <_strtod_l+0x694>
 8007e28:	2b34      	cmp	r3, #52	@ 0x34
 8007e2a:	bfde      	ittt	le
 8007e2c:	f04f 33ff 	movle.w	r3, #4294967295
 8007e30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007e34:	4093      	lslle	r3, r2
 8007e36:	f04f 0a00 	mov.w	sl, #0
 8007e3a:	bfcc      	ite	gt
 8007e3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007e40:	ea03 0b01 	andle.w	fp, r3, r1
 8007e44:	2200      	movs	r2, #0
 8007e46:	2300      	movs	r3, #0
 8007e48:	4650      	mov	r0, sl
 8007e4a:	4659      	mov	r1, fp
 8007e4c:	f7f8 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e50:	2800      	cmp	r0, #0
 8007e52:	d1a6      	bne.n	8007da2 <_strtod_l+0x562>
 8007e54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007e5a:	9805      	ldr	r0, [sp, #20]
 8007e5c:	462b      	mov	r3, r5
 8007e5e:	463a      	mov	r2, r7
 8007e60:	f7ff f8c6 	bl	8006ff0 <__s2b>
 8007e64:	900a      	str	r0, [sp, #40]	@ 0x28
 8007e66:	2800      	cmp	r0, #0
 8007e68:	f43f af05 	beq.w	8007c76 <_strtod_l+0x436>
 8007e6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e6e:	2a00      	cmp	r2, #0
 8007e70:	eba9 0308 	sub.w	r3, r9, r8
 8007e74:	bfa8      	it	ge
 8007e76:	2300      	movge	r3, #0
 8007e78:	9312      	str	r3, [sp, #72]	@ 0x48
 8007e7a:	2400      	movs	r4, #0
 8007e7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007e80:	9316      	str	r3, [sp, #88]	@ 0x58
 8007e82:	46a0      	mov	r8, r4
 8007e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e86:	9805      	ldr	r0, [sp, #20]
 8007e88:	6859      	ldr	r1, [r3, #4]
 8007e8a:	f7ff f809 	bl	8006ea0 <_Balloc>
 8007e8e:	4681      	mov	r9, r0
 8007e90:	2800      	cmp	r0, #0
 8007e92:	f43f aef4 	beq.w	8007c7e <_strtod_l+0x43e>
 8007e96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e98:	691a      	ldr	r2, [r3, #16]
 8007e9a:	3202      	adds	r2, #2
 8007e9c:	f103 010c 	add.w	r1, r3, #12
 8007ea0:	0092      	lsls	r2, r2, #2
 8007ea2:	300c      	adds	r0, #12
 8007ea4:	f000 fd72 	bl	800898c <memcpy>
 8007ea8:	ec4b ab10 	vmov	d0, sl, fp
 8007eac:	9805      	ldr	r0, [sp, #20]
 8007eae:	aa1c      	add	r2, sp, #112	@ 0x70
 8007eb0:	a91b      	add	r1, sp, #108	@ 0x6c
 8007eb2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007eb6:	f7ff fbd7 	bl	8007668 <__d2b>
 8007eba:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	f43f aede 	beq.w	8007c7e <_strtod_l+0x43e>
 8007ec2:	9805      	ldr	r0, [sp, #20]
 8007ec4:	2101      	movs	r1, #1
 8007ec6:	f7ff f929 	bl	800711c <__i2b>
 8007eca:	4680      	mov	r8, r0
 8007ecc:	b948      	cbnz	r0, 8007ee2 <_strtod_l+0x6a2>
 8007ece:	f04f 0800 	mov.w	r8, #0
 8007ed2:	e6d4      	b.n	8007c7e <_strtod_l+0x43e>
 8007ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8007ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8007edc:	ea03 0a0a 	and.w	sl, r3, sl
 8007ee0:	e7b0      	b.n	8007e44 <_strtod_l+0x604>
 8007ee2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007ee4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007ee6:	2d00      	cmp	r5, #0
 8007ee8:	bfab      	itete	ge
 8007eea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007eec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007eee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007ef0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007ef2:	bfac      	ite	ge
 8007ef4:	18ef      	addge	r7, r5, r3
 8007ef6:	1b5e      	sublt	r6, r3, r5
 8007ef8:	9b08      	ldr	r3, [sp, #32]
 8007efa:	1aed      	subs	r5, r5, r3
 8007efc:	4415      	add	r5, r2
 8007efe:	4b66      	ldr	r3, [pc, #408]	@ (8008098 <_strtod_l+0x858>)
 8007f00:	3d01      	subs	r5, #1
 8007f02:	429d      	cmp	r5, r3
 8007f04:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007f08:	da50      	bge.n	8007fac <_strtod_l+0x76c>
 8007f0a:	1b5b      	subs	r3, r3, r5
 8007f0c:	2b1f      	cmp	r3, #31
 8007f0e:	eba2 0203 	sub.w	r2, r2, r3
 8007f12:	f04f 0101 	mov.w	r1, #1
 8007f16:	dc3d      	bgt.n	8007f94 <_strtod_l+0x754>
 8007f18:	fa01 f303 	lsl.w	r3, r1, r3
 8007f1c:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007f1e:	2300      	movs	r3, #0
 8007f20:	9310      	str	r3, [sp, #64]	@ 0x40
 8007f22:	18bd      	adds	r5, r7, r2
 8007f24:	9b08      	ldr	r3, [sp, #32]
 8007f26:	42af      	cmp	r7, r5
 8007f28:	4416      	add	r6, r2
 8007f2a:	441e      	add	r6, r3
 8007f2c:	463b      	mov	r3, r7
 8007f2e:	bfa8      	it	ge
 8007f30:	462b      	movge	r3, r5
 8007f32:	42b3      	cmp	r3, r6
 8007f34:	bfa8      	it	ge
 8007f36:	4633      	movge	r3, r6
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	bfc2      	ittt	gt
 8007f3c:	1aed      	subgt	r5, r5, r3
 8007f3e:	1af6      	subgt	r6, r6, r3
 8007f40:	1aff      	subgt	r7, r7, r3
 8007f42:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dd16      	ble.n	8007f76 <_strtod_l+0x736>
 8007f48:	4641      	mov	r1, r8
 8007f4a:	9805      	ldr	r0, [sp, #20]
 8007f4c:	461a      	mov	r2, r3
 8007f4e:	f7ff f9a5 	bl	800729c <__pow5mult>
 8007f52:	4680      	mov	r8, r0
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d0ba      	beq.n	8007ece <_strtod_l+0x68e>
 8007f58:	4601      	mov	r1, r0
 8007f5a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007f5c:	9805      	ldr	r0, [sp, #20]
 8007f5e:	f7ff f8f3 	bl	8007148 <__multiply>
 8007f62:	900e      	str	r0, [sp, #56]	@ 0x38
 8007f64:	2800      	cmp	r0, #0
 8007f66:	f43f ae8a 	beq.w	8007c7e <_strtod_l+0x43e>
 8007f6a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007f6c:	9805      	ldr	r0, [sp, #20]
 8007f6e:	f7fe ffd7 	bl	8006f20 <_Bfree>
 8007f72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f74:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f76:	2d00      	cmp	r5, #0
 8007f78:	dc1d      	bgt.n	8007fb6 <_strtod_l+0x776>
 8007f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	dd23      	ble.n	8007fc8 <_strtod_l+0x788>
 8007f80:	4649      	mov	r1, r9
 8007f82:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007f84:	9805      	ldr	r0, [sp, #20]
 8007f86:	f7ff f989 	bl	800729c <__pow5mult>
 8007f8a:	4681      	mov	r9, r0
 8007f8c:	b9e0      	cbnz	r0, 8007fc8 <_strtod_l+0x788>
 8007f8e:	f04f 0900 	mov.w	r9, #0
 8007f92:	e674      	b.n	8007c7e <_strtod_l+0x43e>
 8007f94:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007f98:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007f9c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007fa0:	35e2      	adds	r5, #226	@ 0xe2
 8007fa2:	fa01 f305 	lsl.w	r3, r1, r5
 8007fa6:	9310      	str	r3, [sp, #64]	@ 0x40
 8007fa8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007faa:	e7ba      	b.n	8007f22 <_strtod_l+0x6e2>
 8007fac:	2300      	movs	r3, #0
 8007fae:	9310      	str	r3, [sp, #64]	@ 0x40
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fb4:	e7b5      	b.n	8007f22 <_strtod_l+0x6e2>
 8007fb6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007fb8:	9805      	ldr	r0, [sp, #20]
 8007fba:	462a      	mov	r2, r5
 8007fbc:	f7ff f9c8 	bl	8007350 <__lshift>
 8007fc0:	901a      	str	r0, [sp, #104]	@ 0x68
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d1d9      	bne.n	8007f7a <_strtod_l+0x73a>
 8007fc6:	e65a      	b.n	8007c7e <_strtod_l+0x43e>
 8007fc8:	2e00      	cmp	r6, #0
 8007fca:	dd07      	ble.n	8007fdc <_strtod_l+0x79c>
 8007fcc:	4649      	mov	r1, r9
 8007fce:	9805      	ldr	r0, [sp, #20]
 8007fd0:	4632      	mov	r2, r6
 8007fd2:	f7ff f9bd 	bl	8007350 <__lshift>
 8007fd6:	4681      	mov	r9, r0
 8007fd8:	2800      	cmp	r0, #0
 8007fda:	d0d8      	beq.n	8007f8e <_strtod_l+0x74e>
 8007fdc:	2f00      	cmp	r7, #0
 8007fde:	dd08      	ble.n	8007ff2 <_strtod_l+0x7b2>
 8007fe0:	4641      	mov	r1, r8
 8007fe2:	9805      	ldr	r0, [sp, #20]
 8007fe4:	463a      	mov	r2, r7
 8007fe6:	f7ff f9b3 	bl	8007350 <__lshift>
 8007fea:	4680      	mov	r8, r0
 8007fec:	2800      	cmp	r0, #0
 8007fee:	f43f ae46 	beq.w	8007c7e <_strtod_l+0x43e>
 8007ff2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007ff4:	9805      	ldr	r0, [sp, #20]
 8007ff6:	464a      	mov	r2, r9
 8007ff8:	f7ff fa32 	bl	8007460 <__mdiff>
 8007ffc:	4604      	mov	r4, r0
 8007ffe:	2800      	cmp	r0, #0
 8008000:	f43f ae3d 	beq.w	8007c7e <_strtod_l+0x43e>
 8008004:	68c3      	ldr	r3, [r0, #12]
 8008006:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008008:	2300      	movs	r3, #0
 800800a:	60c3      	str	r3, [r0, #12]
 800800c:	4641      	mov	r1, r8
 800800e:	f7ff fa0b 	bl	8007428 <__mcmp>
 8008012:	2800      	cmp	r0, #0
 8008014:	da46      	bge.n	80080a4 <_strtod_l+0x864>
 8008016:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008018:	ea53 030a 	orrs.w	r3, r3, sl
 800801c:	d16c      	bne.n	80080f8 <_strtod_l+0x8b8>
 800801e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008022:	2b00      	cmp	r3, #0
 8008024:	d168      	bne.n	80080f8 <_strtod_l+0x8b8>
 8008026:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800802a:	0d1b      	lsrs	r3, r3, #20
 800802c:	051b      	lsls	r3, r3, #20
 800802e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008032:	d961      	bls.n	80080f8 <_strtod_l+0x8b8>
 8008034:	6963      	ldr	r3, [r4, #20]
 8008036:	b913      	cbnz	r3, 800803e <_strtod_l+0x7fe>
 8008038:	6923      	ldr	r3, [r4, #16]
 800803a:	2b01      	cmp	r3, #1
 800803c:	dd5c      	ble.n	80080f8 <_strtod_l+0x8b8>
 800803e:	4621      	mov	r1, r4
 8008040:	2201      	movs	r2, #1
 8008042:	9805      	ldr	r0, [sp, #20]
 8008044:	f7ff f984 	bl	8007350 <__lshift>
 8008048:	4641      	mov	r1, r8
 800804a:	4604      	mov	r4, r0
 800804c:	f7ff f9ec 	bl	8007428 <__mcmp>
 8008050:	2800      	cmp	r0, #0
 8008052:	dd51      	ble.n	80080f8 <_strtod_l+0x8b8>
 8008054:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008058:	9a08      	ldr	r2, [sp, #32]
 800805a:	0d1b      	lsrs	r3, r3, #20
 800805c:	051b      	lsls	r3, r3, #20
 800805e:	2a00      	cmp	r2, #0
 8008060:	d06b      	beq.n	800813a <_strtod_l+0x8fa>
 8008062:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008066:	d868      	bhi.n	800813a <_strtod_l+0x8fa>
 8008068:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800806c:	f67f ae9d 	bls.w	8007daa <_strtod_l+0x56a>
 8008070:	4b0a      	ldr	r3, [pc, #40]	@ (800809c <_strtod_l+0x85c>)
 8008072:	4650      	mov	r0, sl
 8008074:	4659      	mov	r1, fp
 8008076:	2200      	movs	r2, #0
 8008078:	f7f8 fabe 	bl	80005f8 <__aeabi_dmul>
 800807c:	4b08      	ldr	r3, [pc, #32]	@ (80080a0 <_strtod_l+0x860>)
 800807e:	400b      	ands	r3, r1
 8008080:	4682      	mov	sl, r0
 8008082:	468b      	mov	fp, r1
 8008084:	2b00      	cmp	r3, #0
 8008086:	f47f ae05 	bne.w	8007c94 <_strtod_l+0x454>
 800808a:	9a05      	ldr	r2, [sp, #20]
 800808c:	2322      	movs	r3, #34	@ 0x22
 800808e:	6013      	str	r3, [r2, #0]
 8008090:	e600      	b.n	8007c94 <_strtod_l+0x454>
 8008092:	bf00      	nop
 8008094:	08009960 	.word	0x08009960
 8008098:	fffffc02 	.word	0xfffffc02
 800809c:	39500000 	.word	0x39500000
 80080a0:	7ff00000 	.word	0x7ff00000
 80080a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80080a8:	d165      	bne.n	8008176 <_strtod_l+0x936>
 80080aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80080ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080b0:	b35a      	cbz	r2, 800810a <_strtod_l+0x8ca>
 80080b2:	4a9f      	ldr	r2, [pc, #636]	@ (8008330 <_strtod_l+0xaf0>)
 80080b4:	4293      	cmp	r3, r2
 80080b6:	d12b      	bne.n	8008110 <_strtod_l+0x8d0>
 80080b8:	9b08      	ldr	r3, [sp, #32]
 80080ba:	4651      	mov	r1, sl
 80080bc:	b303      	cbz	r3, 8008100 <_strtod_l+0x8c0>
 80080be:	4b9d      	ldr	r3, [pc, #628]	@ (8008334 <_strtod_l+0xaf4>)
 80080c0:	465a      	mov	r2, fp
 80080c2:	4013      	ands	r3, r2
 80080c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80080c8:	f04f 32ff 	mov.w	r2, #4294967295
 80080cc:	d81b      	bhi.n	8008106 <_strtod_l+0x8c6>
 80080ce:	0d1b      	lsrs	r3, r3, #20
 80080d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80080d4:	fa02 f303 	lsl.w	r3, r2, r3
 80080d8:	4299      	cmp	r1, r3
 80080da:	d119      	bne.n	8008110 <_strtod_l+0x8d0>
 80080dc:	4b96      	ldr	r3, [pc, #600]	@ (8008338 <_strtod_l+0xaf8>)
 80080de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d102      	bne.n	80080ea <_strtod_l+0x8aa>
 80080e4:	3101      	adds	r1, #1
 80080e6:	f43f adca 	beq.w	8007c7e <_strtod_l+0x43e>
 80080ea:	4b92      	ldr	r3, [pc, #584]	@ (8008334 <_strtod_l+0xaf4>)
 80080ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080ee:	401a      	ands	r2, r3
 80080f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80080f4:	f04f 0a00 	mov.w	sl, #0
 80080f8:	9b08      	ldr	r3, [sp, #32]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d1b8      	bne.n	8008070 <_strtod_l+0x830>
 80080fe:	e5c9      	b.n	8007c94 <_strtod_l+0x454>
 8008100:	f04f 33ff 	mov.w	r3, #4294967295
 8008104:	e7e8      	b.n	80080d8 <_strtod_l+0x898>
 8008106:	4613      	mov	r3, r2
 8008108:	e7e6      	b.n	80080d8 <_strtod_l+0x898>
 800810a:	ea53 030a 	orrs.w	r3, r3, sl
 800810e:	d0a1      	beq.n	8008054 <_strtod_l+0x814>
 8008110:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008112:	b1db      	cbz	r3, 800814c <_strtod_l+0x90c>
 8008114:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008116:	4213      	tst	r3, r2
 8008118:	d0ee      	beq.n	80080f8 <_strtod_l+0x8b8>
 800811a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800811c:	9a08      	ldr	r2, [sp, #32]
 800811e:	4650      	mov	r0, sl
 8008120:	4659      	mov	r1, fp
 8008122:	b1bb      	cbz	r3, 8008154 <_strtod_l+0x914>
 8008124:	f7ff fb6e 	bl	8007804 <sulp>
 8008128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800812c:	ec53 2b10 	vmov	r2, r3, d0
 8008130:	f7f8 f8ac 	bl	800028c <__adddf3>
 8008134:	4682      	mov	sl, r0
 8008136:	468b      	mov	fp, r1
 8008138:	e7de      	b.n	80080f8 <_strtod_l+0x8b8>
 800813a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800813e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008142:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008146:	f04f 3aff 	mov.w	sl, #4294967295
 800814a:	e7d5      	b.n	80080f8 <_strtod_l+0x8b8>
 800814c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800814e:	ea13 0f0a 	tst.w	r3, sl
 8008152:	e7e1      	b.n	8008118 <_strtod_l+0x8d8>
 8008154:	f7ff fb56 	bl	8007804 <sulp>
 8008158:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800815c:	ec53 2b10 	vmov	r2, r3, d0
 8008160:	f7f8 f892 	bl	8000288 <__aeabi_dsub>
 8008164:	2200      	movs	r2, #0
 8008166:	2300      	movs	r3, #0
 8008168:	4682      	mov	sl, r0
 800816a:	468b      	mov	fp, r1
 800816c:	f7f8 fcac 	bl	8000ac8 <__aeabi_dcmpeq>
 8008170:	2800      	cmp	r0, #0
 8008172:	d0c1      	beq.n	80080f8 <_strtod_l+0x8b8>
 8008174:	e619      	b.n	8007daa <_strtod_l+0x56a>
 8008176:	4641      	mov	r1, r8
 8008178:	4620      	mov	r0, r4
 800817a:	f7ff facd 	bl	8007718 <__ratio>
 800817e:	ec57 6b10 	vmov	r6, r7, d0
 8008182:	2200      	movs	r2, #0
 8008184:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008188:	4630      	mov	r0, r6
 800818a:	4639      	mov	r1, r7
 800818c:	f7f8 fcb0 	bl	8000af0 <__aeabi_dcmple>
 8008190:	2800      	cmp	r0, #0
 8008192:	d06f      	beq.n	8008274 <_strtod_l+0xa34>
 8008194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008196:	2b00      	cmp	r3, #0
 8008198:	d17a      	bne.n	8008290 <_strtod_l+0xa50>
 800819a:	f1ba 0f00 	cmp.w	sl, #0
 800819e:	d158      	bne.n	8008252 <_strtod_l+0xa12>
 80081a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d15a      	bne.n	8008260 <_strtod_l+0xa20>
 80081aa:	4b64      	ldr	r3, [pc, #400]	@ (800833c <_strtod_l+0xafc>)
 80081ac:	2200      	movs	r2, #0
 80081ae:	4630      	mov	r0, r6
 80081b0:	4639      	mov	r1, r7
 80081b2:	f7f8 fc93 	bl	8000adc <__aeabi_dcmplt>
 80081b6:	2800      	cmp	r0, #0
 80081b8:	d159      	bne.n	800826e <_strtod_l+0xa2e>
 80081ba:	4630      	mov	r0, r6
 80081bc:	4639      	mov	r1, r7
 80081be:	4b60      	ldr	r3, [pc, #384]	@ (8008340 <_strtod_l+0xb00>)
 80081c0:	2200      	movs	r2, #0
 80081c2:	f7f8 fa19 	bl	80005f8 <__aeabi_dmul>
 80081c6:	4606      	mov	r6, r0
 80081c8:	460f      	mov	r7, r1
 80081ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80081ce:	9606      	str	r6, [sp, #24]
 80081d0:	9307      	str	r3, [sp, #28]
 80081d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081d6:	4d57      	ldr	r5, [pc, #348]	@ (8008334 <_strtod_l+0xaf4>)
 80081d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80081dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081de:	401d      	ands	r5, r3
 80081e0:	4b58      	ldr	r3, [pc, #352]	@ (8008344 <_strtod_l+0xb04>)
 80081e2:	429d      	cmp	r5, r3
 80081e4:	f040 80b2 	bne.w	800834c <_strtod_l+0xb0c>
 80081e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80081ee:	ec4b ab10 	vmov	d0, sl, fp
 80081f2:	f7ff f9c9 	bl	8007588 <__ulp>
 80081f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80081fa:	ec51 0b10 	vmov	r0, r1, d0
 80081fe:	f7f8 f9fb 	bl	80005f8 <__aeabi_dmul>
 8008202:	4652      	mov	r2, sl
 8008204:	465b      	mov	r3, fp
 8008206:	f7f8 f841 	bl	800028c <__adddf3>
 800820a:	460b      	mov	r3, r1
 800820c:	4949      	ldr	r1, [pc, #292]	@ (8008334 <_strtod_l+0xaf4>)
 800820e:	4a4e      	ldr	r2, [pc, #312]	@ (8008348 <_strtod_l+0xb08>)
 8008210:	4019      	ands	r1, r3
 8008212:	4291      	cmp	r1, r2
 8008214:	4682      	mov	sl, r0
 8008216:	d942      	bls.n	800829e <_strtod_l+0xa5e>
 8008218:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800821a:	4b47      	ldr	r3, [pc, #284]	@ (8008338 <_strtod_l+0xaf8>)
 800821c:	429a      	cmp	r2, r3
 800821e:	d103      	bne.n	8008228 <_strtod_l+0x9e8>
 8008220:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008222:	3301      	adds	r3, #1
 8008224:	f43f ad2b 	beq.w	8007c7e <_strtod_l+0x43e>
 8008228:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008338 <_strtod_l+0xaf8>
 800822c:	f04f 3aff 	mov.w	sl, #4294967295
 8008230:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008232:	9805      	ldr	r0, [sp, #20]
 8008234:	f7fe fe74 	bl	8006f20 <_Bfree>
 8008238:	9805      	ldr	r0, [sp, #20]
 800823a:	4649      	mov	r1, r9
 800823c:	f7fe fe70 	bl	8006f20 <_Bfree>
 8008240:	9805      	ldr	r0, [sp, #20]
 8008242:	4641      	mov	r1, r8
 8008244:	f7fe fe6c 	bl	8006f20 <_Bfree>
 8008248:	9805      	ldr	r0, [sp, #20]
 800824a:	4621      	mov	r1, r4
 800824c:	f7fe fe68 	bl	8006f20 <_Bfree>
 8008250:	e618      	b.n	8007e84 <_strtod_l+0x644>
 8008252:	f1ba 0f01 	cmp.w	sl, #1
 8008256:	d103      	bne.n	8008260 <_strtod_l+0xa20>
 8008258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800825a:	2b00      	cmp	r3, #0
 800825c:	f43f ada5 	beq.w	8007daa <_strtod_l+0x56a>
 8008260:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008310 <_strtod_l+0xad0>
 8008264:	4f35      	ldr	r7, [pc, #212]	@ (800833c <_strtod_l+0xafc>)
 8008266:	ed8d 7b06 	vstr	d7, [sp, #24]
 800826a:	2600      	movs	r6, #0
 800826c:	e7b1      	b.n	80081d2 <_strtod_l+0x992>
 800826e:	4f34      	ldr	r7, [pc, #208]	@ (8008340 <_strtod_l+0xb00>)
 8008270:	2600      	movs	r6, #0
 8008272:	e7aa      	b.n	80081ca <_strtod_l+0x98a>
 8008274:	4b32      	ldr	r3, [pc, #200]	@ (8008340 <_strtod_l+0xb00>)
 8008276:	4630      	mov	r0, r6
 8008278:	4639      	mov	r1, r7
 800827a:	2200      	movs	r2, #0
 800827c:	f7f8 f9bc 	bl	80005f8 <__aeabi_dmul>
 8008280:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008282:	4606      	mov	r6, r0
 8008284:	460f      	mov	r7, r1
 8008286:	2b00      	cmp	r3, #0
 8008288:	d09f      	beq.n	80081ca <_strtod_l+0x98a>
 800828a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800828e:	e7a0      	b.n	80081d2 <_strtod_l+0x992>
 8008290:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008318 <_strtod_l+0xad8>
 8008294:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008298:	ec57 6b17 	vmov	r6, r7, d7
 800829c:	e799      	b.n	80081d2 <_strtod_l+0x992>
 800829e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80082a2:	9b08      	ldr	r3, [sp, #32]
 80082a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d1c1      	bne.n	8008230 <_strtod_l+0x9f0>
 80082ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80082b0:	0d1b      	lsrs	r3, r3, #20
 80082b2:	051b      	lsls	r3, r3, #20
 80082b4:	429d      	cmp	r5, r3
 80082b6:	d1bb      	bne.n	8008230 <_strtod_l+0x9f0>
 80082b8:	4630      	mov	r0, r6
 80082ba:	4639      	mov	r1, r7
 80082bc:	f7f8 fce4 	bl	8000c88 <__aeabi_d2lz>
 80082c0:	f7f8 f96c 	bl	800059c <__aeabi_l2d>
 80082c4:	4602      	mov	r2, r0
 80082c6:	460b      	mov	r3, r1
 80082c8:	4630      	mov	r0, r6
 80082ca:	4639      	mov	r1, r7
 80082cc:	f7f7 ffdc 	bl	8000288 <__aeabi_dsub>
 80082d0:	460b      	mov	r3, r1
 80082d2:	4602      	mov	r2, r0
 80082d4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80082d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80082dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80082de:	ea46 060a 	orr.w	r6, r6, sl
 80082e2:	431e      	orrs	r6, r3
 80082e4:	d06f      	beq.n	80083c6 <_strtod_l+0xb86>
 80082e6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008320 <_strtod_l+0xae0>)
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f7f8 fbf6 	bl	8000adc <__aeabi_dcmplt>
 80082f0:	2800      	cmp	r0, #0
 80082f2:	f47f accf 	bne.w	8007c94 <_strtod_l+0x454>
 80082f6:	a30c      	add	r3, pc, #48	@ (adr r3, 8008328 <_strtod_l+0xae8>)
 80082f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008300:	f7f8 fc0a 	bl	8000b18 <__aeabi_dcmpgt>
 8008304:	2800      	cmp	r0, #0
 8008306:	d093      	beq.n	8008230 <_strtod_l+0x9f0>
 8008308:	e4c4      	b.n	8007c94 <_strtod_l+0x454>
 800830a:	bf00      	nop
 800830c:	f3af 8000 	nop.w
 8008310:	00000000 	.word	0x00000000
 8008314:	bff00000 	.word	0xbff00000
 8008318:	00000000 	.word	0x00000000
 800831c:	3ff00000 	.word	0x3ff00000
 8008320:	94a03595 	.word	0x94a03595
 8008324:	3fdfffff 	.word	0x3fdfffff
 8008328:	35afe535 	.word	0x35afe535
 800832c:	3fe00000 	.word	0x3fe00000
 8008330:	000fffff 	.word	0x000fffff
 8008334:	7ff00000 	.word	0x7ff00000
 8008338:	7fefffff 	.word	0x7fefffff
 800833c:	3ff00000 	.word	0x3ff00000
 8008340:	3fe00000 	.word	0x3fe00000
 8008344:	7fe00000 	.word	0x7fe00000
 8008348:	7c9fffff 	.word	0x7c9fffff
 800834c:	9b08      	ldr	r3, [sp, #32]
 800834e:	b323      	cbz	r3, 800839a <_strtod_l+0xb5a>
 8008350:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008354:	d821      	bhi.n	800839a <_strtod_l+0xb5a>
 8008356:	a328      	add	r3, pc, #160	@ (adr r3, 80083f8 <_strtod_l+0xbb8>)
 8008358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800835c:	4630      	mov	r0, r6
 800835e:	4639      	mov	r1, r7
 8008360:	f7f8 fbc6 	bl	8000af0 <__aeabi_dcmple>
 8008364:	b1a0      	cbz	r0, 8008390 <_strtod_l+0xb50>
 8008366:	4639      	mov	r1, r7
 8008368:	4630      	mov	r0, r6
 800836a:	f7f8 fc1d 	bl	8000ba8 <__aeabi_d2uiz>
 800836e:	2801      	cmp	r0, #1
 8008370:	bf38      	it	cc
 8008372:	2001      	movcc	r0, #1
 8008374:	f7f8 f8c6 	bl	8000504 <__aeabi_ui2d>
 8008378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800837a:	4606      	mov	r6, r0
 800837c:	460f      	mov	r7, r1
 800837e:	b9fb      	cbnz	r3, 80083c0 <_strtod_l+0xb80>
 8008380:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008384:	9014      	str	r0, [sp, #80]	@ 0x50
 8008386:	9315      	str	r3, [sp, #84]	@ 0x54
 8008388:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800838c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008390:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008392:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008396:	1b5b      	subs	r3, r3, r5
 8008398:	9311      	str	r3, [sp, #68]	@ 0x44
 800839a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800839e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80083a2:	f7ff f8f1 	bl	8007588 <__ulp>
 80083a6:	4650      	mov	r0, sl
 80083a8:	ec53 2b10 	vmov	r2, r3, d0
 80083ac:	4659      	mov	r1, fp
 80083ae:	f7f8 f923 	bl	80005f8 <__aeabi_dmul>
 80083b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80083b6:	f7f7 ff69 	bl	800028c <__adddf3>
 80083ba:	4682      	mov	sl, r0
 80083bc:	468b      	mov	fp, r1
 80083be:	e770      	b.n	80082a2 <_strtod_l+0xa62>
 80083c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80083c4:	e7e0      	b.n	8008388 <_strtod_l+0xb48>
 80083c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8008400 <_strtod_l+0xbc0>)
 80083c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083cc:	f7f8 fb86 	bl	8000adc <__aeabi_dcmplt>
 80083d0:	e798      	b.n	8008304 <_strtod_l+0xac4>
 80083d2:	2300      	movs	r3, #0
 80083d4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80083d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083da:	6013      	str	r3, [r2, #0]
 80083dc:	f7ff ba6d 	b.w	80078ba <_strtod_l+0x7a>
 80083e0:	2a65      	cmp	r2, #101	@ 0x65
 80083e2:	f43f ab66 	beq.w	8007ab2 <_strtod_l+0x272>
 80083e6:	2a45      	cmp	r2, #69	@ 0x45
 80083e8:	f43f ab63 	beq.w	8007ab2 <_strtod_l+0x272>
 80083ec:	2301      	movs	r3, #1
 80083ee:	f7ff bb9e 	b.w	8007b2e <_strtod_l+0x2ee>
 80083f2:	bf00      	nop
 80083f4:	f3af 8000 	nop.w
 80083f8:	ffc00000 	.word	0xffc00000
 80083fc:	41dfffff 	.word	0x41dfffff
 8008400:	94a03595 	.word	0x94a03595
 8008404:	3fcfffff 	.word	0x3fcfffff

08008408 <_strtod_r>:
 8008408:	4b01      	ldr	r3, [pc, #4]	@ (8008410 <_strtod_r+0x8>)
 800840a:	f7ff ba19 	b.w	8007840 <_strtod_l>
 800840e:	bf00      	nop
 8008410:	20000068 	.word	0x20000068

08008414 <_strtol_l.constprop.0>:
 8008414:	2b24      	cmp	r3, #36	@ 0x24
 8008416:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800841a:	4686      	mov	lr, r0
 800841c:	4690      	mov	r8, r2
 800841e:	d801      	bhi.n	8008424 <_strtol_l.constprop.0+0x10>
 8008420:	2b01      	cmp	r3, #1
 8008422:	d106      	bne.n	8008432 <_strtol_l.constprop.0+0x1e>
 8008424:	f7fd fdbc 	bl	8005fa0 <__errno>
 8008428:	2316      	movs	r3, #22
 800842a:	6003      	str	r3, [r0, #0]
 800842c:	2000      	movs	r0, #0
 800842e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008432:	4834      	ldr	r0, [pc, #208]	@ (8008504 <_strtol_l.constprop.0+0xf0>)
 8008434:	460d      	mov	r5, r1
 8008436:	462a      	mov	r2, r5
 8008438:	f815 4b01 	ldrb.w	r4, [r5], #1
 800843c:	5d06      	ldrb	r6, [r0, r4]
 800843e:	f016 0608 	ands.w	r6, r6, #8
 8008442:	d1f8      	bne.n	8008436 <_strtol_l.constprop.0+0x22>
 8008444:	2c2d      	cmp	r4, #45	@ 0x2d
 8008446:	d12d      	bne.n	80084a4 <_strtol_l.constprop.0+0x90>
 8008448:	782c      	ldrb	r4, [r5, #0]
 800844a:	2601      	movs	r6, #1
 800844c:	1c95      	adds	r5, r2, #2
 800844e:	f033 0210 	bics.w	r2, r3, #16
 8008452:	d109      	bne.n	8008468 <_strtol_l.constprop.0+0x54>
 8008454:	2c30      	cmp	r4, #48	@ 0x30
 8008456:	d12a      	bne.n	80084ae <_strtol_l.constprop.0+0x9a>
 8008458:	782a      	ldrb	r2, [r5, #0]
 800845a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800845e:	2a58      	cmp	r2, #88	@ 0x58
 8008460:	d125      	bne.n	80084ae <_strtol_l.constprop.0+0x9a>
 8008462:	786c      	ldrb	r4, [r5, #1]
 8008464:	2310      	movs	r3, #16
 8008466:	3502      	adds	r5, #2
 8008468:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800846c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008470:	2200      	movs	r2, #0
 8008472:	fbbc f9f3 	udiv	r9, ip, r3
 8008476:	4610      	mov	r0, r2
 8008478:	fb03 ca19 	mls	sl, r3, r9, ip
 800847c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008480:	2f09      	cmp	r7, #9
 8008482:	d81b      	bhi.n	80084bc <_strtol_l.constprop.0+0xa8>
 8008484:	463c      	mov	r4, r7
 8008486:	42a3      	cmp	r3, r4
 8008488:	dd27      	ble.n	80084da <_strtol_l.constprop.0+0xc6>
 800848a:	1c57      	adds	r7, r2, #1
 800848c:	d007      	beq.n	800849e <_strtol_l.constprop.0+0x8a>
 800848e:	4581      	cmp	r9, r0
 8008490:	d320      	bcc.n	80084d4 <_strtol_l.constprop.0+0xc0>
 8008492:	d101      	bne.n	8008498 <_strtol_l.constprop.0+0x84>
 8008494:	45a2      	cmp	sl, r4
 8008496:	db1d      	blt.n	80084d4 <_strtol_l.constprop.0+0xc0>
 8008498:	fb00 4003 	mla	r0, r0, r3, r4
 800849c:	2201      	movs	r2, #1
 800849e:	f815 4b01 	ldrb.w	r4, [r5], #1
 80084a2:	e7eb      	b.n	800847c <_strtol_l.constprop.0+0x68>
 80084a4:	2c2b      	cmp	r4, #43	@ 0x2b
 80084a6:	bf04      	itt	eq
 80084a8:	782c      	ldrbeq	r4, [r5, #0]
 80084aa:	1c95      	addeq	r5, r2, #2
 80084ac:	e7cf      	b.n	800844e <_strtol_l.constprop.0+0x3a>
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1da      	bne.n	8008468 <_strtol_l.constprop.0+0x54>
 80084b2:	2c30      	cmp	r4, #48	@ 0x30
 80084b4:	bf0c      	ite	eq
 80084b6:	2308      	moveq	r3, #8
 80084b8:	230a      	movne	r3, #10
 80084ba:	e7d5      	b.n	8008468 <_strtol_l.constprop.0+0x54>
 80084bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80084c0:	2f19      	cmp	r7, #25
 80084c2:	d801      	bhi.n	80084c8 <_strtol_l.constprop.0+0xb4>
 80084c4:	3c37      	subs	r4, #55	@ 0x37
 80084c6:	e7de      	b.n	8008486 <_strtol_l.constprop.0+0x72>
 80084c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80084cc:	2f19      	cmp	r7, #25
 80084ce:	d804      	bhi.n	80084da <_strtol_l.constprop.0+0xc6>
 80084d0:	3c57      	subs	r4, #87	@ 0x57
 80084d2:	e7d8      	b.n	8008486 <_strtol_l.constprop.0+0x72>
 80084d4:	f04f 32ff 	mov.w	r2, #4294967295
 80084d8:	e7e1      	b.n	800849e <_strtol_l.constprop.0+0x8a>
 80084da:	1c53      	adds	r3, r2, #1
 80084dc:	d108      	bne.n	80084f0 <_strtol_l.constprop.0+0xdc>
 80084de:	2322      	movs	r3, #34	@ 0x22
 80084e0:	f8ce 3000 	str.w	r3, [lr]
 80084e4:	4660      	mov	r0, ip
 80084e6:	f1b8 0f00 	cmp.w	r8, #0
 80084ea:	d0a0      	beq.n	800842e <_strtol_l.constprop.0+0x1a>
 80084ec:	1e69      	subs	r1, r5, #1
 80084ee:	e006      	b.n	80084fe <_strtol_l.constprop.0+0xea>
 80084f0:	b106      	cbz	r6, 80084f4 <_strtol_l.constprop.0+0xe0>
 80084f2:	4240      	negs	r0, r0
 80084f4:	f1b8 0f00 	cmp.w	r8, #0
 80084f8:	d099      	beq.n	800842e <_strtol_l.constprop.0+0x1a>
 80084fa:	2a00      	cmp	r2, #0
 80084fc:	d1f6      	bne.n	80084ec <_strtol_l.constprop.0+0xd8>
 80084fe:	f8c8 1000 	str.w	r1, [r8]
 8008502:	e794      	b.n	800842e <_strtol_l.constprop.0+0x1a>
 8008504:	08009989 	.word	0x08009989

08008508 <_strtol_r>:
 8008508:	f7ff bf84 	b.w	8008414 <_strtol_l.constprop.0>

0800850c <__ssputs_r>:
 800850c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008510:	688e      	ldr	r6, [r1, #8]
 8008512:	461f      	mov	r7, r3
 8008514:	42be      	cmp	r6, r7
 8008516:	680b      	ldr	r3, [r1, #0]
 8008518:	4682      	mov	sl, r0
 800851a:	460c      	mov	r4, r1
 800851c:	4690      	mov	r8, r2
 800851e:	d82d      	bhi.n	800857c <__ssputs_r+0x70>
 8008520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008524:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008528:	d026      	beq.n	8008578 <__ssputs_r+0x6c>
 800852a:	6965      	ldr	r5, [r4, #20]
 800852c:	6909      	ldr	r1, [r1, #16]
 800852e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008532:	eba3 0901 	sub.w	r9, r3, r1
 8008536:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800853a:	1c7b      	adds	r3, r7, #1
 800853c:	444b      	add	r3, r9
 800853e:	106d      	asrs	r5, r5, #1
 8008540:	429d      	cmp	r5, r3
 8008542:	bf38      	it	cc
 8008544:	461d      	movcc	r5, r3
 8008546:	0553      	lsls	r3, r2, #21
 8008548:	d527      	bpl.n	800859a <__ssputs_r+0x8e>
 800854a:	4629      	mov	r1, r5
 800854c:	f7fe fc1c 	bl	8006d88 <_malloc_r>
 8008550:	4606      	mov	r6, r0
 8008552:	b360      	cbz	r0, 80085ae <__ssputs_r+0xa2>
 8008554:	6921      	ldr	r1, [r4, #16]
 8008556:	464a      	mov	r2, r9
 8008558:	f000 fa18 	bl	800898c <memcpy>
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008566:	81a3      	strh	r3, [r4, #12]
 8008568:	6126      	str	r6, [r4, #16]
 800856a:	6165      	str	r5, [r4, #20]
 800856c:	444e      	add	r6, r9
 800856e:	eba5 0509 	sub.w	r5, r5, r9
 8008572:	6026      	str	r6, [r4, #0]
 8008574:	60a5      	str	r5, [r4, #8]
 8008576:	463e      	mov	r6, r7
 8008578:	42be      	cmp	r6, r7
 800857a:	d900      	bls.n	800857e <__ssputs_r+0x72>
 800857c:	463e      	mov	r6, r7
 800857e:	6820      	ldr	r0, [r4, #0]
 8008580:	4632      	mov	r2, r6
 8008582:	4641      	mov	r1, r8
 8008584:	f000 f9c6 	bl	8008914 <memmove>
 8008588:	68a3      	ldr	r3, [r4, #8]
 800858a:	1b9b      	subs	r3, r3, r6
 800858c:	60a3      	str	r3, [r4, #8]
 800858e:	6823      	ldr	r3, [r4, #0]
 8008590:	4433      	add	r3, r6
 8008592:	6023      	str	r3, [r4, #0]
 8008594:	2000      	movs	r0, #0
 8008596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800859a:	462a      	mov	r2, r5
 800859c:	f000 fd89 	bl	80090b2 <_realloc_r>
 80085a0:	4606      	mov	r6, r0
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d1e0      	bne.n	8008568 <__ssputs_r+0x5c>
 80085a6:	6921      	ldr	r1, [r4, #16]
 80085a8:	4650      	mov	r0, sl
 80085aa:	f7fe fb79 	bl	8006ca0 <_free_r>
 80085ae:	230c      	movs	r3, #12
 80085b0:	f8ca 3000 	str.w	r3, [sl]
 80085b4:	89a3      	ldrh	r3, [r4, #12]
 80085b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085ba:	81a3      	strh	r3, [r4, #12]
 80085bc:	f04f 30ff 	mov.w	r0, #4294967295
 80085c0:	e7e9      	b.n	8008596 <__ssputs_r+0x8a>
	...

080085c4 <_svfiprintf_r>:
 80085c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c8:	4698      	mov	r8, r3
 80085ca:	898b      	ldrh	r3, [r1, #12]
 80085cc:	061b      	lsls	r3, r3, #24
 80085ce:	b09d      	sub	sp, #116	@ 0x74
 80085d0:	4607      	mov	r7, r0
 80085d2:	460d      	mov	r5, r1
 80085d4:	4614      	mov	r4, r2
 80085d6:	d510      	bpl.n	80085fa <_svfiprintf_r+0x36>
 80085d8:	690b      	ldr	r3, [r1, #16]
 80085da:	b973      	cbnz	r3, 80085fa <_svfiprintf_r+0x36>
 80085dc:	2140      	movs	r1, #64	@ 0x40
 80085de:	f7fe fbd3 	bl	8006d88 <_malloc_r>
 80085e2:	6028      	str	r0, [r5, #0]
 80085e4:	6128      	str	r0, [r5, #16]
 80085e6:	b930      	cbnz	r0, 80085f6 <_svfiprintf_r+0x32>
 80085e8:	230c      	movs	r3, #12
 80085ea:	603b      	str	r3, [r7, #0]
 80085ec:	f04f 30ff 	mov.w	r0, #4294967295
 80085f0:	b01d      	add	sp, #116	@ 0x74
 80085f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085f6:	2340      	movs	r3, #64	@ 0x40
 80085f8:	616b      	str	r3, [r5, #20]
 80085fa:	2300      	movs	r3, #0
 80085fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80085fe:	2320      	movs	r3, #32
 8008600:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008604:	f8cd 800c 	str.w	r8, [sp, #12]
 8008608:	2330      	movs	r3, #48	@ 0x30
 800860a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80087a8 <_svfiprintf_r+0x1e4>
 800860e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008612:	f04f 0901 	mov.w	r9, #1
 8008616:	4623      	mov	r3, r4
 8008618:	469a      	mov	sl, r3
 800861a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800861e:	b10a      	cbz	r2, 8008624 <_svfiprintf_r+0x60>
 8008620:	2a25      	cmp	r2, #37	@ 0x25
 8008622:	d1f9      	bne.n	8008618 <_svfiprintf_r+0x54>
 8008624:	ebba 0b04 	subs.w	fp, sl, r4
 8008628:	d00b      	beq.n	8008642 <_svfiprintf_r+0x7e>
 800862a:	465b      	mov	r3, fp
 800862c:	4622      	mov	r2, r4
 800862e:	4629      	mov	r1, r5
 8008630:	4638      	mov	r0, r7
 8008632:	f7ff ff6b 	bl	800850c <__ssputs_r>
 8008636:	3001      	adds	r0, #1
 8008638:	f000 80a7 	beq.w	800878a <_svfiprintf_r+0x1c6>
 800863c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800863e:	445a      	add	r2, fp
 8008640:	9209      	str	r2, [sp, #36]	@ 0x24
 8008642:	f89a 3000 	ldrb.w	r3, [sl]
 8008646:	2b00      	cmp	r3, #0
 8008648:	f000 809f 	beq.w	800878a <_svfiprintf_r+0x1c6>
 800864c:	2300      	movs	r3, #0
 800864e:	f04f 32ff 	mov.w	r2, #4294967295
 8008652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008656:	f10a 0a01 	add.w	sl, sl, #1
 800865a:	9304      	str	r3, [sp, #16]
 800865c:	9307      	str	r3, [sp, #28]
 800865e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008662:	931a      	str	r3, [sp, #104]	@ 0x68
 8008664:	4654      	mov	r4, sl
 8008666:	2205      	movs	r2, #5
 8008668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800866c:	484e      	ldr	r0, [pc, #312]	@ (80087a8 <_svfiprintf_r+0x1e4>)
 800866e:	f7f7 fdaf 	bl	80001d0 <memchr>
 8008672:	9a04      	ldr	r2, [sp, #16]
 8008674:	b9d8      	cbnz	r0, 80086ae <_svfiprintf_r+0xea>
 8008676:	06d0      	lsls	r0, r2, #27
 8008678:	bf44      	itt	mi
 800867a:	2320      	movmi	r3, #32
 800867c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008680:	0711      	lsls	r1, r2, #28
 8008682:	bf44      	itt	mi
 8008684:	232b      	movmi	r3, #43	@ 0x2b
 8008686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800868a:	f89a 3000 	ldrb.w	r3, [sl]
 800868e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008690:	d015      	beq.n	80086be <_svfiprintf_r+0xfa>
 8008692:	9a07      	ldr	r2, [sp, #28]
 8008694:	4654      	mov	r4, sl
 8008696:	2000      	movs	r0, #0
 8008698:	f04f 0c0a 	mov.w	ip, #10
 800869c:	4621      	mov	r1, r4
 800869e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086a2:	3b30      	subs	r3, #48	@ 0x30
 80086a4:	2b09      	cmp	r3, #9
 80086a6:	d94b      	bls.n	8008740 <_svfiprintf_r+0x17c>
 80086a8:	b1b0      	cbz	r0, 80086d8 <_svfiprintf_r+0x114>
 80086aa:	9207      	str	r2, [sp, #28]
 80086ac:	e014      	b.n	80086d8 <_svfiprintf_r+0x114>
 80086ae:	eba0 0308 	sub.w	r3, r0, r8
 80086b2:	fa09 f303 	lsl.w	r3, r9, r3
 80086b6:	4313      	orrs	r3, r2
 80086b8:	9304      	str	r3, [sp, #16]
 80086ba:	46a2      	mov	sl, r4
 80086bc:	e7d2      	b.n	8008664 <_svfiprintf_r+0xa0>
 80086be:	9b03      	ldr	r3, [sp, #12]
 80086c0:	1d19      	adds	r1, r3, #4
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	9103      	str	r1, [sp, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	bfbb      	ittet	lt
 80086ca:	425b      	neglt	r3, r3
 80086cc:	f042 0202 	orrlt.w	r2, r2, #2
 80086d0:	9307      	strge	r3, [sp, #28]
 80086d2:	9307      	strlt	r3, [sp, #28]
 80086d4:	bfb8      	it	lt
 80086d6:	9204      	strlt	r2, [sp, #16]
 80086d8:	7823      	ldrb	r3, [r4, #0]
 80086da:	2b2e      	cmp	r3, #46	@ 0x2e
 80086dc:	d10a      	bne.n	80086f4 <_svfiprintf_r+0x130>
 80086de:	7863      	ldrb	r3, [r4, #1]
 80086e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80086e2:	d132      	bne.n	800874a <_svfiprintf_r+0x186>
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	1d1a      	adds	r2, r3, #4
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	9203      	str	r2, [sp, #12]
 80086ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086f0:	3402      	adds	r4, #2
 80086f2:	9305      	str	r3, [sp, #20]
 80086f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80087b8 <_svfiprintf_r+0x1f4>
 80086f8:	7821      	ldrb	r1, [r4, #0]
 80086fa:	2203      	movs	r2, #3
 80086fc:	4650      	mov	r0, sl
 80086fe:	f7f7 fd67 	bl	80001d0 <memchr>
 8008702:	b138      	cbz	r0, 8008714 <_svfiprintf_r+0x150>
 8008704:	9b04      	ldr	r3, [sp, #16]
 8008706:	eba0 000a 	sub.w	r0, r0, sl
 800870a:	2240      	movs	r2, #64	@ 0x40
 800870c:	4082      	lsls	r2, r0
 800870e:	4313      	orrs	r3, r2
 8008710:	3401      	adds	r4, #1
 8008712:	9304      	str	r3, [sp, #16]
 8008714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008718:	4824      	ldr	r0, [pc, #144]	@ (80087ac <_svfiprintf_r+0x1e8>)
 800871a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800871e:	2206      	movs	r2, #6
 8008720:	f7f7 fd56 	bl	80001d0 <memchr>
 8008724:	2800      	cmp	r0, #0
 8008726:	d036      	beq.n	8008796 <_svfiprintf_r+0x1d2>
 8008728:	4b21      	ldr	r3, [pc, #132]	@ (80087b0 <_svfiprintf_r+0x1ec>)
 800872a:	bb1b      	cbnz	r3, 8008774 <_svfiprintf_r+0x1b0>
 800872c:	9b03      	ldr	r3, [sp, #12]
 800872e:	3307      	adds	r3, #7
 8008730:	f023 0307 	bic.w	r3, r3, #7
 8008734:	3308      	adds	r3, #8
 8008736:	9303      	str	r3, [sp, #12]
 8008738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800873a:	4433      	add	r3, r6
 800873c:	9309      	str	r3, [sp, #36]	@ 0x24
 800873e:	e76a      	b.n	8008616 <_svfiprintf_r+0x52>
 8008740:	fb0c 3202 	mla	r2, ip, r2, r3
 8008744:	460c      	mov	r4, r1
 8008746:	2001      	movs	r0, #1
 8008748:	e7a8      	b.n	800869c <_svfiprintf_r+0xd8>
 800874a:	2300      	movs	r3, #0
 800874c:	3401      	adds	r4, #1
 800874e:	9305      	str	r3, [sp, #20]
 8008750:	4619      	mov	r1, r3
 8008752:	f04f 0c0a 	mov.w	ip, #10
 8008756:	4620      	mov	r0, r4
 8008758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800875c:	3a30      	subs	r2, #48	@ 0x30
 800875e:	2a09      	cmp	r2, #9
 8008760:	d903      	bls.n	800876a <_svfiprintf_r+0x1a6>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d0c6      	beq.n	80086f4 <_svfiprintf_r+0x130>
 8008766:	9105      	str	r1, [sp, #20]
 8008768:	e7c4      	b.n	80086f4 <_svfiprintf_r+0x130>
 800876a:	fb0c 2101 	mla	r1, ip, r1, r2
 800876e:	4604      	mov	r4, r0
 8008770:	2301      	movs	r3, #1
 8008772:	e7f0      	b.n	8008756 <_svfiprintf_r+0x192>
 8008774:	ab03      	add	r3, sp, #12
 8008776:	9300      	str	r3, [sp, #0]
 8008778:	462a      	mov	r2, r5
 800877a:	4b0e      	ldr	r3, [pc, #56]	@ (80087b4 <_svfiprintf_r+0x1f0>)
 800877c:	a904      	add	r1, sp, #16
 800877e:	4638      	mov	r0, r7
 8008780:	f7fc fcca 	bl	8005118 <_printf_float>
 8008784:	1c42      	adds	r2, r0, #1
 8008786:	4606      	mov	r6, r0
 8008788:	d1d6      	bne.n	8008738 <_svfiprintf_r+0x174>
 800878a:	89ab      	ldrh	r3, [r5, #12]
 800878c:	065b      	lsls	r3, r3, #25
 800878e:	f53f af2d 	bmi.w	80085ec <_svfiprintf_r+0x28>
 8008792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008794:	e72c      	b.n	80085f0 <_svfiprintf_r+0x2c>
 8008796:	ab03      	add	r3, sp, #12
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	462a      	mov	r2, r5
 800879c:	4b05      	ldr	r3, [pc, #20]	@ (80087b4 <_svfiprintf_r+0x1f0>)
 800879e:	a904      	add	r1, sp, #16
 80087a0:	4638      	mov	r0, r7
 80087a2:	f7fc ff51 	bl	8005648 <_printf_i>
 80087a6:	e7ed      	b.n	8008784 <_svfiprintf_r+0x1c0>
 80087a8:	08009a89 	.word	0x08009a89
 80087ac:	08009a93 	.word	0x08009a93
 80087b0:	08005119 	.word	0x08005119
 80087b4:	0800850d 	.word	0x0800850d
 80087b8:	08009a8f 	.word	0x08009a8f

080087bc <__sflush_r>:
 80087bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c4:	0716      	lsls	r6, r2, #28
 80087c6:	4605      	mov	r5, r0
 80087c8:	460c      	mov	r4, r1
 80087ca:	d454      	bmi.n	8008876 <__sflush_r+0xba>
 80087cc:	684b      	ldr	r3, [r1, #4]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	dc02      	bgt.n	80087d8 <__sflush_r+0x1c>
 80087d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	dd48      	ble.n	800886a <__sflush_r+0xae>
 80087d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087da:	2e00      	cmp	r6, #0
 80087dc:	d045      	beq.n	800886a <__sflush_r+0xae>
 80087de:	2300      	movs	r3, #0
 80087e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087e4:	682f      	ldr	r7, [r5, #0]
 80087e6:	6a21      	ldr	r1, [r4, #32]
 80087e8:	602b      	str	r3, [r5, #0]
 80087ea:	d030      	beq.n	800884e <__sflush_r+0x92>
 80087ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087ee:	89a3      	ldrh	r3, [r4, #12]
 80087f0:	0759      	lsls	r1, r3, #29
 80087f2:	d505      	bpl.n	8008800 <__sflush_r+0x44>
 80087f4:	6863      	ldr	r3, [r4, #4]
 80087f6:	1ad2      	subs	r2, r2, r3
 80087f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087fa:	b10b      	cbz	r3, 8008800 <__sflush_r+0x44>
 80087fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087fe:	1ad2      	subs	r2, r2, r3
 8008800:	2300      	movs	r3, #0
 8008802:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008804:	6a21      	ldr	r1, [r4, #32]
 8008806:	4628      	mov	r0, r5
 8008808:	47b0      	blx	r6
 800880a:	1c43      	adds	r3, r0, #1
 800880c:	89a3      	ldrh	r3, [r4, #12]
 800880e:	d106      	bne.n	800881e <__sflush_r+0x62>
 8008810:	6829      	ldr	r1, [r5, #0]
 8008812:	291d      	cmp	r1, #29
 8008814:	d82b      	bhi.n	800886e <__sflush_r+0xb2>
 8008816:	4a2a      	ldr	r2, [pc, #168]	@ (80088c0 <__sflush_r+0x104>)
 8008818:	410a      	asrs	r2, r1
 800881a:	07d6      	lsls	r6, r2, #31
 800881c:	d427      	bmi.n	800886e <__sflush_r+0xb2>
 800881e:	2200      	movs	r2, #0
 8008820:	6062      	str	r2, [r4, #4]
 8008822:	04d9      	lsls	r1, r3, #19
 8008824:	6922      	ldr	r2, [r4, #16]
 8008826:	6022      	str	r2, [r4, #0]
 8008828:	d504      	bpl.n	8008834 <__sflush_r+0x78>
 800882a:	1c42      	adds	r2, r0, #1
 800882c:	d101      	bne.n	8008832 <__sflush_r+0x76>
 800882e:	682b      	ldr	r3, [r5, #0]
 8008830:	b903      	cbnz	r3, 8008834 <__sflush_r+0x78>
 8008832:	6560      	str	r0, [r4, #84]	@ 0x54
 8008834:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008836:	602f      	str	r7, [r5, #0]
 8008838:	b1b9      	cbz	r1, 800886a <__sflush_r+0xae>
 800883a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800883e:	4299      	cmp	r1, r3
 8008840:	d002      	beq.n	8008848 <__sflush_r+0x8c>
 8008842:	4628      	mov	r0, r5
 8008844:	f7fe fa2c 	bl	8006ca0 <_free_r>
 8008848:	2300      	movs	r3, #0
 800884a:	6363      	str	r3, [r4, #52]	@ 0x34
 800884c:	e00d      	b.n	800886a <__sflush_r+0xae>
 800884e:	2301      	movs	r3, #1
 8008850:	4628      	mov	r0, r5
 8008852:	47b0      	blx	r6
 8008854:	4602      	mov	r2, r0
 8008856:	1c50      	adds	r0, r2, #1
 8008858:	d1c9      	bne.n	80087ee <__sflush_r+0x32>
 800885a:	682b      	ldr	r3, [r5, #0]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d0c6      	beq.n	80087ee <__sflush_r+0x32>
 8008860:	2b1d      	cmp	r3, #29
 8008862:	d001      	beq.n	8008868 <__sflush_r+0xac>
 8008864:	2b16      	cmp	r3, #22
 8008866:	d11e      	bne.n	80088a6 <__sflush_r+0xea>
 8008868:	602f      	str	r7, [r5, #0]
 800886a:	2000      	movs	r0, #0
 800886c:	e022      	b.n	80088b4 <__sflush_r+0xf8>
 800886e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008872:	b21b      	sxth	r3, r3
 8008874:	e01b      	b.n	80088ae <__sflush_r+0xf2>
 8008876:	690f      	ldr	r7, [r1, #16]
 8008878:	2f00      	cmp	r7, #0
 800887a:	d0f6      	beq.n	800886a <__sflush_r+0xae>
 800887c:	0793      	lsls	r3, r2, #30
 800887e:	680e      	ldr	r6, [r1, #0]
 8008880:	bf08      	it	eq
 8008882:	694b      	ldreq	r3, [r1, #20]
 8008884:	600f      	str	r7, [r1, #0]
 8008886:	bf18      	it	ne
 8008888:	2300      	movne	r3, #0
 800888a:	eba6 0807 	sub.w	r8, r6, r7
 800888e:	608b      	str	r3, [r1, #8]
 8008890:	f1b8 0f00 	cmp.w	r8, #0
 8008894:	dde9      	ble.n	800886a <__sflush_r+0xae>
 8008896:	6a21      	ldr	r1, [r4, #32]
 8008898:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800889a:	4643      	mov	r3, r8
 800889c:	463a      	mov	r2, r7
 800889e:	4628      	mov	r0, r5
 80088a0:	47b0      	blx	r6
 80088a2:	2800      	cmp	r0, #0
 80088a4:	dc08      	bgt.n	80088b8 <__sflush_r+0xfc>
 80088a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088ae:	81a3      	strh	r3, [r4, #12]
 80088b0:	f04f 30ff 	mov.w	r0, #4294967295
 80088b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b8:	4407      	add	r7, r0
 80088ba:	eba8 0800 	sub.w	r8, r8, r0
 80088be:	e7e7      	b.n	8008890 <__sflush_r+0xd4>
 80088c0:	dfbffffe 	.word	0xdfbffffe

080088c4 <_fflush_r>:
 80088c4:	b538      	push	{r3, r4, r5, lr}
 80088c6:	690b      	ldr	r3, [r1, #16]
 80088c8:	4605      	mov	r5, r0
 80088ca:	460c      	mov	r4, r1
 80088cc:	b913      	cbnz	r3, 80088d4 <_fflush_r+0x10>
 80088ce:	2500      	movs	r5, #0
 80088d0:	4628      	mov	r0, r5
 80088d2:	bd38      	pop	{r3, r4, r5, pc}
 80088d4:	b118      	cbz	r0, 80088de <_fflush_r+0x1a>
 80088d6:	6a03      	ldr	r3, [r0, #32]
 80088d8:	b90b      	cbnz	r3, 80088de <_fflush_r+0x1a>
 80088da:	f7fd fa75 	bl	8005dc8 <__sinit>
 80088de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d0f3      	beq.n	80088ce <_fflush_r+0xa>
 80088e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088e8:	07d0      	lsls	r0, r2, #31
 80088ea:	d404      	bmi.n	80088f6 <_fflush_r+0x32>
 80088ec:	0599      	lsls	r1, r3, #22
 80088ee:	d402      	bmi.n	80088f6 <_fflush_r+0x32>
 80088f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088f2:	f7fd fb80 	bl	8005ff6 <__retarget_lock_acquire_recursive>
 80088f6:	4628      	mov	r0, r5
 80088f8:	4621      	mov	r1, r4
 80088fa:	f7ff ff5f 	bl	80087bc <__sflush_r>
 80088fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008900:	07da      	lsls	r2, r3, #31
 8008902:	4605      	mov	r5, r0
 8008904:	d4e4      	bmi.n	80088d0 <_fflush_r+0xc>
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	059b      	lsls	r3, r3, #22
 800890a:	d4e1      	bmi.n	80088d0 <_fflush_r+0xc>
 800890c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800890e:	f7fd fb73 	bl	8005ff8 <__retarget_lock_release_recursive>
 8008912:	e7dd      	b.n	80088d0 <_fflush_r+0xc>

08008914 <memmove>:
 8008914:	4288      	cmp	r0, r1
 8008916:	b510      	push	{r4, lr}
 8008918:	eb01 0402 	add.w	r4, r1, r2
 800891c:	d902      	bls.n	8008924 <memmove+0x10>
 800891e:	4284      	cmp	r4, r0
 8008920:	4623      	mov	r3, r4
 8008922:	d807      	bhi.n	8008934 <memmove+0x20>
 8008924:	1e43      	subs	r3, r0, #1
 8008926:	42a1      	cmp	r1, r4
 8008928:	d008      	beq.n	800893c <memmove+0x28>
 800892a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800892e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008932:	e7f8      	b.n	8008926 <memmove+0x12>
 8008934:	4402      	add	r2, r0
 8008936:	4601      	mov	r1, r0
 8008938:	428a      	cmp	r2, r1
 800893a:	d100      	bne.n	800893e <memmove+0x2a>
 800893c:	bd10      	pop	{r4, pc}
 800893e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008942:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008946:	e7f7      	b.n	8008938 <memmove+0x24>

08008948 <strncmp>:
 8008948:	b510      	push	{r4, lr}
 800894a:	b16a      	cbz	r2, 8008968 <strncmp+0x20>
 800894c:	3901      	subs	r1, #1
 800894e:	1884      	adds	r4, r0, r2
 8008950:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008954:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008958:	429a      	cmp	r2, r3
 800895a:	d103      	bne.n	8008964 <strncmp+0x1c>
 800895c:	42a0      	cmp	r0, r4
 800895e:	d001      	beq.n	8008964 <strncmp+0x1c>
 8008960:	2a00      	cmp	r2, #0
 8008962:	d1f5      	bne.n	8008950 <strncmp+0x8>
 8008964:	1ad0      	subs	r0, r2, r3
 8008966:	bd10      	pop	{r4, pc}
 8008968:	4610      	mov	r0, r2
 800896a:	e7fc      	b.n	8008966 <strncmp+0x1e>

0800896c <_sbrk_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4d06      	ldr	r5, [pc, #24]	@ (8008988 <_sbrk_r+0x1c>)
 8008970:	2300      	movs	r3, #0
 8008972:	4604      	mov	r4, r0
 8008974:	4608      	mov	r0, r1
 8008976:	602b      	str	r3, [r5, #0]
 8008978:	f7f9 f806 	bl	8001988 <_sbrk>
 800897c:	1c43      	adds	r3, r0, #1
 800897e:	d102      	bne.n	8008986 <_sbrk_r+0x1a>
 8008980:	682b      	ldr	r3, [r5, #0]
 8008982:	b103      	cbz	r3, 8008986 <_sbrk_r+0x1a>
 8008984:	6023      	str	r3, [r4, #0]
 8008986:	bd38      	pop	{r3, r4, r5, pc}
 8008988:	2000047c 	.word	0x2000047c

0800898c <memcpy>:
 800898c:	440a      	add	r2, r1
 800898e:	4291      	cmp	r1, r2
 8008990:	f100 33ff 	add.w	r3, r0, #4294967295
 8008994:	d100      	bne.n	8008998 <memcpy+0xc>
 8008996:	4770      	bx	lr
 8008998:	b510      	push	{r4, lr}
 800899a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800899e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089a2:	4291      	cmp	r1, r2
 80089a4:	d1f9      	bne.n	800899a <memcpy+0xe>
 80089a6:	bd10      	pop	{r4, pc}

080089a8 <nan>:
 80089a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80089b0 <nan+0x8>
 80089ac:	4770      	bx	lr
 80089ae:	bf00      	nop
 80089b0:	00000000 	.word	0x00000000
 80089b4:	7ff80000 	.word	0x7ff80000

080089b8 <__assert_func>:
 80089b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80089ba:	4614      	mov	r4, r2
 80089bc:	461a      	mov	r2, r3
 80089be:	4b09      	ldr	r3, [pc, #36]	@ (80089e4 <__assert_func+0x2c>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4605      	mov	r5, r0
 80089c4:	68d8      	ldr	r0, [r3, #12]
 80089c6:	b954      	cbnz	r4, 80089de <__assert_func+0x26>
 80089c8:	4b07      	ldr	r3, [pc, #28]	@ (80089e8 <__assert_func+0x30>)
 80089ca:	461c      	mov	r4, r3
 80089cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80089d0:	9100      	str	r1, [sp, #0]
 80089d2:	462b      	mov	r3, r5
 80089d4:	4905      	ldr	r1, [pc, #20]	@ (80089ec <__assert_func+0x34>)
 80089d6:	f000 fba7 	bl	8009128 <fiprintf>
 80089da:	f000 fbb7 	bl	800914c <abort>
 80089de:	4b04      	ldr	r3, [pc, #16]	@ (80089f0 <__assert_func+0x38>)
 80089e0:	e7f4      	b.n	80089cc <__assert_func+0x14>
 80089e2:	bf00      	nop
 80089e4:	20000018 	.word	0x20000018
 80089e8:	08009add 	.word	0x08009add
 80089ec:	08009aaf 	.word	0x08009aaf
 80089f0:	08009aa2 	.word	0x08009aa2

080089f4 <_calloc_r>:
 80089f4:	b570      	push	{r4, r5, r6, lr}
 80089f6:	fba1 5402 	umull	r5, r4, r1, r2
 80089fa:	b93c      	cbnz	r4, 8008a0c <_calloc_r+0x18>
 80089fc:	4629      	mov	r1, r5
 80089fe:	f7fe f9c3 	bl	8006d88 <_malloc_r>
 8008a02:	4606      	mov	r6, r0
 8008a04:	b928      	cbnz	r0, 8008a12 <_calloc_r+0x1e>
 8008a06:	2600      	movs	r6, #0
 8008a08:	4630      	mov	r0, r6
 8008a0a:	bd70      	pop	{r4, r5, r6, pc}
 8008a0c:	220c      	movs	r2, #12
 8008a0e:	6002      	str	r2, [r0, #0]
 8008a10:	e7f9      	b.n	8008a06 <_calloc_r+0x12>
 8008a12:	462a      	mov	r2, r5
 8008a14:	4621      	mov	r1, r4
 8008a16:	f7fd fa70 	bl	8005efa <memset>
 8008a1a:	e7f5      	b.n	8008a08 <_calloc_r+0x14>

08008a1c <rshift>:
 8008a1c:	6903      	ldr	r3, [r0, #16]
 8008a1e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008a22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008a26:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008a2a:	f100 0414 	add.w	r4, r0, #20
 8008a2e:	dd45      	ble.n	8008abc <rshift+0xa0>
 8008a30:	f011 011f 	ands.w	r1, r1, #31
 8008a34:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008a38:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008a3c:	d10c      	bne.n	8008a58 <rshift+0x3c>
 8008a3e:	f100 0710 	add.w	r7, r0, #16
 8008a42:	4629      	mov	r1, r5
 8008a44:	42b1      	cmp	r1, r6
 8008a46:	d334      	bcc.n	8008ab2 <rshift+0x96>
 8008a48:	1a9b      	subs	r3, r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	1eea      	subs	r2, r5, #3
 8008a4e:	4296      	cmp	r6, r2
 8008a50:	bf38      	it	cc
 8008a52:	2300      	movcc	r3, #0
 8008a54:	4423      	add	r3, r4
 8008a56:	e015      	b.n	8008a84 <rshift+0x68>
 8008a58:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008a5c:	f1c1 0820 	rsb	r8, r1, #32
 8008a60:	40cf      	lsrs	r7, r1
 8008a62:	f105 0e04 	add.w	lr, r5, #4
 8008a66:	46a1      	mov	r9, r4
 8008a68:	4576      	cmp	r6, lr
 8008a6a:	46f4      	mov	ip, lr
 8008a6c:	d815      	bhi.n	8008a9a <rshift+0x7e>
 8008a6e:	1a9a      	subs	r2, r3, r2
 8008a70:	0092      	lsls	r2, r2, #2
 8008a72:	3a04      	subs	r2, #4
 8008a74:	3501      	adds	r5, #1
 8008a76:	42ae      	cmp	r6, r5
 8008a78:	bf38      	it	cc
 8008a7a:	2200      	movcc	r2, #0
 8008a7c:	18a3      	adds	r3, r4, r2
 8008a7e:	50a7      	str	r7, [r4, r2]
 8008a80:	b107      	cbz	r7, 8008a84 <rshift+0x68>
 8008a82:	3304      	adds	r3, #4
 8008a84:	1b1a      	subs	r2, r3, r4
 8008a86:	42a3      	cmp	r3, r4
 8008a88:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008a8c:	bf08      	it	eq
 8008a8e:	2300      	moveq	r3, #0
 8008a90:	6102      	str	r2, [r0, #16]
 8008a92:	bf08      	it	eq
 8008a94:	6143      	streq	r3, [r0, #20]
 8008a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008a9a:	f8dc c000 	ldr.w	ip, [ip]
 8008a9e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008aa2:	ea4c 0707 	orr.w	r7, ip, r7
 8008aa6:	f849 7b04 	str.w	r7, [r9], #4
 8008aaa:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008aae:	40cf      	lsrs	r7, r1
 8008ab0:	e7da      	b.n	8008a68 <rshift+0x4c>
 8008ab2:	f851 cb04 	ldr.w	ip, [r1], #4
 8008ab6:	f847 cf04 	str.w	ip, [r7, #4]!
 8008aba:	e7c3      	b.n	8008a44 <rshift+0x28>
 8008abc:	4623      	mov	r3, r4
 8008abe:	e7e1      	b.n	8008a84 <rshift+0x68>

08008ac0 <__hexdig_fun>:
 8008ac0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008ac4:	2b09      	cmp	r3, #9
 8008ac6:	d802      	bhi.n	8008ace <__hexdig_fun+0xe>
 8008ac8:	3820      	subs	r0, #32
 8008aca:	b2c0      	uxtb	r0, r0
 8008acc:	4770      	bx	lr
 8008ace:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008ad2:	2b05      	cmp	r3, #5
 8008ad4:	d801      	bhi.n	8008ada <__hexdig_fun+0x1a>
 8008ad6:	3847      	subs	r0, #71	@ 0x47
 8008ad8:	e7f7      	b.n	8008aca <__hexdig_fun+0xa>
 8008ada:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008ade:	2b05      	cmp	r3, #5
 8008ae0:	d801      	bhi.n	8008ae6 <__hexdig_fun+0x26>
 8008ae2:	3827      	subs	r0, #39	@ 0x27
 8008ae4:	e7f1      	b.n	8008aca <__hexdig_fun+0xa>
 8008ae6:	2000      	movs	r0, #0
 8008ae8:	4770      	bx	lr
	...

08008aec <__gethex>:
 8008aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008af0:	b085      	sub	sp, #20
 8008af2:	468a      	mov	sl, r1
 8008af4:	9302      	str	r3, [sp, #8]
 8008af6:	680b      	ldr	r3, [r1, #0]
 8008af8:	9001      	str	r0, [sp, #4]
 8008afa:	4690      	mov	r8, r2
 8008afc:	1c9c      	adds	r4, r3, #2
 8008afe:	46a1      	mov	r9, r4
 8008b00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008b04:	2830      	cmp	r0, #48	@ 0x30
 8008b06:	d0fa      	beq.n	8008afe <__gethex+0x12>
 8008b08:	eba9 0303 	sub.w	r3, r9, r3
 8008b0c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008b10:	f7ff ffd6 	bl	8008ac0 <__hexdig_fun>
 8008b14:	4605      	mov	r5, r0
 8008b16:	2800      	cmp	r0, #0
 8008b18:	d168      	bne.n	8008bec <__gethex+0x100>
 8008b1a:	49a0      	ldr	r1, [pc, #640]	@ (8008d9c <__gethex+0x2b0>)
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	4648      	mov	r0, r9
 8008b20:	f7ff ff12 	bl	8008948 <strncmp>
 8008b24:	4607      	mov	r7, r0
 8008b26:	2800      	cmp	r0, #0
 8008b28:	d167      	bne.n	8008bfa <__gethex+0x10e>
 8008b2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008b2e:	4626      	mov	r6, r4
 8008b30:	f7ff ffc6 	bl	8008ac0 <__hexdig_fun>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	d062      	beq.n	8008bfe <__gethex+0x112>
 8008b38:	4623      	mov	r3, r4
 8008b3a:	7818      	ldrb	r0, [r3, #0]
 8008b3c:	2830      	cmp	r0, #48	@ 0x30
 8008b3e:	4699      	mov	r9, r3
 8008b40:	f103 0301 	add.w	r3, r3, #1
 8008b44:	d0f9      	beq.n	8008b3a <__gethex+0x4e>
 8008b46:	f7ff ffbb 	bl	8008ac0 <__hexdig_fun>
 8008b4a:	fab0 f580 	clz	r5, r0
 8008b4e:	096d      	lsrs	r5, r5, #5
 8008b50:	f04f 0b01 	mov.w	fp, #1
 8008b54:	464a      	mov	r2, r9
 8008b56:	4616      	mov	r6, r2
 8008b58:	3201      	adds	r2, #1
 8008b5a:	7830      	ldrb	r0, [r6, #0]
 8008b5c:	f7ff ffb0 	bl	8008ac0 <__hexdig_fun>
 8008b60:	2800      	cmp	r0, #0
 8008b62:	d1f8      	bne.n	8008b56 <__gethex+0x6a>
 8008b64:	498d      	ldr	r1, [pc, #564]	@ (8008d9c <__gethex+0x2b0>)
 8008b66:	2201      	movs	r2, #1
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f7ff feed 	bl	8008948 <strncmp>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d13f      	bne.n	8008bf2 <__gethex+0x106>
 8008b72:	b944      	cbnz	r4, 8008b86 <__gethex+0x9a>
 8008b74:	1c74      	adds	r4, r6, #1
 8008b76:	4622      	mov	r2, r4
 8008b78:	4616      	mov	r6, r2
 8008b7a:	3201      	adds	r2, #1
 8008b7c:	7830      	ldrb	r0, [r6, #0]
 8008b7e:	f7ff ff9f 	bl	8008ac0 <__hexdig_fun>
 8008b82:	2800      	cmp	r0, #0
 8008b84:	d1f8      	bne.n	8008b78 <__gethex+0x8c>
 8008b86:	1ba4      	subs	r4, r4, r6
 8008b88:	00a7      	lsls	r7, r4, #2
 8008b8a:	7833      	ldrb	r3, [r6, #0]
 8008b8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008b90:	2b50      	cmp	r3, #80	@ 0x50
 8008b92:	d13e      	bne.n	8008c12 <__gethex+0x126>
 8008b94:	7873      	ldrb	r3, [r6, #1]
 8008b96:	2b2b      	cmp	r3, #43	@ 0x2b
 8008b98:	d033      	beq.n	8008c02 <__gethex+0x116>
 8008b9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8008b9c:	d034      	beq.n	8008c08 <__gethex+0x11c>
 8008b9e:	1c71      	adds	r1, r6, #1
 8008ba0:	2400      	movs	r4, #0
 8008ba2:	7808      	ldrb	r0, [r1, #0]
 8008ba4:	f7ff ff8c 	bl	8008ac0 <__hexdig_fun>
 8008ba8:	1e43      	subs	r3, r0, #1
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	2b18      	cmp	r3, #24
 8008bae:	d830      	bhi.n	8008c12 <__gethex+0x126>
 8008bb0:	f1a0 0210 	sub.w	r2, r0, #16
 8008bb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008bb8:	f7ff ff82 	bl	8008ac0 <__hexdig_fun>
 8008bbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008bc0:	fa5f fc8c 	uxtb.w	ip, ip
 8008bc4:	f1bc 0f18 	cmp.w	ip, #24
 8008bc8:	f04f 030a 	mov.w	r3, #10
 8008bcc:	d91e      	bls.n	8008c0c <__gethex+0x120>
 8008bce:	b104      	cbz	r4, 8008bd2 <__gethex+0xe6>
 8008bd0:	4252      	negs	r2, r2
 8008bd2:	4417      	add	r7, r2
 8008bd4:	f8ca 1000 	str.w	r1, [sl]
 8008bd8:	b1ed      	cbz	r5, 8008c16 <__gethex+0x12a>
 8008bda:	f1bb 0f00 	cmp.w	fp, #0
 8008bde:	bf0c      	ite	eq
 8008be0:	2506      	moveq	r5, #6
 8008be2:	2500      	movne	r5, #0
 8008be4:	4628      	mov	r0, r5
 8008be6:	b005      	add	sp, #20
 8008be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bec:	2500      	movs	r5, #0
 8008bee:	462c      	mov	r4, r5
 8008bf0:	e7b0      	b.n	8008b54 <__gethex+0x68>
 8008bf2:	2c00      	cmp	r4, #0
 8008bf4:	d1c7      	bne.n	8008b86 <__gethex+0x9a>
 8008bf6:	4627      	mov	r7, r4
 8008bf8:	e7c7      	b.n	8008b8a <__gethex+0x9e>
 8008bfa:	464e      	mov	r6, r9
 8008bfc:	462f      	mov	r7, r5
 8008bfe:	2501      	movs	r5, #1
 8008c00:	e7c3      	b.n	8008b8a <__gethex+0x9e>
 8008c02:	2400      	movs	r4, #0
 8008c04:	1cb1      	adds	r1, r6, #2
 8008c06:	e7cc      	b.n	8008ba2 <__gethex+0xb6>
 8008c08:	2401      	movs	r4, #1
 8008c0a:	e7fb      	b.n	8008c04 <__gethex+0x118>
 8008c0c:	fb03 0002 	mla	r0, r3, r2, r0
 8008c10:	e7ce      	b.n	8008bb0 <__gethex+0xc4>
 8008c12:	4631      	mov	r1, r6
 8008c14:	e7de      	b.n	8008bd4 <__gethex+0xe8>
 8008c16:	eba6 0309 	sub.w	r3, r6, r9
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	4629      	mov	r1, r5
 8008c1e:	2b07      	cmp	r3, #7
 8008c20:	dc0a      	bgt.n	8008c38 <__gethex+0x14c>
 8008c22:	9801      	ldr	r0, [sp, #4]
 8008c24:	f7fe f93c 	bl	8006ea0 <_Balloc>
 8008c28:	4604      	mov	r4, r0
 8008c2a:	b940      	cbnz	r0, 8008c3e <__gethex+0x152>
 8008c2c:	4b5c      	ldr	r3, [pc, #368]	@ (8008da0 <__gethex+0x2b4>)
 8008c2e:	4602      	mov	r2, r0
 8008c30:	21e4      	movs	r1, #228	@ 0xe4
 8008c32:	485c      	ldr	r0, [pc, #368]	@ (8008da4 <__gethex+0x2b8>)
 8008c34:	f7ff fec0 	bl	80089b8 <__assert_func>
 8008c38:	3101      	adds	r1, #1
 8008c3a:	105b      	asrs	r3, r3, #1
 8008c3c:	e7ef      	b.n	8008c1e <__gethex+0x132>
 8008c3e:	f100 0a14 	add.w	sl, r0, #20
 8008c42:	2300      	movs	r3, #0
 8008c44:	4655      	mov	r5, sl
 8008c46:	469b      	mov	fp, r3
 8008c48:	45b1      	cmp	r9, r6
 8008c4a:	d337      	bcc.n	8008cbc <__gethex+0x1d0>
 8008c4c:	f845 bb04 	str.w	fp, [r5], #4
 8008c50:	eba5 050a 	sub.w	r5, r5, sl
 8008c54:	10ad      	asrs	r5, r5, #2
 8008c56:	6125      	str	r5, [r4, #16]
 8008c58:	4658      	mov	r0, fp
 8008c5a:	f7fe fa13 	bl	8007084 <__hi0bits>
 8008c5e:	016d      	lsls	r5, r5, #5
 8008c60:	f8d8 6000 	ldr.w	r6, [r8]
 8008c64:	1a2d      	subs	r5, r5, r0
 8008c66:	42b5      	cmp	r5, r6
 8008c68:	dd54      	ble.n	8008d14 <__gethex+0x228>
 8008c6a:	1bad      	subs	r5, r5, r6
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f7fe fda7 	bl	80077c2 <__any_on>
 8008c74:	4681      	mov	r9, r0
 8008c76:	b178      	cbz	r0, 8008c98 <__gethex+0x1ac>
 8008c78:	1e6b      	subs	r3, r5, #1
 8008c7a:	1159      	asrs	r1, r3, #5
 8008c7c:	f003 021f 	and.w	r2, r3, #31
 8008c80:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008c84:	f04f 0901 	mov.w	r9, #1
 8008c88:	fa09 f202 	lsl.w	r2, r9, r2
 8008c8c:	420a      	tst	r2, r1
 8008c8e:	d003      	beq.n	8008c98 <__gethex+0x1ac>
 8008c90:	454b      	cmp	r3, r9
 8008c92:	dc36      	bgt.n	8008d02 <__gethex+0x216>
 8008c94:	f04f 0902 	mov.w	r9, #2
 8008c98:	4629      	mov	r1, r5
 8008c9a:	4620      	mov	r0, r4
 8008c9c:	f7ff febe 	bl	8008a1c <rshift>
 8008ca0:	442f      	add	r7, r5
 8008ca2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ca6:	42bb      	cmp	r3, r7
 8008ca8:	da42      	bge.n	8008d30 <__gethex+0x244>
 8008caa:	9801      	ldr	r0, [sp, #4]
 8008cac:	4621      	mov	r1, r4
 8008cae:	f7fe f937 	bl	8006f20 <_Bfree>
 8008cb2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	25a3      	movs	r5, #163	@ 0xa3
 8008cba:	e793      	b.n	8008be4 <__gethex+0xf8>
 8008cbc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008cc0:	2a2e      	cmp	r2, #46	@ 0x2e
 8008cc2:	d012      	beq.n	8008cea <__gethex+0x1fe>
 8008cc4:	2b20      	cmp	r3, #32
 8008cc6:	d104      	bne.n	8008cd2 <__gethex+0x1e6>
 8008cc8:	f845 bb04 	str.w	fp, [r5], #4
 8008ccc:	f04f 0b00 	mov.w	fp, #0
 8008cd0:	465b      	mov	r3, fp
 8008cd2:	7830      	ldrb	r0, [r6, #0]
 8008cd4:	9303      	str	r3, [sp, #12]
 8008cd6:	f7ff fef3 	bl	8008ac0 <__hexdig_fun>
 8008cda:	9b03      	ldr	r3, [sp, #12]
 8008cdc:	f000 000f 	and.w	r0, r0, #15
 8008ce0:	4098      	lsls	r0, r3
 8008ce2:	ea4b 0b00 	orr.w	fp, fp, r0
 8008ce6:	3304      	adds	r3, #4
 8008ce8:	e7ae      	b.n	8008c48 <__gethex+0x15c>
 8008cea:	45b1      	cmp	r9, r6
 8008cec:	d8ea      	bhi.n	8008cc4 <__gethex+0x1d8>
 8008cee:	492b      	ldr	r1, [pc, #172]	@ (8008d9c <__gethex+0x2b0>)
 8008cf0:	9303      	str	r3, [sp, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	4630      	mov	r0, r6
 8008cf6:	f7ff fe27 	bl	8008948 <strncmp>
 8008cfa:	9b03      	ldr	r3, [sp, #12]
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d1e1      	bne.n	8008cc4 <__gethex+0x1d8>
 8008d00:	e7a2      	b.n	8008c48 <__gethex+0x15c>
 8008d02:	1ea9      	subs	r1, r5, #2
 8008d04:	4620      	mov	r0, r4
 8008d06:	f7fe fd5c 	bl	80077c2 <__any_on>
 8008d0a:	2800      	cmp	r0, #0
 8008d0c:	d0c2      	beq.n	8008c94 <__gethex+0x1a8>
 8008d0e:	f04f 0903 	mov.w	r9, #3
 8008d12:	e7c1      	b.n	8008c98 <__gethex+0x1ac>
 8008d14:	da09      	bge.n	8008d2a <__gethex+0x23e>
 8008d16:	1b75      	subs	r5, r6, r5
 8008d18:	4621      	mov	r1, r4
 8008d1a:	9801      	ldr	r0, [sp, #4]
 8008d1c:	462a      	mov	r2, r5
 8008d1e:	f7fe fb17 	bl	8007350 <__lshift>
 8008d22:	1b7f      	subs	r7, r7, r5
 8008d24:	4604      	mov	r4, r0
 8008d26:	f100 0a14 	add.w	sl, r0, #20
 8008d2a:	f04f 0900 	mov.w	r9, #0
 8008d2e:	e7b8      	b.n	8008ca2 <__gethex+0x1b6>
 8008d30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008d34:	42bd      	cmp	r5, r7
 8008d36:	dd6f      	ble.n	8008e18 <__gethex+0x32c>
 8008d38:	1bed      	subs	r5, r5, r7
 8008d3a:	42ae      	cmp	r6, r5
 8008d3c:	dc34      	bgt.n	8008da8 <__gethex+0x2bc>
 8008d3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d022      	beq.n	8008d8c <__gethex+0x2a0>
 8008d46:	2b03      	cmp	r3, #3
 8008d48:	d024      	beq.n	8008d94 <__gethex+0x2a8>
 8008d4a:	2b01      	cmp	r3, #1
 8008d4c:	d115      	bne.n	8008d7a <__gethex+0x28e>
 8008d4e:	42ae      	cmp	r6, r5
 8008d50:	d113      	bne.n	8008d7a <__gethex+0x28e>
 8008d52:	2e01      	cmp	r6, #1
 8008d54:	d10b      	bne.n	8008d6e <__gethex+0x282>
 8008d56:	9a02      	ldr	r2, [sp, #8]
 8008d58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008d5c:	6013      	str	r3, [r2, #0]
 8008d5e:	2301      	movs	r3, #1
 8008d60:	6123      	str	r3, [r4, #16]
 8008d62:	f8ca 3000 	str.w	r3, [sl]
 8008d66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d68:	2562      	movs	r5, #98	@ 0x62
 8008d6a:	601c      	str	r4, [r3, #0]
 8008d6c:	e73a      	b.n	8008be4 <__gethex+0xf8>
 8008d6e:	1e71      	subs	r1, r6, #1
 8008d70:	4620      	mov	r0, r4
 8008d72:	f7fe fd26 	bl	80077c2 <__any_on>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d1ed      	bne.n	8008d56 <__gethex+0x26a>
 8008d7a:	9801      	ldr	r0, [sp, #4]
 8008d7c:	4621      	mov	r1, r4
 8008d7e:	f7fe f8cf 	bl	8006f20 <_Bfree>
 8008d82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008d84:	2300      	movs	r3, #0
 8008d86:	6013      	str	r3, [r2, #0]
 8008d88:	2550      	movs	r5, #80	@ 0x50
 8008d8a:	e72b      	b.n	8008be4 <__gethex+0xf8>
 8008d8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1f3      	bne.n	8008d7a <__gethex+0x28e>
 8008d92:	e7e0      	b.n	8008d56 <__gethex+0x26a>
 8008d94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1dd      	bne.n	8008d56 <__gethex+0x26a>
 8008d9a:	e7ee      	b.n	8008d7a <__gethex+0x28e>
 8008d9c:	08009930 	.word	0x08009930
 8008da0:	080097c9 	.word	0x080097c9
 8008da4:	08009ade 	.word	0x08009ade
 8008da8:	1e6f      	subs	r7, r5, #1
 8008daa:	f1b9 0f00 	cmp.w	r9, #0
 8008dae:	d130      	bne.n	8008e12 <__gethex+0x326>
 8008db0:	b127      	cbz	r7, 8008dbc <__gethex+0x2d0>
 8008db2:	4639      	mov	r1, r7
 8008db4:	4620      	mov	r0, r4
 8008db6:	f7fe fd04 	bl	80077c2 <__any_on>
 8008dba:	4681      	mov	r9, r0
 8008dbc:	117a      	asrs	r2, r7, #5
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008dc4:	f007 071f 	and.w	r7, r7, #31
 8008dc8:	40bb      	lsls	r3, r7
 8008dca:	4213      	tst	r3, r2
 8008dcc:	4629      	mov	r1, r5
 8008dce:	4620      	mov	r0, r4
 8008dd0:	bf18      	it	ne
 8008dd2:	f049 0902 	orrne.w	r9, r9, #2
 8008dd6:	f7ff fe21 	bl	8008a1c <rshift>
 8008dda:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008dde:	1b76      	subs	r6, r6, r5
 8008de0:	2502      	movs	r5, #2
 8008de2:	f1b9 0f00 	cmp.w	r9, #0
 8008de6:	d047      	beq.n	8008e78 <__gethex+0x38c>
 8008de8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d015      	beq.n	8008e1c <__gethex+0x330>
 8008df0:	2b03      	cmp	r3, #3
 8008df2:	d017      	beq.n	8008e24 <__gethex+0x338>
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d109      	bne.n	8008e0c <__gethex+0x320>
 8008df8:	f019 0f02 	tst.w	r9, #2
 8008dfc:	d006      	beq.n	8008e0c <__gethex+0x320>
 8008dfe:	f8da 3000 	ldr.w	r3, [sl]
 8008e02:	ea49 0903 	orr.w	r9, r9, r3
 8008e06:	f019 0f01 	tst.w	r9, #1
 8008e0a:	d10e      	bne.n	8008e2a <__gethex+0x33e>
 8008e0c:	f045 0510 	orr.w	r5, r5, #16
 8008e10:	e032      	b.n	8008e78 <__gethex+0x38c>
 8008e12:	f04f 0901 	mov.w	r9, #1
 8008e16:	e7d1      	b.n	8008dbc <__gethex+0x2d0>
 8008e18:	2501      	movs	r5, #1
 8008e1a:	e7e2      	b.n	8008de2 <__gethex+0x2f6>
 8008e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e1e:	f1c3 0301 	rsb	r3, r3, #1
 8008e22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008e24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d0f0      	beq.n	8008e0c <__gethex+0x320>
 8008e2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008e2e:	f104 0314 	add.w	r3, r4, #20
 8008e32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008e36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008e3a:	f04f 0c00 	mov.w	ip, #0
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008e48:	d01b      	beq.n	8008e82 <__gethex+0x396>
 8008e4a:	3201      	adds	r2, #1
 8008e4c:	6002      	str	r2, [r0, #0]
 8008e4e:	2d02      	cmp	r5, #2
 8008e50:	f104 0314 	add.w	r3, r4, #20
 8008e54:	d13c      	bne.n	8008ed0 <__gethex+0x3e4>
 8008e56:	f8d8 2000 	ldr.w	r2, [r8]
 8008e5a:	3a01      	subs	r2, #1
 8008e5c:	42b2      	cmp	r2, r6
 8008e5e:	d109      	bne.n	8008e74 <__gethex+0x388>
 8008e60:	1171      	asrs	r1, r6, #5
 8008e62:	2201      	movs	r2, #1
 8008e64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008e68:	f006 061f 	and.w	r6, r6, #31
 8008e6c:	fa02 f606 	lsl.w	r6, r2, r6
 8008e70:	421e      	tst	r6, r3
 8008e72:	d13a      	bne.n	8008eea <__gethex+0x3fe>
 8008e74:	f045 0520 	orr.w	r5, r5, #32
 8008e78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e7a:	601c      	str	r4, [r3, #0]
 8008e7c:	9b02      	ldr	r3, [sp, #8]
 8008e7e:	601f      	str	r7, [r3, #0]
 8008e80:	e6b0      	b.n	8008be4 <__gethex+0xf8>
 8008e82:	4299      	cmp	r1, r3
 8008e84:	f843 cc04 	str.w	ip, [r3, #-4]
 8008e88:	d8d9      	bhi.n	8008e3e <__gethex+0x352>
 8008e8a:	68a3      	ldr	r3, [r4, #8]
 8008e8c:	459b      	cmp	fp, r3
 8008e8e:	db17      	blt.n	8008ec0 <__gethex+0x3d4>
 8008e90:	6861      	ldr	r1, [r4, #4]
 8008e92:	9801      	ldr	r0, [sp, #4]
 8008e94:	3101      	adds	r1, #1
 8008e96:	f7fe f803 	bl	8006ea0 <_Balloc>
 8008e9a:	4681      	mov	r9, r0
 8008e9c:	b918      	cbnz	r0, 8008ea6 <__gethex+0x3ba>
 8008e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8008f08 <__gethex+0x41c>)
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	2184      	movs	r1, #132	@ 0x84
 8008ea4:	e6c5      	b.n	8008c32 <__gethex+0x146>
 8008ea6:	6922      	ldr	r2, [r4, #16]
 8008ea8:	3202      	adds	r2, #2
 8008eaa:	f104 010c 	add.w	r1, r4, #12
 8008eae:	0092      	lsls	r2, r2, #2
 8008eb0:	300c      	adds	r0, #12
 8008eb2:	f7ff fd6b 	bl	800898c <memcpy>
 8008eb6:	4621      	mov	r1, r4
 8008eb8:	9801      	ldr	r0, [sp, #4]
 8008eba:	f7fe f831 	bl	8006f20 <_Bfree>
 8008ebe:	464c      	mov	r4, r9
 8008ec0:	6923      	ldr	r3, [r4, #16]
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ec8:	6122      	str	r2, [r4, #16]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	615a      	str	r2, [r3, #20]
 8008ece:	e7be      	b.n	8008e4e <__gethex+0x362>
 8008ed0:	6922      	ldr	r2, [r4, #16]
 8008ed2:	455a      	cmp	r2, fp
 8008ed4:	dd0b      	ble.n	8008eee <__gethex+0x402>
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f7ff fd9f 	bl	8008a1c <rshift>
 8008ede:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ee2:	3701      	adds	r7, #1
 8008ee4:	42bb      	cmp	r3, r7
 8008ee6:	f6ff aee0 	blt.w	8008caa <__gethex+0x1be>
 8008eea:	2501      	movs	r5, #1
 8008eec:	e7c2      	b.n	8008e74 <__gethex+0x388>
 8008eee:	f016 061f 	ands.w	r6, r6, #31
 8008ef2:	d0fa      	beq.n	8008eea <__gethex+0x3fe>
 8008ef4:	4453      	add	r3, sl
 8008ef6:	f1c6 0620 	rsb	r6, r6, #32
 8008efa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008efe:	f7fe f8c1 	bl	8007084 <__hi0bits>
 8008f02:	42b0      	cmp	r0, r6
 8008f04:	dbe7      	blt.n	8008ed6 <__gethex+0x3ea>
 8008f06:	e7f0      	b.n	8008eea <__gethex+0x3fe>
 8008f08:	080097c9 	.word	0x080097c9

08008f0c <L_shift>:
 8008f0c:	f1c2 0208 	rsb	r2, r2, #8
 8008f10:	0092      	lsls	r2, r2, #2
 8008f12:	b570      	push	{r4, r5, r6, lr}
 8008f14:	f1c2 0620 	rsb	r6, r2, #32
 8008f18:	6843      	ldr	r3, [r0, #4]
 8008f1a:	6804      	ldr	r4, [r0, #0]
 8008f1c:	fa03 f506 	lsl.w	r5, r3, r6
 8008f20:	432c      	orrs	r4, r5
 8008f22:	40d3      	lsrs	r3, r2
 8008f24:	6004      	str	r4, [r0, #0]
 8008f26:	f840 3f04 	str.w	r3, [r0, #4]!
 8008f2a:	4288      	cmp	r0, r1
 8008f2c:	d3f4      	bcc.n	8008f18 <L_shift+0xc>
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}

08008f30 <__match>:
 8008f30:	b530      	push	{r4, r5, lr}
 8008f32:	6803      	ldr	r3, [r0, #0]
 8008f34:	3301      	adds	r3, #1
 8008f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f3a:	b914      	cbnz	r4, 8008f42 <__match+0x12>
 8008f3c:	6003      	str	r3, [r0, #0]
 8008f3e:	2001      	movs	r0, #1
 8008f40:	bd30      	pop	{r4, r5, pc}
 8008f42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008f4a:	2d19      	cmp	r5, #25
 8008f4c:	bf98      	it	ls
 8008f4e:	3220      	addls	r2, #32
 8008f50:	42a2      	cmp	r2, r4
 8008f52:	d0f0      	beq.n	8008f36 <__match+0x6>
 8008f54:	2000      	movs	r0, #0
 8008f56:	e7f3      	b.n	8008f40 <__match+0x10>

08008f58 <__hexnan>:
 8008f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f5c:	680b      	ldr	r3, [r1, #0]
 8008f5e:	6801      	ldr	r1, [r0, #0]
 8008f60:	115e      	asrs	r6, r3, #5
 8008f62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008f66:	f013 031f 	ands.w	r3, r3, #31
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	bf18      	it	ne
 8008f6e:	3604      	addne	r6, #4
 8008f70:	2500      	movs	r5, #0
 8008f72:	1f37      	subs	r7, r6, #4
 8008f74:	4682      	mov	sl, r0
 8008f76:	4690      	mov	r8, r2
 8008f78:	9301      	str	r3, [sp, #4]
 8008f7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008f7e:	46b9      	mov	r9, r7
 8008f80:	463c      	mov	r4, r7
 8008f82:	9502      	str	r5, [sp, #8]
 8008f84:	46ab      	mov	fp, r5
 8008f86:	784a      	ldrb	r2, [r1, #1]
 8008f88:	1c4b      	adds	r3, r1, #1
 8008f8a:	9303      	str	r3, [sp, #12]
 8008f8c:	b342      	cbz	r2, 8008fe0 <__hexnan+0x88>
 8008f8e:	4610      	mov	r0, r2
 8008f90:	9105      	str	r1, [sp, #20]
 8008f92:	9204      	str	r2, [sp, #16]
 8008f94:	f7ff fd94 	bl	8008ac0 <__hexdig_fun>
 8008f98:	2800      	cmp	r0, #0
 8008f9a:	d151      	bne.n	8009040 <__hexnan+0xe8>
 8008f9c:	9a04      	ldr	r2, [sp, #16]
 8008f9e:	9905      	ldr	r1, [sp, #20]
 8008fa0:	2a20      	cmp	r2, #32
 8008fa2:	d818      	bhi.n	8008fd6 <__hexnan+0x7e>
 8008fa4:	9b02      	ldr	r3, [sp, #8]
 8008fa6:	459b      	cmp	fp, r3
 8008fa8:	dd13      	ble.n	8008fd2 <__hexnan+0x7a>
 8008faa:	454c      	cmp	r4, r9
 8008fac:	d206      	bcs.n	8008fbc <__hexnan+0x64>
 8008fae:	2d07      	cmp	r5, #7
 8008fb0:	dc04      	bgt.n	8008fbc <__hexnan+0x64>
 8008fb2:	462a      	mov	r2, r5
 8008fb4:	4649      	mov	r1, r9
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f7ff ffa8 	bl	8008f0c <L_shift>
 8008fbc:	4544      	cmp	r4, r8
 8008fbe:	d952      	bls.n	8009066 <__hexnan+0x10e>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	f1a4 0904 	sub.w	r9, r4, #4
 8008fc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008fca:	f8cd b008 	str.w	fp, [sp, #8]
 8008fce:	464c      	mov	r4, r9
 8008fd0:	461d      	mov	r5, r3
 8008fd2:	9903      	ldr	r1, [sp, #12]
 8008fd4:	e7d7      	b.n	8008f86 <__hexnan+0x2e>
 8008fd6:	2a29      	cmp	r2, #41	@ 0x29
 8008fd8:	d157      	bne.n	800908a <__hexnan+0x132>
 8008fda:	3102      	adds	r1, #2
 8008fdc:	f8ca 1000 	str.w	r1, [sl]
 8008fe0:	f1bb 0f00 	cmp.w	fp, #0
 8008fe4:	d051      	beq.n	800908a <__hexnan+0x132>
 8008fe6:	454c      	cmp	r4, r9
 8008fe8:	d206      	bcs.n	8008ff8 <__hexnan+0xa0>
 8008fea:	2d07      	cmp	r5, #7
 8008fec:	dc04      	bgt.n	8008ff8 <__hexnan+0xa0>
 8008fee:	462a      	mov	r2, r5
 8008ff0:	4649      	mov	r1, r9
 8008ff2:	4620      	mov	r0, r4
 8008ff4:	f7ff ff8a 	bl	8008f0c <L_shift>
 8008ff8:	4544      	cmp	r4, r8
 8008ffa:	d936      	bls.n	800906a <__hexnan+0x112>
 8008ffc:	f1a8 0204 	sub.w	r2, r8, #4
 8009000:	4623      	mov	r3, r4
 8009002:	f853 1b04 	ldr.w	r1, [r3], #4
 8009006:	f842 1f04 	str.w	r1, [r2, #4]!
 800900a:	429f      	cmp	r7, r3
 800900c:	d2f9      	bcs.n	8009002 <__hexnan+0xaa>
 800900e:	1b3b      	subs	r3, r7, r4
 8009010:	f023 0303 	bic.w	r3, r3, #3
 8009014:	3304      	adds	r3, #4
 8009016:	3401      	adds	r4, #1
 8009018:	3e03      	subs	r6, #3
 800901a:	42b4      	cmp	r4, r6
 800901c:	bf88      	it	hi
 800901e:	2304      	movhi	r3, #4
 8009020:	4443      	add	r3, r8
 8009022:	2200      	movs	r2, #0
 8009024:	f843 2b04 	str.w	r2, [r3], #4
 8009028:	429f      	cmp	r7, r3
 800902a:	d2fb      	bcs.n	8009024 <__hexnan+0xcc>
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	b91b      	cbnz	r3, 8009038 <__hexnan+0xe0>
 8009030:	4547      	cmp	r7, r8
 8009032:	d128      	bne.n	8009086 <__hexnan+0x12e>
 8009034:	2301      	movs	r3, #1
 8009036:	603b      	str	r3, [r7, #0]
 8009038:	2005      	movs	r0, #5
 800903a:	b007      	add	sp, #28
 800903c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009040:	3501      	adds	r5, #1
 8009042:	2d08      	cmp	r5, #8
 8009044:	f10b 0b01 	add.w	fp, fp, #1
 8009048:	dd06      	ble.n	8009058 <__hexnan+0x100>
 800904a:	4544      	cmp	r4, r8
 800904c:	d9c1      	bls.n	8008fd2 <__hexnan+0x7a>
 800904e:	2300      	movs	r3, #0
 8009050:	f844 3c04 	str.w	r3, [r4, #-4]
 8009054:	2501      	movs	r5, #1
 8009056:	3c04      	subs	r4, #4
 8009058:	6822      	ldr	r2, [r4, #0]
 800905a:	f000 000f 	and.w	r0, r0, #15
 800905e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009062:	6020      	str	r0, [r4, #0]
 8009064:	e7b5      	b.n	8008fd2 <__hexnan+0x7a>
 8009066:	2508      	movs	r5, #8
 8009068:	e7b3      	b.n	8008fd2 <__hexnan+0x7a>
 800906a:	9b01      	ldr	r3, [sp, #4]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d0dd      	beq.n	800902c <__hexnan+0xd4>
 8009070:	f1c3 0320 	rsb	r3, r3, #32
 8009074:	f04f 32ff 	mov.w	r2, #4294967295
 8009078:	40da      	lsrs	r2, r3
 800907a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800907e:	4013      	ands	r3, r2
 8009080:	f846 3c04 	str.w	r3, [r6, #-4]
 8009084:	e7d2      	b.n	800902c <__hexnan+0xd4>
 8009086:	3f04      	subs	r7, #4
 8009088:	e7d0      	b.n	800902c <__hexnan+0xd4>
 800908a:	2004      	movs	r0, #4
 800908c:	e7d5      	b.n	800903a <__hexnan+0xe2>

0800908e <__ascii_mbtowc>:
 800908e:	b082      	sub	sp, #8
 8009090:	b901      	cbnz	r1, 8009094 <__ascii_mbtowc+0x6>
 8009092:	a901      	add	r1, sp, #4
 8009094:	b142      	cbz	r2, 80090a8 <__ascii_mbtowc+0x1a>
 8009096:	b14b      	cbz	r3, 80090ac <__ascii_mbtowc+0x1e>
 8009098:	7813      	ldrb	r3, [r2, #0]
 800909a:	600b      	str	r3, [r1, #0]
 800909c:	7812      	ldrb	r2, [r2, #0]
 800909e:	1e10      	subs	r0, r2, #0
 80090a0:	bf18      	it	ne
 80090a2:	2001      	movne	r0, #1
 80090a4:	b002      	add	sp, #8
 80090a6:	4770      	bx	lr
 80090a8:	4610      	mov	r0, r2
 80090aa:	e7fb      	b.n	80090a4 <__ascii_mbtowc+0x16>
 80090ac:	f06f 0001 	mvn.w	r0, #1
 80090b0:	e7f8      	b.n	80090a4 <__ascii_mbtowc+0x16>

080090b2 <_realloc_r>:
 80090b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090b6:	4680      	mov	r8, r0
 80090b8:	4615      	mov	r5, r2
 80090ba:	460c      	mov	r4, r1
 80090bc:	b921      	cbnz	r1, 80090c8 <_realloc_r+0x16>
 80090be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090c2:	4611      	mov	r1, r2
 80090c4:	f7fd be60 	b.w	8006d88 <_malloc_r>
 80090c8:	b92a      	cbnz	r2, 80090d6 <_realloc_r+0x24>
 80090ca:	f7fd fde9 	bl	8006ca0 <_free_r>
 80090ce:	2400      	movs	r4, #0
 80090d0:	4620      	mov	r0, r4
 80090d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090d6:	f000 f840 	bl	800915a <_malloc_usable_size_r>
 80090da:	4285      	cmp	r5, r0
 80090dc:	4606      	mov	r6, r0
 80090de:	d802      	bhi.n	80090e6 <_realloc_r+0x34>
 80090e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80090e4:	d8f4      	bhi.n	80090d0 <_realloc_r+0x1e>
 80090e6:	4629      	mov	r1, r5
 80090e8:	4640      	mov	r0, r8
 80090ea:	f7fd fe4d 	bl	8006d88 <_malloc_r>
 80090ee:	4607      	mov	r7, r0
 80090f0:	2800      	cmp	r0, #0
 80090f2:	d0ec      	beq.n	80090ce <_realloc_r+0x1c>
 80090f4:	42b5      	cmp	r5, r6
 80090f6:	462a      	mov	r2, r5
 80090f8:	4621      	mov	r1, r4
 80090fa:	bf28      	it	cs
 80090fc:	4632      	movcs	r2, r6
 80090fe:	f7ff fc45 	bl	800898c <memcpy>
 8009102:	4621      	mov	r1, r4
 8009104:	4640      	mov	r0, r8
 8009106:	f7fd fdcb 	bl	8006ca0 <_free_r>
 800910a:	463c      	mov	r4, r7
 800910c:	e7e0      	b.n	80090d0 <_realloc_r+0x1e>

0800910e <__ascii_wctomb>:
 800910e:	4603      	mov	r3, r0
 8009110:	4608      	mov	r0, r1
 8009112:	b141      	cbz	r1, 8009126 <__ascii_wctomb+0x18>
 8009114:	2aff      	cmp	r2, #255	@ 0xff
 8009116:	d904      	bls.n	8009122 <__ascii_wctomb+0x14>
 8009118:	228a      	movs	r2, #138	@ 0x8a
 800911a:	601a      	str	r2, [r3, #0]
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	4770      	bx	lr
 8009122:	700a      	strb	r2, [r1, #0]
 8009124:	2001      	movs	r0, #1
 8009126:	4770      	bx	lr

08009128 <fiprintf>:
 8009128:	b40e      	push	{r1, r2, r3}
 800912a:	b503      	push	{r0, r1, lr}
 800912c:	4601      	mov	r1, r0
 800912e:	ab03      	add	r3, sp, #12
 8009130:	4805      	ldr	r0, [pc, #20]	@ (8009148 <fiprintf+0x20>)
 8009132:	f853 2b04 	ldr.w	r2, [r3], #4
 8009136:	6800      	ldr	r0, [r0, #0]
 8009138:	9301      	str	r3, [sp, #4]
 800913a:	f000 f83f 	bl	80091bc <_vfiprintf_r>
 800913e:	b002      	add	sp, #8
 8009140:	f85d eb04 	ldr.w	lr, [sp], #4
 8009144:	b003      	add	sp, #12
 8009146:	4770      	bx	lr
 8009148:	20000018 	.word	0x20000018

0800914c <abort>:
 800914c:	b508      	push	{r3, lr}
 800914e:	2006      	movs	r0, #6
 8009150:	f000 fa08 	bl	8009564 <raise>
 8009154:	2001      	movs	r0, #1
 8009156:	f7f8 fb9f 	bl	8001898 <_exit>

0800915a <_malloc_usable_size_r>:
 800915a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915e:	1f18      	subs	r0, r3, #4
 8009160:	2b00      	cmp	r3, #0
 8009162:	bfbc      	itt	lt
 8009164:	580b      	ldrlt	r3, [r1, r0]
 8009166:	18c0      	addlt	r0, r0, r3
 8009168:	4770      	bx	lr

0800916a <__sfputc_r>:
 800916a:	6893      	ldr	r3, [r2, #8]
 800916c:	3b01      	subs	r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	b410      	push	{r4}
 8009172:	6093      	str	r3, [r2, #8]
 8009174:	da08      	bge.n	8009188 <__sfputc_r+0x1e>
 8009176:	6994      	ldr	r4, [r2, #24]
 8009178:	42a3      	cmp	r3, r4
 800917a:	db01      	blt.n	8009180 <__sfputc_r+0x16>
 800917c:	290a      	cmp	r1, #10
 800917e:	d103      	bne.n	8009188 <__sfputc_r+0x1e>
 8009180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009184:	f000 b932 	b.w	80093ec <__swbuf_r>
 8009188:	6813      	ldr	r3, [r2, #0]
 800918a:	1c58      	adds	r0, r3, #1
 800918c:	6010      	str	r0, [r2, #0]
 800918e:	7019      	strb	r1, [r3, #0]
 8009190:	4608      	mov	r0, r1
 8009192:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009196:	4770      	bx	lr

08009198 <__sfputs_r>:
 8009198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919a:	4606      	mov	r6, r0
 800919c:	460f      	mov	r7, r1
 800919e:	4614      	mov	r4, r2
 80091a0:	18d5      	adds	r5, r2, r3
 80091a2:	42ac      	cmp	r4, r5
 80091a4:	d101      	bne.n	80091aa <__sfputs_r+0x12>
 80091a6:	2000      	movs	r0, #0
 80091a8:	e007      	b.n	80091ba <__sfputs_r+0x22>
 80091aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ae:	463a      	mov	r2, r7
 80091b0:	4630      	mov	r0, r6
 80091b2:	f7ff ffda 	bl	800916a <__sfputc_r>
 80091b6:	1c43      	adds	r3, r0, #1
 80091b8:	d1f3      	bne.n	80091a2 <__sfputs_r+0xa>
 80091ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080091bc <_vfiprintf_r>:
 80091bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c0:	460d      	mov	r5, r1
 80091c2:	b09d      	sub	sp, #116	@ 0x74
 80091c4:	4614      	mov	r4, r2
 80091c6:	4698      	mov	r8, r3
 80091c8:	4606      	mov	r6, r0
 80091ca:	b118      	cbz	r0, 80091d4 <_vfiprintf_r+0x18>
 80091cc:	6a03      	ldr	r3, [r0, #32]
 80091ce:	b90b      	cbnz	r3, 80091d4 <_vfiprintf_r+0x18>
 80091d0:	f7fc fdfa 	bl	8005dc8 <__sinit>
 80091d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091d6:	07d9      	lsls	r1, r3, #31
 80091d8:	d405      	bmi.n	80091e6 <_vfiprintf_r+0x2a>
 80091da:	89ab      	ldrh	r3, [r5, #12]
 80091dc:	059a      	lsls	r2, r3, #22
 80091de:	d402      	bmi.n	80091e6 <_vfiprintf_r+0x2a>
 80091e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80091e2:	f7fc ff08 	bl	8005ff6 <__retarget_lock_acquire_recursive>
 80091e6:	89ab      	ldrh	r3, [r5, #12]
 80091e8:	071b      	lsls	r3, r3, #28
 80091ea:	d501      	bpl.n	80091f0 <_vfiprintf_r+0x34>
 80091ec:	692b      	ldr	r3, [r5, #16]
 80091ee:	b99b      	cbnz	r3, 8009218 <_vfiprintf_r+0x5c>
 80091f0:	4629      	mov	r1, r5
 80091f2:	4630      	mov	r0, r6
 80091f4:	f000 f938 	bl	8009468 <__swsetup_r>
 80091f8:	b170      	cbz	r0, 8009218 <_vfiprintf_r+0x5c>
 80091fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80091fc:	07dc      	lsls	r4, r3, #31
 80091fe:	d504      	bpl.n	800920a <_vfiprintf_r+0x4e>
 8009200:	f04f 30ff 	mov.w	r0, #4294967295
 8009204:	b01d      	add	sp, #116	@ 0x74
 8009206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920a:	89ab      	ldrh	r3, [r5, #12]
 800920c:	0598      	lsls	r0, r3, #22
 800920e:	d4f7      	bmi.n	8009200 <_vfiprintf_r+0x44>
 8009210:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009212:	f7fc fef1 	bl	8005ff8 <__retarget_lock_release_recursive>
 8009216:	e7f3      	b.n	8009200 <_vfiprintf_r+0x44>
 8009218:	2300      	movs	r3, #0
 800921a:	9309      	str	r3, [sp, #36]	@ 0x24
 800921c:	2320      	movs	r3, #32
 800921e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009222:	f8cd 800c 	str.w	r8, [sp, #12]
 8009226:	2330      	movs	r3, #48	@ 0x30
 8009228:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80093d8 <_vfiprintf_r+0x21c>
 800922c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009230:	f04f 0901 	mov.w	r9, #1
 8009234:	4623      	mov	r3, r4
 8009236:	469a      	mov	sl, r3
 8009238:	f813 2b01 	ldrb.w	r2, [r3], #1
 800923c:	b10a      	cbz	r2, 8009242 <_vfiprintf_r+0x86>
 800923e:	2a25      	cmp	r2, #37	@ 0x25
 8009240:	d1f9      	bne.n	8009236 <_vfiprintf_r+0x7a>
 8009242:	ebba 0b04 	subs.w	fp, sl, r4
 8009246:	d00b      	beq.n	8009260 <_vfiprintf_r+0xa4>
 8009248:	465b      	mov	r3, fp
 800924a:	4622      	mov	r2, r4
 800924c:	4629      	mov	r1, r5
 800924e:	4630      	mov	r0, r6
 8009250:	f7ff ffa2 	bl	8009198 <__sfputs_r>
 8009254:	3001      	adds	r0, #1
 8009256:	f000 80a7 	beq.w	80093a8 <_vfiprintf_r+0x1ec>
 800925a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800925c:	445a      	add	r2, fp
 800925e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009260:	f89a 3000 	ldrb.w	r3, [sl]
 8009264:	2b00      	cmp	r3, #0
 8009266:	f000 809f 	beq.w	80093a8 <_vfiprintf_r+0x1ec>
 800926a:	2300      	movs	r3, #0
 800926c:	f04f 32ff 	mov.w	r2, #4294967295
 8009270:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009274:	f10a 0a01 	add.w	sl, sl, #1
 8009278:	9304      	str	r3, [sp, #16]
 800927a:	9307      	str	r3, [sp, #28]
 800927c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009280:	931a      	str	r3, [sp, #104]	@ 0x68
 8009282:	4654      	mov	r4, sl
 8009284:	2205      	movs	r2, #5
 8009286:	f814 1b01 	ldrb.w	r1, [r4], #1
 800928a:	4853      	ldr	r0, [pc, #332]	@ (80093d8 <_vfiprintf_r+0x21c>)
 800928c:	f7f6 ffa0 	bl	80001d0 <memchr>
 8009290:	9a04      	ldr	r2, [sp, #16]
 8009292:	b9d8      	cbnz	r0, 80092cc <_vfiprintf_r+0x110>
 8009294:	06d1      	lsls	r1, r2, #27
 8009296:	bf44      	itt	mi
 8009298:	2320      	movmi	r3, #32
 800929a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800929e:	0713      	lsls	r3, r2, #28
 80092a0:	bf44      	itt	mi
 80092a2:	232b      	movmi	r3, #43	@ 0x2b
 80092a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80092a8:	f89a 3000 	ldrb.w	r3, [sl]
 80092ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80092ae:	d015      	beq.n	80092dc <_vfiprintf_r+0x120>
 80092b0:	9a07      	ldr	r2, [sp, #28]
 80092b2:	4654      	mov	r4, sl
 80092b4:	2000      	movs	r0, #0
 80092b6:	f04f 0c0a 	mov.w	ip, #10
 80092ba:	4621      	mov	r1, r4
 80092bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80092c0:	3b30      	subs	r3, #48	@ 0x30
 80092c2:	2b09      	cmp	r3, #9
 80092c4:	d94b      	bls.n	800935e <_vfiprintf_r+0x1a2>
 80092c6:	b1b0      	cbz	r0, 80092f6 <_vfiprintf_r+0x13a>
 80092c8:	9207      	str	r2, [sp, #28]
 80092ca:	e014      	b.n	80092f6 <_vfiprintf_r+0x13a>
 80092cc:	eba0 0308 	sub.w	r3, r0, r8
 80092d0:	fa09 f303 	lsl.w	r3, r9, r3
 80092d4:	4313      	orrs	r3, r2
 80092d6:	9304      	str	r3, [sp, #16]
 80092d8:	46a2      	mov	sl, r4
 80092da:	e7d2      	b.n	8009282 <_vfiprintf_r+0xc6>
 80092dc:	9b03      	ldr	r3, [sp, #12]
 80092de:	1d19      	adds	r1, r3, #4
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	9103      	str	r1, [sp, #12]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	bfbb      	ittet	lt
 80092e8:	425b      	neglt	r3, r3
 80092ea:	f042 0202 	orrlt.w	r2, r2, #2
 80092ee:	9307      	strge	r3, [sp, #28]
 80092f0:	9307      	strlt	r3, [sp, #28]
 80092f2:	bfb8      	it	lt
 80092f4:	9204      	strlt	r2, [sp, #16]
 80092f6:	7823      	ldrb	r3, [r4, #0]
 80092f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80092fa:	d10a      	bne.n	8009312 <_vfiprintf_r+0x156>
 80092fc:	7863      	ldrb	r3, [r4, #1]
 80092fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009300:	d132      	bne.n	8009368 <_vfiprintf_r+0x1ac>
 8009302:	9b03      	ldr	r3, [sp, #12]
 8009304:	1d1a      	adds	r2, r3, #4
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	9203      	str	r2, [sp, #12]
 800930a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800930e:	3402      	adds	r4, #2
 8009310:	9305      	str	r3, [sp, #20]
 8009312:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80093e8 <_vfiprintf_r+0x22c>
 8009316:	7821      	ldrb	r1, [r4, #0]
 8009318:	2203      	movs	r2, #3
 800931a:	4650      	mov	r0, sl
 800931c:	f7f6 ff58 	bl	80001d0 <memchr>
 8009320:	b138      	cbz	r0, 8009332 <_vfiprintf_r+0x176>
 8009322:	9b04      	ldr	r3, [sp, #16]
 8009324:	eba0 000a 	sub.w	r0, r0, sl
 8009328:	2240      	movs	r2, #64	@ 0x40
 800932a:	4082      	lsls	r2, r0
 800932c:	4313      	orrs	r3, r2
 800932e:	3401      	adds	r4, #1
 8009330:	9304      	str	r3, [sp, #16]
 8009332:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009336:	4829      	ldr	r0, [pc, #164]	@ (80093dc <_vfiprintf_r+0x220>)
 8009338:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800933c:	2206      	movs	r2, #6
 800933e:	f7f6 ff47 	bl	80001d0 <memchr>
 8009342:	2800      	cmp	r0, #0
 8009344:	d03f      	beq.n	80093c6 <_vfiprintf_r+0x20a>
 8009346:	4b26      	ldr	r3, [pc, #152]	@ (80093e0 <_vfiprintf_r+0x224>)
 8009348:	bb1b      	cbnz	r3, 8009392 <_vfiprintf_r+0x1d6>
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	3307      	adds	r3, #7
 800934e:	f023 0307 	bic.w	r3, r3, #7
 8009352:	3308      	adds	r3, #8
 8009354:	9303      	str	r3, [sp, #12]
 8009356:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009358:	443b      	add	r3, r7
 800935a:	9309      	str	r3, [sp, #36]	@ 0x24
 800935c:	e76a      	b.n	8009234 <_vfiprintf_r+0x78>
 800935e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009362:	460c      	mov	r4, r1
 8009364:	2001      	movs	r0, #1
 8009366:	e7a8      	b.n	80092ba <_vfiprintf_r+0xfe>
 8009368:	2300      	movs	r3, #0
 800936a:	3401      	adds	r4, #1
 800936c:	9305      	str	r3, [sp, #20]
 800936e:	4619      	mov	r1, r3
 8009370:	f04f 0c0a 	mov.w	ip, #10
 8009374:	4620      	mov	r0, r4
 8009376:	f810 2b01 	ldrb.w	r2, [r0], #1
 800937a:	3a30      	subs	r2, #48	@ 0x30
 800937c:	2a09      	cmp	r2, #9
 800937e:	d903      	bls.n	8009388 <_vfiprintf_r+0x1cc>
 8009380:	2b00      	cmp	r3, #0
 8009382:	d0c6      	beq.n	8009312 <_vfiprintf_r+0x156>
 8009384:	9105      	str	r1, [sp, #20]
 8009386:	e7c4      	b.n	8009312 <_vfiprintf_r+0x156>
 8009388:	fb0c 2101 	mla	r1, ip, r1, r2
 800938c:	4604      	mov	r4, r0
 800938e:	2301      	movs	r3, #1
 8009390:	e7f0      	b.n	8009374 <_vfiprintf_r+0x1b8>
 8009392:	ab03      	add	r3, sp, #12
 8009394:	9300      	str	r3, [sp, #0]
 8009396:	462a      	mov	r2, r5
 8009398:	4b12      	ldr	r3, [pc, #72]	@ (80093e4 <_vfiprintf_r+0x228>)
 800939a:	a904      	add	r1, sp, #16
 800939c:	4630      	mov	r0, r6
 800939e:	f7fb febb 	bl	8005118 <_printf_float>
 80093a2:	4607      	mov	r7, r0
 80093a4:	1c78      	adds	r0, r7, #1
 80093a6:	d1d6      	bne.n	8009356 <_vfiprintf_r+0x19a>
 80093a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093aa:	07d9      	lsls	r1, r3, #31
 80093ac:	d405      	bmi.n	80093ba <_vfiprintf_r+0x1fe>
 80093ae:	89ab      	ldrh	r3, [r5, #12]
 80093b0:	059a      	lsls	r2, r3, #22
 80093b2:	d402      	bmi.n	80093ba <_vfiprintf_r+0x1fe>
 80093b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093b6:	f7fc fe1f 	bl	8005ff8 <__retarget_lock_release_recursive>
 80093ba:	89ab      	ldrh	r3, [r5, #12]
 80093bc:	065b      	lsls	r3, r3, #25
 80093be:	f53f af1f 	bmi.w	8009200 <_vfiprintf_r+0x44>
 80093c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80093c4:	e71e      	b.n	8009204 <_vfiprintf_r+0x48>
 80093c6:	ab03      	add	r3, sp, #12
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	462a      	mov	r2, r5
 80093cc:	4b05      	ldr	r3, [pc, #20]	@ (80093e4 <_vfiprintf_r+0x228>)
 80093ce:	a904      	add	r1, sp, #16
 80093d0:	4630      	mov	r0, r6
 80093d2:	f7fc f939 	bl	8005648 <_printf_i>
 80093d6:	e7e4      	b.n	80093a2 <_vfiprintf_r+0x1e6>
 80093d8:	08009a89 	.word	0x08009a89
 80093dc:	08009a93 	.word	0x08009a93
 80093e0:	08005119 	.word	0x08005119
 80093e4:	08009199 	.word	0x08009199
 80093e8:	08009a8f 	.word	0x08009a8f

080093ec <__swbuf_r>:
 80093ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093ee:	460e      	mov	r6, r1
 80093f0:	4614      	mov	r4, r2
 80093f2:	4605      	mov	r5, r0
 80093f4:	b118      	cbz	r0, 80093fe <__swbuf_r+0x12>
 80093f6:	6a03      	ldr	r3, [r0, #32]
 80093f8:	b90b      	cbnz	r3, 80093fe <__swbuf_r+0x12>
 80093fa:	f7fc fce5 	bl	8005dc8 <__sinit>
 80093fe:	69a3      	ldr	r3, [r4, #24]
 8009400:	60a3      	str	r3, [r4, #8]
 8009402:	89a3      	ldrh	r3, [r4, #12]
 8009404:	071a      	lsls	r2, r3, #28
 8009406:	d501      	bpl.n	800940c <__swbuf_r+0x20>
 8009408:	6923      	ldr	r3, [r4, #16]
 800940a:	b943      	cbnz	r3, 800941e <__swbuf_r+0x32>
 800940c:	4621      	mov	r1, r4
 800940e:	4628      	mov	r0, r5
 8009410:	f000 f82a 	bl	8009468 <__swsetup_r>
 8009414:	b118      	cbz	r0, 800941e <__swbuf_r+0x32>
 8009416:	f04f 37ff 	mov.w	r7, #4294967295
 800941a:	4638      	mov	r0, r7
 800941c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800941e:	6823      	ldr	r3, [r4, #0]
 8009420:	6922      	ldr	r2, [r4, #16]
 8009422:	1a98      	subs	r0, r3, r2
 8009424:	6963      	ldr	r3, [r4, #20]
 8009426:	b2f6      	uxtb	r6, r6
 8009428:	4283      	cmp	r3, r0
 800942a:	4637      	mov	r7, r6
 800942c:	dc05      	bgt.n	800943a <__swbuf_r+0x4e>
 800942e:	4621      	mov	r1, r4
 8009430:	4628      	mov	r0, r5
 8009432:	f7ff fa47 	bl	80088c4 <_fflush_r>
 8009436:	2800      	cmp	r0, #0
 8009438:	d1ed      	bne.n	8009416 <__swbuf_r+0x2a>
 800943a:	68a3      	ldr	r3, [r4, #8]
 800943c:	3b01      	subs	r3, #1
 800943e:	60a3      	str	r3, [r4, #8]
 8009440:	6823      	ldr	r3, [r4, #0]
 8009442:	1c5a      	adds	r2, r3, #1
 8009444:	6022      	str	r2, [r4, #0]
 8009446:	701e      	strb	r6, [r3, #0]
 8009448:	6962      	ldr	r2, [r4, #20]
 800944a:	1c43      	adds	r3, r0, #1
 800944c:	429a      	cmp	r2, r3
 800944e:	d004      	beq.n	800945a <__swbuf_r+0x6e>
 8009450:	89a3      	ldrh	r3, [r4, #12]
 8009452:	07db      	lsls	r3, r3, #31
 8009454:	d5e1      	bpl.n	800941a <__swbuf_r+0x2e>
 8009456:	2e0a      	cmp	r6, #10
 8009458:	d1df      	bne.n	800941a <__swbuf_r+0x2e>
 800945a:	4621      	mov	r1, r4
 800945c:	4628      	mov	r0, r5
 800945e:	f7ff fa31 	bl	80088c4 <_fflush_r>
 8009462:	2800      	cmp	r0, #0
 8009464:	d0d9      	beq.n	800941a <__swbuf_r+0x2e>
 8009466:	e7d6      	b.n	8009416 <__swbuf_r+0x2a>

08009468 <__swsetup_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4b29      	ldr	r3, [pc, #164]	@ (8009510 <__swsetup_r+0xa8>)
 800946c:	4605      	mov	r5, r0
 800946e:	6818      	ldr	r0, [r3, #0]
 8009470:	460c      	mov	r4, r1
 8009472:	b118      	cbz	r0, 800947c <__swsetup_r+0x14>
 8009474:	6a03      	ldr	r3, [r0, #32]
 8009476:	b90b      	cbnz	r3, 800947c <__swsetup_r+0x14>
 8009478:	f7fc fca6 	bl	8005dc8 <__sinit>
 800947c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009480:	0719      	lsls	r1, r3, #28
 8009482:	d422      	bmi.n	80094ca <__swsetup_r+0x62>
 8009484:	06da      	lsls	r2, r3, #27
 8009486:	d407      	bmi.n	8009498 <__swsetup_r+0x30>
 8009488:	2209      	movs	r2, #9
 800948a:	602a      	str	r2, [r5, #0]
 800948c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009490:	81a3      	strh	r3, [r4, #12]
 8009492:	f04f 30ff 	mov.w	r0, #4294967295
 8009496:	e033      	b.n	8009500 <__swsetup_r+0x98>
 8009498:	0758      	lsls	r0, r3, #29
 800949a:	d512      	bpl.n	80094c2 <__swsetup_r+0x5a>
 800949c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800949e:	b141      	cbz	r1, 80094b2 <__swsetup_r+0x4a>
 80094a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80094a4:	4299      	cmp	r1, r3
 80094a6:	d002      	beq.n	80094ae <__swsetup_r+0x46>
 80094a8:	4628      	mov	r0, r5
 80094aa:	f7fd fbf9 	bl	8006ca0 <_free_r>
 80094ae:	2300      	movs	r3, #0
 80094b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80094b2:	89a3      	ldrh	r3, [r4, #12]
 80094b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80094b8:	81a3      	strh	r3, [r4, #12]
 80094ba:	2300      	movs	r3, #0
 80094bc:	6063      	str	r3, [r4, #4]
 80094be:	6923      	ldr	r3, [r4, #16]
 80094c0:	6023      	str	r3, [r4, #0]
 80094c2:	89a3      	ldrh	r3, [r4, #12]
 80094c4:	f043 0308 	orr.w	r3, r3, #8
 80094c8:	81a3      	strh	r3, [r4, #12]
 80094ca:	6923      	ldr	r3, [r4, #16]
 80094cc:	b94b      	cbnz	r3, 80094e2 <__swsetup_r+0x7a>
 80094ce:	89a3      	ldrh	r3, [r4, #12]
 80094d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80094d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80094d8:	d003      	beq.n	80094e2 <__swsetup_r+0x7a>
 80094da:	4621      	mov	r1, r4
 80094dc:	4628      	mov	r0, r5
 80094de:	f000 f883 	bl	80095e8 <__smakebuf_r>
 80094e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094e6:	f013 0201 	ands.w	r2, r3, #1
 80094ea:	d00a      	beq.n	8009502 <__swsetup_r+0x9a>
 80094ec:	2200      	movs	r2, #0
 80094ee:	60a2      	str	r2, [r4, #8]
 80094f0:	6962      	ldr	r2, [r4, #20]
 80094f2:	4252      	negs	r2, r2
 80094f4:	61a2      	str	r2, [r4, #24]
 80094f6:	6922      	ldr	r2, [r4, #16]
 80094f8:	b942      	cbnz	r2, 800950c <__swsetup_r+0xa4>
 80094fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80094fe:	d1c5      	bne.n	800948c <__swsetup_r+0x24>
 8009500:	bd38      	pop	{r3, r4, r5, pc}
 8009502:	0799      	lsls	r1, r3, #30
 8009504:	bf58      	it	pl
 8009506:	6962      	ldrpl	r2, [r4, #20]
 8009508:	60a2      	str	r2, [r4, #8]
 800950a:	e7f4      	b.n	80094f6 <__swsetup_r+0x8e>
 800950c:	2000      	movs	r0, #0
 800950e:	e7f7      	b.n	8009500 <__swsetup_r+0x98>
 8009510:	20000018 	.word	0x20000018

08009514 <_raise_r>:
 8009514:	291f      	cmp	r1, #31
 8009516:	b538      	push	{r3, r4, r5, lr}
 8009518:	4605      	mov	r5, r0
 800951a:	460c      	mov	r4, r1
 800951c:	d904      	bls.n	8009528 <_raise_r+0x14>
 800951e:	2316      	movs	r3, #22
 8009520:	6003      	str	r3, [r0, #0]
 8009522:	f04f 30ff 	mov.w	r0, #4294967295
 8009526:	bd38      	pop	{r3, r4, r5, pc}
 8009528:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800952a:	b112      	cbz	r2, 8009532 <_raise_r+0x1e>
 800952c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009530:	b94b      	cbnz	r3, 8009546 <_raise_r+0x32>
 8009532:	4628      	mov	r0, r5
 8009534:	f000 f830 	bl	8009598 <_getpid_r>
 8009538:	4622      	mov	r2, r4
 800953a:	4601      	mov	r1, r0
 800953c:	4628      	mov	r0, r5
 800953e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009542:	f000 b817 	b.w	8009574 <_kill_r>
 8009546:	2b01      	cmp	r3, #1
 8009548:	d00a      	beq.n	8009560 <_raise_r+0x4c>
 800954a:	1c59      	adds	r1, r3, #1
 800954c:	d103      	bne.n	8009556 <_raise_r+0x42>
 800954e:	2316      	movs	r3, #22
 8009550:	6003      	str	r3, [r0, #0]
 8009552:	2001      	movs	r0, #1
 8009554:	e7e7      	b.n	8009526 <_raise_r+0x12>
 8009556:	2100      	movs	r1, #0
 8009558:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800955c:	4620      	mov	r0, r4
 800955e:	4798      	blx	r3
 8009560:	2000      	movs	r0, #0
 8009562:	e7e0      	b.n	8009526 <_raise_r+0x12>

08009564 <raise>:
 8009564:	4b02      	ldr	r3, [pc, #8]	@ (8009570 <raise+0xc>)
 8009566:	4601      	mov	r1, r0
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	f7ff bfd3 	b.w	8009514 <_raise_r>
 800956e:	bf00      	nop
 8009570:	20000018 	.word	0x20000018

08009574 <_kill_r>:
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4d07      	ldr	r5, [pc, #28]	@ (8009594 <_kill_r+0x20>)
 8009578:	2300      	movs	r3, #0
 800957a:	4604      	mov	r4, r0
 800957c:	4608      	mov	r0, r1
 800957e:	4611      	mov	r1, r2
 8009580:	602b      	str	r3, [r5, #0]
 8009582:	f7f8 f979 	bl	8001878 <_kill>
 8009586:	1c43      	adds	r3, r0, #1
 8009588:	d102      	bne.n	8009590 <_kill_r+0x1c>
 800958a:	682b      	ldr	r3, [r5, #0]
 800958c:	b103      	cbz	r3, 8009590 <_kill_r+0x1c>
 800958e:	6023      	str	r3, [r4, #0]
 8009590:	bd38      	pop	{r3, r4, r5, pc}
 8009592:	bf00      	nop
 8009594:	2000047c 	.word	0x2000047c

08009598 <_getpid_r>:
 8009598:	f7f8 b966 	b.w	8001868 <_getpid>

0800959c <__swhatbuf_r>:
 800959c:	b570      	push	{r4, r5, r6, lr}
 800959e:	460c      	mov	r4, r1
 80095a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095a4:	2900      	cmp	r1, #0
 80095a6:	b096      	sub	sp, #88	@ 0x58
 80095a8:	4615      	mov	r5, r2
 80095aa:	461e      	mov	r6, r3
 80095ac:	da0d      	bge.n	80095ca <__swhatbuf_r+0x2e>
 80095ae:	89a3      	ldrh	r3, [r4, #12]
 80095b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80095b4:	f04f 0100 	mov.w	r1, #0
 80095b8:	bf14      	ite	ne
 80095ba:	2340      	movne	r3, #64	@ 0x40
 80095bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80095c0:	2000      	movs	r0, #0
 80095c2:	6031      	str	r1, [r6, #0]
 80095c4:	602b      	str	r3, [r5, #0]
 80095c6:	b016      	add	sp, #88	@ 0x58
 80095c8:	bd70      	pop	{r4, r5, r6, pc}
 80095ca:	466a      	mov	r2, sp
 80095cc:	f000 f848 	bl	8009660 <_fstat_r>
 80095d0:	2800      	cmp	r0, #0
 80095d2:	dbec      	blt.n	80095ae <__swhatbuf_r+0x12>
 80095d4:	9901      	ldr	r1, [sp, #4]
 80095d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80095da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80095de:	4259      	negs	r1, r3
 80095e0:	4159      	adcs	r1, r3
 80095e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095e6:	e7eb      	b.n	80095c0 <__swhatbuf_r+0x24>

080095e8 <__smakebuf_r>:
 80095e8:	898b      	ldrh	r3, [r1, #12]
 80095ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095ec:	079d      	lsls	r5, r3, #30
 80095ee:	4606      	mov	r6, r0
 80095f0:	460c      	mov	r4, r1
 80095f2:	d507      	bpl.n	8009604 <__smakebuf_r+0x1c>
 80095f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80095f8:	6023      	str	r3, [r4, #0]
 80095fa:	6123      	str	r3, [r4, #16]
 80095fc:	2301      	movs	r3, #1
 80095fe:	6163      	str	r3, [r4, #20]
 8009600:	b003      	add	sp, #12
 8009602:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009604:	ab01      	add	r3, sp, #4
 8009606:	466a      	mov	r2, sp
 8009608:	f7ff ffc8 	bl	800959c <__swhatbuf_r>
 800960c:	9f00      	ldr	r7, [sp, #0]
 800960e:	4605      	mov	r5, r0
 8009610:	4639      	mov	r1, r7
 8009612:	4630      	mov	r0, r6
 8009614:	f7fd fbb8 	bl	8006d88 <_malloc_r>
 8009618:	b948      	cbnz	r0, 800962e <__smakebuf_r+0x46>
 800961a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800961e:	059a      	lsls	r2, r3, #22
 8009620:	d4ee      	bmi.n	8009600 <__smakebuf_r+0x18>
 8009622:	f023 0303 	bic.w	r3, r3, #3
 8009626:	f043 0302 	orr.w	r3, r3, #2
 800962a:	81a3      	strh	r3, [r4, #12]
 800962c:	e7e2      	b.n	80095f4 <__smakebuf_r+0xc>
 800962e:	89a3      	ldrh	r3, [r4, #12]
 8009630:	6020      	str	r0, [r4, #0]
 8009632:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009636:	81a3      	strh	r3, [r4, #12]
 8009638:	9b01      	ldr	r3, [sp, #4]
 800963a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800963e:	b15b      	cbz	r3, 8009658 <__smakebuf_r+0x70>
 8009640:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009644:	4630      	mov	r0, r6
 8009646:	f000 f81d 	bl	8009684 <_isatty_r>
 800964a:	b128      	cbz	r0, 8009658 <__smakebuf_r+0x70>
 800964c:	89a3      	ldrh	r3, [r4, #12]
 800964e:	f023 0303 	bic.w	r3, r3, #3
 8009652:	f043 0301 	orr.w	r3, r3, #1
 8009656:	81a3      	strh	r3, [r4, #12]
 8009658:	89a3      	ldrh	r3, [r4, #12]
 800965a:	431d      	orrs	r5, r3
 800965c:	81a5      	strh	r5, [r4, #12]
 800965e:	e7cf      	b.n	8009600 <__smakebuf_r+0x18>

08009660 <_fstat_r>:
 8009660:	b538      	push	{r3, r4, r5, lr}
 8009662:	4d07      	ldr	r5, [pc, #28]	@ (8009680 <_fstat_r+0x20>)
 8009664:	2300      	movs	r3, #0
 8009666:	4604      	mov	r4, r0
 8009668:	4608      	mov	r0, r1
 800966a:	4611      	mov	r1, r2
 800966c:	602b      	str	r3, [r5, #0]
 800966e:	f7f8 f963 	bl	8001938 <_fstat>
 8009672:	1c43      	adds	r3, r0, #1
 8009674:	d102      	bne.n	800967c <_fstat_r+0x1c>
 8009676:	682b      	ldr	r3, [r5, #0]
 8009678:	b103      	cbz	r3, 800967c <_fstat_r+0x1c>
 800967a:	6023      	str	r3, [r4, #0]
 800967c:	bd38      	pop	{r3, r4, r5, pc}
 800967e:	bf00      	nop
 8009680:	2000047c 	.word	0x2000047c

08009684 <_isatty_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4d06      	ldr	r5, [pc, #24]	@ (80096a0 <_isatty_r+0x1c>)
 8009688:	2300      	movs	r3, #0
 800968a:	4604      	mov	r4, r0
 800968c:	4608      	mov	r0, r1
 800968e:	602b      	str	r3, [r5, #0]
 8009690:	f7f8 f962 	bl	8001958 <_isatty>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d102      	bne.n	800969e <_isatty_r+0x1a>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	b103      	cbz	r3, 800969e <_isatty_r+0x1a>
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	2000047c 	.word	0x2000047c

080096a4 <_init>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	bf00      	nop
 80096a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096aa:	bc08      	pop	{r3}
 80096ac:	469e      	mov	lr, r3
 80096ae:	4770      	bx	lr

080096b0 <_fini>:
 80096b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b2:	bf00      	nop
 80096b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b6:	bc08      	pop	{r3}
 80096b8:	469e      	mov	lr, r3
 80096ba:	4770      	bx	lr
